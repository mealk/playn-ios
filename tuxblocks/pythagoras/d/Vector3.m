//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Vector3.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSDoubleArray.h"
#import "IVector3.h"
#import "Platform.h"
#import "java/lang/Float.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/Math.h"
#import "java/nio/DoubleBuffer.h"
#import "Vector3.h"

@implementation PythagorasDVector3

static id<PythagorasDIVector3> PythagorasDVector3_UNIT_X_;
static id<PythagorasDIVector3> PythagorasDVector3_UNIT_Y_;
static id<PythagorasDIVector3> PythagorasDVector3_UNIT_Z_;
static id<PythagorasDIVector3> PythagorasDVector3_UNIT_XYZ_;
static id<PythagorasDIVector3> PythagorasDVector3_NORMAL_XYZ_;
static id<PythagorasDIVector3> PythagorasDVector3_ZERO_;
static id<PythagorasDIVector3> PythagorasDVector3_MIN_VALUE_;
static id<PythagorasDIVector3> PythagorasDVector3_MAX_VALUE_;

@synthesize x_ = x__;
@synthesize y_ = y__;
@synthesize z_ = z__;

+ (id<PythagorasDIVector3>)UNIT_X {
  return PythagorasDVector3_UNIT_X_;
}

+ (id<PythagorasDIVector3>)UNIT_Y {
  return PythagorasDVector3_UNIT_Y_;
}

+ (id<PythagorasDIVector3>)UNIT_Z {
  return PythagorasDVector3_UNIT_Z_;
}

+ (id<PythagorasDIVector3>)UNIT_XYZ {
  return PythagorasDVector3_UNIT_XYZ_;
}

+ (id<PythagorasDIVector3>)NORMAL_XYZ {
  return PythagorasDVector3_NORMAL_XYZ_;
}

+ (id<PythagorasDIVector3>)ZERO {
  return PythagorasDVector3_ZERO_;
}

+ (id<PythagorasDIVector3>)MIN_VALUE {
  return PythagorasDVector3_MIN_VALUE_;
}

+ (id<PythagorasDIVector3>)MAX_VALUE {
  return PythagorasDVector3_MAX_VALUE_;
}

- (id)initWithDouble:(double)x
          withDouble:(double)y
          withDouble:(double)z {
  if ((self = [super init])) {
    (void) [self setWithDouble:x withDouble:y withDouble:z];
  }
  return self;
}

- (id)initWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  if ((self = [super init])) {
    (void) [self setWithJavaLangDoubleArray:values];
  }
  return self;
}

- (id)initWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  if ((self = [super init])) {
    (void) [self setWithPythagorasDIVector3:other];
  }
  return self;
}

- (id)init {
  return [super init];
}

- (PythagorasDVector3 *)crossLocalWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self crossWithPythagorasDIVector3:other withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)negateLocal {
  return [self negateWithPythagorasDVector3:self];
}

- (PythagorasDVector3 *)absLocal {
  return [self absWithPythagorasDVector3:self];
}

- (PythagorasDVector3 *)normalizeLocal {
  return [self normalizeWithPythagorasDVector3:self];
}

- (PythagorasDVector3 *)multLocalWithDouble:(double)v {
  return [self multWithDouble:v withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)multLocalWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self multWithPythagorasDIVector3:other withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)addLocalWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self addWithPythagorasDIVector3:other withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)subtractLocalWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self subtractWithPythagorasDIVector3:other withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)addLocalWithDouble:(double)x
                                withDouble:(double)y
                                withDouble:(double)z {
  return [self addWithDouble:x withDouble:y withDouble:z withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)addScaledLocalWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                                                   withDouble:(double)v {
  return [self addScaledWithPythagorasDIVector3:other withDouble:v withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)lerpLocalWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                                              withDouble:(double)t {
  return [self lerpWithPythagorasDIVector3:other withDouble:t withPythagorasDVector3:self];
}

- (PythagorasDVector3 *)setWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self setWithDouble:[((id<PythagorasDIVector3>) NIL_CHK(other)) x] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(other)) y] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(other)) z]];
}

- (PythagorasDVector3 *)setWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  return [self setWithDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:1] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:2]];
}

- (PythagorasDVector3 *)setWithDouble:(double)x
                           withDouble:(double)y
                           withDouble:(double)z {
  self.x_ = x;
  self.y_ = y;
  self.z_ = z;
  return self;
}

- (double)x {
  return x__;
}

- (double)y {
  return y__;
}

- (double)z {
  return z__;
}

- (double)dotWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return x__ * [((id<PythagorasDIVector3>) NIL_CHK(other)) x] + y__ * [((id<PythagorasDIVector3>) NIL_CHK(other)) y] + z__ * [((id<PythagorasDIVector3>) NIL_CHK(other)) z];
}

- (PythagorasDVector3 *)crossWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self crossWithPythagorasDIVector3:other withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)crossWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                              withPythagorasDVector3:(PythagorasDVector3 *)result {
  double x = self.x_, y = self.y_, z = self.z_;
  double ox = [((id<PythagorasDIVector3>) NIL_CHK(other)) x], oy = [((id<PythagorasDIVector3>) NIL_CHK(other)) y], oz = [((id<PythagorasDIVector3>) NIL_CHK(other)) z];
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:y * oz - z * oy withDouble:z * ox - x * oz withDouble:x * oy - y * ox];
}

- (double)tripleWithPythagorasDIVector3:(id<PythagorasDIVector3>)b
                withPythagorasDIVector3:(id<PythagorasDIVector3>)c {
  double bx = [((id<PythagorasDIVector3>) NIL_CHK(b)) x], by = [((id<PythagorasDIVector3>) NIL_CHK(b)) y], bz = [((id<PythagorasDIVector3>) NIL_CHK(b)) z];
  double cx = [((id<PythagorasDIVector3>) NIL_CHK(c)) x], cy = [((id<PythagorasDIVector3>) NIL_CHK(c)) y], cz = [((id<PythagorasDIVector3>) NIL_CHK(c)) z];
  return [self x] * (by * cz - bz * cy) + [self y] * (bz * cx - bx * cz) + [self z] * (bx * cy - by * cx);
}

- (PythagorasDVector3 *)negate {
  return [self negateWithPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)negateWithPythagorasDVector3:(PythagorasDVector3 *)result {
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:-x__ withDouble:-y__ withDouble:-z__];
}

- (PythagorasDVector3 *)abs {
  return [self absWithPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)absWithPythagorasDVector3:(PythagorasDVector3 *)result {
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:[JavaLangMath absWithDouble:x__] withDouble:[JavaLangMath absWithDouble:y__] withDouble:[JavaLangMath absWithDouble:z__]];
}

- (PythagorasDVector3 *)normalize {
  return [self normalizeWithPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)normalizeWithPythagorasDVector3:(PythagorasDVector3 *)result {
  return [self multWithDouble:1.0f / [self length] withPythagorasDVector3:result];
}

- (double)angleWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [JavaLangMath acosWithDouble:[self dotWithPythagorasDIVector3:other] / ([self length] * [((id<PythagorasDIVector3>) NIL_CHK(other)) length])];
}

- (double)length {
  return [JavaLangMath sqrtWithDouble:[self lengthSquared]];
}

- (double)lengthSquared {
  double x = self.x_, y = self.y_, z = self.z_;
  return (x * x + y * y + z * z);
}

- (double)distanceWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [JavaLangMath sqrtWithDouble:[self distanceSquaredWithPythagorasDIVector3:other]];
}

- (double)distanceSquaredWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  double dx = x__ - [((id<PythagorasDIVector3>) NIL_CHK(other)) x], dy = y__ - [((id<PythagorasDIVector3>) NIL_CHK(other)) y], dz = z__ - [((id<PythagorasDIVector3>) NIL_CHK(other)) z];
  return dx * dx + dy * dy + dz * dz;
}

- (double)manhattanDistanceWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [JavaLangMath absWithDouble:x__ - [((id<PythagorasDIVector3>) NIL_CHK(other)) x]] + [JavaLangMath absWithDouble:y__ - [((id<PythagorasDIVector3>) NIL_CHK(other)) y]] + [JavaLangMath absWithDouble:z__ - [((id<PythagorasDIVector3>) NIL_CHK(other)) z]];
}

- (PythagorasDVector3 *)multWithDouble:(double)v {
  return [self multWithDouble:v withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)multWithDouble:(double)v
                withPythagorasDVector3:(PythagorasDVector3 *)result {
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:x__ * v withDouble:y__ * v withDouble:z__ * v];
}

- (PythagorasDVector3 *)multWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self multWithPythagorasDIVector3:other withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)multWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                             withPythagorasDVector3:(PythagorasDVector3 *)result {
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:x__ * [((id<PythagorasDIVector3>) NIL_CHK(other)) x] withDouble:y__ * [((id<PythagorasDIVector3>) NIL_CHK(other)) y] withDouble:z__ * [((id<PythagorasDIVector3>) NIL_CHK(other)) z]];
}

- (PythagorasDVector3 *)addWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self addWithPythagorasDIVector3:other withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)addWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                            withPythagorasDVector3:(PythagorasDVector3 *)result {
  return [self addWithDouble:[((id<PythagorasDIVector3>) NIL_CHK(other)) x] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(other)) y] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(other)) z] withPythagorasDVector3:result];
}

- (PythagorasDVector3 *)subtractWithPythagorasDIVector3:(id<PythagorasDIVector3>)other {
  return [self subtractWithPythagorasDIVector3:other withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)subtractWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                                 withPythagorasDVector3:(PythagorasDVector3 *)result {
  return [self addWithDouble:-[((id<PythagorasDIVector3>) NIL_CHK(other)) x] withDouble:-[((id<PythagorasDIVector3>) NIL_CHK(other)) y] withDouble:-[((id<PythagorasDIVector3>) NIL_CHK(other)) z] withPythagorasDVector3:result];
}

- (PythagorasDVector3 *)addWithDouble:(double)x
                           withDouble:(double)y
                           withDouble:(double)z {
  return [self addWithDouble:x withDouble:y withDouble:z withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)addWithDouble:(double)x
                           withDouble:(double)y
                           withDouble:(double)z
               withPythagorasDVector3:(PythagorasDVector3 *)result {
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:self.x_ + x withDouble:self.y_ + y withDouble:self.z_ + z];
}

- (PythagorasDVector3 *)addScaledWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                                              withDouble:(double)v {
  return [self addScaledWithPythagorasDIVector3:other withDouble:v withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)addScaledWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                                              withDouble:(double)v
                                  withPythagorasDVector3:(PythagorasDVector3 *)result {
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:x__ + [((id<PythagorasDIVector3>) NIL_CHK(other)) x] * v withDouble:y__ + [((id<PythagorasDIVector3>) NIL_CHK(other)) y] * v withDouble:z__ + [((id<PythagorasDIVector3>) NIL_CHK(other)) z] * v];
}

- (PythagorasDVector3 *)lerpWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                                         withDouble:(double)t {
  return [self lerpWithPythagorasDIVector3:other withDouble:t withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)lerpWithPythagorasDIVector3:(id<PythagorasDIVector3>)other
                                         withDouble:(double)t
                             withPythagorasDVector3:(PythagorasDVector3 *)result {
  double x = self.x_, y = self.y_, z = self.z_;
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:x + t * ([((id<PythagorasDIVector3>) NIL_CHK(other)) x] - x) withDouble:y + t * ([((id<PythagorasDIVector3>) NIL_CHK(other)) y] - y) withDouble:z + t * ([((id<PythagorasDIVector3>) NIL_CHK(other)) z] - z)];
}

- (double)getWithInt:(int)idx {
  switch (idx) {
    case 0:
    return x__;
    case 1:
    return y__;
    case 2:
    return z__;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString valueOfInt:idx]] autorelease];
}

- (void)getWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  [((IOSDoubleArray *) NIL_CHK(values)) replaceDoubleAtIndex:0 withDouble:x__];
  [((IOSDoubleArray *) NIL_CHK(values)) replaceDoubleAtIndex:1 withDouble:y__];
  [((IOSDoubleArray *) NIL_CHK(values)) replaceDoubleAtIndex:2 withDouble:z__];
}

- (JavaNioDoubleBuffer *)getWithJavaNioDoubleBuffer:(JavaNioDoubleBuffer *)buf {
  return [[[((JavaNioDoubleBuffer *) NIL_CHK(buf)) putWithDouble:x__] putWithDouble:y__] putWithDouble:z__];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[%f, %f, %f]", x__, y__, z__];
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithDouble:x__] ^ [PythagorasUtilPlatform hashCodeWithDouble:y__] ^ [PythagorasUtilPlatform hashCodeWithDouble:z__];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[PythagorasDVector3 class]])) {
    return NO;
  }
  PythagorasDVector3 *ovec = (PythagorasDVector3 *) other;
  return (x__ == ((PythagorasDVector3 *) NIL_CHK(ovec)).x_ && y__ == ((PythagorasDVector3 *) NIL_CHK(ovec)).y_ && z__ == ((PythagorasDVector3 *) NIL_CHK(ovec)).z_);
}

+ (void)initialize {
  if (self == [PythagorasDVector3 class]) {
    JreOperatorRetainedAssign(&PythagorasDVector3_UNIT_X_, self, [[[PythagorasDVector3 alloc] initWithDouble:1.0f withDouble:0.0f withDouble:0.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasDVector3_UNIT_Y_, self, [[[PythagorasDVector3 alloc] initWithDouble:0.0f withDouble:1.0f withDouble:0.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasDVector3_UNIT_Z_, self, [[[PythagorasDVector3 alloc] initWithDouble:0.0f withDouble:0.0f withDouble:1.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasDVector3_UNIT_XYZ_, self, [[[PythagorasDVector3 alloc] initWithDouble:1.0f withDouble:1.0f withDouble:1.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasDVector3_NORMAL_XYZ_, self, [((id<PythagorasDIVector3>) NIL_CHK(PythagorasDVector3_UNIT_XYZ_)) normalize]);
    JreOperatorRetainedAssign(&PythagorasDVector3_ZERO_, self, [[[PythagorasDVector3 alloc] initWithDouble:0.0f withDouble:0.0f withDouble:0.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasDVector3_MIN_VALUE_, self, [[[PythagorasDVector3 alloc] initWithDouble:-JavaLangFloat_MAX_VALUE withDouble:-JavaLangFloat_MAX_VALUE withDouble:-JavaLangFloat_MAX_VALUE] autorelease]);
    JreOperatorRetainedAssign(&PythagorasDVector3_MAX_VALUE_, self, [[[PythagorasDVector3 alloc] initWithDouble:JavaLangFloat_MAX_VALUE withDouble:JavaLangFloat_MAX_VALUE withDouble:JavaLangFloat_MAX_VALUE] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDVector3 *typedCopy = (PythagorasDVector3 *) copy;
  typedCopy.x_ = x__;
  typedCopy.y_ = y__;
  typedCopy.z_ = z__;
}

@end

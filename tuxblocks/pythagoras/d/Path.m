//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Path.java
//
//  Created by Thomas on 7/1/13.
//

#import "Crossing.h"
#import "FlatteningPathIterator.h"
#import "IOSByteArray.h"
#import "IOSClass.h"
#import "IOSDoubleArray.h"
#import "IOSIntArray.h"
#import "IPoint.h"
#import "IRectangle.h"
#import "IShape.h"
#import "IllegalPathStateException.h"
#import "PathIterator.h"
#import "Platform.h"
#import "Point.h"
#import "Rectangle.h"
#import "Transform.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Math.h"
#import "java/lang/System.h"
#import "java/util/NoSuchElementException.h"
#import "Path.h"

@implementation PythagorasDPath

static IOSIntArray * PythagorasDPath_pointShift_;

- (IOSByteArray *)types {
  return types_;
}
- (void)setTypes:(IOSByteArray *)types {
  JreOperatorRetainedAssign(&types_, self, types);
}
@synthesize types = types_;
- (IOSDoubleArray *)points {
  return points_;
}
- (void)setPoints:(IOSDoubleArray *)points {
  JreOperatorRetainedAssign(&points_, self, points);
}
@synthesize points = points_;
@synthesize typeSize = typeSize_;
@synthesize pointSize = pointSize_;
@synthesize rule = rule_;

+ (int)WIND_EVEN_ODD {
  return PythagorasDPath_WIND_EVEN_ODD;
}

+ (int)WIND_NON_ZERO {
  return PythagorasDPath_WIND_NON_ZERO;
}

+ (IOSIntArray *)pointShift {
  return PythagorasDPath_pointShift_;
}

+ (void)setPointShift:(IOSIntArray *)pointShift {
  JreOperatorRetainedAssign(&PythagorasDPath_pointShift_, self, pointShift);
}

+ (int)BUFFER_SIZE {
  return PythagorasDPath_BUFFER_SIZE;
}

+ (int)BUFFER_CAPACITY {
  return PythagorasDPath_BUFFER_CAPACITY;
}

- (id)init {
  return [self initPythagorasDPathWithInt:PythagorasDPath_WIND_NON_ZERO withInt:PythagorasDPath_BUFFER_SIZE];
}

- (id)initWithInt:(int)rule {
  return [self initPythagorasDPathWithInt:rule withInt:PythagorasDPath_BUFFER_SIZE];
}

- (id)initPythagorasDPathWithInt:(int)rule
                         withInt:(int)initialCapacity {
  if ((self = [super init])) {
    [self setWindingRuleWithInt:rule];
    JreOperatorRetainedAssign(&types_, self, [[[IOSByteArray alloc] initWithLength:initialCapacity] autorelease]);
    JreOperatorRetainedAssign(&points_, self, [[[IOSDoubleArray alloc] initWithLength:initialCapacity * 2] autorelease]);
  }
  return self;
}

- (id)initWithInt:(int)rule
          withInt:(int)initialCapacity {
  return [self initPythagorasDPathWithInt:rule withInt:initialCapacity];
}

- (id)initWithPythagorasDIShape:(id<PythagorasDIShape>)shape {
  if ((self = [self initPythagorasDPathWithInt:PythagorasDPath_WIND_NON_ZERO withInt:PythagorasDPath_BUFFER_SIZE])) {
    id<PythagorasDPathIterator> p = [((id<PythagorasDIShape>) NIL_CHK(shape)) pathIteratorWithPythagorasDTransform:nil];
    [self setWindingRuleWithInt:[((id<PythagorasDPathIterator>) NIL_CHK(p)) windingRule]];
    [self appendWithPythagorasDPathIterator:p withBOOL:NO];
  }
  return self;
}

- (void)setWindingRuleWithInt:(int)rule {
  if (rule != PythagorasDPath_WIND_EVEN_ODD && rule != PythagorasDPath_WIND_NON_ZERO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid winding rule value"] autorelease];
  }
  self.rule = rule;
}

- (int)windingRule {
  return rule_;
}

- (void)moveToWithDouble:(double)x
              withDouble:(double)y {
  if (typeSize_ > 0 && [((IOSByteArray *) NIL_CHK(types_)) byteAtIndex:typeSize_ - 1] == PythagorasDPathIterator_SEG_MOVETO) {
    [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_ - 2 withDouble:x];
    [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_ - 1 withDouble:y];
  }
  else {
    [self checkBufWithInt:2 withBOOL:NO];
    [((IOSByteArray *) NIL_CHK(types_)) replaceByteAtIndex:typeSize_++ withByte:PythagorasDPathIterator_SEG_MOVETO];
    [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:x];
    [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:y];
  }
}

- (void)lineToWithDouble:(double)x
              withDouble:(double)y {
  [self checkBufWithInt:2 withBOOL:YES];
  [((IOSByteArray *) NIL_CHK(types_)) replaceByteAtIndex:typeSize_++ withByte:PythagorasDPathIterator_SEG_LINETO];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:x];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:y];
}

- (void)quadToWithDouble:(double)x1
              withDouble:(double)y1
              withDouble:(double)x2
              withDouble:(double)y2 {
  [self checkBufWithInt:4 withBOOL:YES];
  [((IOSByteArray *) NIL_CHK(types_)) replaceByteAtIndex:typeSize_++ withByte:PythagorasDPathIterator_SEG_QUADTO];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:x1];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:y1];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:x2];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:y2];
}

- (void)curveToWithDouble:(double)x1
               withDouble:(double)y1
               withDouble:(double)x2
               withDouble:(double)y2
               withDouble:(double)x3
               withDouble:(double)y3 {
  [self checkBufWithInt:6 withBOOL:YES];
  [((IOSByteArray *) NIL_CHK(types_)) replaceByteAtIndex:typeSize_++ withByte:PythagorasDPathIterator_SEG_CUBICTO];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:x1];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:y1];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:x2];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:y2];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:x3];
  [((IOSDoubleArray *) NIL_CHK(points_)) replaceDoubleAtIndex:pointSize_++ withDouble:y3];
}

- (void)closePath {
  if (typeSize_ == 0 || [((IOSByteArray *) NIL_CHK(types_)) byteAtIndex:typeSize_ - 1] != PythagorasDPathIterator_SEG_CLOSE) {
    [self checkBufWithInt:0 withBOOL:YES];
    [((IOSByteArray *) NIL_CHK(types_)) replaceByteAtIndex:typeSize_++ withByte:PythagorasDPathIterator_SEG_CLOSE];
  }
}

- (void)appendWithPythagorasDIShape:(id<PythagorasDIShape>)shape
                           withBOOL:(BOOL)connect {
  id<PythagorasDPathIterator> p = [((id<PythagorasDIShape>) NIL_CHK(shape)) pathIteratorWithPythagorasDTransform:nil];
  [self appendWithPythagorasDPathIterator:p withBOOL:connect];
}

- (void)appendWithPythagorasDPathIterator:(id<PythagorasDPathIterator>)path
                                 withBOOL:(BOOL)connect {
  while (![((id<PythagorasDPathIterator>) NIL_CHK(path)) isDone]) {
    IOSDoubleArray *coords = [[[IOSDoubleArray alloc] initWithLength:6] autorelease];
    switch ([((id<PythagorasDPathIterator>) NIL_CHK(path)) currentSegmentWithJavaLangDoubleArray:coords]) {
      case PythagorasDPathIterator_SEG_MOVETO:
      if (!connect || typeSize_ == 0) {
        [self moveToWithDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:1]];
      }
      else if ([((IOSByteArray *) NIL_CHK(types_)) byteAtIndex:typeSize_ - 1] != PythagorasDPathIterator_SEG_CLOSE && [((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:pointSize_ - 2] == [((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:0] && [((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:pointSize_ - 1] == [((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:1]) {
      }
      else {
        [self lineToWithDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:1]];
      }
      break;
      case PythagorasDPathIterator_SEG_LINETO:
      [self lineToWithDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:1]];
      break;
      case PythagorasDPathIterator_SEG_QUADTO:
      [self quadToWithDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:1] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:2] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:3]];
      break;
      case PythagorasDPathIterator_SEG_CUBICTO:
      [self curveToWithDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:1] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:2] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:3] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:4] withDouble:[((IOSDoubleArray *) NIL_CHK(coords)) doubleAtIndex:5]];
      break;
      case PythagorasDPathIterator_SEG_CLOSE:
      [self closePath];
      break;
    }
    [((id<PythagorasDPathIterator>) NIL_CHK(path)) next];
    connect = NO;
  }
}

- (PythagorasDPoint *)currentPoint {
  if (typeSize_ == 0) {
    return nil;
  }
  int j = pointSize_ - 2;
  if ([((IOSByteArray *) NIL_CHK(types_)) byteAtIndex:typeSize_ - 1] == PythagorasDPathIterator_SEG_CLOSE) {
    for (int i = typeSize_ - 2; i > 0; i--) {
      int type = [((IOSByteArray *) NIL_CHK(types_)) byteAtIndex:i];
      if (type == PythagorasDPathIterator_SEG_MOVETO) {
        break;
      }
      j -= [((IOSIntArray *) NIL_CHK(PythagorasDPath_pointShift_)) intAtIndex:type];
    }
  }
  return [[[PythagorasDPoint alloc] initWithDouble:[((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:j] withDouble:[((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:j + 1]] autorelease];
}

- (void)reset {
  typeSize_ = 0;
  pointSize_ = 0;
}

- (void)transformWithPythagorasDTransform:(id<PythagorasDTransform>)t {
  [((id<PythagorasDTransform>) NIL_CHK(t)) transformWithJavaLangDoubleArray:points_ withInt:0 withJavaLangDoubleArray:points_ withInt:0 withInt:pointSize_ / 2];
}

- (id<PythagorasDIShape>)createTransformedShapeWithPythagorasDTransform:(id<PythagorasDTransform>)t {
  PythagorasDPath *p = [self clone];
  if (t != nil) {
    [((PythagorasDPath *) NIL_CHK(p)) transformWithPythagorasDTransform:t];
  }
  return p;
}

- (PythagorasDRectangle *)bounds {
  return [self boundsWithPythagorasDRectangle:[[[PythagorasDRectangle alloc] init] autorelease]];
}

- (PythagorasDRectangle *)boundsWithPythagorasDRectangle:(PythagorasDRectangle *)target {
  double rx1, ry1, rx2, ry2;
  if (pointSize_ == 0) {
    rx1 = ry1 = rx2 = ry2 = 0.0f;
  }
  else {
    int i = pointSize_ - 1;
    ry1 = ry2 = [((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:i--];
    rx1 = rx2 = [((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:i--];
    while (i > 0) {
      double y = [((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:i--];
      double x = [((IOSDoubleArray *) NIL_CHK(points_)) doubleAtIndex:i--];
      if (x < rx1) {
        rx1 = x;
      }
      else if (x > rx2) {
        rx2 = x;
      }
      if (y < ry1) {
        ry1 = y;
      }
      else if (y > ry2) {
        ry2 = y;
      }
    }
  }
  [((PythagorasDRectangle *) NIL_CHK(target)) setBoundsWithDouble:rx1 withDouble:ry1 withDouble:rx2 - rx1 withDouble:ry2 - ry1];
  return target;
}

- (BOOL)isEmpty {
  return [[self bounds] isEmpty];
}

- (BOOL)containsWithDouble:(double)px
                withDouble:(double)py {
  return [self isInsideWithInt:[PythagorasDCrossing crossShapeWithPythagorasDIShape:self withDouble:px withDouble:py]];
}

- (BOOL)containsWithDouble:(double)rx
                withDouble:(double)ry
                withDouble:(double)rw
                withDouble:(double)rh {
  int cross = [PythagorasDCrossing intersectShapeWithPythagorasDIShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross != PythagorasDCrossing_CROSSING && [self isInsideWithInt:cross];
}

- (BOOL)intersectsWithDouble:(double)rx
                  withDouble:(double)ry
                  withDouble:(double)rw
                  withDouble:(double)rh {
  int cross = [PythagorasDCrossing intersectShapeWithPythagorasDIShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross == PythagorasDCrossing_CROSSING || [self isInsideWithInt:cross];
}

- (BOOL)containsWithPythagorasDIPoint:(id<PythagorasDIPoint>)p {
  return [self containsWithDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) y]];
}

- (BOOL)containsWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)r {
  return [self containsWithDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) x] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) y] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) width] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) height]];
}

- (BOOL)intersectsWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)r {
  return [self intersectsWithDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) x] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) y] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) width] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) height]];
}

- (id<PythagorasDPathIterator>)pathIteratorWithPythagorasDTransform:(id<PythagorasDTransform>)t {
  return [[[PythagorasDPath_Iterator alloc] initWithPythagorasDPath:self withPythagorasDTransform:t] autorelease];
}

- (id<PythagorasDPathIterator>)pathIteratorWithPythagorasDTransform:(id<PythagorasDTransform>)t
                                                         withDouble:(double)flatness {
  return [[[PythagorasDFlatteningPathIterator alloc] initWithPythagorasDPathIterator:[self pathIteratorWithPythagorasDTransform:t] withDouble:flatness] autorelease];
}

- (PythagorasDPath *)clone {
  return [[[PythagorasDPath alloc] initWithInt:rule_ withJavaLangByteArray:[PythagorasUtilPlatform cloneWithJavaLangByteArray:types_] withJavaLangDoubleArray:[PythagorasUtilPlatform cloneWithJavaLangDoubleArray:points_] withInt:typeSize_ withInt:pointSize_] autorelease];
}

- (void)checkBufWithInt:(int)pointCount
               withBOOL:(BOOL)checkMove {
  if (checkMove && typeSize_ == 0) {
    @throw [[[PythagorasDIllegalPathStateException alloc] initWithNSString:@"First segment must be a SEG_MOVETO"] autorelease];
  }
  if (typeSize_ == (int) [((IOSByteArray *) NIL_CHK(types_)) count]) {
    IOSByteArray *tmp = [[[IOSByteArray alloc] initWithLength:typeSize_ + PythagorasDPath_BUFFER_CAPACITY] autorelease];
    [JavaLangSystem arraycopyWithId:types_ withInt:0 withId:tmp withInt:0 withInt:typeSize_];
    JreOperatorRetainedAssign(&types_, self, tmp);
  }
  if (pointSize_ + pointCount > (int) [((IOSDoubleArray *) NIL_CHK(points_)) count]) {
    IOSDoubleArray *tmp = [[[IOSDoubleArray alloc] initWithLength:pointSize_ + [JavaLangMath maxWithInt:PythagorasDPath_BUFFER_CAPACITY * 2 withInt:pointCount]] autorelease];
    [JavaLangSystem arraycopyWithId:points_ withInt:0 withId:tmp withInt:0 withInt:pointSize_];
    JreOperatorRetainedAssign(&points_, self, tmp);
  }
}

- (BOOL)isInsideWithInt:(int)cross {
  return (rule_ == PythagorasDPath_WIND_NON_ZERO) ? [PythagorasDCrossing isInsideNonZeroWithInt:cross] : [PythagorasDCrossing isInsideEvenOddWithInt:cross];
}

- (id)initWithInt:(int)rule
withJavaLangByteArray:(IOSByteArray *)types
withJavaLangDoubleArray:(IOSDoubleArray *)points
          withInt:(int)typeSize
          withInt:(int)pointSize {
  if ((self = [super init])) {
    self.rule = rule;
    self.types = types;
    self.points = points;
    self.typeSize = typeSize;
    self.pointSize = pointSize;
  }
  return self;
}

+ (void)initialize {
  if (self == [PythagorasDPath class]) {
    JreOperatorRetainedAssign(&PythagorasDPath_pointShift_, self, [IOSIntArray arrayWithInts:(int[]){ 2, 2, 4, 6, 0 } count:5]);
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&points_, self, nil);
  JreOperatorRetainedAssign(&types_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDPath *typedCopy = (PythagorasDPath *) copy;
  typedCopy.types = types_;
  typedCopy.points = points_;
  typedCopy.typeSize = typeSize_;
  typedCopy.pointSize = pointSize_;
  typedCopy.rule = rule_;
}

@end
@implementation PythagorasDPath_Iterator

@synthesize typeIndex = typeIndex_;
@synthesize pointIndex = pointIndex_;
- (PythagorasDPath *)p {
  return p_;
}
- (void)setP:(PythagorasDPath *)p {
  JreOperatorRetainedAssign(&p_, self, p);
}
@synthesize p = p_;
- (id<PythagorasDTransform>)t {
  return t_;
}
- (void)setT:(id<PythagorasDTransform>)t {
  JreOperatorRetainedAssign(&t_, self, t);
}
@synthesize t = t_;

- (id)initWithPythagorasDPath:(PythagorasDPath *)path {
  return [self initPythagorasDPath_IteratorWithPythagorasDPath:path withPythagorasDTransform:nil];
}

- (id)initPythagorasDPath_IteratorWithPythagorasDPath:(PythagorasDPath *)path
                             withPythagorasDTransform:(id<PythagorasDTransform>)at {
  if ((self = [super init])) {
    self.p = path;
    self.t = at;
  }
  return self;
}

- (id)initWithPythagorasDPath:(PythagorasDPath *)path
     withPythagorasDTransform:(id<PythagorasDTransform>)at {
  return [self initPythagorasDPath_IteratorWithPythagorasDPath:path withPythagorasDTransform:at];
}

- (int)windingRule {
  return [((PythagorasDPath *) NIL_CHK(p_)) windingRule];
}

- (BOOL)isDone {
  return typeIndex_ >= ((PythagorasDPath *) NIL_CHK(p_)).typeSize;
}

- (void)next {
  typeIndex_++;
}

- (int)currentSegmentWithJavaLangDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    @throw [[[JavaUtilNoSuchElementException alloc] initWithNSString:@"Iterator out of bounds"] autorelease];
  }
  int type = [((IOSByteArray *) NIL_CHK(p_.types)) byteAtIndex:typeIndex_];
  int count = [((IOSIntArray *) NIL_CHK([PythagorasDPath pointShift])) intAtIndex:type];
  [JavaLangSystem arraycopyWithId:((PythagorasDPath *) NIL_CHK(p_)).points withInt:pointIndex_ withId:coords withInt:0 withInt:count];
  if (t_ != nil) {
    [t_ transformWithJavaLangDoubleArray:coords withInt:0 withJavaLangDoubleArray:coords withInt:0 withInt:count / 2];
  }
  pointIndex_ += count;
  return type;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&t_, self, nil);
  JreOperatorRetainedAssign(&p_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDPath_Iterator *typedCopy = (PythagorasDPath_Iterator *) copy;
  typedCopy.typeIndex = typeIndex_;
  typedCopy.pointIndex = pointIndex_;
  typedCopy.p = p_;
  typedCopy.t = t_;
}

@end

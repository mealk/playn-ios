//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Arc.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractArc.h"
#import "IArc.h"
#import "IDimension.h"
#import "IPoint.h"
#import "IRectangle.h"
#import "RectangularShape.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Math.h"
#import "Arc.h"

@implementation PythagorasDArc

@synthesize x_ = x__;
@synthesize y_ = y__;
@synthesize width_ = width__;
@synthesize height_ = height__;
@synthesize start = start_;
@synthesize extent = extent_;
@synthesize type = type_;

- (id)init {
  return [self initPythagorasDArcWithInt:PythagorasDIArc_OPEN];
}

- (id)initPythagorasDArcWithInt:(int)type {
  if ((self = [super init])) {
    [self setArcTypeWithInt:type];
  }
  return self;
}

- (id)initWithInt:(int)type {
  return [self initPythagorasDArcWithInt:type];
}

- (id)initWithDouble:(double)x
          withDouble:(double)y
          withDouble:(double)width
          withDouble:(double)height
          withDouble:(double)start
          withDouble:(double)extent
             withInt:(int)type {
  if ((self = [super init])) {
    [self setArcWithDouble:x withDouble:y withDouble:width withDouble:height withDouble:start withDouble:extent withInt:type];
  }
  return self;
}

- (id)initWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)bounds
                         withDouble:(double)start
                         withDouble:(double)extent
                            withInt:(int)type {
  if ((self = [super init])) {
    [self setArcWithDouble:[((id<PythagorasDIRectangle>) NIL_CHK(bounds)) x] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(bounds)) y] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(bounds)) width] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(bounds)) height] withDouble:start withDouble:extent withInt:type];
  }
  return self;
}

- (int)arcType {
  return type_;
}

- (double)x {
  return x__;
}

- (double)y {
  return y__;
}

- (double)width {
  return width__;
}

- (double)height {
  return height__;
}

- (double)angleStart {
  return start_;
}

- (double)angleExtent {
  return extent_;
}

- (void)setArcTypeWithInt:(int)type {
  if (type != PythagorasDIArc_OPEN && type != PythagorasDIArc_CHORD && type != PythagorasDIArc_PIE) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid Arc type: %d", type]] autorelease];
  }
  self.type = type;
}

- (void)setAngleStartWithDouble:(double)start {
  self.start = start;
}

- (void)setAngleExtentWithDouble:(double)extent {
  self.extent = extent;
}

- (void)setArcWithDouble:(double)x
              withDouble:(double)y
              withDouble:(double)width
              withDouble:(double)height
              withDouble:(double)start
              withDouble:(double)extent
                 withInt:(int)type {
  [self setArcTypeWithInt:type];
  self.x_ = x;
  self.y_ = y;
  self.width_ = width;
  self.height_ = height;
  self.start = start;
  self.extent = extent;
}

- (void)setArcWithPythagorasDIPoint:(id<PythagorasDIPoint>)point
          withPythagorasDIDimension:(id<PythagorasDIDimension>)size
                         withDouble:(double)start
                         withDouble:(double)extent
                            withInt:(int)type {
  [self setArcWithDouble:[((id<PythagorasDIPoint>) NIL_CHK(point)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(point)) y] withDouble:[((id<PythagorasDIDimension>) NIL_CHK(size)) width] withDouble:[((id<PythagorasDIDimension>) NIL_CHK(size)) height] withDouble:start withDouble:extent withInt:type];
}

- (void)setArcWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)rect
                             withDouble:(double)start
                             withDouble:(double)extent
                                withInt:(int)type {
  [self setArcWithDouble:[((id<PythagorasDIRectangle>) NIL_CHK(rect)) x] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(rect)) y] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(rect)) width] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(rect)) height] withDouble:start withDouble:extent withInt:type];
}

- (void)setArcWithPythagorasDIArc:(id<PythagorasDIArc>)arc {
  [self setArcWithDouble:[((id<PythagorasDIArc>) NIL_CHK(arc)) x] withDouble:[((id<PythagorasDIArc>) NIL_CHK(arc)) y] withDouble:[((id<PythagorasDIArc>) NIL_CHK(arc)) width] withDouble:[((id<PythagorasDIArc>) NIL_CHK(arc)) height] withDouble:[((id<PythagorasDIArc>) NIL_CHK(arc)) angleStart] withDouble:[((id<PythagorasDIArc>) NIL_CHK(arc)) angleExtent] withInt:[((id<PythagorasDIArc>) NIL_CHK(arc)) arcType]];
}

- (void)setArcByCenterWithDouble:(double)x
                      withDouble:(double)y
                      withDouble:(double)radius
                      withDouble:(double)start
                      withDouble:(double)extent
                         withInt:(int)type {
  [self setArcWithDouble:x - radius withDouble:y - radius withDouble:radius * 2.0f withDouble:radius * 2.0f withDouble:start withDouble:extent withInt:type];
}

- (void)setArcByTangentWithPythagorasDIPoint:(id<PythagorasDIPoint>)p1
                       withPythagorasDIPoint:(id<PythagorasDIPoint>)p2
                       withPythagorasDIPoint:(id<PythagorasDIPoint>)p3
                                  withDouble:(double)radius {
  double a1 = -[JavaLangMath atan2WithDouble:[((id<PythagorasDIPoint>) NIL_CHK(p1)) y] - [((id<PythagorasDIPoint>) NIL_CHK(p2)) y] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p1)) x] - [((id<PythagorasDIPoint>) NIL_CHK(p2)) x]];
  double a2 = -[JavaLangMath atan2WithDouble:[((id<PythagorasDIPoint>) NIL_CHK(p3)) y] - [((id<PythagorasDIPoint>) NIL_CHK(p2)) y] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p3)) x] - [((id<PythagorasDIPoint>) NIL_CHK(p2)) x]];
  double am = (a1 + a2) / 2.0f;
  double ah = a1 - am;
  double d = radius / [JavaLangMath absWithDouble:[JavaLangMath sinWithDouble:ah]];
  double x = [((id<PythagorasDIPoint>) NIL_CHK(p2)) x] + d * [JavaLangMath cosWithDouble:am];
  double y = [((id<PythagorasDIPoint>) NIL_CHK(p2)) y] - d * [JavaLangMath sinWithDouble:am];
  ah = ah >= 0.0f ? JavaLangMath_PI * 1.5f - ah : JavaLangMath_PI * 0.5f - ah;
  a1 = [self normAngleWithDouble:[JavaLangMath toDegreesWithDouble:am - ah]];
  a2 = [self normAngleWithDouble:[JavaLangMath toDegreesWithDouble:am + ah]];
  double delta = a2 - a1;
  if (delta <= 0.0f) {
    delta += 360.0f;
  }
  [self setArcByCenterWithDouble:x withDouble:y withDouble:radius withDouble:a1 withDouble:delta withInt:type_];
}

- (void)setAngleStartWithPythagorasDIPoint:(id<PythagorasDIPoint>)point {
  double angle = [JavaLangMath atan2WithDouble:[((id<PythagorasDIPoint>) NIL_CHK(point)) y] - [self centerY] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(point)) x] - [self centerX]];
  [self setAngleStartWithDouble:[self normAngleWithDouble:-[JavaLangMath toDegreesWithDouble:angle]]];
}

- (void)setAnglesWithDouble:(double)x1
                 withDouble:(double)y1
                 withDouble:(double)x2
                 withDouble:(double)y2 {
  double cx = [self centerX];
  double cy = [self centerY];
  double a1 = [self normAngleWithDouble:-[JavaLangMath toDegreesWithDouble:[JavaLangMath atan2WithDouble:y1 - cy withDouble:x1 - cx]]];
  double a2 = [self normAngleWithDouble:-[JavaLangMath toDegreesWithDouble:[JavaLangMath atan2WithDouble:y2 - cy withDouble:x2 - cx]]];
  a2 -= a1;
  if (a2 <= 0.0f) {
    a2 += 360.0f;
  }
  [self setAngleStartWithDouble:a1];
  [self setAngleExtentWithDouble:a2];
}

- (void)setAnglesWithPythagorasDIPoint:(id<PythagorasDIPoint>)p1
                 withPythagorasDIPoint:(id<PythagorasDIPoint>)p2 {
  [self setAnglesWithDouble:[((id<PythagorasDIPoint>) NIL_CHK(p1)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p1)) y] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p2)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p2)) y]];
}

- (void)setFrameWithDouble:(double)x
                withDouble:(double)y
                withDouble:(double)width
                withDouble:(double)height {
  [self setArcWithDouble:x withDouble:y withDouble:width withDouble:height withDouble:[self angleStart] withDouble:[self angleExtent] withInt:type_];
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDArc *typedCopy = (PythagorasDArc *) copy;
  typedCopy.x_ = x__;
  typedCopy.y_ = y__;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
  typedCopy.start = start_;
  typedCopy.extent = extent_;
  typedCopy.type = type_;
}

@end

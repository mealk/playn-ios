//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/IdentityTransform.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSDoubleArray.h"
#import "IOSObjectArray.h"
#import "IPoint.h"
#import "IVector.h"
#import "Point.h"
#import "Transform.h"
#import "Vector.h"
#import "java/lang/UnsupportedOperationException.h"
#import "IdentityTransform.h"

@implementation PythagorasDIdentityTransform

+ (int)GENERALITY {
  return PythagorasDIdentityTransform_GENERALITY;
}

- (double)uniformScale {
  return 1;
}

- (double)scaleX {
  return 1;
}

- (double)scaleY {
  return 1;
}

- (double)rotation {
  return 0;
}

- (double)tx {
  return 0;
}

- (double)ty {
  return 0;
}

- (void)getWithJavaLangDoubleArray:(IOSDoubleArray *)matrix {
  [((IOSDoubleArray *) NIL_CHK(matrix)) replaceDoubleAtIndex:0 withDouble:1];
  [((IOSDoubleArray *) NIL_CHK(matrix)) replaceDoubleAtIndex:1 withDouble:0];
  [((IOSDoubleArray *) NIL_CHK(matrix)) replaceDoubleAtIndex:2 withDouble:0];
  [((IOSDoubleArray *) NIL_CHK(matrix)) replaceDoubleAtIndex:3 withDouble:1];
  [((IOSDoubleArray *) NIL_CHK(matrix)) replaceDoubleAtIndex:4 withDouble:0];
  [((IOSDoubleArray *) NIL_CHK(matrix)) replaceDoubleAtIndex:5 withDouble:0];
}

- (id<PythagorasDTransform>)invert {
  return self;
}

- (id<PythagorasDTransform>)concatenateWithPythagorasDTransform:(id<PythagorasDTransform>)other {
  return other;
}

- (id<PythagorasDTransform>)preConcatenateWithPythagorasDTransform:(id<PythagorasDTransform>)other {
  return other;
}

- (id<PythagorasDTransform>)lerpWithPythagorasDTransform:(id<PythagorasDTransform>)other
                                              withDouble:(double)t {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (PythagorasDPoint *)transformWithPythagorasDIPoint:(id<PythagorasDIPoint>)p
                                withPythagorasDPoint:(PythagorasDPoint *)into {
  return [((PythagorasDPoint *) NIL_CHK(into)) setWithPythagorasDIPoint:p];
}

- (void)transformWithPythagorasDIPointArray:(IOSObjectArray *)src
                                    withInt:(int)srcOff
                  withPythagorasDPointArray:(IOSObjectArray *)dst
                                    withInt:(int)dstOff
                                    withInt:(int)count {
  for (int ii = 0; ii < count; ii++) {
    (void) [self transformWithPythagorasDIPoint:((id<PythagorasDIPoint>) [((IOSObjectArray *) NIL_CHK(src)) objectAtIndex:srcOff++]) withPythagorasDPoint:((PythagorasDPoint *) [((IOSObjectArray *) NIL_CHK(dst)) objectAtIndex:dstOff++])];
  }
}

- (void)transformWithJavaLangDoubleArray:(IOSDoubleArray *)src
                                 withInt:(int)srcOff
                 withJavaLangDoubleArray:(IOSDoubleArray *)dst
                                 withInt:(int)dstOff
                                 withInt:(int)count {
  for (int ii = 0; ii < count; ii++) {
    [((IOSDoubleArray *) NIL_CHK(dst)) replaceDoubleAtIndex:dstOff++ withDouble:[((IOSDoubleArray *) NIL_CHK(src)) doubleAtIndex:srcOff++]];
  }
}

- (PythagorasDPoint *)inverseTransformWithPythagorasDIPoint:(id<PythagorasDIPoint>)p
                                       withPythagorasDPoint:(PythagorasDPoint *)into {
  return [((PythagorasDPoint *) NIL_CHK(into)) setWithPythagorasDIPoint:p];
}

- (PythagorasDVector *)transformPointWithPythagorasDIVector:(id<PythagorasDIVector>)v
                                      withPythagorasDVector:(PythagorasDVector *)into {
  return [((PythagorasDVector *) NIL_CHK(into)) setWithPythagorasDIVector:v];
}

- (PythagorasDVector *)transformWithPythagorasDIVector:(id<PythagorasDIVector>)v
                                 withPythagorasDVector:(PythagorasDVector *)into {
  return [((PythagorasDVector *) NIL_CHK(into)) setWithPythagorasDIVector:v];
}

- (PythagorasDVector *)inverseTransformWithPythagorasDIVector:(id<PythagorasDIVector>)v
                                        withPythagorasDVector:(PythagorasDVector *)into {
  return [((PythagorasDVector *) NIL_CHK(into)) setWithPythagorasDIVector:v];
}

- (id<PythagorasDTransform>)copy__ OBJC_METHOD_FAMILY_NONE {
  return self;
}

- (int)generality {
  return PythagorasDIdentityTransform_GENERALITY;
}

- (NSString *)description {
  return @"ident";
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/AbstractPoint.java
//
//  Created by Thomas on 7/1/13.
//

#import "IPoint.h"
#import "Platform.h"
#import "Point.h"
#import "Points.h"
#import "XY.h"
#import "java/lang/Math.h"
#import "AbstractPoint.h"

@implementation PythagorasDAbstractPoint

- (double)distanceSqWithDouble:(double)px
                    withDouble:(double)py {
  return [PythagorasDPoints distanceSqWithDouble:[self x] withDouble:[self y] withDouble:px withDouble:py];
}

- (double)distanceSqWithPythagorasDIPoint:(id<PythagorasDIPoint>)p {
  return [PythagorasDPoints distanceSqWithDouble:[self x] withDouble:[self y] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) y]];
}

- (double)distanceWithDouble:(double)px
                  withDouble:(double)py {
  return [PythagorasDPoints distanceWithDouble:[self x] withDouble:[self y] withDouble:px withDouble:py];
}

- (double)distanceWithPythagorasDIPoint:(id<PythagorasDIPoint>)p {
  return [PythagorasDPoints distanceWithDouble:[self x] withDouble:[self y] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) y]];
}

- (double)directionWithPythagorasDIPoint:(id<PythagorasDIPoint>)other {
  return [JavaLangMath atan2WithDouble:[((id<PythagorasDIPoint>) NIL_CHK(other)) y] - [self y] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(other)) x] - [self x]];
}

- (PythagorasDPoint *)multWithDouble:(double)s {
  return [self multWithDouble:s withPythagorasDPoint:[[[PythagorasDPoint alloc] init] autorelease]];
}

- (PythagorasDPoint *)multWithDouble:(double)s
                withPythagorasDPoint:(PythagorasDPoint *)result {
  return [((PythagorasDPoint *) NIL_CHK(result)) setWithDouble:[self x] * s withDouble:[self y] * s];
}

- (PythagorasDPoint *)addWithDouble:(double)x
                         withDouble:(double)y {
  return [[[PythagorasDPoint alloc] initWithDouble:[self x] + x withDouble:[self y] + y] autorelease];
}

- (PythagorasDPoint *)addWithDouble:(double)x
                         withDouble:(double)y
               withPythagorasDPoint:(PythagorasDPoint *)result {
  return [((PythagorasDPoint *) NIL_CHK(result)) setWithDouble:[self x] + x withDouble:[self y] + y];
}

- (PythagorasDPoint *)subtractWithDouble:(double)x
                              withDouble:(double)y {
  return [self subtractWithDouble:x withDouble:y withPythagorasDPoint:[[[PythagorasDPoint alloc] init] autorelease]];
}

- (PythagorasDPoint *)subtractWithDouble:(double)x
                              withDouble:(double)y
                    withPythagorasDPoint:(PythagorasDPoint *)result {
  return [((PythagorasDPoint *) NIL_CHK(result)) setWithDouble:[self x] - x withDouble:[self y] - y];
}

- (PythagorasDPoint *)subtractWithPythagorasDIPoint:(id<PythagorasDIPoint>)other
                               withPythagorasDPoint:(PythagorasDPoint *)result {
  return [self subtractWithDouble:[((id<PythagorasDIPoint>) NIL_CHK(other)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(other)) y] withPythagorasDPoint:result];
}

- (PythagorasDPoint *)rotateWithDouble:(double)angle {
  return [self rotateWithDouble:angle withPythagorasDPoint:[[[PythagorasDPoint alloc] init] autorelease]];
}

- (PythagorasDPoint *)rotateWithDouble:(double)angle
                  withPythagorasDPoint:(PythagorasDPoint *)result {
  double x = [self x], y = [self y];
  double sina = [JavaLangMath sinWithDouble:angle], cosa = [JavaLangMath cosWithDouble:angle];
  return [((PythagorasDPoint *) NIL_CHK(result)) setWithDouble:x * cosa - y * sina withDouble:x * sina + y * cosa];
}

- (PythagorasDPoint *)clone {
  return [[[PythagorasDPoint alloc] initWithPythagorasDIPoint:self] autorelease];
}

- (BOOL)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[PythagorasDAbstractPoint class]]) {
    PythagorasDAbstractPoint *p = (PythagorasDAbstractPoint *) obj;
    return [self x] == [((PythagorasDAbstractPoint *) NIL_CHK(p)) x] && [self y] == [((PythagorasDAbstractPoint *) NIL_CHK(p)) y];
  }
  return NO;
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithDouble:[self x]] ^ [PythagorasUtilPlatform hashCodeWithDouble:[self y]];
}

- (NSString *)description {
  return [PythagorasDPoints pointToStringWithDouble:[self x] withDouble:[self y]];
}

- (double)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  [super dealloc];
}

@end

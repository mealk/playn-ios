//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/AbstractCubicCurve.java
//
//  Created by Thomas on 7/1/13.
//

#import "Crossing.h"
#import "CubicCurve.h"
#import "CubicCurves.h"
#import "FlatteningPathIterator.h"
#import "ICubicCurve.h"
#import "IOSDoubleArray.h"
#import "IPoint.h"
#import "IRectangle.h"
#import "PathIterator.h"
#import "Point.h"
#import "Rectangle.h"
#import "Transform.h"
#import "java/lang/Math.h"
#import "java/util/NoSuchElementException.h"
#import "AbstractCubicCurve.h"

@implementation PythagorasDAbstractCubicCurve

- (PythagorasDPoint *)p1 {
  return [[[PythagorasDPoint alloc] initWithDouble:[self x1] withDouble:[self y1]] autorelease];
}

- (PythagorasDPoint *)ctrlP1 {
  return [[[PythagorasDPoint alloc] initWithDouble:[self ctrlX1] withDouble:[self ctrlY1]] autorelease];
}

- (PythagorasDPoint *)ctrlP2 {
  return [[[PythagorasDPoint alloc] initWithDouble:[self ctrlX2] withDouble:[self ctrlY2]] autorelease];
}

- (PythagorasDPoint *)p2 {
  return [[[PythagorasDPoint alloc] initWithDouble:[self x2] withDouble:[self y2]] autorelease];
}

- (double)flatnessSq {
  return [PythagorasDCubicCurves flatnessSqWithDouble:[self x1] withDouble:[self y1] withDouble:[self ctrlX1] withDouble:[self ctrlY1] withDouble:[self ctrlX2] withDouble:[self ctrlY2] withDouble:[self x2] withDouble:[self y2]];
}

- (double)flatness {
  return [PythagorasDCubicCurves flatnessWithDouble:[self x1] withDouble:[self y1] withDouble:[self ctrlX1] withDouble:[self ctrlY1] withDouble:[self ctrlX2] withDouble:[self ctrlY2] withDouble:[self x2] withDouble:[self y2]];
}

- (void)subdivideWithPythagorasDCubicCurve:(PythagorasDCubicCurve *)left
                 withPythagorasDCubicCurve:(PythagorasDCubicCurve *)right {
  [PythagorasDCubicCurves subdivideWithPythagorasDICubicCurve:self withPythagorasDCubicCurve:left withPythagorasDCubicCurve:right];
}

- (PythagorasDCubicCurve *)clone {
  return [[[PythagorasDCubicCurve alloc] initWithDouble:[self x1] withDouble:[self y1] withDouble:[self ctrlX1] withDouble:[self ctrlY1] withDouble:[self ctrlX2] withDouble:[self ctrlY2] withDouble:[self x2] withDouble:[self y2]] autorelease];
}

- (BOOL)isEmpty {
  return YES;
}

- (BOOL)containsWithDouble:(double)px
                withDouble:(double)py {
  return [PythagorasDCrossing isInsideEvenOddWithInt:[PythagorasDCrossing crossShapeWithPythagorasDIShape:self withDouble:px withDouble:py]];
}

- (BOOL)containsWithDouble:(double)rx
                withDouble:(double)ry
                withDouble:(double)rw
                withDouble:(double)rh {
  int cross = [PythagorasDCrossing intersectShapeWithPythagorasDIShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return (cross != PythagorasDCrossing_CROSSING) && [PythagorasDCrossing isInsideEvenOddWithInt:cross];
}

- (BOOL)containsWithPythagorasDIPoint:(id<PythagorasDIPoint>)p {
  return [self containsWithDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) y]];
}

- (BOOL)containsWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)r {
  return [self containsWithDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) x] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) y] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) width] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) height]];
}

- (BOOL)intersectsWithDouble:(double)rx
                  withDouble:(double)ry
                  withDouble:(double)rw
                  withDouble:(double)rh {
  int cross = [PythagorasDCrossing intersectShapeWithPythagorasDIShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return (cross == PythagorasDCrossing_CROSSING) || [PythagorasDCrossing isInsideEvenOddWithInt:cross];
}

- (BOOL)intersectsWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)r {
  return [self intersectsWithDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) x] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) y] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) width] withDouble:[((id<PythagorasDIRectangle>) NIL_CHK(r)) height]];
}

- (PythagorasDRectangle *)bounds {
  return [self boundsWithPythagorasDRectangle:[[[PythagorasDRectangle alloc] init] autorelease]];
}

- (PythagorasDRectangle *)boundsWithPythagorasDRectangle:(PythagorasDRectangle *)target {
  double x1 = [self x1], y1 = [self y1], x2 = [self x2], y2 = [self y2];
  double ctrlx1 = [self ctrlX1], ctrly1 = [self ctrlY1];
  double ctrlx2 = [self ctrlX2], ctrly2 = [self ctrlY2];
  double rx1 = [JavaLangMath minWithDouble:[JavaLangMath minWithDouble:x1 withDouble:x2] withDouble:[JavaLangMath minWithDouble:ctrlx1 withDouble:ctrlx2]];
  double ry1 = [JavaLangMath minWithDouble:[JavaLangMath minWithDouble:y1 withDouble:y2] withDouble:[JavaLangMath minWithDouble:ctrly1 withDouble:ctrly2]];
  double rx2 = [JavaLangMath maxWithDouble:[JavaLangMath maxWithDouble:x1 withDouble:x2] withDouble:[JavaLangMath maxWithDouble:ctrlx1 withDouble:ctrlx2]];
  double ry2 = [JavaLangMath maxWithDouble:[JavaLangMath maxWithDouble:y1 withDouble:y2] withDouble:[JavaLangMath maxWithDouble:ctrly1 withDouble:ctrly2]];
  [((PythagorasDRectangle *) NIL_CHK(target)) setBoundsWithDouble:rx1 withDouble:ry1 withDouble:rx2 - rx1 withDouble:ry2 - ry1];
  return target;
}

- (id<PythagorasDPathIterator>)pathIteratorWithPythagorasDTransform:(id<PythagorasDTransform>)t {
  return [[[PythagorasDAbstractCubicCurve_Iterator alloc] initWithPythagorasDICubicCurve:self withPythagorasDTransform:t] autorelease];
}

- (id<PythagorasDPathIterator>)pathIteratorWithPythagorasDTransform:(id<PythagorasDTransform>)at
                                                         withDouble:(double)flatness {
  return [[[PythagorasDFlatteningPathIterator alloc] initWithPythagorasDPathIterator:[self pathIteratorWithPythagorasDTransform:at] withDouble:flatness] autorelease];
}

- (double)ctrlX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)ctrlX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)ctrlY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)ctrlY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)x1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)x2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)y1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)y2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation PythagorasDAbstractCubicCurve_Iterator

- (id<PythagorasDICubicCurve>)c {
  return c_;
}
- (void)setC:(id<PythagorasDICubicCurve>)c {
  JreOperatorRetainedAssign(&c_, self, c);
}
@synthesize c = c_;
- (id<PythagorasDTransform>)t {
  return t_;
}
- (void)setT:(id<PythagorasDTransform>)t {
  JreOperatorRetainedAssign(&t_, self, t);
}
@synthesize t = t_;
@synthesize index = index_;

- (id)initWithPythagorasDICubicCurve:(id<PythagorasDICubicCurve>)c
            withPythagorasDTransform:(id<PythagorasDTransform>)t {
  if ((self = [super init])) {
    self.c = c;
    self.t = t;
  }
  return self;
}

- (int)windingRule {
  return PythagorasDPathIterator_WIND_NON_ZERO;
}

- (BOOL)isDone {
  return index_ > 1;
}

- (void)next {
  index_++;
}

- (int)currentSegmentWithJavaLangDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    @throw [[[JavaUtilNoSuchElementException alloc] initWithNSString:@"Iterator out of bounds"] autorelease];
  }
  int type;
  int count;
  if (index_ == 0) {
    type = PythagorasDPathIterator_SEG_MOVETO;
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:0 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) x1]];
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:1 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) y1]];
    count = 1;
  }
  else {
    type = PythagorasDPathIterator_SEG_CUBICTO;
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:0 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) ctrlX1]];
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:1 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) ctrlY1]];
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:2 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) ctrlX2]];
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:3 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) ctrlY2]];
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:4 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) x2]];
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:5 withDouble:[((id<PythagorasDICubicCurve>) NIL_CHK(c_)) y2]];
    count = 3;
  }
  if (t_ != nil) {
    [t_ transformWithJavaLangDoubleArray:coords withInt:0 withJavaLangDoubleArray:coords withInt:0 withInt:count];
  }
  return type;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&t_, self, nil);
  JreOperatorRetainedAssign(&c_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDAbstractCubicCurve_Iterator *typedCopy = (PythagorasDAbstractCubicCurve_Iterator *) copy;
  typedCopy.c = c_;
  typedCopy.t = t_;
  typedCopy.index = index_;
}

@end

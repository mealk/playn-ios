//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Vector.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractVector.h"
#import "IOSDoubleArray.h"
#import "IVector.h"
#import "java/lang/Math.h"
#import "Vector.h"

@implementation PythagorasDVector

@synthesize x_ = x__;
@synthesize y_ = y__;

- (id)initWithDouble:(double)x
          withDouble:(double)y {
  if ((self = [super init])) {
    (void) [self setWithDouble:x withDouble:y];
  }
  return self;
}

- (id)initWithPythagorasDIVector:(id<PythagorasDIVector>)other {
  if ((self = [super init])) {
    (void) [self setWithPythagorasDIVector:other];
  }
  return self;
}

- (id)init {
  return [super init];
}

- (PythagorasDVector *)crossLocalWithPythagorasDIVector:(id<PythagorasDIVector>)other {
  return [self crossWithPythagorasDIVector:other withPythagorasDVector:self];
}

- (PythagorasDVector *)negateLocal {
  return [self negateWithPythagorasDVector:self];
}

- (PythagorasDVector *)normalizeLocal {
  return [self normalizeWithPythagorasDVector:self];
}

- (PythagorasDVector *)scaleLocalWithDouble:(double)v {
  return [self scale__WithDouble:v withPythagorasDVector:self];
}

- (PythagorasDVector *)scaleLocalWithPythagorasDIVector:(id<PythagorasDIVector>)other {
  return [self scale__WithPythagorasDIVector:other withPythagorasDVector:self];
}

- (PythagorasDVector *)addLocalWithPythagorasDIVector:(id<PythagorasDIVector>)other {
  return [self addWithPythagorasDIVector:other withPythagorasDVector:self];
}

- (PythagorasDVector *)subtractLocalWithPythagorasDIVector:(id<PythagorasDIVector>)other {
  return [self subtractWithPythagorasDIVector:other withPythagorasDVector:self];
}

- (PythagorasDVector *)addLocalWithDouble:(double)x
                               withDouble:(double)y {
  return [self addWithDouble:x withDouble:y withPythagorasDVector:self];
}

- (PythagorasDVector *)subtractLocalWithDouble:(double)x
                                    withDouble:(double)y {
  return [self subtractWithDouble:x withDouble:y withPythagorasDVector:self];
}

- (PythagorasDVector *)addScaledLocalWithPythagorasDIVector:(id<PythagorasDIVector>)other
                                                 withDouble:(double)v {
  return [self addScaledWithPythagorasDIVector:other withDouble:v withPythagorasDVector:self];
}

- (PythagorasDVector *)rotateLocalWithDouble:(double)angle {
  return [self rotateWithDouble:angle withPythagorasDVector:self];
}

- (PythagorasDVector *)lerpLocalWithPythagorasDIVector:(id<PythagorasDIVector>)other
                                            withDouble:(double)t {
  return [self lerpWithPythagorasDIVector:other withDouble:t withPythagorasDVector:self];
}

- (PythagorasDVector *)setWithPythagorasDIVector:(id<PythagorasDIVector>)other {
  return [self setWithDouble:[((id<PythagorasDIVector>) NIL_CHK(other)) x] withDouble:[((id<PythagorasDIVector>) NIL_CHK(other)) y]];
}

- (PythagorasDVector *)setWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  return [self setWithDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:1]];
}

- (PythagorasDVector *)setWithDouble:(double)x
                          withDouble:(double)y {
  self.x_ = x;
  self.y_ = y;
  return self;
}

- (PythagorasDVector *)setAngleWithDouble:(double)angle {
  double l = [self length];
  return [self setWithDouble:l * [JavaLangMath cosWithDouble:angle] withDouble:l * [JavaLangMath sinWithDouble:angle]];
}

- (PythagorasDVector *)setLengthWithDouble:(double)length {
  return [[self normalizeLocal] scaleLocalWithDouble:length];
}

- (double)x {
  return x__;
}

- (double)y {
  return y__;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDVector *typedCopy = (PythagorasDVector *) copy;
  typedCopy.x_ = x__;
  typedCopy.y_ = y__;
}

@end

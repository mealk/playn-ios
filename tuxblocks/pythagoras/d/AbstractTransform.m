//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/AbstractTransform.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSDoubleArray.h"
#import "IOSObjectArray.h"
#import "IPoint.h"
#import "IVector.h"
#import "Point.h"
#import "Transform.h"
#import "Vector.h"
#import "java/lang/UnsupportedOperationException.h"
#import "AbstractTransform.h"

@implementation PythagorasDAbstractTransform

- (PythagorasDVector *)scale__ {
  return [[[PythagorasDVector alloc] initWithDouble:[self scaleX] withDouble:[self scaleY]] autorelease];
}

- (PythagorasDVector *)translation {
  return [[[PythagorasDVector alloc] initWithDouble:[self tx] withDouble:[self ty]] autorelease];
}

- (id<PythagorasDTransform>)setUniformScaleWithDouble:(double)scale_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)setScaleWithDouble:(double)scaleX
                                    withDouble:(double)scaleY {
  (void) [self setScaleXWithDouble:scaleX];
  (void) [self setScaleYWithDouble:scaleY];
  return self;
}

- (id<PythagorasDTransform>)setScaleXWithDouble:(double)scaleX {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)setScaleYWithDouble:(double)scaleY {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)setRotationWithDouble:(double)angle {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)setTranslationWithDouble:(double)tx
                                          withDouble:(double)ty {
  (void) [self setTxWithDouble:tx];
  (void) [self setTyWithDouble:ty];
  return self;
}

- (id<PythagorasDTransform>)uniformScaleWithDouble:(double)scale_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)scale__WithDouble:(double)scaleX
                                   withDouble:(double)scaleY {
  (void) [self scaleXWithDouble:scaleX];
  (void) [self scaleYWithDouble:scaleY];
  return self;
}

- (id<PythagorasDTransform>)scaleXWithDouble:(double)scaleX {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)scaleYWithDouble:(double)scaleY {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)rotateWithDouble:(double)angle {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)translateWithDouble:(double)tx
                                     withDouble:(double)ty {
  (void) [self translateXWithDouble:tx];
  (void) [self translateYWithDouble:ty];
  return self;
}

- (id<PythagorasDTransform>)translateXWithDouble:(double)tx {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)translateYWithDouble:(double)ty {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)setTxWithDouble:(double)tx {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)setTyWithDouble:(double)ty {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)setTransformWithDouble:(double)m00
                                        withDouble:(double)m01
                                        withDouble:(double)m10
                                        withDouble:(double)m11
                                        withDouble:(double)tx
                                        withDouble:(double)ty {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PythagorasDTransform>)clone {
  return [self copy__];
}

- (id<PythagorasDTransform>)copy__ OBJC_METHOD_FAMILY_NONE {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PythagorasDTransform>)concatenateWithPythagorasDTransform:(id<PythagorasDTransform>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)generality {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)getWithJavaLangDoubleArray:(IOSDoubleArray *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (PythagorasDPoint *)inverseTransformWithPythagorasDIPoint:(id<PythagorasDIPoint>)param0
                                       withPythagorasDPoint:(PythagorasDPoint *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (PythagorasDVector *)inverseTransformWithPythagorasDIVector:(id<PythagorasDIVector>)param0
                                        withPythagorasDVector:(PythagorasDVector *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PythagorasDTransform>)invert {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PythagorasDTransform>)lerpWithPythagorasDTransform:(id<PythagorasDTransform>)param0
                                              withDouble:(double)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PythagorasDTransform>)preConcatenateWithPythagorasDTransform:(id<PythagorasDTransform>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)rotation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)scaleX {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)scaleY {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (PythagorasDPoint *)transformWithPythagorasDIPoint:(id<PythagorasDIPoint>)param0
                                withPythagorasDPoint:(PythagorasDPoint *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)transformWithPythagorasDIPointArray:(IOSObjectArray *)param0
                                    withInt:(int)param1
                  withPythagorasDPointArray:(IOSObjectArray *)param2
                                    withInt:(int)param3
                                    withInt:(int)param4 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)transformWithJavaLangDoubleArray:(IOSDoubleArray *)param0
                                 withInt:(int)param1
                 withJavaLangDoubleArray:(IOSDoubleArray *)param2
                                 withInt:(int)param3
                                 withInt:(int)param4 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (PythagorasDVector *)transformWithPythagorasDIVector:(id<PythagorasDIVector>)param0
                                 withPythagorasDVector:(PythagorasDVector *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (PythagorasDVector *)transformPointWithPythagorasDIVector:(id<PythagorasDIVector>)param0
                                      withPythagorasDVector:(PythagorasDVector *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)tx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)ty {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)uniformScale {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end

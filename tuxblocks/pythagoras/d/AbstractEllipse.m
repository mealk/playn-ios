//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/AbstractEllipse.java
//
//  Created by Thomas on 7/1/13.
//

#import "Ellipse.h"
#import "IEllipse.h"
#import "IOSDoubleArray.h"
#import "IOSObjectArray.h"
#import "IRectangularShape.h"
#import "PathIterator.h"
#import "RectangularShape.h"
#import "Transform.h"
#import "java/lang/Math.h"
#import "java/util/NoSuchElementException.h"
#import "AbstractEllipse.h"

@implementation PythagorasDAbstractEllipse

static double PythagorasDAbstractEllipse_U_;
static IOSObjectArray * PythagorasDAbstractEllipse_POINTS_;

+ (double)U {
  return PythagorasDAbstractEllipse_U_;
}

+ (IOSObjectArray *)POINTS {
  return PythagorasDAbstractEllipse_POINTS_;
}

- (PythagorasDEllipse *)clone {
  return [[[PythagorasDEllipse alloc] initWithDouble:[self x] withDouble:[self y] withDouble:[self width] withDouble:[self height]] autorelease];
}

- (BOOL)containsWithDouble:(double)px
                withDouble:(double)py {
  if ([self isEmpty]) return NO;
  double a = (px - [self x]) / [self width] - 0.5f;
  double b = (py - [self y]) / [self height] - 0.5f;
  return a * a + b * b < 0.25f;
}

- (BOOL)containsWithDouble:(double)rx
                withDouble:(double)ry
                withDouble:(double)rw
                withDouble:(double)rh {
  if ([self isEmpty] || rw <= 0.0f || rh <= 0.0f) return NO;
  double rx1 = rx, ry1 = ry, rx2 = rx + rw, ry2 = ry + rh;
  return [self containsWithDouble:rx1 withDouble:ry1] && [self containsWithDouble:rx2 withDouble:ry1] && [self containsWithDouble:rx2 withDouble:ry2] && [self containsWithDouble:rx1 withDouble:ry2];
}

- (BOOL)intersectsWithDouble:(double)rx
                  withDouble:(double)ry
                  withDouble:(double)rw
                  withDouble:(double)rh {
  if ([self isEmpty] || rw <= 0.0f || rh <= 0.0f) return NO;
  double cx = [self x] + [self width] / 2.0f;
  double cy = [self y] + [self height] / 2.0f;
  double rx1 = rx, ry1 = ry, rx2 = rx + rw, ry2 = ry + rh;
  double nx = cx < rx1 ? rx1 : (cx > rx2 ? rx2 : cx);
  double ny = cy < ry1 ? ry1 : (cy > ry2 ? ry2 : cy);
  return [self containsWithDouble:nx withDouble:ny];
}

- (id<PythagorasDPathIterator>)pathIteratorWithPythagorasDTransform:(id<PythagorasDTransform>)at {
  return [[[PythagorasDAbstractEllipse_Iterator alloc] initWithPythagorasDIEllipse:self withPythagorasDTransform:at] autorelease];
}

- (double)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [PythagorasDAbstractEllipse class]) {
    PythagorasDAbstractEllipse_U_ = 2.0f / 3.0f * ([JavaLangMath sqrtWithDouble:2] - 1.0f);
    JreOperatorRetainedAssign(&PythagorasDAbstractEllipse_POINTS_, self, [IOSObjectArray arrayWithObjects:(id[]){ [IOSDoubleArray arrayWithDoubles:(double[]){ 1.0f, 0.5f + PythagorasDAbstractEllipse_U_, 0.5f + PythagorasDAbstractEllipse_U_, 1.0f, 0.5f, 1.0f } count:6], [IOSDoubleArray arrayWithDoubles:(double[]){ 0.5f - PythagorasDAbstractEllipse_U_, 1.0f, 0.0f, 0.5f + PythagorasDAbstractEllipse_U_, 0.0f, 0.5f } count:6], [IOSDoubleArray arrayWithDoubles:(double[]){ 0.0f, 0.5f - PythagorasDAbstractEllipse_U_, 0.5f - PythagorasDAbstractEllipse_U_, 0.0f, 0.5f, 0.0f } count:6], [IOSDoubleArray arrayWithDoubles:(double[]){ 0.5f + PythagorasDAbstractEllipse_U_, 0.0f, 1.0f, 0.5f - PythagorasDAbstractEllipse_U_, 1.0f, 0.5f } count:6] } count:4 type:[IOSClass classWithClass:[IOSDoubleArray class]]]);
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation PythagorasDAbstractEllipse_Iterator

@synthesize x = x_;
@synthesize y = y_;
@synthesize width = width_;
@synthesize height = height_;
- (id<PythagorasDTransform>)t {
  return t_;
}
- (void)setT:(id<PythagorasDTransform>)t {
  JreOperatorRetainedAssign(&t_, self, t);
}
@synthesize t = t_;
@synthesize index = index_;

- (id)initWithPythagorasDIEllipse:(id<PythagorasDIEllipse>)e
         withPythagorasDTransform:(id<PythagorasDTransform>)t {
  if ((self = [super init])) {
    self.x = [((id<PythagorasDIEllipse>) NIL_CHK(e)) x];
    self.y = [((id<PythagorasDIEllipse>) NIL_CHK(e)) y];
    self.width = [((id<PythagorasDIEllipse>) NIL_CHK(e)) width];
    self.height = [((id<PythagorasDIEllipse>) NIL_CHK(e)) height];
    self.t = t;
    if (width_ < 0.0f || height_ < 0.0f) {
      index_ = 6;
    }
  }
  return self;
}

- (int)windingRule {
  return PythagorasDPathIterator_WIND_NON_ZERO;
}

- (BOOL)isDone {
  return index_ > 5;
}

- (void)next {
  index_++;
}

- (int)currentSegmentWithJavaLangDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    @throw [[[JavaUtilNoSuchElementException alloc] initWithNSString:@"Iterator out of bounds"] autorelease];
  }
  if (index_ == 5) {
    return PythagorasDPathIterator_SEG_CLOSE;
  }
  int type;
  int count;
  if (index_ == 0) {
    type = PythagorasDPathIterator_SEG_MOVETO;
    count = 1;
    IOSDoubleArray *p = ((IOSDoubleArray *) [((IOSObjectArray *) NIL_CHK([PythagorasDAbstractEllipse POINTS])) objectAtIndex:3]);
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:0 withDouble:x_ + [((IOSDoubleArray *) NIL_CHK(p)) doubleAtIndex:4] * width_];
    [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:1 withDouble:y_ + [((IOSDoubleArray *) NIL_CHK(p)) doubleAtIndex:5] * height_];
  }
  else {
    type = PythagorasDPathIterator_SEG_CUBICTO;
    count = 3;
    IOSDoubleArray *p = ((IOSDoubleArray *) [((IOSObjectArray *) NIL_CHK([PythagorasDAbstractEllipse POINTS])) objectAtIndex:index_ - 1]);
    int j = 0;
    for (int i = 0; i < 3; i++) {
      [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:j withDouble:x_ + [((IOSDoubleArray *) NIL_CHK(p)) doubleAtIndex:j++] * width_];
      [((IOSDoubleArray *) NIL_CHK(coords)) replaceDoubleAtIndex:j withDouble:y_ + [((IOSDoubleArray *) NIL_CHK(p)) doubleAtIndex:j++] * height_];
    }
  }
  if (t_ != nil) {
    [t_ transformWithJavaLangDoubleArray:coords withInt:0 withJavaLangDoubleArray:coords withInt:0 withInt:count];
  }
  return type;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&t_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDAbstractEllipse_Iterator *typedCopy = (PythagorasDAbstractEllipse_Iterator *) copy;
  typedCopy.x = x_;
  typedCopy.y = y_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.t = t_;
  typedCopy.index = index_;
}

@end

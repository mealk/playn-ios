//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Matrix3.java
//
//  Created by Thomas on 7/1/13.
//

#import "IMatrix3.h"
#import "IOSDoubleArray.h"
#import "IQuaternion.h"
#import "IVector.h"
#import "IVector3.h"
#import "MathUtil.h"
#import "Platform.h"
#import "SingularMatrixException.h"
#import "Vector.h"
#import "Vector3.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"
#import "java/lang/Math.h"
#import "java/nio/DoubleBuffer.h"
#import "Matrix3.h"

@implementation PythagorasDMatrix3

static PythagorasDMatrix3 * PythagorasDMatrix3_IDENTITY_;

@synthesize m00_ = m00__;
@synthesize m10_ = m10__;
@synthesize m20_ = m20__;
@synthesize m01_ = m01__;
@synthesize m11_ = m11__;
@synthesize m21_ = m21__;
@synthesize m02_ = m02__;
@synthesize m12_ = m12__;
@synthesize m22_ = m22__;

+ (PythagorasDMatrix3 *)IDENTITY {
  return PythagorasDMatrix3_IDENTITY_;
}

- (id)initWithDouble:(double)m00
          withDouble:(double)m10
          withDouble:(double)m20
          withDouble:(double)m01
          withDouble:(double)m11
          withDouble:(double)m21
          withDouble:(double)m02
          withDouble:(double)m12
          withDouble:(double)m22 {
  if ((self = [super init])) {
    (void) [self setWithDouble:m00 withDouble:m10 withDouble:m20 withDouble:m01 withDouble:m11 withDouble:m21 withDouble:m02 withDouble:m12 withDouble:m22];
  }
  return self;
}

- (id)initWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  if ((self = [super init])) {
    (void) [self setWithJavaLangDoubleArray:values];
  }
  return self;
}

- (id)initWithPythagorasDMatrix3:(PythagorasDMatrix3 *)other {
  if ((self = [super init])) {
    (void) [self setWithPythagorasDIMatrix3:other];
  }
  return self;
}

- (id)init {
  if ((self = [super init])) {
    (void) [self setToIdentity];
  }
  return self;
}

- (void)setElementWithInt:(int)row
                  withInt:(int)col
               withDouble:(double)value {
  switch (col) {
    case 0:
    switch (row) {
      case 0:
      m00__ = value;
      return;
      case 1:
      m01__ = value;
      return;
      case 2:
      m02__ = value;
      return;
    }
    break;
    case 1:
    switch (row) {
      case 0:
      m10__ = value;
      return;
      case 1:
      m11__ = value;
      return;
      case 2:
      m12__ = value;
      return;
    }
    break;
    case 2:
    switch (row) {
      case 0:
      m20__ = value;
      return;
      case 1:
      m21__ = value;
      return;
      case 2:
      m22__ = value;
      return;
    }
    break;
  }
  @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
}

- (void)setRowWithInt:(int)row
           withDouble:(double)x
           withDouble:(double)y
           withDouble:(double)z {
  switch (row) {
    case 0:
    m00__ = x;
    m10__ = y;
    m20__ = z;
    break;
    case 1:
    m01__ = x;
    m11__ = y;
    m21__ = z;
    break;
    case 2:
    m02__ = x;
    m12__ = y;
    m22__ = z;
    break;
    default:
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (void)setRowWithInt:(int)row
withPythagorasDVector3:(PythagorasDVector3 *)v {
  [self setRowWithInt:row withDouble:[((PythagorasDVector3 *) NIL_CHK(v)) x] withDouble:[((PythagorasDVector3 *) NIL_CHK(v)) y] withDouble:[((PythagorasDVector3 *) NIL_CHK(v)) z]];
}

- (void)setColumnWithInt:(int)col
              withDouble:(double)x
              withDouble:(double)y
              withDouble:(double)z {
  switch (col) {
    case 0:
    m00__ = x;
    m01__ = y;
    m02__ = z;
    break;
    case 1:
    m10__ = x;
    m11__ = y;
    m12__ = z;
    break;
    case 2:
    m20__ = x;
    m21__ = y;
    m22__ = z;
    break;
    default:
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (void)setColumnWithInt:(int)col
  withPythagorasDVector3:(PythagorasDVector3 *)v {
  [self setColumnWithInt:col withDouble:[((PythagorasDVector3 *) NIL_CHK(v)) x] withDouble:[((PythagorasDVector3 *) NIL_CHK(v)) y] withDouble:[((PythagorasDVector3 *) NIL_CHK(v)) z]];
}

- (PythagorasDMatrix3 *)setToIdentity {
  return [self setWithDouble:1.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:1.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (PythagorasDMatrix3 *)setToZero {
  return [self setWithDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:0.0f];
}

- (PythagorasDMatrix3 *)setToRotationWithPythagorasDIVector3:(id<PythagorasDIVector3>)from
                                     withPythagorasDIVector3:(id<PythagorasDIVector3>)to {
  double angle = [((id<PythagorasDIVector3>) NIL_CHK(from)) angleWithPythagorasDIVector3:to];
  return (angle < 0.0001f) ? [self setToIdentity] : [self setToRotationWithDouble:angle withPythagorasDIVector3:[[((id<PythagorasDIVector3>) NIL_CHK(from)) crossWithPythagorasDIVector3:to] normalizeLocal]];
}

- (PythagorasDMatrix3 *)setToRotationWithDouble:(double)angle
                        withPythagorasDIVector3:(id<PythagorasDIVector3>)axis {
  return [self setToRotationWithDouble:angle withDouble:[((id<PythagorasDIVector3>) NIL_CHK(axis)) x] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(axis)) y] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(axis)) z]];
}

- (PythagorasDMatrix3 *)setToRotationWithDouble:(double)angle
                                     withDouble:(double)x
                                     withDouble:(double)y
                                     withDouble:(double)z {
  double c = [JavaLangMath cosWithDouble:angle], s = [JavaLangMath sinWithDouble:angle], omc = 1.0f - c;
  double xs = x * s, ys = y * s, zs = z * s, xy = x * y, xz = x * z, yz = y * z;
  return [self setWithDouble:x * x * omc + c withDouble:xy * omc - zs withDouble:xz * omc + ys withDouble:xy * omc + zs withDouble:y * y * omc + c withDouble:yz * omc - xs withDouble:xz * omc - ys withDouble:yz * omc + xs withDouble:z * z * omc + c];
}

- (PythagorasDMatrix3 *)setToRotationWithPythagorasDIQuaternion:(id<PythagorasDIQuaternion>)quat {
  double qx = [((id<PythagorasDIQuaternion>) NIL_CHK(quat)) x], qy = [((id<PythagorasDIQuaternion>) NIL_CHK(quat)) y], qz = [((id<PythagorasDIQuaternion>) NIL_CHK(quat)) z], qw = [((id<PythagorasDIQuaternion>) NIL_CHK(quat)) w];
  double xx = qx * qx, yy = qy * qy, zz = qz * qz;
  double xy = qx * qy, xz = qx * qz, xw = qx * qw;
  double yz = qy * qz, yw = qy * qw, zw = qz * qw;
  return [self setWithDouble:1.0f - 2.0f * (yy + zz) withDouble:2.0f * (xy - zw) withDouble:2.0f * (xz + yw) withDouble:2.0f * (xy + zw) withDouble:1.0f - 2.0f * (xx + zz) withDouble:2.0f * (yz - xw) withDouble:2.0f * (xz - yw) withDouble:2.0f * (yz + xw) withDouble:1.0f - 2.0f * (xx + yy)];
}

- (PythagorasDMatrix3 *)setToScaleWithPythagorasDIVector3:(id<PythagorasDIVector3>)scale_ {
  return [self setToScaleWithDouble:[((id<PythagorasDIVector3>) NIL_CHK(scale_)) x] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(scale_)) y] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(scale_)) z]];
}

- (PythagorasDMatrix3 *)setToScaleWithDouble:(double)s {
  return [self setToScaleWithDouble:s withDouble:s withDouble:s];
}

- (PythagorasDMatrix3 *)setToScaleWithDouble:(double)x
                                  withDouble:(double)y
                                  withDouble:(double)z {
  return [self setWithDouble:x withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:y withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:z];
}

- (PythagorasDMatrix3 *)setToReflectionWithPythagorasDIVector3:(id<PythagorasDIVector3>)normal {
  return [self setToReflectionWithDouble:[((id<PythagorasDIVector3>) NIL_CHK(normal)) x] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(normal)) y] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(normal)) z]];
}

- (PythagorasDMatrix3 *)setToReflectionWithDouble:(double)x
                                       withDouble:(double)y
                                       withDouble:(double)z {
  double x2 = -2.0f * x, y2 = -2.0f * y, z2 = -2.0f * z;
  double xy2 = x2 * y, xz2 = x2 * z, yz2 = y2 * z;
  return [self setWithDouble:1.0f + x2 * x withDouble:xy2 withDouble:xz2 withDouble:xy2 withDouble:1.0f + y2 * y withDouble:yz2 withDouble:xz2 withDouble:yz2 withDouble:1.0f + z2 * z];
}

- (PythagorasDMatrix3 *)setToTransformWithPythagorasDIVector:(id<PythagorasDIVector>)translation
                                                  withDouble:(double)rotation {
  return [[self setToRotationWithDouble:rotation] setTranslationWithPythagorasDIVector:translation];
}

- (PythagorasDMatrix3 *)setToTransformWithPythagorasDIVector:(id<PythagorasDIVector>)translation
                                                  withDouble:(double)rotation
                                                  withDouble:(double)scale_ {
  return [[self setToRotationWithDouble:rotation] setWithDouble:m00__ * scale_ withDouble:m10__ * scale_ withDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) x] withDouble:m01__ * scale_ withDouble:m11__ * scale_ withDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) y] withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (PythagorasDMatrix3 *)setToTransformWithPythagorasDIVector:(id<PythagorasDIVector>)translation
                                                  withDouble:(double)rotation
                                      withPythagorasDIVector:(id<PythagorasDIVector>)scale_ {
  double sx = [((id<PythagorasDIVector>) NIL_CHK(scale_)) x], sy = [((id<PythagorasDIVector>) NIL_CHK(scale_)) y];
  return [[self setToRotationWithDouble:rotation] setWithDouble:m00__ * sx withDouble:m10__ * sy withDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) x] withDouble:m01__ * sx withDouble:m11__ * sy withDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) y] withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (PythagorasDMatrix3 *)setToTranslationWithPythagorasDIVector:(id<PythagorasDIVector>)translation {
  return [self setToTranslationWithDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) x] withDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) y]];
}

- (PythagorasDMatrix3 *)setToTranslationWithDouble:(double)x
                                        withDouble:(double)y {
  return [self setWithDouble:1.0f withDouble:0.0f withDouble:x withDouble:0.0f withDouble:1.0f withDouble:y withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (PythagorasDMatrix3 *)setTranslationWithPythagorasDIVector:(id<PythagorasDIVector>)translation {
  return [self setTranslationWithDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) x] withDouble:[((id<PythagorasDIVector>) NIL_CHK(translation)) y]];
}

- (PythagorasDMatrix3 *)setTranslationWithDouble:(double)x
                                      withDouble:(double)y {
  m20__ = x;
  m21__ = y;
  return self;
}

- (PythagorasDMatrix3 *)setToRotationWithDouble:(double)angle {
  double sina = [JavaLangMath sinWithDouble:angle], cosa = [JavaLangMath cosWithDouble:angle];
  return [self setWithDouble:cosa withDouble:-sina withDouble:0.0f withDouble:sina withDouble:cosa withDouble:0.0f withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (PythagorasDMatrix3 *)transposeLocal {
  return [self transposeWithPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)multLocalWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other {
  return [self multWithPythagorasDIMatrix3:other withPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)addLocalWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other {
  return [self addWithPythagorasDIMatrix3:other withPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)multAffineLocalWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other {
  return [self multAffineWithPythagorasDIMatrix3:other withPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)invertLocal {
  return [self invertWithPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)invertAffineLocal {
  return [self invertAffineWithPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)lerpLocalWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                                              withDouble:(double)t {
  return [self lerpWithPythagorasDIMatrix3:other withDouble:t withPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)lerpAffineLocalWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                                                    withDouble:(double)t {
  return [self lerpAffineWithPythagorasDIMatrix3:other withDouble:t withPythagorasDMatrix3:self];
}

- (PythagorasDMatrix3 *)setWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other {
  return [self setWithDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m00] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m10] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m20] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m01] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m11] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m21] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m02] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m12] withDouble:[((id<PythagorasDIMatrix3>) NIL_CHK(other)) m22]];
}

- (PythagorasDMatrix3 *)setWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  return [self setWithDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:1] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:2] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:3] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:4] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:5] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:6] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:7] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:8]];
}

- (PythagorasDMatrix3 *)setWithDouble:(double)m00
                           withDouble:(double)m10
                           withDouble:(double)m20
                           withDouble:(double)m01
                           withDouble:(double)m11
                           withDouble:(double)m21
                           withDouble:(double)m02
                           withDouble:(double)m12
                           withDouble:(double)m22 {
  self.m00_ = m00;
  self.m01_ = m01;
  self.m02_ = m02;
  self.m10_ = m10;
  self.m11_ = m11;
  self.m12_ = m12;
  self.m20_ = m20;
  self.m21_ = m21;
  self.m22_ = m22;
  return self;
}

- (double)m00 {
  return m00__;
}

- (double)m10 {
  return m10__;
}

- (double)m20 {
  return m20__;
}

- (double)m01 {
  return m01__;
}

- (double)m11 {
  return m11__;
}

- (double)m21 {
  return m21__;
}

- (double)m02 {
  return m02__;
}

- (double)m12 {
  return m12__;
}

- (double)m22 {
  return m22__;
}

- (double)elementWithInt:(int)row
                 withInt:(int)col {
  switch (col) {
    case 0:
    switch (row) {
      case 0:
      return m00__;
      case 1:
      return m01__;
      case 2:
      return m02__;
    }
    break;
    case 1:
    switch (row) {
      case 0:
      return m10__;
      case 1:
      return m11__;
      case 2:
      return m12__;
    }
    break;
    case 2:
    switch (row) {
      case 0:
      return m20__;
      case 1:
      return m21__;
      case 2:
      return m22__;
    }
    break;
  }
  @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
}

- (void)getRowWithInt:(int)row
withPythagorasDVector3:(PythagorasDVector3 *)result {
  switch (row) {
    case 0:
    ((PythagorasDVector3 *) NIL_CHK(result)).x_ = m00__;
    ((PythagorasDVector3 *) NIL_CHK(result)).y_ = m10__;
    ((PythagorasDVector3 *) NIL_CHK(result)).z_ = m20__;
    break;
    case 1:
    ((PythagorasDVector3 *) NIL_CHK(result)).x_ = m01__;
    ((PythagorasDVector3 *) NIL_CHK(result)).y_ = m11__;
    ((PythagorasDVector3 *) NIL_CHK(result)).z_ = m21__;
    break;
    case 2:
    ((PythagorasDVector3 *) NIL_CHK(result)).x_ = m02__;
    ((PythagorasDVector3 *) NIL_CHK(result)).y_ = m12__;
    ((PythagorasDVector3 *) NIL_CHK(result)).z_ = m22__;
    break;
    default:
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (void)getColumnWithInt:(int)col
  withPythagorasDVector3:(PythagorasDVector3 *)result {
  switch (col) {
    case 0:
    ((PythagorasDVector3 *) NIL_CHK(result)).x_ = m00__;
    ((PythagorasDVector3 *) NIL_CHK(result)).y_ = m01__;
    ((PythagorasDVector3 *) NIL_CHK(result)).z_ = m02__;
    break;
    case 1:
    ((PythagorasDVector3 *) NIL_CHK(result)).x_ = m10__;
    ((PythagorasDVector3 *) NIL_CHK(result)).y_ = m11__;
    ((PythagorasDVector3 *) NIL_CHK(result)).z_ = m12__;
    break;
    case 2:
    ((PythagorasDVector3 *) NIL_CHK(result)).x_ = m20__;
    ((PythagorasDVector3 *) NIL_CHK(result)).y_ = m21__;
    ((PythagorasDVector3 *) NIL_CHK(result)).z_ = m22__;
    break;
    default:
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (PythagorasDMatrix3 *)transpose {
  return [self transposeWithPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)transposeWithPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:m00__ withDouble:m01__ withDouble:m02__ withDouble:m10__ withDouble:m11__ withDouble:m12__ withDouble:m20__ withDouble:m21__ withDouble:m22__];
}

- (PythagorasDMatrix3 *)multWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other {
  return [self multWithPythagorasDIMatrix3:other withPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)multWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                             withPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  double m00 = self.m00_, m01 = self.m01_, m02 = self.m02_;
  double m10 = self.m10_, m11 = self.m11_, m12 = self.m12_;
  double m20 = self.m20_, m21 = self.m21_, m22 = self.m22_;
  double om00 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m00], om01 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m01], om02 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m02];
  double om10 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m10], om11 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m11], om12 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m12];
  double om20 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m20], om21 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m21], om22 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m22];
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:m00 * om00 + m10 * om01 + m20 * om02 withDouble:m00 * om10 + m10 * om11 + m20 * om12 withDouble:m00 * om20 + m10 * om21 + m20 * om22 withDouble:m01 * om00 + m11 * om01 + m21 * om02 withDouble:m01 * om10 + m11 * om11 + m21 * om12 withDouble:m01 * om20 + m11 * om21 + m21 * om22 withDouble:m02 * om00 + m12 * om01 + m22 * om02 withDouble:m02 * om10 + m12 * om11 + m22 * om12 withDouble:m02 * om20 + m12 * om21 + m22 * om22];
}

- (PythagorasDMatrix3 *)addWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other {
  return [self addWithPythagorasDIMatrix3:other withPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)addWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                            withPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:m00__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m00] withDouble:m01__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m01] withDouble:m02__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m02] withDouble:m10__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m10] withDouble:m11__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m11] withDouble:m12__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m12] withDouble:m20__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m20] withDouble:m21__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m21] withDouble:m22__ + [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m22]];
}

- (BOOL)isAffine {
  return (m02__ == 0.0f && m12__ == 0.0f && m22__ == 1.0f);
}

- (PythagorasDMatrix3 *)multAffineWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other {
  return [self multAffineWithPythagorasDIMatrix3:other withPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)multAffineWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                                   withPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  double m00 = self.m00_, m01 = self.m01_;
  double m10 = self.m10_, m11 = self.m11_;
  double m20 = self.m20_, m21 = self.m21_;
  double om00 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m00], om01 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m01];
  double om10 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m10], om11 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m11];
  double om20 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m20], om21 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m21];
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:m00 * om00 + m10 * om01 withDouble:m00 * om10 + m10 * om11 withDouble:m00 * om20 + m10 * om21 + m20 withDouble:m01 * om00 + m11 * om01 withDouble:m01 * om10 + m11 * om11 withDouble:m01 * om20 + m11 * om21 + m21 withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (PythagorasDMatrix3 *)invert {
  return [self invertWithPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)invertWithPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  double m00 = self.m00_, m01 = self.m01_, m02 = self.m02_;
  double m10 = self.m10_, m11 = self.m11_, m12 = self.m12_;
  double m20 = self.m20_, m21 = self.m21_, m22 = self.m22_;
  double sd00 = m11 * m22 - m21 * m12;
  double sd10 = m01 * m22 - m21 * m02;
  double sd20 = m01 * m12 - m11 * m02;
  double det = m00 * sd00 + m20 * sd20 - m10 * sd10;
  if ([JavaLangMath absWithDouble:det] == 0.0f) {
    @throw [[[PythagorasUtilSingularMatrixException alloc] initWithNSString:[self description]] autorelease];
  }
  double rdet = 1.0f / det;
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:+sd00 * rdet withDouble:-(m10 * m22 - m20 * m12) * rdet withDouble:+(m10 * m21 - m20 * m11) * rdet withDouble:-sd10 * rdet withDouble:+(m00 * m22 - m20 * m02) * rdet withDouble:-(m00 * m21 - m20 * m01) * rdet withDouble:+sd20 * rdet withDouble:-(m00 * m12 - m10 * m02) * rdet withDouble:+(m00 * m11 - m10 * m01) * rdet];
}

- (PythagorasDMatrix3 *)invertAffine {
  return [self invertAffineWithPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)invertAffineWithPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  double m00 = self.m00_, m01 = self.m01_;
  double m10 = self.m10_, m11 = self.m11_;
  double m20 = self.m20_, m21 = self.m21_;
  double det = m00 * m11 - m10 * m01;
  if ([JavaLangMath absWithDouble:det] == 0.0f) {
    @throw [[[PythagorasUtilSingularMatrixException alloc] initWithNSString:[self description]] autorelease];
  }
  double rdet = 1.0f / det;
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:+m11 * rdet withDouble:-m10 * rdet withDouble:+(m10 * m21 - m20 * m11) * rdet withDouble:-m01 * rdet withDouble:+m00 * rdet withDouble:-(m00 * m21 - m20 * m01) * rdet withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (PythagorasDMatrix3 *)lerpWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                                         withDouble:(double)t {
  return [self lerpWithPythagorasDIMatrix3:other withDouble:t withPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)lerpWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                                         withDouble:(double)t
                             withPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  double m00 = self.m00_, m01 = self.m01_, m02 = self.m02_;
  double m10 = self.m10_, m11 = self.m11_, m12 = self.m12_;
  double m20 = self.m20_, m21 = self.m21_, m22 = self.m22_;
  double om00 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m00], om01 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m01], om02 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m02];
  double om10 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m10], om11 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m11], om12 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m12];
  double om20 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m20], om21 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m21], om22 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m22];
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:m00 + t * (om00 - m00) withDouble:m10 + t * (om10 - m10) withDouble:m20 + t * (om20 - m20) withDouble:m01 + t * (om01 - m01) withDouble:m11 + t * (om11 - m11) withDouble:m21 + t * (om21 - m21) withDouble:m02 + t * (om02 - m02) withDouble:m12 + t * (om12 - m12) withDouble:m22 + t * (om22 - m22)];
}

- (PythagorasDMatrix3 *)lerpAffineWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                                               withDouble:(double)t {
  return [self lerpAffineWithPythagorasDIMatrix3:other withDouble:t withPythagorasDMatrix3:[[[PythagorasDMatrix3 alloc] init] autorelease]];
}

- (PythagorasDMatrix3 *)lerpAffineWithPythagorasDIMatrix3:(id<PythagorasDIMatrix3>)other
                                               withDouble:(double)t
                                   withPythagorasDMatrix3:(PythagorasDMatrix3 *)result {
  double m00 = self.m00_, m01 = self.m01_;
  double m10 = self.m10_, m11 = self.m11_;
  double m20 = self.m20_, m21 = self.m21_;
  double om00 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m00], om01 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m01];
  double om10 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m10], om11 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m11];
  double om20 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m20], om21 = [((id<PythagorasDIMatrix3>) NIL_CHK(other)) m21];
  return [((PythagorasDMatrix3 *) NIL_CHK(result)) setWithDouble:m00 + t * (om00 - m00) withDouble:m10 + t * (om10 - m10) withDouble:m20 + t * (om20 - m20) withDouble:m01 + t * (om01 - m01) withDouble:m11 + t * (om11 - m11) withDouble:m21 + t * (om21 - m21) withDouble:0.0f withDouble:0.0f withDouble:1.0f];
}

- (JavaNioDoubleBuffer *)getWithJavaNioDoubleBuffer:(JavaNioDoubleBuffer *)buf {
  (void) [[[((JavaNioDoubleBuffer *) NIL_CHK(buf)) putWithDouble:m00__] putWithDouble:m01__] putWithDouble:m02__];
  (void) [[[((JavaNioDoubleBuffer *) NIL_CHK(buf)) putWithDouble:m10__] putWithDouble:m11__] putWithDouble:m12__];
  (void) [[[((JavaNioDoubleBuffer *) NIL_CHK(buf)) putWithDouble:m20__] putWithDouble:m21__] putWithDouble:m22__];
  return buf;
}

- (PythagorasDVector3 *)transformLocalWithPythagorasDVector3:(PythagorasDVector3 *)vector {
  return [self transformWithPythagorasDIVector3:vector withPythagorasDVector3:vector];
}

- (PythagorasDVector3 *)transformWithPythagorasDIVector3:(id<PythagorasDIVector3>)vector {
  return [self transformWithPythagorasDIVector3:vector withPythagorasDVector3:[[[PythagorasDVector3 alloc] init] autorelease]];
}

- (PythagorasDVector3 *)transformWithPythagorasDIVector3:(id<PythagorasDIVector3>)vector
                                  withPythagorasDVector3:(PythagorasDVector3 *)result {
  double vx = [((id<PythagorasDIVector3>) NIL_CHK(vector)) x], vy = [((id<PythagorasDIVector3>) NIL_CHK(vector)) y], vz = [((id<PythagorasDIVector3>) NIL_CHK(vector)) z];
  return [((PythagorasDVector3 *) NIL_CHK(result)) setWithDouble:m00__ * vx + m10__ * vy + m20__ * vz withDouble:m01__ * vx + m11__ * vy + m21__ * vz withDouble:m02__ * vx + m12__ * vy + m22__ * vz];
}

- (PythagorasDVector *)transformPointLocalWithPythagorasDVector:(PythagorasDVector *)point {
  return [self transformPointWithPythagorasDIVector:point withPythagorasDVector:point];
}

- (PythagorasDVector *)transformPointWithPythagorasDIVector:(id<PythagorasDIVector>)point {
  return [self transformPointWithPythagorasDIVector:point withPythagorasDVector:[[[PythagorasDVector alloc] init] autorelease]];
}

- (PythagorasDVector *)transformPointWithPythagorasDIVector:(id<PythagorasDIVector>)point
                                      withPythagorasDVector:(PythagorasDVector *)result {
  double px = [((id<PythagorasDIVector>) NIL_CHK(point)) x], py = [((id<PythagorasDIVector>) NIL_CHK(point)) y];
  return [((PythagorasDVector *) NIL_CHK(result)) setWithDouble:m00__ * px + m10__ * py + m20__ withDouble:m01__ * px + m11__ * py + m21__];
}

- (PythagorasDVector *)transformVectorLocalWithPythagorasDVector:(PythagorasDVector *)vector {
  return [self transformVectorWithPythagorasDIVector:vector withPythagorasDVector:vector];
}

- (PythagorasDVector *)transformVectorWithPythagorasDIVector:(id<PythagorasDIVector>)vector {
  return [self transformVectorWithPythagorasDIVector:vector withPythagorasDVector:[[[PythagorasDVector alloc] init] autorelease]];
}

- (PythagorasDVector *)transformVectorWithPythagorasDIVector:(id<PythagorasDIVector>)vector
                                       withPythagorasDVector:(PythagorasDVector *)result {
  double vx = [((id<PythagorasDIVector>) NIL_CHK(vector)) x], vy = [((id<PythagorasDIVector>) NIL_CHK(vector)) y];
  return [((PythagorasDVector *) NIL_CHK(result)) setWithDouble:m00__ * vx + m10__ * vy withDouble:m01__ * vx + m11__ * vy];
}

- (double)extractRotation {
  double n00 = m00__, n10 = m10__;
  double n01 = m01__, n11 = m11__;
  for (int ii = 0; ii < 10; ii++) {
    double o00 = n00, o10 = n10;
    double o01 = n01, o11 = n11;
    double det = o00 * o11 - o10 * o01;
    if ([JavaLangMath absWithDouble:det] == 0.0f) {
      @throw [[[PythagorasUtilSingularMatrixException alloc] initWithNSString:[self description]] autorelease];
    }
    double hrdet = 0.5f / det;
    n00 = +o11 * hrdet + o00 * 0.5f;
    n10 = -o01 * hrdet + o10 * 0.5f;
    n01 = -o10 * hrdet + o01 * 0.5f;
    n11 = +o00 * hrdet + o11 * 0.5f;
    double d00 = n00 - o00, d10 = n10 - o10;
    double d01 = n01 - o01, d11 = n11 - o11;
    if (d00 * d00 + d10 * d10 + d01 * d01 + d11 * d11 < PythagorasDMathUtil_EPSILON) {
      break;
    }
  }
  return [JavaLangMath atan2WithDouble:n01 withDouble:n00];
}

- (PythagorasDVector *)extractScale {
  return [self extractScaleWithPythagorasDVector:[[[PythagorasDVector alloc] init] autorelease]];
}

- (PythagorasDVector *)extractScaleWithPythagorasDVector:(PythagorasDVector *)result {
  double m00 = self.m00_, m01 = self.m01_, m10 = self.m10_, m11 = self.m11_;
  return [((PythagorasDVector *) NIL_CHK(result)) setWithDouble:[JavaLangMath sqrtWithDouble:m00 * m00 + m01 * m01] withDouble:[JavaLangMath sqrtWithDouble:m10 * m10 + m11 * m11]];
}

- (double)approximateUniformScale {
  double cp = m00__ * m11__ - m01__ * m10__;
  return (cp < 0.0f) ? -[JavaLangMath sqrtWithDouble:-cp] : [JavaLangMath sqrtWithDouble:cp];
}

- (NSString *)description {
  return ([NSString stringWithFormat:@"[[%f, %f, %f], [%f, %f, %f], [%f, %f, %f]]", m00__, m10__, m20__, m01__, m11__, m21__, m02__, m12__, m22__]);
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithDouble:m00__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m10__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m20__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m01__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m11__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m21__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m02__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m12__] ^ [PythagorasUtilPlatform hashCodeWithDouble:m22__];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[PythagorasDMatrix3 class]])) {
    return NO;
  }
  PythagorasDMatrix3 *omat = (PythagorasDMatrix3 *) other;
  return (m00__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m00_ && m10__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m10_ && m20__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m20_ && m01__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m01_ && m11__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m11_ && m21__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m21_ && m02__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m02_ && m12__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m12_ && m22__ == ((PythagorasDMatrix3 *) NIL_CHK(omat)).m22_);
}

+ (void)initialize {
  if (self == [PythagorasDMatrix3 class]) {
    JreOperatorRetainedAssign(&PythagorasDMatrix3_IDENTITY_, self, [[[PythagorasDMatrix3 alloc] init] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDMatrix3 *typedCopy = (PythagorasDMatrix3 *) copy;
  typedCopy.m00_ = m00__;
  typedCopy.m10_ = m10__;
  typedCopy.m20_ = m20__;
  typedCopy.m01_ = m01__;
  typedCopy.m11_ = m11__;
  typedCopy.m21_ = m21__;
  typedCopy.m02_ = m02__;
  typedCopy.m12_ = m12__;
  typedCopy.m22_ = m22__;
}

@end

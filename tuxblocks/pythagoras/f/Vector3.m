//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Vector3.java
//
//  Created by Thomas on 7/1/13.
//

#import "FloatMath.h"
#import "IOSFloatArray.h"
#import "IVector3.h"
#import "Platform.h"
#import "java/lang/Float.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/Math.h"
#import "java/nio/FloatBuffer.h"
#import "Vector3.h"

@implementation PythagorasFVector3

static id<PythagorasFIVector3> PythagorasFVector3_UNIT_X_;
static id<PythagorasFIVector3> PythagorasFVector3_UNIT_Y_;
static id<PythagorasFIVector3> PythagorasFVector3_UNIT_Z_;
static id<PythagorasFIVector3> PythagorasFVector3_UNIT_XYZ_;
static id<PythagorasFIVector3> PythagorasFVector3_NORMAL_XYZ_;
static id<PythagorasFIVector3> PythagorasFVector3_ZERO_;
static id<PythagorasFIVector3> PythagorasFVector3_MIN_VALUE_;
static id<PythagorasFIVector3> PythagorasFVector3_MAX_VALUE_;

@synthesize x_ = x__;
@synthesize y_ = y__;
@synthesize z_ = z__;

+ (id<PythagorasFIVector3>)UNIT_X {
  return PythagorasFVector3_UNIT_X_;
}

+ (id<PythagorasFIVector3>)UNIT_Y {
  return PythagorasFVector3_UNIT_Y_;
}

+ (id<PythagorasFIVector3>)UNIT_Z {
  return PythagorasFVector3_UNIT_Z_;
}

+ (id<PythagorasFIVector3>)UNIT_XYZ {
  return PythagorasFVector3_UNIT_XYZ_;
}

+ (id<PythagorasFIVector3>)NORMAL_XYZ {
  return PythagorasFVector3_NORMAL_XYZ_;
}

+ (id<PythagorasFIVector3>)ZERO {
  return PythagorasFVector3_ZERO_;
}

+ (id<PythagorasFIVector3>)MIN_VALUE {
  return PythagorasFVector3_MIN_VALUE_;
}

+ (id<PythagorasFIVector3>)MAX_VALUE {
  return PythagorasFVector3_MAX_VALUE_;
}

- (id)initWithFloat:(float)x
          withFloat:(float)y
          withFloat:(float)z {
  if ((self = [super init])) {
    (void) [self setWithFloat:x withFloat:y withFloat:z];
  }
  return self;
}

- (id)initWithJavaLangFloatArray:(IOSFloatArray *)values {
  if ((self = [super init])) {
    (void) [self setWithJavaLangFloatArray:values];
  }
  return self;
}

- (id)initWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  if ((self = [super init])) {
    (void) [self setWithPythagorasFIVector3:other];
  }
  return self;
}

- (id)init {
  return [super init];
}

- (PythagorasFVector3 *)crossLocalWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self crossWithPythagorasFIVector3:other withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)negateLocal {
  return [self negateWithPythagorasFVector3:self];
}

- (PythagorasFVector3 *)absLocal {
  return [self absWithPythagorasFVector3:self];
}

- (PythagorasFVector3 *)normalizeLocal {
  return [self normalizeWithPythagorasFVector3:self];
}

- (PythagorasFVector3 *)multLocalWithFloat:(float)v {
  return [self multWithFloat:v withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)multLocalWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self multWithPythagorasFIVector3:other withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)addLocalWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self addWithPythagorasFIVector3:other withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)subtractLocalWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self subtractWithPythagorasFIVector3:other withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)addLocalWithFloat:(float)x
                                withFloat:(float)y
                                withFloat:(float)z {
  return [self addWithFloat:x withFloat:y withFloat:z withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)addScaledLocalWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                                                    withFloat:(float)v {
  return [self addScaledWithPythagorasFIVector3:other withFloat:v withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)lerpLocalWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                                               withFloat:(float)t {
  return [self lerpWithPythagorasFIVector3:other withFloat:t withPythagorasFVector3:self];
}

- (PythagorasFVector3 *)setWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self setWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(other)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(other)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(other)) z]];
}

- (PythagorasFVector3 *)setWithJavaLangFloatArray:(IOSFloatArray *)values {
  return [self setWithFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:0] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:1] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:2]];
}

- (PythagorasFVector3 *)setWithFloat:(float)x
                           withFloat:(float)y
                           withFloat:(float)z {
  self.x_ = x;
  self.y_ = y;
  self.z_ = z;
  return self;
}

- (float)x {
  return x__;
}

- (float)y {
  return y__;
}

- (float)z {
  return z__;
}

- (float)dotWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return x__ * [((id<PythagorasFIVector3>) NIL_CHK(other)) x] + y__ * [((id<PythagorasFIVector3>) NIL_CHK(other)) y] + z__ * [((id<PythagorasFIVector3>) NIL_CHK(other)) z];
}

- (PythagorasFVector3 *)crossWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self crossWithPythagorasFIVector3:other withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)crossWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                              withPythagorasFVector3:(PythagorasFVector3 *)result {
  float x = self.x_, y = self.y_, z = self.z_;
  float ox = [((id<PythagorasFIVector3>) NIL_CHK(other)) x], oy = [((id<PythagorasFIVector3>) NIL_CHK(other)) y], oz = [((id<PythagorasFIVector3>) NIL_CHK(other)) z];
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:y * oz - z * oy withFloat:z * ox - x * oz withFloat:x * oy - y * ox];
}

- (float)tripleWithPythagorasFIVector3:(id<PythagorasFIVector3>)b
               withPythagorasFIVector3:(id<PythagorasFIVector3>)c {
  float bx = [((id<PythagorasFIVector3>) NIL_CHK(b)) x], by = [((id<PythagorasFIVector3>) NIL_CHK(b)) y], bz = [((id<PythagorasFIVector3>) NIL_CHK(b)) z];
  float cx = [((id<PythagorasFIVector3>) NIL_CHK(c)) x], cy = [((id<PythagorasFIVector3>) NIL_CHK(c)) y], cz = [((id<PythagorasFIVector3>) NIL_CHK(c)) z];
  return [self x] * (by * cz - bz * cy) + [self y] * (bz * cx - bx * cz) + [self z] * (bx * cy - by * cx);
}

- (PythagorasFVector3 *)negate {
  return [self negateWithPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)negateWithPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:-x__ withFloat:-y__ withFloat:-z__];
}

- (PythagorasFVector3 *)abs {
  return [self absWithPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)absWithPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:[JavaLangMath absWithFloat:x__] withFloat:[JavaLangMath absWithFloat:y__] withFloat:[JavaLangMath absWithFloat:z__]];
}

- (PythagorasFVector3 *)normalize {
  return [self normalizeWithPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)normalizeWithPythagorasFVector3:(PythagorasFVector3 *)result {
  return [self multWithFloat:1.0f / [self length] withPythagorasFVector3:result];
}

- (float)angleWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [PythagorasFFloatMath acosWithFloat:[self dotWithPythagorasFIVector3:other] / ([self length] * [((id<PythagorasFIVector3>) NIL_CHK(other)) length])];
}

- (float)length {
  return [PythagorasFFloatMath sqrtWithFloat:[self lengthSquared]];
}

- (float)lengthSquared {
  float x = self.x_, y = self.y_, z = self.z_;
  return (x * x + y * y + z * z);
}

- (float)distanceWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [PythagorasFFloatMath sqrtWithFloat:[self distanceSquaredWithPythagorasFIVector3:other]];
}

- (float)distanceSquaredWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  float dx = x__ - [((id<PythagorasFIVector3>) NIL_CHK(other)) x], dy = y__ - [((id<PythagorasFIVector3>) NIL_CHK(other)) y], dz = z__ - [((id<PythagorasFIVector3>) NIL_CHK(other)) z];
  return dx * dx + dy * dy + dz * dz;
}

- (float)manhattanDistanceWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [JavaLangMath absWithFloat:x__ - [((id<PythagorasFIVector3>) NIL_CHK(other)) x]] + [JavaLangMath absWithFloat:y__ - [((id<PythagorasFIVector3>) NIL_CHK(other)) y]] + [JavaLangMath absWithFloat:z__ - [((id<PythagorasFIVector3>) NIL_CHK(other)) z]];
}

- (PythagorasFVector3 *)multWithFloat:(float)v {
  return [self multWithFloat:v withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)multWithFloat:(float)v
               withPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:x__ * v withFloat:y__ * v withFloat:z__ * v];
}

- (PythagorasFVector3 *)multWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self multWithPythagorasFIVector3:other withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)multWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                             withPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:x__ * [((id<PythagorasFIVector3>) NIL_CHK(other)) x] withFloat:y__ * [((id<PythagorasFIVector3>) NIL_CHK(other)) y] withFloat:z__ * [((id<PythagorasFIVector3>) NIL_CHK(other)) z]];
}

- (PythagorasFVector3 *)addWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self addWithPythagorasFIVector3:other withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)addWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                            withPythagorasFVector3:(PythagorasFVector3 *)result {
  return [self addWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(other)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(other)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(other)) z] withPythagorasFVector3:result];
}

- (PythagorasFVector3 *)subtractWithPythagorasFIVector3:(id<PythagorasFIVector3>)other {
  return [self subtractWithPythagorasFIVector3:other withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)subtractWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                                 withPythagorasFVector3:(PythagorasFVector3 *)result {
  return [self addWithFloat:-[((id<PythagorasFIVector3>) NIL_CHK(other)) x] withFloat:-[((id<PythagorasFIVector3>) NIL_CHK(other)) y] withFloat:-[((id<PythagorasFIVector3>) NIL_CHK(other)) z] withPythagorasFVector3:result];
}

- (PythagorasFVector3 *)addWithFloat:(float)x
                           withFloat:(float)y
                           withFloat:(float)z {
  return [self addWithFloat:x withFloat:y withFloat:z withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)addWithFloat:(float)x
                           withFloat:(float)y
                           withFloat:(float)z
              withPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:self.x_ + x withFloat:self.y_ + y withFloat:self.z_ + z];
}

- (PythagorasFVector3 *)addScaledWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                                               withFloat:(float)v {
  return [self addScaledWithPythagorasFIVector3:other withFloat:v withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)addScaledWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                                               withFloat:(float)v
                                  withPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:x__ + [((id<PythagorasFIVector3>) NIL_CHK(other)) x] * v withFloat:y__ + [((id<PythagorasFIVector3>) NIL_CHK(other)) y] * v withFloat:z__ + [((id<PythagorasFIVector3>) NIL_CHK(other)) z] * v];
}

- (PythagorasFVector3 *)lerpWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                                          withFloat:(float)t {
  return [self lerpWithPythagorasFIVector3:other withFloat:t withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)lerpWithPythagorasFIVector3:(id<PythagorasFIVector3>)other
                                          withFloat:(float)t
                             withPythagorasFVector3:(PythagorasFVector3 *)result {
  float x = self.x_, y = self.y_, z = self.z_;
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:x + t * ([((id<PythagorasFIVector3>) NIL_CHK(other)) x] - x) withFloat:y + t * ([((id<PythagorasFIVector3>) NIL_CHK(other)) y] - y) withFloat:z + t * ([((id<PythagorasFIVector3>) NIL_CHK(other)) z] - z)];
}

- (float)getWithInt:(int)idx {
  switch (idx) {
    case 0:
    return x__;
    case 1:
    return y__;
    case 2:
    return z__;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString valueOfInt:idx]] autorelease];
}

- (void)getWithJavaLangFloatArray:(IOSFloatArray *)values {
  [((IOSFloatArray *) NIL_CHK(values)) replaceFloatAtIndex:0 withFloat:x__];
  [((IOSFloatArray *) NIL_CHK(values)) replaceFloatAtIndex:1 withFloat:y__];
  [((IOSFloatArray *) NIL_CHK(values)) replaceFloatAtIndex:2 withFloat:z__];
}

- (JavaNioFloatBuffer *)getWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  return [[[((JavaNioFloatBuffer *) NIL_CHK(buf)) putWithFloat:x__] putWithFloat:y__] putWithFloat:z__];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[%f, %f, %f]", x__, y__, z__];
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithFloat:x__] ^ [PythagorasUtilPlatform hashCodeWithFloat:y__] ^ [PythagorasUtilPlatform hashCodeWithFloat:z__];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[PythagorasFVector3 class]])) {
    return NO;
  }
  PythagorasFVector3 *ovec = (PythagorasFVector3 *) other;
  return (x__ == ((PythagorasFVector3 *) NIL_CHK(ovec)).x_ && y__ == ((PythagorasFVector3 *) NIL_CHK(ovec)).y_ && z__ == ((PythagorasFVector3 *) NIL_CHK(ovec)).z_);
}

+ (void)initialize {
  if (self == [PythagorasFVector3 class]) {
    JreOperatorRetainedAssign(&PythagorasFVector3_UNIT_X_, self, [[[PythagorasFVector3 alloc] initWithFloat:1.0f withFloat:0.0f withFloat:0.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFVector3_UNIT_Y_, self, [[[PythagorasFVector3 alloc] initWithFloat:0.0f withFloat:1.0f withFloat:0.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFVector3_UNIT_Z_, self, [[[PythagorasFVector3 alloc] initWithFloat:0.0f withFloat:0.0f withFloat:1.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFVector3_UNIT_XYZ_, self, [[[PythagorasFVector3 alloc] initWithFloat:1.0f withFloat:1.0f withFloat:1.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFVector3_NORMAL_XYZ_, self, [((id<PythagorasFIVector3>) NIL_CHK(PythagorasFVector3_UNIT_XYZ_)) normalize]);
    JreOperatorRetainedAssign(&PythagorasFVector3_ZERO_, self, [[[PythagorasFVector3 alloc] initWithFloat:0.0f withFloat:0.0f withFloat:0.0f] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFVector3_MIN_VALUE_, self, [[[PythagorasFVector3 alloc] initWithFloat:-JavaLangFloat_MAX_VALUE withFloat:-JavaLangFloat_MAX_VALUE withFloat:-JavaLangFloat_MAX_VALUE] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFVector3_MAX_VALUE_, self, [[[PythagorasFVector3 alloc] initWithFloat:JavaLangFloat_MAX_VALUE withFloat:JavaLangFloat_MAX_VALUE withFloat:JavaLangFloat_MAX_VALUE] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFVector3 *typedCopy = (PythagorasFVector3 *) copy;
  typedCopy.x_ = x__;
  typedCopy.y_ = y__;
  typedCopy.z_ = z__;
}

@end

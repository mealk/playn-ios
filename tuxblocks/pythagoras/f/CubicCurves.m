//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/CubicCurves.java
//
//  Created by Thomas on 7/1/13.
//

#import "Crossing.h"
#import "CubicCurve.h"
#import "FloatMath.h"
#import "ICubicCurve.h"
#import "IOSFloatArray.h"
#import "Lines.h"
#import "java/lang/Math.h"
#import "CubicCurves.h"

@implementation PythagorasFCubicCurves

+ (float)flatnessSqWithFloat:(float)x1
                   withFloat:(float)y1
                   withFloat:(float)ctrlx1
                   withFloat:(float)ctrly1
                   withFloat:(float)ctrlx2
                   withFloat:(float)ctrly2
                   withFloat:(float)x2
                   withFloat:(float)y2 {
  return [JavaLangMath maxWithFloat:[PythagorasFLines pointSegDistSqWithFloat:ctrlx1 withFloat:ctrly1 withFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2] withFloat:[PythagorasFLines pointSegDistSqWithFloat:ctrlx2 withFloat:ctrly2 withFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2]];
}

+ (float)flatnessSqWithJavaLangFloatArray:(IOSFloatArray *)coords
                                  withInt:(int)offset {
  return [PythagorasFCubicCurves flatnessSqWithFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 0] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 1] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 2] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 3] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 4] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 5] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 6] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 7]];
}

+ (float)flatnessWithFloat:(float)x1
                 withFloat:(float)y1
                 withFloat:(float)ctrlx1
                 withFloat:(float)ctrly1
                 withFloat:(float)ctrlx2
                 withFloat:(float)ctrly2
                 withFloat:(float)x2
                 withFloat:(float)y2 {
  return [PythagorasFFloatMath sqrtWithFloat:[PythagorasFCubicCurves flatnessSqWithFloat:x1 withFloat:y1 withFloat:ctrlx1 withFloat:ctrly1 withFloat:ctrlx2 withFloat:ctrly2 withFloat:x2 withFloat:y2]];
}

+ (float)flatnessWithJavaLangFloatArray:(IOSFloatArray *)coords
                                withInt:(int)offset {
  return [PythagorasFCubicCurves flatnessWithFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 0] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 1] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 2] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 3] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 4] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 5] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 6] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 7]];
}

+ (void)subdivideWithPythagorasFICubicCurve:(id<PythagorasFICubicCurve>)src
                  withPythagorasFCubicCurve:(PythagorasFCubicCurve *)left
                  withPythagorasFCubicCurve:(PythagorasFCubicCurve *)right {
  float x1 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) x1], y1 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) y1];
  float cx1 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) ctrlX1], cy1 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) ctrlY1];
  float cx2 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) ctrlX2], cy2 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) ctrlY2];
  float x2 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) x2], y2 = [((id<PythagorasFICubicCurve>) NIL_CHK(src)) y2];
  float cx = (cx1 + cx2) / 2.0f, cy = (cy1 + cy2) / 2.0f;
  cx1 = (x1 + cx1) / 2.0f;
  cy1 = (y1 + cy1) / 2.0f;
  cx2 = (x2 + cx2) / 2.0f;
  cy2 = (y2 + cy2) / 2.0f;
  float ax = (cx1 + cx) / 2.0f, ay = (cy1 + cy) / 2.0f;
  float bx = (cx2 + cx) / 2.0f, by = (cy2 + cy) / 2.0f;
  cx = (ax + bx) / 2.0f;
  cy = (ay + by) / 2.0f;
  if (left != nil) {
    [left setCurveWithFloat:x1 withFloat:y1 withFloat:cx1 withFloat:cy1 withFloat:ax withFloat:ay withFloat:cx withFloat:cy];
  }
  if (right != nil) {
    [right setCurveWithFloat:cx withFloat:cy withFloat:bx withFloat:by withFloat:cx2 withFloat:cy2 withFloat:x2 withFloat:y2];
  }
}

+ (void)subdivideWithJavaLangFloatArray:(IOSFloatArray *)src
                                withInt:(int)srcOff
                 withJavaLangFloatArray:(IOSFloatArray *)left
                                withInt:(int)leftOff
                 withJavaLangFloatArray:(IOSFloatArray *)right
                                withInt:(int)rightOff {
  float x1 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 0], y1 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 1];
  float cx1 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 2], cy1 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 3];
  float cx2 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 4], cy2 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 5];
  float x2 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 6], y2 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcOff + 7];
  float cx = (cx1 + cx2) / 2.0f, cy = (cy1 + cy2) / 2.0f;
  cx1 = (x1 + cx1) / 2.0f;
  cy1 = (y1 + cy1) / 2.0f;
  cx2 = (x2 + cx2) / 2.0f;
  cy2 = (y2 + cy2) / 2.0f;
  float ax = (cx1 + cx) / 2.0f, ay = (cy1 + cy) / 2.0f;
  float bx = (cx2 + cx) / 2.0f, by = (cy2 + cy) / 2.0f;
  cx = (ax + bx) / 2.0f;
  cy = (ay + by) / 2.0f;
  if (left != nil) {
    [left replaceFloatAtIndex:leftOff + 0 withFloat:x1];
    [left replaceFloatAtIndex:leftOff + 1 withFloat:y1];
    [left replaceFloatAtIndex:leftOff + 2 withFloat:cx1];
    [left replaceFloatAtIndex:leftOff + 3 withFloat:cy1];
    [left replaceFloatAtIndex:leftOff + 4 withFloat:ax];
    [left replaceFloatAtIndex:leftOff + 5 withFloat:ay];
    [left replaceFloatAtIndex:leftOff + 6 withFloat:cx];
    [left replaceFloatAtIndex:leftOff + 7 withFloat:cy];
  }
  if (right != nil) {
    [right replaceFloatAtIndex:rightOff + 0 withFloat:cx];
    [right replaceFloatAtIndex:rightOff + 1 withFloat:cy];
    [right replaceFloatAtIndex:rightOff + 2 withFloat:bx];
    [right replaceFloatAtIndex:rightOff + 3 withFloat:by];
    [right replaceFloatAtIndex:rightOff + 4 withFloat:cx2];
    [right replaceFloatAtIndex:rightOff + 5 withFloat:cy2];
    [right replaceFloatAtIndex:rightOff + 6 withFloat:x2];
    [right replaceFloatAtIndex:rightOff + 7 withFloat:y2];
  }
}

+ (int)solveCubicWithJavaLangFloatArray:(IOSFloatArray *)eqn {
  return [PythagorasFCubicCurves solveCubicWithJavaLangFloatArray:eqn withJavaLangFloatArray:eqn];
}

+ (int)solveCubicWithJavaLangFloatArray:(IOSFloatArray *)eqn
                 withJavaLangFloatArray:(IOSFloatArray *)res {
  return [PythagorasFCrossing solveCubicWithJavaLangFloatArray:eqn withJavaLangFloatArray:res];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end

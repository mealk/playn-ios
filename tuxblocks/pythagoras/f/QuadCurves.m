//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/QuadCurves.java
//
//  Created by Thomas on 7/1/13.
//

#import "Crossing.h"
#import "IOSFloatArray.h"
#import "IQuadCurve.h"
#import "Lines.h"
#import "QuadCurve.h"
#import "QuadCurves.h"

@implementation PythagorasFQuadCurves

+ (float)flatnessSqWithFloat:(float)x1
                   withFloat:(float)y1
                   withFloat:(float)ctrlx
                   withFloat:(float)ctrly
                   withFloat:(float)x2
                   withFloat:(float)y2 {
  return [PythagorasFLines pointSegDistSqWithFloat:ctrlx withFloat:ctrly withFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2];
}

+ (float)flatnessSqWithJavaLangFloatArray:(IOSFloatArray *)coords
                                  withInt:(int)offset {
  return [PythagorasFLines pointSegDistSqWithFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 2] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 3] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 0] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 1] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 4] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 5]];
}

+ (float)flatnessWithFloat:(float)x1
                 withFloat:(float)y1
                 withFloat:(float)ctrlx
                 withFloat:(float)ctrly
                 withFloat:(float)x2
                 withFloat:(float)y2 {
  return [PythagorasFLines pointSegDistWithFloat:ctrlx withFloat:ctrly withFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2];
}

+ (float)flatnessWithJavaLangFloatArray:(IOSFloatArray *)coords
                                withInt:(int)offset {
  return [PythagorasFLines pointSegDistWithFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 2] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 3] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 0] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 1] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 4] withFloat:[((IOSFloatArray *) NIL_CHK(coords)) floatAtIndex:offset + 5]];
}

+ (void)subdivideWithPythagorasFIQuadCurve:(id<PythagorasFIQuadCurve>)src
                  withPythagorasFQuadCurve:(PythagorasFQuadCurve *)left
                  withPythagorasFQuadCurve:(PythagorasFQuadCurve *)right {
  float x1 = [((id<PythagorasFIQuadCurve>) NIL_CHK(src)) x1];
  float y1 = [((id<PythagorasFIQuadCurve>) NIL_CHK(src)) y1];
  float cx = [((id<PythagorasFIQuadCurve>) NIL_CHK(src)) ctrlX];
  float cy = [((id<PythagorasFIQuadCurve>) NIL_CHK(src)) ctrlY];
  float x2 = [((id<PythagorasFIQuadCurve>) NIL_CHK(src)) x2];
  float y2 = [((id<PythagorasFIQuadCurve>) NIL_CHK(src)) y2];
  float cx1 = (x1 + cx) / 2.0f;
  float cy1 = (y1 + cy) / 2.0f;
  float cx2 = (x2 + cx) / 2.0f;
  float cy2 = (y2 + cy) / 2.0f;
  cx = (cx1 + cx2) / 2.0f;
  cy = (cy1 + cy2) / 2.0f;
  if (left != nil) {
    [left setCurveWithFloat:x1 withFloat:y1 withFloat:cx1 withFloat:cy1 withFloat:cx withFloat:cy];
  }
  if (right != nil) {
    [right setCurveWithFloat:cx withFloat:cy withFloat:cx2 withFloat:cy2 withFloat:x2 withFloat:y2];
  }
}

+ (void)subdivideWithJavaLangFloatArray:(IOSFloatArray *)src
                                withInt:(int)srcoff
                 withJavaLangFloatArray:(IOSFloatArray *)left
                                withInt:(int)leftOff
                 withJavaLangFloatArray:(IOSFloatArray *)right
                                withInt:(int)rightOff {
  float x1 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcoff + 0];
  float y1 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcoff + 1];
  float cx = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcoff + 2];
  float cy = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcoff + 3];
  float x2 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcoff + 4];
  float y2 = [((IOSFloatArray *) NIL_CHK(src)) floatAtIndex:srcoff + 5];
  float cx1 = (x1 + cx) / 2.0f;
  float cy1 = (y1 + cy) / 2.0f;
  float cx2 = (x2 + cx) / 2.0f;
  float cy2 = (y2 + cy) / 2.0f;
  cx = (cx1 + cx2) / 2.0f;
  cy = (cy1 + cy2) / 2.0f;
  if (left != nil) {
    [left replaceFloatAtIndex:leftOff + 0 withFloat:x1];
    [left replaceFloatAtIndex:leftOff + 1 withFloat:y1];
    [left replaceFloatAtIndex:leftOff + 2 withFloat:cx1];
    [left replaceFloatAtIndex:leftOff + 3 withFloat:cy1];
    [left replaceFloatAtIndex:leftOff + 4 withFloat:cx];
    [left replaceFloatAtIndex:leftOff + 5 withFloat:cy];
  }
  if (right != nil) {
    [right replaceFloatAtIndex:rightOff + 0 withFloat:cx];
    [right replaceFloatAtIndex:rightOff + 1 withFloat:cy];
    [right replaceFloatAtIndex:rightOff + 2 withFloat:cx2];
    [right replaceFloatAtIndex:rightOff + 3 withFloat:cy2];
    [right replaceFloatAtIndex:rightOff + 4 withFloat:x2];
    [right replaceFloatAtIndex:rightOff + 5 withFloat:y2];
  }
}

+ (int)solveQuadraticWithJavaLangFloatArray:(IOSFloatArray *)eqn {
  return [PythagorasFQuadCurves solveQuadraticWithJavaLangFloatArray:eqn withJavaLangFloatArray:eqn];
}

+ (int)solveQuadraticWithJavaLangFloatArray:(IOSFloatArray *)eqn
                     withJavaLangFloatArray:(IOSFloatArray *)res {
  return [PythagorasFCrossing solveQuadWithJavaLangFloatArray:eqn withJavaLangFloatArray:res];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Matrix4.java
//
//  Created by Thomas on 7/1/13.
//

#import "FloatMath.h"
#import "IMatrix3.h"
#import "IMatrix4.h"
#import "IOSFloatArray.h"
#import "IOSObjectArray.h"
#import "IPlane.h"
#import "IQuaternion.h"
#import "IVector3.h"
#import "IVector4.h"
#import "MathUtil.h"
#import "Matrix3.h"
#import "Platform.h"
#import "Quaternion.h"
#import "SingularMatrixException.h"
#import "Vector3.h"
#import "Vector4.h"
#import "java/lang/Math.h"
#import "java/nio/FloatBuffer.h"
#import "Matrix4.h"

@implementation PythagorasFMatrix4

static id<PythagorasFIMatrix4> PythagorasFMatrix4_IDENTITY_;
static IOSObjectArray * PythagorasFMatrix4_EMPTY_ARRAY_;

@synthesize m00_ = m00__;
@synthesize m10_ = m10__;
@synthesize m20_ = m20__;
@synthesize m30_ = m30__;
@synthesize m01_ = m01__;
@synthesize m11_ = m11__;
@synthesize m21_ = m21__;
@synthesize m31_ = m31__;
@synthesize m02_ = m02__;
@synthesize m12_ = m12__;
@synthesize m22_ = m22__;
@synthesize m32_ = m32__;
@synthesize m03_ = m03__;
@synthesize m13_ = m13__;
@synthesize m23_ = m23__;
@synthesize m33_ = m33__;

+ (id<PythagorasFIMatrix4>)IDENTITY {
  return PythagorasFMatrix4_IDENTITY_;
}

+ (IOSObjectArray *)EMPTY_ARRAY {
  return PythagorasFMatrix4_EMPTY_ARRAY_;
}

- (id)initWithFloat:(float)m00
          withFloat:(float)m10
          withFloat:(float)m20
          withFloat:(float)m30
          withFloat:(float)m01
          withFloat:(float)m11
          withFloat:(float)m21
          withFloat:(float)m31
          withFloat:(float)m02
          withFloat:(float)m12
          withFloat:(float)m22
          withFloat:(float)m32
          withFloat:(float)m03
          withFloat:(float)m13
          withFloat:(float)m23
          withFloat:(float)m33 {
  if ((self = [super init])) {
    (void) [self setWithFloat:m00 withFloat:m10 withFloat:m20 withFloat:m30 withFloat:m01 withFloat:m11 withFloat:m21 withFloat:m31 withFloat:m02 withFloat:m12 withFloat:m22 withFloat:m32 withFloat:m03 withFloat:m13 withFloat:m23 withFloat:m33];
  }
  return self;
}

- (id)initWithJavaLangFloatArray:(IOSFloatArray *)values {
  if ((self = [super init])) {
    (void) [self setWithJavaLangFloatArray:values];
  }
  return self;
}

- (id)initWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  if ((self = [super init])) {
    (void) [self setWithJavaNioFloatBuffer:buf];
  }
  return self;
}

- (id)initWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other {
  if ((self = [super init])) {
    (void) [self setWithPythagorasFIMatrix4:other];
  }
  return self;
}

- (id)init {
  if ((self = [super init])) {
    (void) [self setToIdentity];
  }
  return self;
}

- (PythagorasFMatrix4 *)setToIdentity {
  return [self setWithFloat:1.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToZero {
  return [self setWithFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f];
}

- (PythagorasFMatrix4 *)setToTransformWithPythagorasFIVector3:(id<PythagorasFIVector3>)translation
                                   withPythagorasFIQuaternion:(id<PythagorasFIQuaternion>)rotation {
  return [[self setToRotationWithPythagorasFIQuaternion:rotation] setTranslationWithPythagorasFIVector3:translation];
}

- (PythagorasFMatrix4 *)setToTransformWithPythagorasFIVector3:(id<PythagorasFIVector3>)translation
                                   withPythagorasFIQuaternion:(id<PythagorasFIQuaternion>)rotation
                                                    withFloat:(float)scale_ {
  return [[self setToRotationWithPythagorasFIQuaternion:rotation] setWithFloat:m00__ * scale_ withFloat:m10__ * scale_ withFloat:m20__ * scale_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) x] withFloat:m01__ * scale_ withFloat:m11__ * scale_ withFloat:m21__ * scale_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) y] withFloat:m02__ * scale_ withFloat:m12__ * scale_ withFloat:m22__ * scale_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) z] withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToTransformWithPythagorasFIVector3:(id<PythagorasFIVector3>)translation
                                   withPythagorasFIQuaternion:(id<PythagorasFIQuaternion>)rotation
                                      withPythagorasFIVector3:(id<PythagorasFIVector3>)scale_ {
  float sx = [((id<PythagorasFIVector3>) NIL_CHK(scale_)) x], sy = [((id<PythagorasFIVector3>) NIL_CHK(scale_)) y], sz = [((id<PythagorasFIVector3>) NIL_CHK(scale_)) z];
  return [[self setToRotationWithPythagorasFIQuaternion:rotation] setWithFloat:m00__ * sx withFloat:m10__ * sy withFloat:m20__ * sz withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) x] withFloat:m01__ * sx withFloat:m11__ * sy withFloat:m21__ * sz withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) y] withFloat:m02__ * sx withFloat:m12__ * sy withFloat:m22__ * sz withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) z] withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToTranslationWithPythagorasFIVector3:(id<PythagorasFIVector3>)translation {
  return [self setToTranslationWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) z]];
}

- (PythagorasFMatrix4 *)setToTranslationWithFloat:(float)x
                                        withFloat:(float)y
                                        withFloat:(float)z {
  return [self setWithFloat:1.0f withFloat:0.0f withFloat:0.0f withFloat:x withFloat:0.0f withFloat:1.0f withFloat:0.0f withFloat:y withFloat:0.0f withFloat:0.0f withFloat:1.0f withFloat:z withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setTranslationWithPythagorasFIVector3:(id<PythagorasFIVector3>)translation {
  return [self setTranslationWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(translation)) z]];
}

- (PythagorasFMatrix4 *)setTranslationWithFloat:(float)x
                                      withFloat:(float)y
                                      withFloat:(float)z {
  m30__ = x;
  m31__ = y;
  m32__ = z;
  return self;
}

- (PythagorasFMatrix4 *)setToRotationWithPythagorasFIVector3:(id<PythagorasFIVector3>)from
                                     withPythagorasFIVector3:(id<PythagorasFIVector3>)to {
  float angle = [((id<PythagorasFIVector3>) NIL_CHK(from)) angleWithPythagorasFIVector3:to];
  if (angle < PythagorasFMathUtil_EPSILON) {
    return [self setToIdentity];
  }
  if (angle <= PythagorasFFloatMath_PI - PythagorasFMathUtil_EPSILON) {
    return [self setToRotationWithFloat:angle withPythagorasFIVector3:[[((id<PythagorasFIVector3>) NIL_CHK(from)) crossWithPythagorasFIVector3:to] normalizeLocal]];
  }
  PythagorasFVector3 *axis = [[[PythagorasFVector3 alloc] initWithFloat:0.0f withFloat:[((id<PythagorasFIVector3>) NIL_CHK(from)) z] withFloat:-[((id<PythagorasFIVector3>) NIL_CHK(from)) y]] autorelease];
  float length = [((PythagorasFVector3 *) NIL_CHK(axis)) length];
  return [self setToRotationWithFloat:PythagorasFFloatMath_PI withPythagorasFIVector3:length < PythagorasFMathUtil_EPSILON ? [[((PythagorasFVector3 *) NIL_CHK(axis)) setWithFloat:-[((id<PythagorasFIVector3>) NIL_CHK(from)) z] withFloat:0.0f withFloat:[((id<PythagorasFIVector3>) NIL_CHK(from)) x]] normalizeLocal] : [((PythagorasFVector3 *) NIL_CHK(axis)) multLocalWithFloat:1.0f / length]];
}

- (PythagorasFMatrix4 *)setToRotationWithFloat:(float)angle
                       withPythagorasFIVector3:(id<PythagorasFIVector3>)axis {
  return [self setToRotationWithFloat:angle withFloat:[((id<PythagorasFIVector3>) NIL_CHK(axis)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(axis)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(axis)) z]];
}

- (PythagorasFMatrix4 *)setToRotationWithFloat:(float)angle
                                     withFloat:(float)x
                                     withFloat:(float)y
                                     withFloat:(float)z {
  float c = [PythagorasFFloatMath cosWithFloat:angle], s = [PythagorasFFloatMath sinWithFloat:angle], omc = 1.0f - c;
  float xs = x * s, ys = y * s, zs = z * s, xy = x * y, xz = x * z, yz = y * z;
  return [self setWithFloat:x * x * omc + c withFloat:xy * omc - zs withFloat:xz * omc + ys withFloat:0.0f withFloat:xy * omc + zs withFloat:y * y * omc + c withFloat:yz * omc - xs withFloat:0.0f withFloat:xz * omc - ys withFloat:yz * omc + xs withFloat:z * z * omc + c withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToRotationWithPythagorasFIQuaternion:(id<PythagorasFIQuaternion>)quat {
  float x = [((id<PythagorasFIQuaternion>) NIL_CHK(quat)) x], y = [((id<PythagorasFIQuaternion>) NIL_CHK(quat)) y], z = [((id<PythagorasFIQuaternion>) NIL_CHK(quat)) z], w = [((id<PythagorasFIQuaternion>) NIL_CHK(quat)) w];
  float xx = x * x, yy = y * y, zz = z * z;
  float xy = x * y, xz = x * z, xw = x * w;
  float yz = y * z, yw = y * w, zw = z * w;
  return [self setWithFloat:1.0f - 2.0f * (yy + zz) withFloat:2.0f * (xy - zw) withFloat:2.0f * (xz + yw) withFloat:0.0f withFloat:2.0f * (xy + zw) withFloat:1.0f - 2.0f * (xx + zz) withFloat:2.0f * (yz - xw) withFloat:0.0f withFloat:2.0f * (xz - yw) withFloat:2.0f * (yz + xw) withFloat:1.0f - 2.0f * (xx + yy) withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToRotationScaleWithPythagorasFIMatrix3:(id<PythagorasFIMatrix3>)rotScale {
  return [self setWithFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m00] withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m01] withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m02] withFloat:0.0f withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m10] withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m11] withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m12] withFloat:0.0f withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m20] withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m21] withFloat:[((id<PythagorasFIMatrix3>) NIL_CHK(rotScale)) m22] withFloat:0.0f withFloat:0 withFloat:0 withFloat:0 withFloat:1];
}

- (PythagorasFMatrix4 *)setToScaleWithPythagorasFIVector3:(id<PythagorasFIVector3>)scale_ {
  return [self setToScaleWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(scale_)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(scale_)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(scale_)) z]];
}

- (PythagorasFMatrix4 *)setToScaleWithFloat:(float)s {
  return [self setToScaleWithFloat:s withFloat:s withFloat:s];
}

- (PythagorasFMatrix4 *)setToScaleWithFloat:(float)x
                                  withFloat:(float)y
                                  withFloat:(float)z {
  return [self setWithFloat:x withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:y withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:z withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToReflectionWithPythagorasFIVector3:(id<PythagorasFIVector3>)normal {
  return [self setToReflectionWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) z]];
}

- (PythagorasFMatrix4 *)setToReflectionWithFloat:(float)x
                                       withFloat:(float)y
                                       withFloat:(float)z {
  float x2 = -2.0f * x, y2 = -2.0f * y, z2 = -2.0f * z;
  float xy2 = x2 * y, xz2 = x2 * z, yz2 = y2 * z;
  return [self setWithFloat:1.0f + x2 * x withFloat:xy2 withFloat:xz2 withFloat:0.0f withFloat:xy2 withFloat:1.0f + y2 * y withFloat:yz2 withFloat:0.0f withFloat:xz2 withFloat:yz2 withFloat:1.0f + z2 * z withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToReflectionWithPythagorasFIPlane:(id<PythagorasFIPlane>)plane {
  return [self setToReflectionWithPythagorasFIVector3:[((id<PythagorasFIPlane>) NIL_CHK(plane)) normal] withFloat:[((id<PythagorasFIPlane>) NIL_CHK(plane)) constant]];
}

- (PythagorasFMatrix4 *)setToReflectionWithPythagorasFIVector3:(id<PythagorasFIVector3>)normal
                                                     withFloat:(float)constant {
  return [self setToReflectionWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) z] withFloat:constant];
}

- (PythagorasFMatrix4 *)setToReflectionWithFloat:(float)x
                                       withFloat:(float)y
                                       withFloat:(float)z
                                       withFloat:(float)w {
  float x2 = -2.0f * x, y2 = -2.0f * y, z2 = -2.0f * z;
  float xy2 = x2 * y, xz2 = x2 * z, yz2 = y2 * z;
  float x2y2z2 = x * x + y * y + z * z;
  return [self setWithFloat:1.0f + x2 * x withFloat:xy2 withFloat:xz2 withFloat:x2 * w * x2y2z2 withFloat:xy2 withFloat:1.0f + y2 * y withFloat:yz2 withFloat:y2 * w * x2y2z2 withFloat:xz2 withFloat:yz2 withFloat:1.0f + z2 * z withFloat:z2 * w * x2y2z2 withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToSkewWithPythagorasFIPlane:(id<PythagorasFIPlane>)plane
                               withPythagorasFIVector3:(id<PythagorasFIVector3>)amount {
  return [self setToSkewWithPythagorasFIVector3:[((id<PythagorasFIPlane>) NIL_CHK(plane)) normal] withFloat:[((id<PythagorasFIPlane>) NIL_CHK(plane)) constant] withPythagorasFIVector3:amount];
}

- (PythagorasFMatrix4 *)setToSkewWithPythagorasFIVector3:(id<PythagorasFIVector3>)normal
                                               withFloat:(float)constant
                                 withPythagorasFIVector3:(id<PythagorasFIVector3>)amount {
  return [self setToSkewWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(normal)) z] withFloat:constant withFloat:[((id<PythagorasFIVector3>) NIL_CHK(amount)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(amount)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(amount)) z]];
}

- (PythagorasFMatrix4 *)setToSkewWithFloat:(float)a
                                 withFloat:(float)b
                                 withFloat:(float)c
                                 withFloat:(float)d
                                 withFloat:(float)x
                                 withFloat:(float)y
                                 withFloat:(float)z {
  return [self setWithFloat:1.0f + a * x withFloat:b * x withFloat:c * x withFloat:d * x withFloat:a * y withFloat:1.0f + b * y withFloat:c * y withFloat:d * y withFloat:a * z withFloat:b * z withFloat:1.0f + c * z withFloat:d * z withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setToPerspectiveWithFloat:(float)fovy
                                        withFloat:(float)aspect
                                        withFloat:(float)near
                                        withFloat:(float)far {
  float f = 1.0f / [PythagorasFFloatMath tanWithFloat:fovy / 2.0f], dscale = 1.0f / (near - far);
  return [self setWithFloat:f / aspect withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:(far + near) * dscale withFloat:2.0f * far * near * dscale withFloat:0.0f withFloat:0.0f withFloat:-1.0f withFloat:0.0f];
}

- (PythagorasFMatrix4 *)setToFrustumWithFloat:(float)left
                                    withFloat:(float)right
                                    withFloat:(float)bottom
                                    withFloat:(float)top
                                    withFloat:(float)near
                                    withFloat:(float)far {
  return [self setToFrustumWithFloat:left withFloat:right withFloat:bottom withFloat:top withFloat:near withFloat:far withPythagorasFIVector3:[PythagorasFVector3 UNIT_Z]];
}

- (PythagorasFMatrix4 *)setToFrustumWithFloat:(float)left
                                    withFloat:(float)right
                                    withFloat:(float)bottom
                                    withFloat:(float)top
                                    withFloat:(float)near
                                    withFloat:(float)far
                      withPythagorasFIVector3:(id<PythagorasFIVector3>)nearFarNormal {
  float rrl = 1.0f / (right - left);
  float rtb = 1.0f / (top - bottom);
  float rnf = 1.0f / (near - far);
  float n2 = 2.0f * near;
  float s = (far + near) / (near * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) z] - far * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) z]);
  return [self setWithFloat:n2 * rrl withFloat:0.0f withFloat:(right + left) * rrl withFloat:0.0f withFloat:0.0f withFloat:n2 * rtb withFloat:(top + bottom) * rtb withFloat:0.0f withFloat:s * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) x] withFloat:s * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) y] withFloat:(far + near) * rnf withFloat:n2 * far * rnf withFloat:0.0f withFloat:0.0f withFloat:-1.0f withFloat:0.0f];
}

- (PythagorasFMatrix4 *)setToOrthoWithFloat:(float)left
                                  withFloat:(float)right
                                  withFloat:(float)bottom
                                  withFloat:(float)top
                                  withFloat:(float)near
                                  withFloat:(float)far {
  return [self setToOrthoWithFloat:left withFloat:right withFloat:bottom withFloat:top withFloat:near withFloat:far withPythagorasFIVector3:[PythagorasFVector3 UNIT_Z]];
}

- (PythagorasFMatrix4 *)setToOrthoWithFloat:(float)left
                                  withFloat:(float)right
                                  withFloat:(float)bottom
                                  withFloat:(float)top
                                  withFloat:(float)near
                                  withFloat:(float)far
                    withPythagorasFIVector3:(id<PythagorasFIVector3>)nearFarNormal {
  float rlr = 1.0f / (left - right);
  float rbt = 1.0f / (bottom - top);
  float rnf = 1.0f / (near - far);
  float s = 2.0f / (near * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) z] - far * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) z]);
  return [self setWithFloat:-2.0f * rlr withFloat:0.0f withFloat:0.0f withFloat:(right + left) * rlr withFloat:0.0f withFloat:-2.0f * rbt withFloat:0.0f withFloat:(top + bottom) * rbt withFloat:s * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) x] withFloat:s * [((id<PythagorasFIVector3>) NIL_CHK(nearFarNormal)) y] withFloat:2.0f * rnf withFloat:(far + near) * rnf withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)setWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other {
  return [self setWithFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m00] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m10] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m20] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m30] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m01] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m11] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m21] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m31] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m02] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m12] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m22] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m32] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m03] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m13] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m23] withFloat:[((id<PythagorasFIMatrix4>) NIL_CHK(other)) m33]];
}

- (PythagorasFMatrix4 *)setWithJavaLangFloatArray:(IOSFloatArray *)values {
  return [self setWithFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:0] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:1] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:2] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:3] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:4] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:5] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:6] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:7] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:8] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:9] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:10] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:11] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:12] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:13] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:14] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:15]];
}

- (PythagorasFMatrix4 *)setWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  m00__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m01__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m02__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m03__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m10__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m11__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m12__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m13__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m20__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m21__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m22__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m23__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m30__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m31__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m32__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  m33__ = [((JavaNioFloatBuffer *) NIL_CHK(buf)) get];
  return self;
}

- (PythagorasFMatrix4 *)setWithFloat:(float)m00
                           withFloat:(float)m10
                           withFloat:(float)m20
                           withFloat:(float)m30
                           withFloat:(float)m01
                           withFloat:(float)m11
                           withFloat:(float)m21
                           withFloat:(float)m31
                           withFloat:(float)m02
                           withFloat:(float)m12
                           withFloat:(float)m22
                           withFloat:(float)m32
                           withFloat:(float)m03
                           withFloat:(float)m13
                           withFloat:(float)m23
                           withFloat:(float)m33 {
  self.m00_ = m00;
  self.m01_ = m01;
  self.m02_ = m02;
  self.m03_ = m03;
  self.m10_ = m10;
  self.m11_ = m11;
  self.m12_ = m12;
  self.m13_ = m13;
  self.m20_ = m20;
  self.m21_ = m21;
  self.m22_ = m22;
  self.m23_ = m23;
  self.m30_ = m30;
  self.m31_ = m31;
  self.m32_ = m32;
  self.m33_ = m33;
  return self;
}

- (PythagorasFMatrix4 *)transposeLocal {
  return [self transposeWithPythagorasFMatrix4:self];
}

- (PythagorasFMatrix4 *)multLocalWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other {
  return [self multWithPythagorasFIMatrix4:other withPythagorasFMatrix4:self];
}

- (PythagorasFMatrix4 *)multAffineLocalWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other {
  return [self multAffineWithPythagorasFIMatrix4:other withPythagorasFMatrix4:self];
}

- (PythagorasFMatrix4 *)invertLocal {
  return [self invertWithPythagorasFMatrix4:self];
}

- (PythagorasFMatrix4 *)invertAffineLocal {
  return [self invertAffineWithPythagorasFMatrix4:self];
}

- (PythagorasFMatrix4 *)lerpLocalWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                               withFloat:(float)t {
  return [self lerpWithPythagorasFIMatrix4:other withFloat:t withPythagorasFMatrix4:self];
}

- (PythagorasFMatrix4 *)lerpAffineLocalWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                                     withFloat:(float)t {
  return [self lerpAffineWithPythagorasFIMatrix4:other withFloat:t withPythagorasFMatrix4:self];
}

- (float)m00 {
  return m00__;
}

- (float)m10 {
  return m10__;
}

- (float)m20 {
  return m20__;
}

- (float)m30 {
  return m30__;
}

- (float)m01 {
  return m01__;
}

- (float)m11 {
  return m11__;
}

- (float)m21 {
  return m21__;
}

- (float)m31 {
  return m31__;
}

- (float)m02 {
  return m02__;
}

- (float)m12 {
  return m12__;
}

- (float)m22 {
  return m22__;
}

- (float)m32 {
  return m32__;
}

- (float)m03 {
  return m03__;
}

- (float)m13 {
  return m13__;
}

- (float)m23 {
  return m23__;
}

- (float)m33 {
  return m33__;
}

- (PythagorasFMatrix4 *)transpose {
  return [self transposeWithPythagorasFMatrix4:[[[PythagorasFMatrix4 alloc] init] autorelease]];
}

- (PythagorasFMatrix4 *)transposeWithPythagorasFMatrix4:(PythagorasFMatrix4 *)result {
  return [((PythagorasFMatrix4 *) NIL_CHK(result)) setWithFloat:m00__ withFloat:m01__ withFloat:m02__ withFloat:m03__ withFloat:m10__ withFloat:m11__ withFloat:m12__ withFloat:m13__ withFloat:m20__ withFloat:m21__ withFloat:m22__ withFloat:m23__ withFloat:m30__ withFloat:m31__ withFloat:m32__ withFloat:m33__];
}

- (PythagorasFMatrix4 *)multWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other {
  return [self multWithPythagorasFIMatrix4:other withPythagorasFMatrix4:[[[PythagorasFMatrix4 alloc] init] autorelease]];
}

- (PythagorasFMatrix4 *)multWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                             withPythagorasFMatrix4:(PythagorasFMatrix4 *)result {
  float m00 = self.m00_, m10 = self.m10_, m20 = self.m20_, m30 = self.m30_;
  float m01 = self.m01_, m11 = self.m11_, m21 = self.m21_, m31 = self.m31_;
  float m02 = self.m02_, m12 = self.m12_, m22 = self.m22_, m32 = self.m32_;
  float m03 = self.m03_, m13 = self.m13_, m23 = self.m23_, m33 = self.m33_;
  float om00 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m00], om10 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m10], om20 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m20], om30 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m30];
  float om01 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m01], om11 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m11], om21 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m21], om31 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m31];
  float om02 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m02], om12 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m12], om22 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m22], om32 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m32];
  float om03 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m03], om13 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m13], om23 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m23], om33 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m33];
  return [((PythagorasFMatrix4 *) NIL_CHK(result)) setWithFloat:m00 * om00 + m10 * om01 + m20 * om02 + m30 * om03 withFloat:m00 * om10 + m10 * om11 + m20 * om12 + m30 * om13 withFloat:m00 * om20 + m10 * om21 + m20 * om22 + m30 * om23 withFloat:m00 * om30 + m10 * om31 + m20 * om32 + m30 * om33 withFloat:m01 * om00 + m11 * om01 + m21 * om02 + m31 * om03 withFloat:m01 * om10 + m11 * om11 + m21 * om12 + m31 * om13 withFloat:m01 * om20 + m11 * om21 + m21 * om22 + m31 * om23 withFloat:m01 * om30 + m11 * om31 + m21 * om32 + m31 * om33 withFloat:m02 * om00 + m12 * om01 + m22 * om02 + m32 * om03 withFloat:m02 * om10 + m12 * om11 + m22 * om12 + m32 * om13 withFloat:m02 * om20 + m12 * om21 + m22 * om22 + m32 * om23 withFloat:m02 * om30 + m12 * om31 + m22 * om32 + m32 * om33 withFloat:m03 * om00 + m13 * om01 + m23 * om02 + m33 * om03 withFloat:m03 * om10 + m13 * om11 + m23 * om12 + m33 * om13 withFloat:m03 * om20 + m13 * om21 + m23 * om22 + m33 * om23 withFloat:m03 * om30 + m13 * om31 + m23 * om32 + m33 * om33];
}

- (BOOL)isAffine {
  return (m03__ == 0.0f && m13__ == 0.0f && m23__ == 0.0f && m33__ == 1.0f);
}

- (BOOL)isMirrored {
  return m00__ * (m11__ * m22__ - m12__ * m21__) + m01__ * (m12__ * m20__ - m10__ * m22__) + m02__ * (m10__ * m21__ - m11__ * m20__) < 0.0f;
}

- (PythagorasFMatrix4 *)multAffineWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other {
  return [self multAffineWithPythagorasFIMatrix4:other withPythagorasFMatrix4:[[[PythagorasFMatrix4 alloc] init] autorelease]];
}

- (PythagorasFMatrix4 *)multAffineWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                   withPythagorasFMatrix4:(PythagorasFMatrix4 *)result {
  float m00 = self.m00_, m10 = self.m10_, m20 = self.m20_, m30 = self.m30_;
  float m01 = self.m01_, m11 = self.m11_, m21 = self.m21_, m31 = self.m31_;
  float m02 = self.m02_, m12 = self.m12_, m22 = self.m22_, m32 = self.m32_;
  float om00 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m00], om10 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m10], om20 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m20], om30 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m30];
  float om01 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m01], om11 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m11], om21 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m21], om31 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m31];
  float om02 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m02], om12 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m12], om22 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m22], om32 = [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m32];
  return [((PythagorasFMatrix4 *) NIL_CHK(result)) setWithFloat:m00 * om00 + m10 * om01 + m20 * om02 withFloat:m00 * om10 + m10 * om11 + m20 * om12 withFloat:m00 * om20 + m10 * om21 + m20 * om22 withFloat:m00 * om30 + m10 * om31 + m20 * om32 + m30 withFloat:m01 * om00 + m11 * om01 + m21 * om02 withFloat:m01 * om10 + m11 * om11 + m21 * om12 withFloat:m01 * om20 + m11 * om21 + m21 * om22 withFloat:m01 * om30 + m11 * om31 + m21 * om32 + m31 withFloat:m02 * om00 + m12 * om01 + m22 * om02 withFloat:m02 * om10 + m12 * om11 + m22 * om12 withFloat:m02 * om20 + m12 * om21 + m22 * om22 withFloat:m02 * om30 + m12 * om31 + m22 * om32 + m32 withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)invert {
  return [self invertWithPythagorasFMatrix4:[[[PythagorasFMatrix4 alloc] init] autorelease]];
}

- (PythagorasFMatrix4 *)invertWithPythagorasFMatrix4:(PythagorasFMatrix4 *)result {
  float m00 = self.m00_, m10 = self.m10_, m20 = self.m20_, m30 = self.m30_;
  float m01 = self.m01_, m11 = self.m11_, m21 = self.m21_, m31 = self.m31_;
  float m02 = self.m02_, m12 = self.m12_, m22 = self.m22_, m32 = self.m32_;
  float m03 = self.m03_, m13 = self.m13_, m23 = self.m23_, m33 = self.m33_;
  float sd00 = m11 * (m22 * m33 - m23 * m32) + m21 * (m13 * m32 - m12 * m33) + m31 * (m12 * m23 - m13 * m22);
  float sd10 = m01 * (m22 * m33 - m23 * m32) + m21 * (m03 * m32 - m02 * m33) + m31 * (m02 * m23 - m03 * m22);
  float sd20 = m01 * (m12 * m33 - m13 * m32) + m11 * (m03 * m32 - m02 * m33) + m31 * (m02 * m13 - m03 * m12);
  float sd30 = m01 * (m12 * m23 - m13 * m22) + m11 * (m03 * m22 - m02 * m23) + m21 * (m02 * m13 - m03 * m12);
  float det = m00 * sd00 + m20 * sd20 - m10 * sd10 - m30 * sd30;
  if ([JavaLangMath absWithFloat:det] == 0.0f) {
    @throw [[[PythagorasUtilSingularMatrixException alloc] initWithNSString:[self description]] autorelease];
  }
  float rdet = 1.0f / det;
  return [((PythagorasFMatrix4 *) NIL_CHK(result)) setWithFloat:+sd00 * rdet withFloat:-(m10 * (m22 * m33 - m23 * m32) + m20 * (m13 * m32 - m12 * m33) + m30 * (m12 * m23 - m13 * m22)) * rdet withFloat:+(m10 * (m21 * m33 - m23 * m31) + m20 * (m13 * m31 - m11 * m33) + m30 * (m11 * m23 - m13 * m21)) * rdet withFloat:-(m10 * (m21 * m32 - m22 * m31) + m20 * (m12 * m31 - m11 * m32) + m30 * (m11 * m22 - m12 * m21)) * rdet withFloat:-sd10 * rdet withFloat:+(m00 * (m22 * m33 - m23 * m32) + m20 * (m03 * m32 - m02 * m33) + m30 * (m02 * m23 - m03 * m22)) * rdet withFloat:-(m00 * (m21 * m33 - m23 * m31) + m20 * (m03 * m31 - m01 * m33) + m30 * (m01 * m23 - m03 * m21)) * rdet withFloat:+(m00 * (m21 * m32 - m22 * m31) + m20 * (m02 * m31 - m01 * m32) + m30 * (m01 * m22 - m02 * m21)) * rdet withFloat:+sd20 * rdet withFloat:-(m00 * (m12 * m33 - m13 * m32) + m10 * (m03 * m32 - m02 * m33) + m30 * (m02 * m13 - m03 * m12)) * rdet withFloat:+(m00 * (m11 * m33 - m13 * m31) + m10 * (m03 * m31 - m01 * m33) + m30 * (m01 * m13 - m03 * m11)) * rdet withFloat:-(m00 * (m11 * m32 - m12 * m31) + m10 * (m02 * m31 - m01 * m32) + m30 * (m01 * m12 - m02 * m11)) * rdet withFloat:-sd30 * rdet withFloat:+(m00 * (m12 * m23 - m13 * m22) + m10 * (m03 * m22 - m02 * m23) + m20 * (m02 * m13 - m03 * m12)) * rdet withFloat:-(m00 * (m11 * m23 - m13 * m21) + m10 * (m03 * m21 - m01 * m23) + m20 * (m01 * m13 - m03 * m11)) * rdet withFloat:+(m00 * (m11 * m22 - m12 * m21) + m10 * (m02 * m21 - m01 * m22) + m20 * (m01 * m12 - m02 * m11)) * rdet];
}

- (PythagorasFMatrix4 *)invertAffine {
  return [self invertAffineWithPythagorasFMatrix4:[[[PythagorasFMatrix4 alloc] init] autorelease]];
}

- (PythagorasFMatrix4 *)invertAffineWithPythagorasFMatrix4:(PythagorasFMatrix4 *)result {
  float m00 = self.m00_, m10 = self.m10_, m20 = self.m20_, m30 = self.m30_;
  float m01 = self.m01_, m11 = self.m11_, m21 = self.m21_, m31 = self.m31_;
  float m02 = self.m02_, m12 = self.m12_, m22 = self.m22_, m32 = self.m32_;
  float sd00 = m11 * m22 - m21 * m12;
  float sd10 = m01 * m22 - m21 * m02;
  float sd20 = m01 * m12 - m11 * m02;
  float det = m00 * sd00 + m20 * sd20 - m10 * sd10;
  if ([JavaLangMath absWithFloat:det] == 0.0f) {
    @throw [[[PythagorasUtilSingularMatrixException alloc] initWithNSString:[self description]] autorelease];
  }
  float rdet = 1.0f / det;
  return [((PythagorasFMatrix4 *) NIL_CHK(result)) setWithFloat:+sd00 * rdet withFloat:-(m10 * m22 - m20 * m12) * rdet withFloat:+(m10 * m21 - m20 * m11) * rdet withFloat:-(m10 * (m21 * m32 - m22 * m31) + m20 * (m12 * m31 - m11 * m32) + m30 * sd00) * rdet withFloat:-sd10 * rdet withFloat:+(m00 * m22 - m20 * m02) * rdet withFloat:-(m00 * m21 - m20 * m01) * rdet withFloat:+(m00 * (m21 * m32 - m22 * m31) + m20 * (m02 * m31 - m01 * m32) + m30 * sd10) * rdet withFloat:+sd20 * rdet withFloat:-(m00 * m12 - m10 * m02) * rdet withFloat:+(m00 * m11 - m10 * m01) * rdet withFloat:-(m00 * (m11 * m32 - m12 * m31) + m10 * (m02 * m31 - m01 * m32) + m30 * sd20) * rdet withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (PythagorasFMatrix4 *)lerpWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                          withFloat:(float)t {
  return [self lerpWithPythagorasFIMatrix4:other withFloat:t withPythagorasFMatrix4:[[[PythagorasFMatrix4 alloc] init] autorelease]];
}

- (PythagorasFMatrix4 *)lerpWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                          withFloat:(float)t
                             withPythagorasFMatrix4:(PythagorasFMatrix4 *)result {
  float m00 = self.m00_, m10 = self.m10_, m20 = self.m20_, m30 = self.m30_;
  float m01 = self.m01_, m11 = self.m11_, m21 = self.m21_, m31 = self.m31_;
  float m02 = self.m02_, m12 = self.m12_, m22 = self.m22_, m32 = self.m32_;
  float m03 = self.m03_, m13 = self.m13_, m23 = self.m23_, m33 = self.m33_;
  return [((PythagorasFMatrix4 *) NIL_CHK(result)) setWithFloat:m00 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m00] - m00) withFloat:m10 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m10] - m10) withFloat:m20 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m20] - m20) withFloat:m30 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m30] - m30) withFloat:m01 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m01] - m01) withFloat:m11 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m11] - m11) withFloat:m21 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m21] - m21) withFloat:m31 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m31] - m31) withFloat:m02 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m02] - m02) withFloat:m12 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m12] - m12) withFloat:m22 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m22] - m22) withFloat:m32 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m32] - m32) withFloat:m03 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m03] - m03) withFloat:m13 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m13] - m13) withFloat:m23 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m23] - m23) withFloat:m33 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m33] - m33)];
}

- (PythagorasFMatrix4 *)lerpAffineWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                                withFloat:(float)t {
  return [self lerpAffineWithPythagorasFIMatrix4:other withFloat:t withPythagorasFMatrix4:[[[PythagorasFMatrix4 alloc] init] autorelease]];
}

- (PythagorasFMatrix4 *)lerpAffineWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                                withFloat:(float)t
                                   withPythagorasFMatrix4:(PythagorasFMatrix4 *)result {
  float m00 = self.m00_, m10 = self.m10_, m20 = self.m20_, m30 = self.m30_;
  float m01 = self.m01_, m11 = self.m11_, m21 = self.m21_, m31 = self.m31_;
  float m02 = self.m02_, m12 = self.m12_, m22 = self.m22_, m32 = self.m32_;
  return [((PythagorasFMatrix4 *) NIL_CHK(result)) setWithFloat:m00 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m00] - m00) withFloat:m10 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m10] - m10) withFloat:m20 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m20] - m20) withFloat:m30 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m30] - m30) withFloat:m01 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m01] - m01) withFloat:m11 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m11] - m11) withFloat:m21 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m21] - m21) withFloat:m31 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m31] - m31) withFloat:m02 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m02] - m02) withFloat:m12 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m12] - m12) withFloat:m22 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m22] - m22) withFloat:m32 + t * ([((id<PythagorasFIMatrix4>) NIL_CHK(other)) m32] - m32) withFloat:0.0f withFloat:0.0f withFloat:0.0f withFloat:1.0f];
}

- (JavaNioFloatBuffer *)getWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  (void) [[[[((JavaNioFloatBuffer *) NIL_CHK(buf)) putWithFloat:m00__] putWithFloat:m01__] putWithFloat:m02__] putWithFloat:m03__];
  (void) [[[[((JavaNioFloatBuffer *) NIL_CHK(buf)) putWithFloat:m10__] putWithFloat:m11__] putWithFloat:m12__] putWithFloat:m13__];
  (void) [[[[((JavaNioFloatBuffer *) NIL_CHK(buf)) putWithFloat:m20__] putWithFloat:m21__] putWithFloat:m22__] putWithFloat:m23__];
  (void) [[[[((JavaNioFloatBuffer *) NIL_CHK(buf)) putWithFloat:m30__] putWithFloat:m31__] putWithFloat:m32__] putWithFloat:m33__];
  return buf;
}

- (PythagorasFVector3 *)projectPointLocalWithPythagorasFVector3:(PythagorasFVector3 *)point {
  return [self projectPointWithPythagorasFIVector3:point withPythagorasFVector3:point];
}

- (PythagorasFVector3 *)projectPointWithPythagorasFIVector3:(id<PythagorasFIVector3>)point {
  return [self projectPointWithPythagorasFIVector3:point withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)projectPointWithPythagorasFIVector3:(id<PythagorasFIVector3>)point
                                     withPythagorasFVector3:(PythagorasFVector3 *)result {
  float px = [((id<PythagorasFIVector3>) NIL_CHK(point)) x], py = [((id<PythagorasFIVector3>) NIL_CHK(point)) y], pz = [((id<PythagorasFIVector3>) NIL_CHK(point)) z];
  float rw = 1.0f / (m03__ * px + m13__ * py + m23__ * pz + m33__);
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:(m00__ * px + m10__ * py + m20__ * pz + m30__) * rw withFloat:(m01__ * px + m11__ * py + m21__ * pz + m31__) * rw withFloat:(m02__ * px + m12__ * py + m22__ * pz + m32__) * rw];
}

- (PythagorasFVector3 *)transformPointLocalWithPythagorasFVector3:(PythagorasFVector3 *)point {
  return [self transformPointWithPythagorasFIVector3:point withPythagorasFVector3:point];
}

- (PythagorasFVector3 *)transformPointWithPythagorasFIVector3:(id<PythagorasFIVector3>)point {
  return [self transformPointWithPythagorasFIVector3:point withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)transformPointWithPythagorasFIVector3:(id<PythagorasFIVector3>)point
                                       withPythagorasFVector3:(PythagorasFVector3 *)result {
  float px = [((id<PythagorasFIVector3>) NIL_CHK(point)) x], py = [((id<PythagorasFIVector3>) NIL_CHK(point)) y], pz = [((id<PythagorasFIVector3>) NIL_CHK(point)) z];
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:m00__ * px + m10__ * py + m20__ * pz + m30__ withFloat:m01__ * px + m11__ * py + m21__ * pz + m31__ withFloat:m02__ * px + m12__ * py + m22__ * pz + m32__];
}

- (float)transformPointZWithPythagorasFIVector3:(id<PythagorasFIVector3>)point {
  return m02__ * [((id<PythagorasFIVector3>) NIL_CHK(point)) x] + m12__ * [((id<PythagorasFIVector3>) NIL_CHK(point)) y] + m22__ * [((id<PythagorasFIVector3>) NIL_CHK(point)) z] + m32__;
}

- (PythagorasFVector3 *)transformVectorLocalWithPythagorasFVector3:(PythagorasFVector3 *)vector {
  return [self transformVectorWithPythagorasFIVector3:vector withPythagorasFVector3:vector];
}

- (PythagorasFVector3 *)transformVectorWithPythagorasFIVector3:(id<PythagorasFIVector3>)vector {
  return [self transformVectorWithPythagorasFIVector3:vector withPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)transformVectorWithPythagorasFIVector3:(id<PythagorasFIVector3>)vector
                                        withPythagorasFVector3:(PythagorasFVector3 *)result {
  float vx = [((id<PythagorasFIVector3>) NIL_CHK(vector)) x], vy = [((id<PythagorasFIVector3>) NIL_CHK(vector)) y], vz = [((id<PythagorasFIVector3>) NIL_CHK(vector)) z];
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:m00__ * vx + m10__ * vy + m20__ * vz withFloat:m01__ * vx + m11__ * vy + m21__ * vz withFloat:m02__ * vx + m12__ * vy + m22__ * vz];
}

- (PythagorasFVector4 *)transformWithPythagorasFIVector4:(id<PythagorasFIVector4>)vector {
  return [self transformWithPythagorasFIVector4:vector withPythagorasFVector4:[[[PythagorasFVector4 alloc] init] autorelease]];
}

- (PythagorasFVector4 *)transformWithPythagorasFIVector4:(id<PythagorasFIVector4>)vector
                                  withPythagorasFVector4:(PythagorasFVector4 *)result {
  float vx = [((id<PythagorasFIVector4>) NIL_CHK(vector)) x], vy = [((id<PythagorasFIVector4>) NIL_CHK(vector)) y], vz = [((id<PythagorasFIVector4>) NIL_CHK(vector)) z], vw = [((id<PythagorasFIVector4>) NIL_CHK(vector)) w];
  return [((PythagorasFVector4 *) NIL_CHK(result)) setWithFloat:m00__ * vx + m10__ * vy + m20__ * vz + m30__ * vw withFloat:m01__ * vx + m11__ * vy + m21__ * vz + m31__ * vw withFloat:m02__ * vx + m12__ * vy + m22__ * vz + m32__ * vw withFloat:m03__ * vx + m13__ * vy + m23__ * vz + m33__ * vw];
}

- (PythagorasFQuaternion *)extractRotation {
  return [self extractRotationWithPythagorasFQuaternion:[[[PythagorasFQuaternion alloc] init] autorelease]];
}

- (PythagorasFQuaternion *)extractRotationWithPythagorasFQuaternion:(PythagorasFQuaternion *)result {
  float n00 = self.m00_, n10 = self.m10_, n20 = self.m20_;
  float n01 = self.m01_, n11 = self.m11_, n21 = self.m21_;
  float n02 = self.m02_, n12 = self.m12_, n22 = self.m22_;
  for (int ii = 0; ii < 10; ii++) {
    float o00 = n00, o10 = n10, o20 = n20;
    float o01 = n01, o11 = n11, o21 = n21;
    float o02 = n02, o12 = n12, o22 = n22;
    float sd00 = o11 * o22 - o21 * o12;
    float sd10 = o01 * o22 - o21 * o02;
    float sd20 = o01 * o12 - o11 * o02;
    float det = o00 * sd00 + o20 * sd20 - o10 * sd10;
    if ([JavaLangMath absWithFloat:det] == 0.0f) {
      @throw [[[PythagorasUtilSingularMatrixException alloc] initWithNSString:[self description]] autorelease];
    }
    float hrdet = 0.5f / det;
    n00 = +sd00 * hrdet + o00 * 0.5f;
    n10 = -sd10 * hrdet + o10 * 0.5f;
    n20 = +sd20 * hrdet + o20 * 0.5f;
    n01 = -(o10 * o22 - o20 * o12) * hrdet + o01 * 0.5f;
    n11 = +(o00 * o22 - o20 * o02) * hrdet + o11 * 0.5f;
    n21 = -(o00 * o12 - o10 * o02) * hrdet + o21 * 0.5f;
    n02 = +(o10 * o21 - o20 * o11) * hrdet + o02 * 0.5f;
    n12 = -(o00 * o21 - o20 * o01) * hrdet + o12 * 0.5f;
    n22 = +(o00 * o11 - o10 * o01) * hrdet + o22 * 0.5f;
    float d00 = n00 - o00, d10 = n10 - o10, d20 = n20 - o20;
    float d01 = n01 - o01, d11 = n11 - o11, d21 = n21 - o21;
    float d02 = n02 - o02, d12 = n12 - o12, d22 = n22 - o22;
    if (d00 * d00 + d10 * d10 + d20 * d20 + d01 * d01 + d11 * d11 + d21 * d21 + d02 * d02 + d12 * d12 + d22 * d22 < PythagorasFMathUtil_EPSILON) {
      break;
    }
  }
  float x2 = [JavaLangMath absWithFloat:1.0f + n00 - n11 - n22];
  float y2 = [JavaLangMath absWithFloat:1.0f - n00 + n11 - n22];
  float z2 = [JavaLangMath absWithFloat:1.0f - n00 - n11 + n22];
  float w2 = [JavaLangMath absWithFloat:1.0f + n00 + n11 + n22];
  (void) [((PythagorasFQuaternion *) NIL_CHK(result)) setWithFloat:0.5f * [PythagorasFFloatMath sqrtWithFloat:x2] * (n12 >= n21 ? +1.0f : -1.0f) withFloat:0.5f * [PythagorasFFloatMath sqrtWithFloat:y2] * (n20 >= n02 ? +1.0f : -1.0f) withFloat:0.5f * [PythagorasFFloatMath sqrtWithFloat:z2] * (n01 >= n10 ? +1.0f : -1.0f) withFloat:0.5f * [PythagorasFFloatMath sqrtWithFloat:w2]];
  return result;
}

- (PythagorasFMatrix3 *)extractRotationScaleWithPythagorasFMatrix3:(PythagorasFMatrix3 *)result {
  return [((PythagorasFMatrix3 *) NIL_CHK(result)) setWithFloat:m00__ withFloat:m01__ withFloat:m02__ withFloat:m10__ withFloat:m11__ withFloat:m12__ withFloat:m20__ withFloat:m21__ withFloat:m22__];
}

- (PythagorasFVector3 *)extractScale {
  return [self extractScaleWithPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)extractScaleWithPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:[PythagorasFFloatMath sqrtWithFloat:m00__ * m00__ + m01__ * m01__ + m02__ * m02__] withFloat:[PythagorasFFloatMath sqrtWithFloat:m10__ * m10__ + m11__ * m11__ + m12__ * m12__] withFloat:[PythagorasFFloatMath sqrtWithFloat:m20__ * m20__ + m21__ * m21__ + m22__ * m22__]];
}

- (float)approximateUniformScale {
  return [PythagorasFFloatMath cbrtWithFloat:m00__ * (m11__ * m22__ - m12__ * m21__) + m01__ * (m12__ * m20__ - m10__ * m22__) + m02__ * (m10__ * m21__ - m11__ * m20__)];
}

- (BOOL)epsilonEqualsWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)other
                                   withFloat:(float)epsilon {
  return ([JavaLangMath absWithFloat:m00__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m00]] < epsilon && [JavaLangMath absWithFloat:m10__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m10]] < epsilon && [JavaLangMath absWithFloat:m20__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m20]] < epsilon && [JavaLangMath absWithFloat:m30__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m30]] < epsilon && [JavaLangMath absWithFloat:m01__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m01]] < epsilon && [JavaLangMath absWithFloat:m11__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m11]] < epsilon && [JavaLangMath absWithFloat:m21__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m21]] < epsilon && [JavaLangMath absWithFloat:m31__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m31]] < epsilon && [JavaLangMath absWithFloat:m02__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m02]] < epsilon && [JavaLangMath absWithFloat:m12__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m12]] < epsilon && [JavaLangMath absWithFloat:m22__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m22]] < epsilon && [JavaLangMath absWithFloat:m32__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m32]] < epsilon && [JavaLangMath absWithFloat:m03__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m03]] < epsilon && [JavaLangMath absWithFloat:m13__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m13]] < epsilon && [JavaLangMath absWithFloat:m23__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m23]] < epsilon && [JavaLangMath absWithFloat:m33__ - [((id<PythagorasFIMatrix4>) NIL_CHK(other)) m33]] < epsilon);
}

- (NSString *)description {
  return ([NSString stringWithFormat:@"[[%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f]]", m00__, m10__, m20__, m30__, m01__, m11__, m21__, m31__, m02__, m12__, m22__, m32__, m03__, m13__, m23__, m33__]);
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithFloat:m00__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m10__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m20__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m30__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m01__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m11__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m21__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m31__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m02__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m12__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m22__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m32__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m03__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m13__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m23__] ^ [PythagorasUtilPlatform hashCodeWithFloat:m33__];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[PythagorasFMatrix4 class]])) {
    return NO;
  }
  PythagorasFMatrix4 *omat = (PythagorasFMatrix4 *) other;
  return (m00__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m00_ && m10__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m10_ && m20__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m20_ && m30__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m30_ && m01__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m01_ && m11__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m11_ && m21__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m21_ && m31__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m31_ && m02__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m02_ && m12__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m12_ && m22__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m22_ && m32__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m32_ && m03__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m03_ && m13__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m13_ && m23__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m23_ && m33__ == ((PythagorasFMatrix4 *) NIL_CHK(omat)).m33_);
}

+ (void)initialize {
  if (self == [PythagorasFMatrix4 class]) {
    JreOperatorRetainedAssign(&PythagorasFMatrix4_IDENTITY_, self, [[[PythagorasFMatrix4 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFMatrix4_EMPTY_ARRAY_, self, [[[IOSObjectArray alloc] initWithLength:0 type:[IOSClass classWithClass:[PythagorasFMatrix4 class]]] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFMatrix4 *typedCopy = (PythagorasFMatrix4 *) copy;
  typedCopy.m00_ = m00__;
  typedCopy.m10_ = m10__;
  typedCopy.m20_ = m20__;
  typedCopy.m30_ = m30__;
  typedCopy.m01_ = m01__;
  typedCopy.m11_ = m11__;
  typedCopy.m21_ = m21__;
  typedCopy.m31_ = m31__;
  typedCopy.m02_ = m02__;
  typedCopy.m12_ = m12__;
  typedCopy.m22_ = m22__;
  typedCopy.m32_ = m32__;
  typedCopy.m03_ = m03__;
  typedCopy.m13_ = m13__;
  typedCopy.m23_ = m23__;
  typedCopy.m33_ = m33__;
}

@end

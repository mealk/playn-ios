//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Vector4.java
//
//  Created by Thomas on 7/1/13.
//

#import "IMatrix4.h"
#import "IOSFloatArray.h"
#import "IVector4.h"
#import "Platform.h"
#import "java/lang/Math.h"
#import "java/nio/FloatBuffer.h"
#import "Vector4.h"

@implementation PythagorasFVector4

@synthesize x_ = x__;
@synthesize y_ = y__;
@synthesize z_ = z__;
@synthesize w_ = w__;

- (id)initWithFloat:(float)x
          withFloat:(float)y
          withFloat:(float)z
          withFloat:(float)w {
  if ((self = [super init])) {
    (void) [self setWithFloat:x withFloat:y withFloat:z withFloat:w];
  }
  return self;
}

- (id)initWithJavaLangFloatArray:(IOSFloatArray *)values {
  if ((self = [super init])) {
    (void) [self setWithJavaLangFloatArray:values];
  }
  return self;
}

- (id)initWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  if ((self = [super init])) {
    (void) [self setWithJavaNioFloatBuffer:buf];
  }
  return self;
}

- (id)initWithPythagorasFIVector4:(id<PythagorasFIVector4>)other {
  if ((self = [super init])) {
    (void) [self setWithPythagorasFIVector4:other];
  }
  return self;
}

- (id)init {
  return [super init];
}

- (PythagorasFVector4 *)setWithPythagorasFIVector4:(id<PythagorasFIVector4>)other {
  return [self setWithFloat:[((id<PythagorasFIVector4>) NIL_CHK(other)) x] withFloat:[((id<PythagorasFIVector4>) NIL_CHK(other)) y] withFloat:[((id<PythagorasFIVector4>) NIL_CHK(other)) z] withFloat:[((id<PythagorasFIVector4>) NIL_CHK(other)) w]];
}

- (PythagorasFVector4 *)setWithJavaLangFloatArray:(IOSFloatArray *)values {
  return [self setWithFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:0] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:1] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:2] withFloat:[((IOSFloatArray *) NIL_CHK(values)) floatAtIndex:3]];
}

- (PythagorasFVector4 *)setWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  return [self setWithFloat:[((JavaNioFloatBuffer *) NIL_CHK(buf)) get] withFloat:[((JavaNioFloatBuffer *) NIL_CHK(buf)) get] withFloat:[((JavaNioFloatBuffer *) NIL_CHK(buf)) get] withFloat:[((JavaNioFloatBuffer *) NIL_CHK(buf)) get]];
}

- (PythagorasFVector4 *)setWithFloat:(float)x
                           withFloat:(float)y
                           withFloat:(float)z
                           withFloat:(float)w {
  self.x_ = x;
  self.y_ = y;
  self.z_ = z;
  self.w_ = w;
  return self;
}

- (PythagorasFVector4 *)negateLocal {
  return [self negateWithPythagorasFVector4:self];
}

- (PythagorasFVector4 *)absLocal {
  return [self absWithPythagorasFVector4:self];
}

- (PythagorasFVector4 *)multLocalWithFloat:(float)v {
  return [self multWithFloat:v withPythagorasFVector4:self];
}

- (PythagorasFVector4 *)multLocalWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)matrix {
  return [self multWithPythagorasFIMatrix4:matrix withPythagorasFVector4:self];
}

- (float)x {
  return x__;
}

- (float)y {
  return y__;
}

- (float)z {
  return z__;
}

- (float)w {
  return w__;
}

- (JavaNioFloatBuffer *)getWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  return [[[[((JavaNioFloatBuffer *) NIL_CHK(buf)) putWithFloat:x__] putWithFloat:y__] putWithFloat:z__] putWithFloat:w__];
}

- (BOOL)epsilonEqualsWithPythagorasFIVector4:(id<PythagorasFIVector4>)other
                                   withFloat:(float)epsilon {
  return ([JavaLangMath absWithFloat:x__ - [((id<PythagorasFIVector4>) NIL_CHK(other)) x]] < epsilon && [JavaLangMath absWithFloat:y__ - [((id<PythagorasFIVector4>) NIL_CHK(other)) y]] < epsilon && [JavaLangMath absWithFloat:z__ - [((id<PythagorasFIVector4>) NIL_CHK(other)) z]] < epsilon && [JavaLangMath absWithFloat:w__ - [((id<PythagorasFIVector4>) NIL_CHK(other)) w]] < epsilon);
}

- (PythagorasFVector4 *)negate {
  return [self negateWithPythagorasFVector4:[[[PythagorasFVector4 alloc] init] autorelease]];
}

- (PythagorasFVector4 *)negateWithPythagorasFVector4:(PythagorasFVector4 *)result {
  return [((PythagorasFVector4 *) NIL_CHK(result)) setWithFloat:-x__ withFloat:-y__ withFloat:-z__ withFloat:-w__];
}

- (PythagorasFVector4 *)abs {
  return [self absWithPythagorasFVector4:[[[PythagorasFVector4 alloc] init] autorelease]];
}

- (PythagorasFVector4 *)absWithPythagorasFVector4:(PythagorasFVector4 *)result {
  return [((PythagorasFVector4 *) NIL_CHK(result)) setWithFloat:[JavaLangMath absWithFloat:x__] withFloat:[JavaLangMath absWithFloat:y__] withFloat:[JavaLangMath absWithFloat:z__] withFloat:[JavaLangMath absWithFloat:w__]];
}

- (PythagorasFVector4 *)multWithFloat:(float)v {
  return [self multWithFloat:v withPythagorasFVector4:[[[PythagorasFVector4 alloc] init] autorelease]];
}

- (PythagorasFVector4 *)multWithFloat:(float)v
               withPythagorasFVector4:(PythagorasFVector4 *)result {
  return [((PythagorasFVector4 *) NIL_CHK(result)) setWithFloat:x__ * v withFloat:y__ * v withFloat:z__ * v withFloat:w__ * v];
}

- (PythagorasFVector4 *)multWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)matrix {
  return [self multWithPythagorasFIMatrix4:matrix withPythagorasFVector4:[[[PythagorasFVector4 alloc] init] autorelease]];
}

- (PythagorasFVector4 *)multWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)matrix
                             withPythagorasFVector4:(PythagorasFVector4 *)result {
  float m00 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m00], m10 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m10], m20 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m20], m30 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m30];
  float m01 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m01], m11 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m11], m21 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m21], m31 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m31];
  float m02 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m02], m12 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m12], m22 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m22], m32 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m32];
  float m03 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m03], m13 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m13], m23 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m23], m33 = [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m33];
  float vx = x__, vy = y__, vz = z__, vw = w__;
  return [((PythagorasFVector4 *) NIL_CHK(result)) setWithFloat:m00 * vx + m01 * vy + m02 * vz + m03 * vw withFloat:m10 * vx + m11 * vy + m12 * vz + m13 * vw withFloat:m20 * vx + m21 * vy + m22 * vz + m23 * vw withFloat:m30 * vx + m31 * vy + m32 * vz + m33 * vw];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[%f, %f, %f, %f]", x__, y__, z__, w__];
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithFloat:x__] ^ [PythagorasUtilPlatform hashCodeWithFloat:y__] ^ [PythagorasUtilPlatform hashCodeWithFloat:z__] ^ [PythagorasUtilPlatform hashCodeWithFloat:w__];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[PythagorasFVector4 class]])) {
    return NO;
  }
  PythagorasFVector4 *ovec = (PythagorasFVector4 *) other;
  return (x__ == ((PythagorasFVector4 *) NIL_CHK(ovec)).x_ && y__ == ((PythagorasFVector4 *) NIL_CHK(ovec)).y_ && z__ == ((PythagorasFVector4 *) NIL_CHK(ovec)).z_ && w__ == ((PythagorasFVector4 *) NIL_CHK(ovec)).w_);
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFVector4 *typedCopy = (PythagorasFVector4 *) copy;
  typedCopy.x_ = x__;
  typedCopy.y_ = y__;
  typedCopy.z_ = z__;
  typedCopy.w_ = w__;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/GeometryUtil.java
//
//  Created by Thomas on 7/1/13.
//

#import "Crossing.h"
#import "FloatMath.h"
#import "IOSFloatArray.h"
#import "java/lang/Math.h"
#import "GeometryUtil.h"

@implementation PythagorasFGeometryUtil

static float PythagorasFGeometryUtil_EPSILON_;

+ (float)EPSILON {
  return PythagorasFGeometryUtil_EPSILON_;
}

+ (int)intersectLinesWithParamsWithFloat:(float)x1
                               withFloat:(float)y1
                               withFloat:(float)x2
                               withFloat:(float)y2
                               withFloat:(float)x3
                               withFloat:(float)y3
                               withFloat:(float)x4
                               withFloat:(float)y4
                  withJavaLangFloatArray:(IOSFloatArray *)params {
  float dx = x4 - x3;
  float dy = y4 - y3;
  float d = dx * (y2 - y1) - dy * (x2 - x1);
  if ([JavaLangMath absWithFloat:d] < PythagorasFGeometryUtil_EPSILON_) {
    return 0;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:(-dx * (y1 - y3) + dy * (x1 - x3)) / d];
  if (dx != 0) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:([PythagorasFGeometryUtil lineWithFloat:[((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:0] withFloat:x1 withFloat:x2] - x3) / dx];
  }
  else if (dy != 0) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:([PythagorasFGeometryUtil lineWithFloat:[((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:0] withFloat:y1 withFloat:y2] - y3) / dy];
  }
  else {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.0f];
  }
  if ([((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:1] <= 1) {
    return 1;
  }
  return 0;
}

+ (int)intersectLinesWithFloat:(float)x1
                     withFloat:(float)y1
                     withFloat:(float)x2
                     withFloat:(float)y2
                     withFloat:(float)x3
                     withFloat:(float)y3
                     withFloat:(float)x4
                     withFloat:(float)y4
        withJavaLangFloatArray:(IOSFloatArray *)point {
  float A1 = -(y2 - y1);
  float B1 = (x2 - x1);
  float C1 = x1 * y2 - x2 * y1;
  float A2 = -(y4 - y3);
  float B2 = (x4 - x3);
  float C2 = x3 * y4 - x4 * y3;
  float coefParallel = A1 * B2 - A2 * B1;
  if (x3 == x4 && y3 == y4 && (A1 * x3 + B1 * y3 + C1 == 0) && (x3 >= [JavaLangMath minWithFloat:x1 withFloat:x2]) && (x3 <= [JavaLangMath maxWithFloat:x1 withFloat:x2]) && (y3 >= [JavaLangMath minWithFloat:y1 withFloat:y2]) && (y3 <= [JavaLangMath maxWithFloat:y1 withFloat:y2])) {
    return 1;
  }
  if ([JavaLangMath absWithFloat:coefParallel] < PythagorasFGeometryUtil_EPSILON_) {
    return 0;
  }
  [((IOSFloatArray *) NIL_CHK(point)) replaceFloatAtIndex:0 withFloat:(B1 * C2 - B2 * C1) / coefParallel];
  [((IOSFloatArray *) NIL_CHK(point)) replaceFloatAtIndex:1 withFloat:(A2 * C1 - A1 * C2) / coefParallel];
  if ([((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:0] >= [JavaLangMath minWithFloat:x1 withFloat:x2] && [((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:0] >= [JavaLangMath minWithFloat:x3 withFloat:x4] && [((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:0] <= [JavaLangMath maxWithFloat:x1 withFloat:x2] && [((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:0] <= [JavaLangMath maxWithFloat:x3 withFloat:x4] && [((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:1] >= [JavaLangMath minWithFloat:y1 withFloat:y2] && [((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:1] >= [JavaLangMath minWithFloat:y3 withFloat:y4] && [((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:1] <= [JavaLangMath maxWithFloat:y1 withFloat:y2] && [((IOSFloatArray *) NIL_CHK(point)) floatAtIndex:1] <= [JavaLangMath maxWithFloat:y3 withFloat:y4]) {
    return 1;
  }
  return 0;
}

+ (int)intersectLineAndQuadWithFloat:(float)x1
                           withFloat:(float)y1
                           withFloat:(float)x2
                           withFloat:(float)y2
                           withFloat:(float)qx1
                           withFloat:(float)qy1
                           withFloat:(float)qx2
                           withFloat:(float)qy2
                           withFloat:(float)qx3
                           withFloat:(float)qy3
              withJavaLangFloatArray:(IOSFloatArray *)params {
  IOSFloatArray *eqn = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *t = [[[IOSFloatArray alloc] initWithLength:2] autorelease];
  IOSFloatArray *s = [[[IOSFloatArray alloc] initWithLength:2] autorelease];
  float dy = y2 - y1;
  float dx = x2 - x1;
  int quantity = 0;
  int count = 0;
  [((IOSFloatArray *) NIL_CHK(eqn)) replaceFloatAtIndex:0 withFloat:dy * (qx1 - x1) - dx * (qy1 - y1)];
  [((IOSFloatArray *) NIL_CHK(eqn)) replaceFloatAtIndex:1 withFloat:2 * dy * (qx2 - qx1) - 2 * dx * (qy2 - qy1)];
  [((IOSFloatArray *) NIL_CHK(eqn)) replaceFloatAtIndex:2 withFloat:dy * (qx1 - 2 * qx2 + qx3) - dx * (qy1 - 2 * qy2 + qy3)];
  if ((count = [PythagorasFCrossing solveQuadWithJavaLangFloatArray:eqn withJavaLangFloatArray:t]) == 0) {
    return 0;
  }
  for (int i = 0; i < count; i++) {
    if (dx != 0) {
      [((IOSFloatArray *) NIL_CHK(s)) replaceFloatAtIndex:i withFloat:([PythagorasFGeometryUtil quadWithFloat:[((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] withFloat:qx1 withFloat:qx2 withFloat:qx3] - x1) / dx];
    }
    else if (dy != 0) {
      [((IOSFloatArray *) NIL_CHK(s)) replaceFloatAtIndex:i withFloat:([PythagorasFGeometryUtil quadWithFloat:[((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] withFloat:qy1 withFloat:qy2 withFloat:qy3] - y1) / dy];
    }
    else {
      [((IOSFloatArray *) NIL_CHK(s)) replaceFloatAtIndex:i withFloat:0.0f];
    }
    if ([((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] >= 0 && [((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] <= 1 && [((IOSFloatArray *) NIL_CHK(s)) floatAtIndex:i] >= 0 && [((IOSFloatArray *) NIL_CHK(s)) floatAtIndex:i] <= 1) {
      [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i]];
      [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(s)) floatAtIndex:i]];
      ++quantity;
    }
  }
  return quantity;
}

+ (int)intersectLineAndCubicWithFloat:(float)x1
                            withFloat:(float)y1
                            withFloat:(float)x2
                            withFloat:(float)y2
                            withFloat:(float)cx1
                            withFloat:(float)cy1
                            withFloat:(float)cx2
                            withFloat:(float)cy2
                            withFloat:(float)cx3
                            withFloat:(float)cy3
                            withFloat:(float)cx4
                            withFloat:(float)cy4
               withJavaLangFloatArray:(IOSFloatArray *)params {
  IOSFloatArray *eqn = [[[IOSFloatArray alloc] initWithLength:4] autorelease];
  IOSFloatArray *t = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *s = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  float dy = y2 - y1;
  float dx = x2 - x1;
  int quantity = 0;
  int count = 0;
  [((IOSFloatArray *) NIL_CHK(eqn)) replaceFloatAtIndex:0 withFloat:(cy1 - y1) * dx + (x1 - cx1) * dy];
  [((IOSFloatArray *) NIL_CHK(eqn)) replaceFloatAtIndex:1 withFloat:-3 * (cy1 - cy2) * dx + 3 * (cx1 - cx2) * dy];
  [((IOSFloatArray *) NIL_CHK(eqn)) replaceFloatAtIndex:2 withFloat:(3 * cy1 - 6 * cy2 + 3 * cy3) * dx - (3 * cx1 - 6 * cx2 + 3 * cx3) * dy];
  [((IOSFloatArray *) NIL_CHK(eqn)) replaceFloatAtIndex:3 withFloat:(-3 * cy1 + 3 * cy2 - 3 * cy3 + cy4) * dx + (3 * cx1 - 3 * cx2 + 3 * cx3 - cx4) * dy];
  if ((count = [PythagorasFCrossing solveCubicWithJavaLangFloatArray:eqn withJavaLangFloatArray:t]) == 0) {
    return 0;
  }
  for (int i = 0; i < count; i++) {
    if (dx != 0) {
      [((IOSFloatArray *) NIL_CHK(s)) replaceFloatAtIndex:i withFloat:([PythagorasFGeometryUtil cubicWithFloat:[((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] withFloat:cx1 withFloat:cx2 withFloat:cx3 withFloat:cx4] - x1) / dx];
    }
    else if (dy != 0) {
      [((IOSFloatArray *) NIL_CHK(s)) replaceFloatAtIndex:i withFloat:([PythagorasFGeometryUtil cubicWithFloat:[((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] withFloat:cy1 withFloat:cy2 withFloat:cy3 withFloat:cy4] - y1) / dy];
    }
    else {
      [((IOSFloatArray *) NIL_CHK(s)) replaceFloatAtIndex:i withFloat:0.0f];
    }
    if ([((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] >= 0 && [((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i] <= 1 && [((IOSFloatArray *) NIL_CHK(s)) floatAtIndex:i] >= 0 && [((IOSFloatArray *) NIL_CHK(s)) floatAtIndex:i] <= 1) {
      [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(t)) floatAtIndex:i]];
      [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(s)) floatAtIndex:i]];
      ++quantity;
    }
  }
  return quantity;
}

+ (int)intersectQuadsWithFloat:(float)x1
                     withFloat:(float)y1
                     withFloat:(float)x2
                     withFloat:(float)y2
                     withFloat:(float)x3
                     withFloat:(float)y3
                     withFloat:(float)qx1
                     withFloat:(float)qy1
                     withFloat:(float)qx2
                     withFloat:(float)qy2
                     withFloat:(float)qx3
                     withFloat:(float)qy3
        withJavaLangFloatArray:(IOSFloatArray *)params {
  IOSFloatArray *initParams = [[[IOSFloatArray alloc] initWithLength:2] autorelease];
  IOSFloatArray *xCoefs1 = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *yCoefs1 = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *xCoefs2 = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *yCoefs2 = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  int quantity = 0;
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:0 withFloat:x1 - 2 * x2 + x3];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:1 withFloat:-2 * x1 + 2 * x2];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:2 withFloat:x1];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:0 withFloat:y1 - 2 * y2 + y3];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:1 withFloat:-2 * y1 + 2 * y2];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:2 withFloat:y1];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:0 withFloat:qx1 - 2 * qx2 + qx3];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:1 withFloat:-2 * qx1 + 2 * qx2];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:2 withFloat:qx1];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:0 withFloat:qy1 - 2 * qy2 + qy3];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:1 withFloat:-2 * qy1 + 2 * qy2];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:2 withFloat:qy1];
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.25f]];
  [PythagorasFGeometryUtil quadNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:initParams];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.75f]];
  [PythagorasFGeometryUtil quadNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:params];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  return quantity;
}

+ (int)intersectQuadAndCubicWithFloat:(float)qx1
                            withFloat:(float)qy1
                            withFloat:(float)qx2
                            withFloat:(float)qy2
                            withFloat:(float)qx3
                            withFloat:(float)qy3
                            withFloat:(float)cx1
                            withFloat:(float)cy1
                            withFloat:(float)cx2
                            withFloat:(float)cy2
                            withFloat:(float)cx3
                            withFloat:(float)cy3
                            withFloat:(float)cx4
                            withFloat:(float)cy4
               withJavaLangFloatArray:(IOSFloatArray *)params {
  int quantity = 0;
  IOSFloatArray *initParams = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *xCoefs1 = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *yCoefs1 = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *xCoefs2 = [[[IOSFloatArray alloc] initWithLength:4] autorelease];
  IOSFloatArray *yCoefs2 = [[[IOSFloatArray alloc] initWithLength:4] autorelease];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:0 withFloat:qx1 - 2 * qx2 + qx3];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:1 withFloat:2 * qx2 - 2 * qx1];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:2 withFloat:qx1];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:0 withFloat:qy1 - 2 * qy2 + qy3];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:1 withFloat:2 * qy2 - 2 * qy1];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:2 withFloat:qy1];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:0 withFloat:-cx1 + 3 * cx2 - 3 * cx3 + cx4];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:1 withFloat:3 * cx1 - 6 * cx2 + 3 * cx3];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:2 withFloat:-3 * cx1 + 3 * cx2];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:3 withFloat:cx1];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:0 withFloat:-cy1 + 3 * cy2 - 3 * cy3 + cy4];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:1 withFloat:3 * cy1 - 6 * cy2 + 3 * cy3];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:2 withFloat:-3 * cy1 + 3 * cy2];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:3 withFloat:cy1];
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.25f]];
  [PythagorasFGeometryUtil quadAndCubicNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:initParams];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.5f]];
  [PythagorasFGeometryUtil quadAndCubicNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:params];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.75f]];
  [PythagorasFGeometryUtil quadAndCubicNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:params];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  return quantity;
}

+ (int)intersectCubicsWithFloat:(float)x1
                      withFloat:(float)y1
                      withFloat:(float)x2
                      withFloat:(float)y2
                      withFloat:(float)x3
                      withFloat:(float)y3
                      withFloat:(float)x4
                      withFloat:(float)y4
                      withFloat:(float)cx1
                      withFloat:(float)cy1
                      withFloat:(float)cx2
                      withFloat:(float)cy2
                      withFloat:(float)cx3
                      withFloat:(float)cy3
                      withFloat:(float)cx4
                      withFloat:(float)cy4
         withJavaLangFloatArray:(IOSFloatArray *)params {
  int quantity = 0;
  IOSFloatArray *initParams = [[[IOSFloatArray alloc] initWithLength:3] autorelease];
  IOSFloatArray *xCoefs1 = [[[IOSFloatArray alloc] initWithLength:4] autorelease];
  IOSFloatArray *yCoefs1 = [[[IOSFloatArray alloc] initWithLength:4] autorelease];
  IOSFloatArray *xCoefs2 = [[[IOSFloatArray alloc] initWithLength:4] autorelease];
  IOSFloatArray *yCoefs2 = [[[IOSFloatArray alloc] initWithLength:4] autorelease];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:0 withFloat:-x1 + 3 * x2 - 3 * x3 + x4];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:1 withFloat:3 * x1 - 6 * x2 + 3 * x3];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:2 withFloat:-3 * x1 + 3 * x2];
  [((IOSFloatArray *) NIL_CHK(xCoefs1)) replaceFloatAtIndex:3 withFloat:x1];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:0 withFloat:-y1 + 3 * y2 - 3 * y3 + y4];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:1 withFloat:3 * y1 - 6 * y2 + 3 * y3];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:2 withFloat:-3 * y1 + 3 * y2];
  [((IOSFloatArray *) NIL_CHK(yCoefs1)) replaceFloatAtIndex:3 withFloat:y1];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:0 withFloat:-cx1 + 3 * cx2 - 3 * cx3 + cx4];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:1 withFloat:3 * cx1 - 6 * cx2 + 3 * cx3];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:2 withFloat:-3 * cx1 + 3 * cx2];
  [((IOSFloatArray *) NIL_CHK(xCoefs2)) replaceFloatAtIndex:3 withFloat:cx1];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:0 withFloat:-cy1 + 3 * cy2 - 3 * cy3 + cy4];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:1 withFloat:3 * cy1 - 6 * cy2 + 3 * cy3];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:2 withFloat:-3 * cy1 + 3 * cy2];
  [((IOSFloatArray *) NIL_CHK(yCoefs2)) replaceFloatAtIndex:3 withFloat:cy1];
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.25f]];
  [PythagorasFGeometryUtil cubicNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:initParams];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.5f]];
  [PythagorasFGeometryUtil cubicNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:params];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:[((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:0.75f]];
  [PythagorasFGeometryUtil cubicNewtonWithJavaLangFloatArray:xCoefs1 withJavaLangFloatArray:yCoefs1 withJavaLangFloatArray:xCoefs2 withJavaLangFloatArray:yCoefs2 withJavaLangFloatArray:params];
  if ([((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] <= 1 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] >= 0 && [((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1] <= 1) {
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:0]];
    [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:2 * quantity + 1 withFloat:[((IOSFloatArray *) NIL_CHK(initParams)) floatAtIndex:1]];
    ++quantity;
  }
  return quantity;
}

+ (float)lineWithFloat:(float)t
             withFloat:(float)x1
             withFloat:(float)x2 {
  return x1 * (1.0f - t) + x2 * t;
}

+ (float)quadWithFloat:(float)t
             withFloat:(float)x1
             withFloat:(float)x2
             withFloat:(float)x3 {
  return x1 * (1.0f - t) * (1.0f - t) + 2.0f * x2 * t * (1.0f - t) + x3 * t * t;
}

+ (float)cubicWithFloat:(float)t
              withFloat:(float)x1
              withFloat:(float)x2
              withFloat:(float)x3
              withFloat:(float)x4 {
  return x1 * (1.0f - t) * (1.0f - t) * (1.0f - t) + 3.0f * x2 * (1.0f - t) * (1.0f - t) * t + 3.0f * x3 * (1.0f - t) * t * t + x4 * t * t * t;
}

+ (void)subQuadWithJavaLangFloatArray:(IOSFloatArray *)coef
                            withFloat:(float)t0
                             withBOOL:(BOOL)left {
  if (left) {
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:2 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:0] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:2]];
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:3 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:1] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:3]];
  }
  else {
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:2 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:2] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:4]];
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:3 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:3] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:5]];
  }
}

+ (void)subCubicWithJavaLangFloatArray:(IOSFloatArray *)coef
                             withFloat:(float)t0
                              withBOOL:(BOOL)left {
  if (left) {
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:2 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:0] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:2]];
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:3 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:1] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:3]];
  }
  else {
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:4 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:4] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:6]];
    [((IOSFloatArray *) NIL_CHK(coef)) replaceFloatAtIndex:5 withFloat:(1 - t0) * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:5] + t0 * [((IOSFloatArray *) NIL_CHK(coef)) floatAtIndex:7]];
  }
}

+ (void)cubicNewtonWithJavaLangFloatArray:(IOSFloatArray *)xCoefs1
                   withJavaLangFloatArray:(IOSFloatArray *)yCoefs1
                   withJavaLangFloatArray:(IOSFloatArray *)xCoefs2
                   withJavaLangFloatArray:(IOSFloatArray *)yCoefs2
                   withJavaLangFloatArray:(IOSFloatArray *)params {
  float t = 0.0f, s = 0.0f;
  float t1 = [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:0];
  float s1 = [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:1];
  float d, dt, ds;
  while ([JavaLangMath sqrtWithDouble:(t - t1) * (t - t1) + (s - s1) * (s - s1)] > PythagorasFGeometryUtil_EPSILON_) {
    d = -(3 * t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + 2 * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:2]) * (3 * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] + 2 * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2]) + (3 * t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + 2 * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2]) * (3 * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] + 2 * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2]);
    dt = (t * t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:2] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:3] - s * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:3]) * (-3 * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - 2 * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2]) + (t * t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:3] - s * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:3]) * (3 * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] + 2 * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2]);
    ds = (3 * t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + 2 * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:2]) * (t * t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:3] - s * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:3]) - (3 * t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + 2 * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2]) * (t * t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:2] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:3] - s * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:3]);
    t1 = t - dt / d;
    s1 = s - ds / d;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:t1];
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:s1];
}

+ (void)quadAndCubicNewtonWithJavaLangFloatArray:(IOSFloatArray *)xCoefs1
                          withJavaLangFloatArray:(IOSFloatArray *)yCoefs1
                          withJavaLangFloatArray:(IOSFloatArray *)xCoefs2
                          withJavaLangFloatArray:(IOSFloatArray *)yCoefs2
                          withJavaLangFloatArray:(IOSFloatArray *)params {
  float t = 0.0f, s = 0.0f;
  float t1 = [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:0];
  float s1 = [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:1];
  float d, dt, ds;
  while ([JavaLangMath sqrtWithDouble:(t - t1) * (t - t1) + (s - s1) * (s - s1)] > PythagorasFGeometryUtil_EPSILON_) {
    d = -(2 * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1]) * (3 * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] + 2 * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2]) + (2 * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1]) * (3 * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] + 2 * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2]);
    dt = (t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:2] + -s * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:3]) * (-3 * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - 2 * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2]) + (t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2] - s * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:3]) * (3 * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] + 2 * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2]);
    ds = (2 * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1]) * (t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2] - s * s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:3]) - (2 * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1]) * (t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:2] - s * s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] - s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] - s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2] - [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:3]);
    t1 = t - dt / d;
    s1 = s - ds / d;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:t1];
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:s1];
}

+ (void)quadNewtonWithJavaLangFloatArray:(IOSFloatArray *)xCoefs1
                  withJavaLangFloatArray:(IOSFloatArray *)yCoefs1
                  withJavaLangFloatArray:(IOSFloatArray *)xCoefs2
                  withJavaLangFloatArray:(IOSFloatArray *)yCoefs2
                  withJavaLangFloatArray:(IOSFloatArray *)params {
  float t = 0.0f, s = 0.0f;
  float t1 = [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:0];
  float s1 = [((IOSFloatArray *) NIL_CHK(params)) floatAtIndex:1];
  float d, dt, ds;
  while ([JavaLangMath sqrtWithDouble:(t - t1) * (t - t1) + (s - s1) * (s - s1)] > PythagorasFGeometryUtil_EPSILON_) {
    t = t1;
    s = s1;
    d = -(2 * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1]) * (2 * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1]) + (2 * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1]) * (2 * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1]);
    dt = -(t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] - s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] - s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] - [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2]) * (2 * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1]) + (2 * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1]) * (t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2] - s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2]);
    ds = (2 * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1]) * (t * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:2] - s * s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:0] - s * [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:1] - [((IOSFloatArray *) NIL_CHK(yCoefs2)) floatAtIndex:2]) - (2 * t * [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(yCoefs1)) floatAtIndex:1]) * (t * t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:0] + t * [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:1] + [((IOSFloatArray *) NIL_CHK(xCoefs1)) floatAtIndex:2] - s * s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:0] - s * [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:1] - [((IOSFloatArray *) NIL_CHK(xCoefs2)) floatAtIndex:2]);
    t1 = t - dt / d;
    s1 = s - ds / d;
  }
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:0 withFloat:t1];
  [((IOSFloatArray *) NIL_CHK(params)) replaceFloatAtIndex:1 withFloat:s1];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [PythagorasFGeometryUtil class]) {
    PythagorasFGeometryUtil_EPSILON_ = [PythagorasFFloatMath powWithFloat:10 withFloat:-14];
  }
}

- (void)dealloc {
  [super dealloc];
}

@end

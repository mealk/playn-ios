//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Ray2.java
//
//  Created by Thomas on 7/1/13.
//

#import "FloatMath.h"
#import "IRay2.h"
#import "IVector.h"
#import "MathUtil.h"
#import "Transform.h"
#import "Vector.h"
#import "java/lang/Float.h"
#import "java/lang/Math.h"
#import "Ray2.h"

@implementation PythagorasFRay2

- (PythagorasFVector *)origin_ {
  return origin__;
}
- (void)setOrigin_:(PythagorasFVector *)origin_ {
  JreOperatorRetainedAssign(&origin__, self, origin_);
}
@synthesize origin_ = origin__;
- (PythagorasFVector *)direction_ {
  return direction__;
}
- (void)setDirection_:(PythagorasFVector *)direction_ {
  JreOperatorRetainedAssign(&direction__, self, direction_);
}
@synthesize direction_ = direction__;

- (id)initWithPythagorasFVector:(PythagorasFVector *)origin
          withPythagorasFVector:(PythagorasFVector *)direction {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&origin__, self, [[[PythagorasFVector alloc] init] autorelease]);
    JreOperatorRetainedAssign(&direction__, self, [[[PythagorasFVector alloc] init] autorelease]);
    (void) [self setWithPythagorasFIVector:origin withPythagorasFIVector:direction];
  }
  return self;
}

- (id)initWithPythagorasFRay2:(PythagorasFRay2 *)other {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&origin__, self, [[[PythagorasFVector alloc] init] autorelease]);
    JreOperatorRetainedAssign(&direction__, self, [[[PythagorasFVector alloc] init] autorelease]);
    (void) [self setWithPythagorasFIRay2:other];
  }
  return self;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&origin__, self, [[[PythagorasFVector alloc] init] autorelease]);
    JreOperatorRetainedAssign(&direction__, self, [[[PythagorasFVector alloc] init] autorelease]);
  }
  return self;
}

- (PythagorasFRay2 *)setWithPythagorasFIRay2:(id<PythagorasFIRay2>)other {
  return [self setWithPythagorasFIVector:[((id<PythagorasFIRay2>) NIL_CHK(other)) origin] withPythagorasFIVector:[((id<PythagorasFIRay2>) NIL_CHK(other)) direction]];
}

- (PythagorasFRay2 *)setWithPythagorasFIVector:(id<PythagorasFIVector>)origin
                        withPythagorasFIVector:(id<PythagorasFIVector>)direction {
  (void) [((PythagorasFVector *) NIL_CHK(self.origin_)) setWithPythagorasFIVector:origin];
  (void) [((PythagorasFVector *) NIL_CHK(self.direction_)) setWithPythagorasFIVector:direction];
  return self;
}

- (PythagorasFRay2 *)transformLocalWithPythagorasFTransform:(id<PythagorasFTransform>)transform {
  return [self transformWithPythagorasFTransform:transform withPythagorasFRay2:self];
}

- (id<PythagorasFIVector>)origin {
  return origin__;
}

- (id<PythagorasFIVector>)direction {
  return direction__;
}

- (PythagorasFRay2 *)transformWithPythagorasFTransform:(id<PythagorasFTransform>)transform {
  return [self transformWithPythagorasFTransform:transform withPythagorasFRay2:[[[PythagorasFRay2 alloc] init] autorelease]];
}

- (PythagorasFRay2 *)transformWithPythagorasFTransform:(id<PythagorasFTransform>)transform
                                   withPythagorasFRay2:(PythagorasFRay2 *)result {
  (void) [((id<PythagorasFTransform>) NIL_CHK(transform)) transformPointWithPythagorasFIVector:origin__ withPythagorasFVector:((PythagorasFRay2 *) NIL_CHK(result)).origin_];
  (void) [[((id<PythagorasFTransform>) NIL_CHK(transform)) transformWithPythagorasFIVector:direction__ withPythagorasFVector:((PythagorasFRay2 *) NIL_CHK(result)).direction_] normalizeLocal];
  return result;
}

- (BOOL)intersectsWithPythagorasFIVector:(id<PythagorasFIVector>)pt {
  if ([JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(direction__)).x_] > [JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(direction__)).y_]) {
    float t = ([((id<PythagorasFIVector>) NIL_CHK(pt)) x] - ((PythagorasFVector *) NIL_CHK(origin__)).x_) / ((PythagorasFVector *) NIL_CHK(direction__)).x_;
    return t >= 0.0f && ((PythagorasFVector *) NIL_CHK(origin__)).y_ + t * ((PythagorasFVector *) NIL_CHK(direction__)).y_ == [((id<PythagorasFIVector>) NIL_CHK(pt)) y];
  }
  else {
    float t = ([((id<PythagorasFIVector>) NIL_CHK(pt)) y] - ((PythagorasFVector *) NIL_CHK(origin__)).y_) / ((PythagorasFVector *) NIL_CHK(direction__)).y_;
    return t >= 0.0f && ((PythagorasFVector *) NIL_CHK(origin__)).x_ + t * ((PythagorasFVector *) NIL_CHK(direction__)).x_ == [((id<PythagorasFIVector>) NIL_CHK(pt)) x];
  }
}

- (BOOL)getIntersectionWithPythagorasFIVector:(id<PythagorasFIVector>)start
                       withPythagorasFIVector:(id<PythagorasFIVector>)end
                        withPythagorasFVector:(PythagorasFVector *)result {
  float ax = ((PythagorasFVector *) NIL_CHK(origin__)).x_, ay = ((PythagorasFVector *) NIL_CHK(origin__)).y_;
  float bx = ((PythagorasFVector *) NIL_CHK(direction__)).x_, by = ((PythagorasFVector *) NIL_CHK(direction__)).y_;
  float cx = [((id<PythagorasFIVector>) NIL_CHK(start)) x], cy = [((id<PythagorasFIVector>) NIL_CHK(start)) y];
  float dx = [((id<PythagorasFIVector>) NIL_CHK(end)) x] - [((id<PythagorasFIVector>) NIL_CHK(start)) x], dy = [((id<PythagorasFIVector>) NIL_CHK(end)) y] - [((id<PythagorasFIVector>) NIL_CHK(start)) y];
  float divisor = bx * dy - by * dx;
  if ([JavaLangMath absWithFloat:divisor] < PythagorasFMathUtil_EPSILON) {
    float t = [JavaLangMath minWithFloat:[self getIntersectionWithPythagorasFIVector:start] withFloat:[self getIntersectionWithPythagorasFIVector:end]];
    BOOL isect = (t != JavaLangFloat_MAX_VALUE);
    if (isect) {
      (void) [((PythagorasFVector *) NIL_CHK(origin__)) addScaledWithPythagorasFIVector:direction__ withFloat:t withPythagorasFVector:result];
    }
    return isect;
  }
  float cxax = cx - ax, cyay = cy - ay;
  float s = (by * cxax - bx * cyay) / divisor;
  if (s < 0.0f || s > 1.0f) {
    return NO;
  }
  float t = (dy * cxax - dx * cyay) / divisor;
  BOOL isect = (t >= 0.0f);
  if (isect) {
    (void) [((PythagorasFVector *) NIL_CHK(origin__)) addScaledWithPythagorasFIVector:direction__ withFloat:t withPythagorasFVector:result];
  }
  return isect;
}

- (BOOL)getIntersectionWithPythagorasFIVector:(id<PythagorasFIVector>)start
                       withPythagorasFIVector:(id<PythagorasFIVector>)end
                                    withFloat:(float)radius
                        withPythagorasFVector:(PythagorasFVector *)result {
  float startx = [((id<PythagorasFIVector>) NIL_CHK(start)) x], starty = [((id<PythagorasFIVector>) NIL_CHK(start)) y];
  float a = starty - [((id<PythagorasFIVector>) NIL_CHK(end)) y], b = [((id<PythagorasFIVector>) NIL_CHK(end)) x] - startx;
  float len = [PythagorasFFloatMath hypotWithFloat:a withFloat:b];
  if (len < PythagorasFMathUtil_EPSILON) {
    return [self getIntersectionWithPythagorasFIVector:start withFloat:radius withPythagorasFVector:result];
  }
  float rlen = 1.0f / len;
  a *= rlen;
  b *= rlen;
  float c = -a * startx - b * starty;
  float dist = a * ((PythagorasFVector *) NIL_CHK(origin__)).x_ + b * ((PythagorasFVector *) NIL_CHK(origin__)).y_ + c;
  BOOL above = (dist > +radius), below = (dist < -radius);
  float x, y;
  if (above || below) {
    float divisor = a * ((PythagorasFVector *) NIL_CHK(direction__)).x_ + b * ((PythagorasFVector *) NIL_CHK(direction__)).y_;
    if ([JavaLangMath absWithFloat:divisor] < PythagorasFMathUtil_EPSILON) {
      return NO;
    }
    c += (above ? -radius : +radius);
    float t = (-a * ((PythagorasFVector *) NIL_CHK(origin__)).x_ - b * ((PythagorasFVector *) NIL_CHK(origin__)).y_ - c) / divisor;
    if (t < 0.0f) {
      return NO;
    }
    x = ((PythagorasFVector *) NIL_CHK(origin__)).x_ + t * ((PythagorasFVector *) NIL_CHK(direction__)).x_;
    y = ((PythagorasFVector *) NIL_CHK(origin__)).y_ + t * ((PythagorasFVector *) NIL_CHK(direction__)).y_;
  }
  else {
    x = ((PythagorasFVector *) NIL_CHK(origin__)).x_;
    y = ((PythagorasFVector *) NIL_CHK(origin__)).y_;
  }
  float tmp = a;
  a = b;
  b = -tmp;
  c = -a * startx - b * starty;
  dist = a * x + b * y + c;
  if (dist < 0.0f) {
    return [self getIntersectionWithPythagorasFIVector:start withFloat:radius withPythagorasFVector:result];
  }
  else if (dist > len) {
    return [self getIntersectionWithPythagorasFIVector:end withFloat:radius withPythagorasFVector:result];
  }
  else {
    (void) [((PythagorasFVector *) NIL_CHK(result)) setWithFloat:x withFloat:y];
    return YES;
  }
}

- (BOOL)getIntersectionWithPythagorasFIVector:(id<PythagorasFIVector>)center
                                    withFloat:(float)radius
                        withPythagorasFVector:(PythagorasFVector *)result {
  if ([((PythagorasFVector *) NIL_CHK(origin__)) distanceSqWithPythagorasFIVector:center] <= radius * radius) {
    (void) [((PythagorasFVector *) NIL_CHK(result)) setWithPythagorasFIVector:origin__];
    return YES;
  }
  float ax = ((PythagorasFVector *) NIL_CHK(origin__)).x_ - [((id<PythagorasFIVector>) NIL_CHK(center)) x], ay = ((PythagorasFVector *) NIL_CHK(origin__)).y_ - [((id<PythagorasFIVector>) NIL_CHK(center)) y];
  float b = 2.0f * (((PythagorasFVector *) NIL_CHK(direction__)).x_ * ax + ((PythagorasFVector *) NIL_CHK(direction__)).y_ * ay);
  float c = ax * ax + ay * ay - radius * radius;
  float radicand = b * b - 4.0f * c;
  if (radicand < 0.0f) {
    return NO;
  }
  float t = (-b - [PythagorasFFloatMath sqrtWithFloat:radicand]) * 0.5f;
  BOOL isect = (t >= 0.0f);
  if (isect) {
    (void) [((PythagorasFVector *) NIL_CHK(origin__)) addScaledWithPythagorasFIVector:direction__ withFloat:t withPythagorasFVector:result];
  }
  return isect;
}

- (PythagorasFVector *)getNearestPointWithPythagorasFIVector:(id<PythagorasFIVector>)point
                                       withPythagorasFVector:(PythagorasFVector *)result {
  if (result == nil) {
    result = [[[PythagorasFVector alloc] init] autorelease];
  }
  float r = [[((id<PythagorasFIVector>) NIL_CHK(point)) subtractWithPythagorasFIVector:origin__] dotWithPythagorasFIVector:direction__];
  (void) [((PythagorasFVector *) NIL_CHK(result)) setWithPythagorasFIVector:[((PythagorasFVector *) NIL_CHK(origin__)) addWithPythagorasFIVector:[((PythagorasFVector *) NIL_CHK(direction__)) scale__WithFloat:r]]];
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[origin=%@, direction=%@]", origin__, direction__];
}

- (float)getIntersectionWithPythagorasFIVector:(id<PythagorasFIVector>)pt {
  if ([JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(direction__)).x_] > [JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(direction__)).y_]) {
    float t = ([((id<PythagorasFIVector>) NIL_CHK(pt)) x] - ((PythagorasFVector *) NIL_CHK(origin__)).x_) / ((PythagorasFVector *) NIL_CHK(direction__)).x_;
    return (t >= 0.0f && ((PythagorasFVector *) NIL_CHK(origin__)).y_ + t * ((PythagorasFVector *) NIL_CHK(direction__)).y_ == [((id<PythagorasFIVector>) NIL_CHK(pt)) y]) ? t : JavaLangFloat_MAX_VALUE;
  }
  else {
    float t = ([((id<PythagorasFIVector>) NIL_CHK(pt)) y] - ((PythagorasFVector *) NIL_CHK(origin__)).y_) / ((PythagorasFVector *) NIL_CHK(direction__)).y_;
    return (t >= 0.0f && ((PythagorasFVector *) NIL_CHK(origin__)).x_ + t * ((PythagorasFVector *) NIL_CHK(direction__)).x_ == [((id<PythagorasFIVector>) NIL_CHK(pt)) x]) ? t : JavaLangFloat_MAX_VALUE;
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&direction__, self, nil);
  JreOperatorRetainedAssign(&origin__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFRay2 *typedCopy = (PythagorasFRay2 *) copy;
  typedCopy.origin_ = origin__;
  typedCopy.direction_ = direction__;
}

@end

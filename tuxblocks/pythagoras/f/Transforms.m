//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Transforms.java
//
//  Created by Thomas on 7/1/13.
//

#import "AffineTransform.h"
#import "IShape.h"
#import "Path.h"
#import "PathIterator.h"
#import "Transform.h"
#import "Transforms.h"

@implementation PythagorasFTransforms

+ (id<PythagorasFIShape>)createTransformedShapeWithPythagorasFTransform:(id<PythagorasFTransform>)t
                                                  withPythagorasFIShape:(id<PythagorasFIShape>)src {
  if (src == nil) {
    return nil;
  }
  if ([(id) src isKindOfClass:[PythagorasFPath class]]) {
    return [((PythagorasFPath *) src) createTransformedShapeWithPythagorasFTransform:t];
  }
  id<PythagorasFPathIterator> path = [((id<PythagorasFIShape>) NIL_CHK(src)) pathIteratorWithPythagorasFTransform:t];
  PythagorasFPath *dst = [[[PythagorasFPath alloc] initWithInt:[((id<PythagorasFPathIterator>) NIL_CHK(path)) windingRule]] autorelease];
  [((PythagorasFPath *) NIL_CHK(dst)) appendWithPythagorasFPathIterator:path withBOOL:NO];
  return dst;
}

+ (id)multiplyWithPythagorasFAffineTransform:(PythagorasFAffineTransform *)a
              withPythagorasFAffineTransform:(PythagorasFAffineTransform *)b
                                      withId:(id<PythagorasFTransform>)into {
  return ((id<PythagorasFTransform>) [PythagorasFTransforms multiplyWithFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m00 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m01 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m10 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m11 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).tx_ withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).ty_ withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m00 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m01 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m10 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m11 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).tx_ withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).ty_ withId:into]);
}

+ (id)multiplyWithPythagorasFAffineTransform:(PythagorasFAffineTransform *)a
                                   withFloat:(float)m00
                                   withFloat:(float)m01
                                   withFloat:(float)m10
                                   withFloat:(float)m11
                                   withFloat:(float)tx
                                   withFloat:(float)ty
                                      withId:(id<PythagorasFTransform>)into {
  return ((id<PythagorasFTransform>) [PythagorasFTransforms multiplyWithFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m00 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m01 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m10 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).m11 withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).tx_ withFloat:((PythagorasFAffineTransform *) NIL_CHK(a)).ty_ withFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty withId:into]);
}

+ (id)multiplyWithFloat:(float)m00
              withFloat:(float)m01
              withFloat:(float)m10
              withFloat:(float)m11
              withFloat:(float)tx
              withFloat:(float)ty
withPythagorasFAffineTransform:(PythagorasFAffineTransform *)b
                 withId:(id<PythagorasFTransform>)into {
  return ((id<PythagorasFTransform>) [PythagorasFTransforms multiplyWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m00 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m01 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m10 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).m11 withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).tx_ withFloat:((PythagorasFAffineTransform *) NIL_CHK(b)).ty_ withId:into]);
}

+ (id)multiplyWithFloat:(float)am00
              withFloat:(float)am01
              withFloat:(float)am10
              withFloat:(float)am11
              withFloat:(float)atx
              withFloat:(float)aty
              withFloat:(float)bm00
              withFloat:(float)bm01
              withFloat:(float)bm10
              withFloat:(float)bm11
              withFloat:(float)btx
              withFloat:(float)bty
                 withId:(id<PythagorasFTransform>)into {
  (void) [((id<PythagorasFTransform>) NIL_CHK(into)) setTransformWithFloat:am00 * bm00 + am10 * bm01 withFloat:am01 * bm00 + am11 * bm01 withFloat:am00 * bm10 + am10 * bm11 withFloat:am01 * bm10 + am11 * bm11 withFloat:am00 * btx + am10 * bty + atx withFloat:am01 * btx + am11 * bty + aty];
  return into;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end

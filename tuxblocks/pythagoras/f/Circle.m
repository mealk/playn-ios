//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Circle.java
//
//  Created by Thomas on 7/1/13.
//

#import "ICircle.h"
#import "IPoint.h"
#import "Circle.h"

@implementation PythagorasFCircle

@synthesize x_ = x__;
@synthesize y_ = y__;
@synthesize radius_ = radius__;

- (id)init {
  return [super init];
}

- (id)initPythagorasFCircleWithFloat:(float)x
                           withFloat:(float)y
                           withFloat:(float)radius {
  if ((self = [super init])) {
    (void) [self setWithFloat:x withFloat:y withFloat:radius];
  }
  return self;
}

- (id)initWithFloat:(float)x
          withFloat:(float)y
          withFloat:(float)radius {
  return [self initPythagorasFCircleWithFloat:x withFloat:y withFloat:radius];
}

- (id)initWithPythagorasFIPoint:(id<PythagorasFIPoint>)p
                      withFloat:(float)radius {
  return [self initPythagorasFCircleWithFloat:[((id<PythagorasFIPoint>) NIL_CHK(p)) x] withFloat:[((id<PythagorasFIPoint>) NIL_CHK(p)) y] withFloat:radius];
}

- (id)initWithPythagorasFICircle:(id<PythagorasFICircle>)c {
  return [self initPythagorasFCircleWithFloat:[((id<PythagorasFICircle>) NIL_CHK(c)) x] withFloat:[((id<PythagorasFICircle>) NIL_CHK(c)) y] withFloat:[((id<PythagorasFICircle>) NIL_CHK(c)) radius]];
}

- (PythagorasFCircle *)setWithPythagorasFICircle:(id<PythagorasFICircle>)c {
  return [self setWithFloat:[((id<PythagorasFICircle>) NIL_CHK(c)) x] withFloat:[((id<PythagorasFICircle>) NIL_CHK(c)) y] withFloat:[((id<PythagorasFICircle>) NIL_CHK(c)) radius]];
}

- (PythagorasFCircle *)setWithFloat:(float)x
                          withFloat:(float)y
                          withFloat:(float)radius {
  self.x_ = x;
  self.y_ = y;
  self.radius_ = radius;
  return self;
}

- (float)x {
  return x__;
}

- (float)y {
  return y__;
}

- (float)radius {
  return radius__;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFCircle *typedCopy = (PythagorasFCircle *) copy;
  typedCopy.x_ = x__;
  typedCopy.y_ = y__;
  typedCopy.radius_ = radius__;
}

@end

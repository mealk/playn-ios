//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Points.java
//
//  Created by Thomas on 7/1/13.
//

#import "FloatMath.h"
#import "IPoint.h"
#import "MathUtil.h"
#import "Point.h"
#import "java/lang/Math.h"
#import "Points.h"

@implementation PythagorasFPoints

static id<PythagorasFIPoint> PythagorasFPoints_ZERO_;

+ (id<PythagorasFIPoint>)ZERO {
  return PythagorasFPoints_ZERO_;
}

+ (float)distanceSqWithFloat:(float)x1
                   withFloat:(float)y1
                   withFloat:(float)x2
                   withFloat:(float)y2 {
  x2 -= x1;
  y2 -= y1;
  return x2 * x2 + y2 * y2;
}

+ (float)distanceWithFloat:(float)x1
                 withFloat:(float)y1
                 withFloat:(float)x2
                 withFloat:(float)y2 {
  return [PythagorasFFloatMath sqrtWithFloat:[PythagorasFPoints distanceSqWithFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2]];
}

+ (BOOL)epsilonEqualsWithPythagorasFIPoint:(id<PythagorasFIPoint>)p1
                     withPythagorasFIPoint:(id<PythagorasFIPoint>)p2 {
  return [PythagorasFPoints epsilonEqualsWithPythagorasFIPoint:p1 withPythagorasFIPoint:p2 withFloat:PythagorasFMathUtil_EPSILON];
}

+ (BOOL)epsilonEqualsWithPythagorasFIPoint:(id<PythagorasFIPoint>)p1
                     withPythagorasFIPoint:(id<PythagorasFIPoint>)p2
                                 withFloat:(float)epsilon {
  return [JavaLangMath absWithFloat:[((id<PythagorasFIPoint>) NIL_CHK(p1)) x] - [((id<PythagorasFIPoint>) NIL_CHK(p2)) x]] < epsilon && [JavaLangMath absWithFloat:[((id<PythagorasFIPoint>) NIL_CHK(p1)) y] - [((id<PythagorasFIPoint>) NIL_CHK(p2)) y]] < epsilon;
}

+ (PythagorasFPoint *)transformWithFloat:(float)x
                               withFloat:(float)y
                               withFloat:(float)sx
                               withFloat:(float)sy
                               withFloat:(float)rotation
                               withFloat:(float)tx
                               withFloat:(float)ty
                    withPythagorasFPoint:(PythagorasFPoint *)result {
  return [PythagorasFPoints transformWithFloat:x withFloat:y withFloat:sx withFloat:sy withFloat:[PythagorasFFloatMath sinWithFloat:rotation] withFloat:[PythagorasFFloatMath cosWithFloat:rotation] withFloat:tx withFloat:ty withPythagorasFPoint:result];
}

+ (PythagorasFPoint *)transformWithFloat:(float)x
                               withFloat:(float)y
                               withFloat:(float)sx
                               withFloat:(float)sy
                               withFloat:(float)sina
                               withFloat:(float)cosa
                               withFloat:(float)tx
                               withFloat:(float)ty
                    withPythagorasFPoint:(PythagorasFPoint *)result {
  return [((PythagorasFPoint *) NIL_CHK(result)) setWithFloat:(x * cosa - y * sina) * sx + tx withFloat:(x * sina + y * cosa) * sy + ty];
}

+ (PythagorasFPoint *)inverseTransformWithFloat:(float)x
                                      withFloat:(float)y
                                      withFloat:(float)sx
                                      withFloat:(float)sy
                                      withFloat:(float)rotation
                                      withFloat:(float)tx
                                      withFloat:(float)ty
                           withPythagorasFPoint:(PythagorasFPoint *)result {
  x -= tx;
  y -= ty;
  float sinnega = [PythagorasFFloatMath sinWithFloat:-rotation], cosnega = [PythagorasFFloatMath cosWithFloat:-rotation];
  float nx = (x * cosnega - y * sinnega);
  float ny = (x * sinnega + y * cosnega);
  return [((PythagorasFPoint *) NIL_CHK(result)) setWithFloat:nx / sx withFloat:ny / sy];
}

+ (NSString *)pointToStringWithFloat:(float)x
                           withFloat:(float)y {
  return [NSString stringWithFormat:@"%@%@", [PythagorasFMathUtil toStringWithFloat:x], [PythagorasFMathUtil toStringWithFloat:y]];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [PythagorasFPoints class]) {
    JreOperatorRetainedAssign(&PythagorasFPoints_ZERO_, self, [[[PythagorasFPoint alloc] initWithFloat:0.0f withFloat:0.0f] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

@end

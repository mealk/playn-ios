//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Box.java
//
//  Created by Thomas on 7/1/13.
//

#import "IBox.h"
#import "IMatrix4.h"
#import "IOSObjectArray.h"
#import "IRay3.h"
#import "IVector3.h"
#import "MathUtil.h"
#import "Vector3.h"
#import "java/lang/Float.h"
#import "java/lang/Math.h"
#import "Box.h"

@implementation PythagorasFBox

static PythagorasFBox * PythagorasFBox_UNIT_;
static PythagorasFBox * PythagorasFBox_ZERO_;
static PythagorasFBox * PythagorasFBox_EMPTY_;
static PythagorasFBox * PythagorasFBox_MAX_VALUE_;

- (PythagorasFVector3 *)_minExtent {
  return _minExtent_;
}
- (void)set_minExtent:(PythagorasFVector3 *)_minExtent {
  JreOperatorRetainedAssign(&_minExtent_, self, _minExtent);
}
@synthesize _minExtent = _minExtent_;
- (PythagorasFVector3 *)_maxExtent {
  return _maxExtent_;
}
- (void)set_maxExtent:(PythagorasFVector3 *)_maxExtent {
  JreOperatorRetainedAssign(&_maxExtent_, self, _maxExtent);
}
@synthesize _maxExtent = _maxExtent_;

+ (PythagorasFBox *)UNIT {
  return PythagorasFBox_UNIT_;
}

+ (PythagorasFBox *)ZERO {
  return PythagorasFBox_ZERO_;
}

+ (PythagorasFBox *)EMPTY {
  return PythagorasFBox_EMPTY_;
}

+ (PythagorasFBox *)MAX_VALUE {
  return PythagorasFBox_MAX_VALUE_;
}

- (id)initWithPythagorasFIVector3:(id<PythagorasFIVector3>)minExtent
          withPythagorasFIVector3:(id<PythagorasFIVector3>)maxExtent {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_minExtent_, self, [[[PythagorasFVector3 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_maxExtent_, self, [[[PythagorasFVector3 alloc] init] autorelease]);
    (void) [self setWithPythagorasFIVector3:minExtent withPythagorasFIVector3:maxExtent];
  }
  return self;
}

- (id)initWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_minExtent_, self, [[[PythagorasFVector3 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_maxExtent_, self, [[[PythagorasFVector3 alloc] init] autorelease]);
    (void) [self setWithPythagorasFIBox:other];
  }
  return self;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_minExtent_, self, [[[PythagorasFVector3 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_maxExtent_, self, [[[PythagorasFVector3 alloc] init] autorelease]);
    (void) [self setToEmpty];
  }
  return self;
}

- (PythagorasFBox *)setToEmpty {
  return [self setWithPythagorasFIVector3:[PythagorasFVector3 MAX_VALUE] withPythagorasFIVector3:[PythagorasFVector3 MIN_VALUE]];
}

- (PythagorasFBox *)setWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  return [self setWithPythagorasFIVector3:[((id<PythagorasFIBox>) NIL_CHK(other)) minimumExtent] withPythagorasFIVector3:[((id<PythagorasFIBox>) NIL_CHK(other)) maximumExtent]];
}

- (PythagorasFBox *)setWithPythagorasFIVector3:(id<PythagorasFIVector3>)minExtent
                       withPythagorasFIVector3:(id<PythagorasFIVector3>)maxExtent {
  (void) [((PythagorasFVector3 *) NIL_CHK(_minExtent_)) setWithPythagorasFIVector3:minExtent];
  (void) [((PythagorasFVector3 *) NIL_CHK(_maxExtent_)) setWithPythagorasFIVector3:maxExtent];
  return self;
}

- (PythagorasFBox *)fromPointsWithPythagorasFIVector3Array:(IOSObjectArray *)points {
  (void) [self setToEmpty];
  {
    IOSObjectArray *a__ = points;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id<PythagorasFIVector3> point = ((id<PythagorasFIVector3>) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      (void) [self addLocalWithPythagorasFIVector3:point];
    }
  }
  return self;
}

- (PythagorasFBox *)addLocalWithPythagorasFIVector3:(id<PythagorasFIVector3>)point {
  return [self addWithPythagorasFIVector3:point withPythagorasFBox:self];
}

- (PythagorasFBox *)addLocalWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  return [self addWithPythagorasFIBox:other withPythagorasFBox:self];
}

- (PythagorasFBox *)intersectLocalWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  return [self intersectWithPythagorasFIBox:other withPythagorasFBox:self];
}

- (PythagorasFBox *)projectLocalWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)matrix {
  return [self projectWithPythagorasFIMatrix4:matrix withPythagorasFBox:self];
}

- (PythagorasFBox *)expandLocalWithFloat:(float)x
                               withFloat:(float)y
                               withFloat:(float)z {
  return [self expandWithFloat:x withFloat:y withFloat:z withPythagorasFBox:self];
}

- (id<PythagorasFIVector3>)minimumExtent {
  return _minExtent_;
}

- (id<PythagorasFIVector3>)maximumExtent {
  return _maxExtent_;
}

- (PythagorasFVector3 *)center {
  return [self centerWithPythagorasFVector3:[[[PythagorasFVector3 alloc] init] autorelease]];
}

- (PythagorasFVector3 *)centerWithPythagorasFVector3:(PythagorasFVector3 *)result {
  return [[((PythagorasFVector3 *) NIL_CHK(_minExtent_)) addWithPythagorasFIVector3:_maxExtent_ withPythagorasFVector3:result] multLocalWithFloat:0.5f];
}

- (float)diagonalLength {
  return [((PythagorasFVector3 *) NIL_CHK(_minExtent_)) distanceWithPythagorasFIVector3:_maxExtent_];
}

- (float)longestEdge {
  return [JavaLangMath maxWithFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ - ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ - ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_] withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_ - ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_];
}

- (BOOL)isEmpty {
  return ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ > ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ || ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ > ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ || ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ > ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_;
}

- (PythagorasFBox *)addWithPythagorasFIVector3:(id<PythagorasFIVector3>)point {
  return [self addWithPythagorasFIVector3:point withPythagorasFBox:[[[PythagorasFBox alloc] init] autorelease]];
}

- (PythagorasFBox *)addWithPythagorasFIVector3:(id<PythagorasFIVector3>)point
                            withPythagorasFBox:(PythagorasFBox *)result {
  (void) [((PythagorasFVector3 *) NIL_CHK(result._minExtent)) setWithFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) x]] withFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) y]] withFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) z]]];
  (void) [((PythagorasFVector3 *) NIL_CHK(result._maxExtent)) setWithFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) x]] withFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) y]] withFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) z]]];
  return result;
}

- (PythagorasFBox *)addWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  return [self addWithPythagorasFIBox:other withPythagorasFBox:[[[PythagorasFBox alloc] init] autorelease]];
}

- (PythagorasFBox *)addWithPythagorasFIBox:(id<PythagorasFIBox>)other
                        withPythagorasFBox:(PythagorasFBox *)result {
  id<PythagorasFIVector3> omin = [((id<PythagorasFIBox>) NIL_CHK(other)) minimumExtent], omax = [((id<PythagorasFIBox>) NIL_CHK(other)) maximumExtent];
  (void) [((PythagorasFVector3 *) NIL_CHK(result._minExtent)) setWithFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omin)) x]] withFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omin)) y]] withFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omin)) z]]];
  (void) [((PythagorasFVector3 *) NIL_CHK(result._maxExtent)) setWithFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omax)) x]] withFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omax)) y]] withFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omax)) z]]];
  return result;
}

- (PythagorasFBox *)intersectWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  return [self intersectWithPythagorasFIBox:other withPythagorasFBox:[[[PythagorasFBox alloc] init] autorelease]];
}

- (PythagorasFBox *)intersectWithPythagorasFIBox:(id<PythagorasFIBox>)other
                              withPythagorasFBox:(PythagorasFBox *)result {
  id<PythagorasFIVector3> omin = [((id<PythagorasFIBox>) NIL_CHK(other)) minimumExtent], omax = [((id<PythagorasFIBox>) NIL_CHK(other)) maximumExtent];
  (void) [((PythagorasFVector3 *) NIL_CHK(result._minExtent)) setWithFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omin)) x]] withFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omin)) y]] withFloat:[JavaLangMath maxWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omin)) z]]];
  (void) [((PythagorasFVector3 *) NIL_CHK(result._maxExtent)) setWithFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omax)) x]] withFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omax)) y]] withFloat:[JavaLangMath minWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_ withFloat:[((id<PythagorasFIVector3>) NIL_CHK(omax)) z]]];
  return result;
}

- (PythagorasFBox *)projectWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)matrix {
  return [self projectWithPythagorasFIMatrix4:matrix withPythagorasFBox:[[[PythagorasFBox alloc] init] autorelease]];
}

- (PythagorasFBox *)projectWithPythagorasFIMatrix4:(id<PythagorasFIMatrix4>)matrix
                                withPythagorasFBox:(PythagorasFBox *)result {
  float minx = +JavaLangFloat_MAX_VALUE, miny = +JavaLangFloat_MAX_VALUE, minz = +JavaLangFloat_MAX_VALUE;
  float maxx = -JavaLangFloat_MAX_VALUE, maxy = -JavaLangFloat_MAX_VALUE, maxz = -JavaLangFloat_MAX_VALUE;
  for (int ii = 0; ii < 8; ii++) {
    float x = ((ii & (1 << 2)) == 0) ? ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ : ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_;
    float y = ((ii & (1 << 1)) == 0) ? ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ : ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_;
    float z = ((ii & (1 << 0)) == 0) ? ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ : ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_;
    float rw = 1.0f / ([((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m03] * x + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m13] * y + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m23] * z + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m33]);
    float px = ([((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m00] * x + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m10] * y + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m20] * z + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m30]) * rw;
    float py = ([((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m01] * x + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m11] * y + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m21] * z + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m31]) * rw;
    float pz = ([((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m02] * x + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m12] * y + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m22] * z + [((id<PythagorasFIMatrix4>) NIL_CHK(matrix)) m32]) * rw;
    minx = [JavaLangMath minWithFloat:minx withFloat:px];
    miny = [JavaLangMath minWithFloat:miny withFloat:py];
    minz = [JavaLangMath minWithFloat:minz withFloat:pz];
    maxx = [JavaLangMath maxWithFloat:maxx withFloat:px];
    maxy = [JavaLangMath maxWithFloat:maxy withFloat:py];
    maxz = [JavaLangMath maxWithFloat:maxz withFloat:pz];
  }
  (void) [((PythagorasFVector3 *) NIL_CHK(result._minExtent)) setWithFloat:minx withFloat:miny withFloat:minz];
  (void) [((PythagorasFVector3 *) NIL_CHK(result._maxExtent)) setWithFloat:maxx withFloat:maxy withFloat:maxz];
  return result;
}

- (PythagorasFBox *)expandWithFloat:(float)x
                          withFloat:(float)y
                          withFloat:(float)z {
  return [self expandWithFloat:x withFloat:y withFloat:z withPythagorasFBox:[[[PythagorasFBox alloc] init] autorelease]];
}

- (PythagorasFBox *)expandWithFloat:(float)x
                          withFloat:(float)y
                          withFloat:(float)z
                 withPythagorasFBox:(PythagorasFBox *)result {
  (void) [((PythagorasFVector3 *) NIL_CHK(result._minExtent)) setWithFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ - x withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ - y withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ - z];
  (void) [((PythagorasFVector3 *) NIL_CHK(result._maxExtent)) setWithFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ + x withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ + y withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_ + z];
  return result;
}

- (PythagorasFVector3 *)vertexWithInt:(int)code
               withPythagorasFVector3:(PythagorasFVector3 *)result {
  return [((PythagorasFVector3 *) NIL_CHK(result)) setWithFloat:((code & (1 << 2)) == 0) ? ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ : ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ withFloat:((code & (1 << 1)) == 0) ? ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ : ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ withFloat:((code & (1 << 0)) == 0) ? ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ : ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_];
}

- (BOOL)containsWithPythagorasFIVector3:(id<PythagorasFIVector3>)point {
  return [self containsWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) x] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) y] withFloat:[((id<PythagorasFIVector3>) NIL_CHK(point)) z]];
}

- (BOOL)containsWithFloat:(float)x
                withFloat:(float)y
                withFloat:(float)z {
  return (x >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ && x <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ && y >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ && y <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ && z >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ && z <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_);
}

- (float)extentDistanceWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  return [((id<PythagorasFIVector3>) [((id<PythagorasFIBox>) NIL_CHK(other)) minimumExtent]) manhattanDistanceWithPythagorasFIVector3:_minExtent_] + [((id<PythagorasFIVector3>) [((id<PythagorasFIBox>) NIL_CHK(other)) maximumExtent]) manhattanDistanceWithPythagorasFIVector3:_maxExtent_];
}

- (BOOL)containsWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  id<PythagorasFIVector3> omin = [((id<PythagorasFIBox>) NIL_CHK(other)) minimumExtent], omax = [((id<PythagorasFIBox>) NIL_CHK(other)) maximumExtent];
  return [((id<PythagorasFIVector3>) NIL_CHK(omin)) x] >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ && [((id<PythagorasFIVector3>) NIL_CHK(omax)) x] <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ && [((id<PythagorasFIVector3>) NIL_CHK(omin)) y] >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ && [((id<PythagorasFIVector3>) NIL_CHK(omax)) y] <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ && [((id<PythagorasFIVector3>) NIL_CHK(omin)) z] >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ && [((id<PythagorasFIVector3>) NIL_CHK(omax)) z] <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_;
}

- (BOOL)intersectsWithPythagorasFIBox:(id<PythagorasFIBox>)other {
  id<PythagorasFIVector3> omin = [((id<PythagorasFIBox>) NIL_CHK(other)) minimumExtent], omax = [((id<PythagorasFIBox>) NIL_CHK(other)) maximumExtent];
  return ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ >= [((id<PythagorasFIVector3>) NIL_CHK(omin)) x] && ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ <= [((id<PythagorasFIVector3>) NIL_CHK(omax)) x] && ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ >= [((id<PythagorasFIVector3>) NIL_CHK(omin)) y] && ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ <= [((id<PythagorasFIVector3>) NIL_CHK(omax)) y] && ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_ >= [((id<PythagorasFIVector3>) NIL_CHK(omin)) z] && ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ <= [((id<PythagorasFIVector3>) NIL_CHK(omax)) z];
}

- (BOOL)intersectsWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray {
  id<PythagorasFIVector3> dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  return [JavaLangMath absWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(dir)) x]] > PythagorasFMathUtil_EPSILON && ([self intersectsXWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_] || [self intersectsXWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_]) || [JavaLangMath absWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(dir)) y]] > PythagorasFMathUtil_EPSILON && ([self intersectsYWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_] || [self intersectsYWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_]) || [JavaLangMath absWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(dir)) z]] > PythagorasFMathUtil_EPSILON && ([self intersectsZWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_] || [self intersectsZWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_]);
}

- (BOOL)intersectionWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray
                  withPythagorasFVector3:(PythagorasFVector3 *)result {
  id<PythagorasFIVector3> origin = [((id<PythagorasFIRay3>) NIL_CHK(ray)) origin];
  if ([self containsWithPythagorasFIVector3:origin]) {
    (void) [((PythagorasFVector3 *) NIL_CHK(result)) setWithPythagorasFIVector3:origin];
    return YES;
  }
  id<PythagorasFIVector3> dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  float t = JavaLangFloat_MAX_VALUE;
  if ([JavaLangMath absWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(dir)) x]] > PythagorasFMathUtil_EPSILON) {
    t = [JavaLangMath minWithFloat:t withFloat:[self intersectionXWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_]];
    t = [JavaLangMath minWithFloat:t withFloat:[self intersectionXWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_]];
  }
  if ([JavaLangMath absWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(dir)) y]] > PythagorasFMathUtil_EPSILON) {
    t = [JavaLangMath minWithFloat:t withFloat:[self intersectionYWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_]];
    t = [JavaLangMath minWithFloat:t withFloat:[self intersectionYWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_]];
  }
  if ([JavaLangMath absWithFloat:[((id<PythagorasFIVector3>) NIL_CHK(dir)) z]] > PythagorasFMathUtil_EPSILON) {
    t = [JavaLangMath minWithFloat:t withFloat:[self intersectionZWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_]];
    t = [JavaLangMath minWithFloat:t withFloat:[self intersectionZWithPythagorasFIRay3:ray withFloat:((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_]];
  }
  if (t == JavaLangFloat_MAX_VALUE) {
    return NO;
  }
  (void) [((id<PythagorasFIVector3>) NIL_CHK(origin)) addScaledWithPythagorasFIVector3:dir withFloat:t withPythagorasFVector3:result];
  return YES;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[min=%@, max=%@]", _minExtent_, _maxExtent_];
}

- (NSUInteger)hash {
  return [((PythagorasFVector3 *) NIL_CHK(_minExtent_)) hash] + 31 * [((PythagorasFVector3 *) NIL_CHK(_maxExtent_)) hash];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[PythagorasFBox class]])) {
    return NO;
  }
  PythagorasFBox *obox = (PythagorasFBox *) other;
  return [((PythagorasFVector3 *) NIL_CHK(_minExtent_)) isEqual:((PythagorasFBox *) NIL_CHK(obox))._minExtent] && [((PythagorasFVector3 *) NIL_CHK(_maxExtent_)) isEqual:((PythagorasFBox *) NIL_CHK(obox))._maxExtent];
}

- (BOOL)intersectsXWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray
                              withFloat:(float)x {
  id<PythagorasFIVector3> origin = [((id<PythagorasFIRay3>) NIL_CHK(ray)) origin], dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  float t = (x - [((id<PythagorasFIVector3>) NIL_CHK(origin)) x]) / [((id<PythagorasFIVector3>) NIL_CHK(dir)) x];
  if (t < 0.0f) {
    return NO;
  }
  float iy = [((id<PythagorasFIVector3>) NIL_CHK(origin)) y] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) y], iz = [((id<PythagorasFIVector3>) NIL_CHK(origin)) z] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) z];
  return iy >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ && iy <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ && iz >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ && iz <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_;
}

- (BOOL)intersectsYWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray
                              withFloat:(float)y {
  id<PythagorasFIVector3> origin = [((id<PythagorasFIRay3>) NIL_CHK(ray)) origin], dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  float t = (y - [((id<PythagorasFIVector3>) NIL_CHK(origin)) y]) / [((id<PythagorasFIVector3>) NIL_CHK(dir)) y];
  if (t < 0.0f) {
    return NO;
  }
  float ix = [((id<PythagorasFIVector3>) NIL_CHK(origin)) x] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) x], iz = [((id<PythagorasFIVector3>) NIL_CHK(origin)) z] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) z];
  return ix >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ && ix <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ && iz >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ && iz <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_;
}

- (BOOL)intersectsZWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray
                              withFloat:(float)z {
  id<PythagorasFIVector3> origin = [((id<PythagorasFIRay3>) NIL_CHK(ray)) origin], dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  float t = (z - [((id<PythagorasFIVector3>) NIL_CHK(origin)) z]) / [((id<PythagorasFIVector3>) NIL_CHK(dir)) z];
  if (t < 0.0f) {
    return NO;
  }
  float ix = [((id<PythagorasFIVector3>) NIL_CHK(origin)) x] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) x], iy = [((id<PythagorasFIVector3>) NIL_CHK(origin)) y] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) y];
  return ix >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ && ix <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ && iy >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ && iy <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_;
}

- (float)intersectionXWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray
                                 withFloat:(float)x {
  id<PythagorasFIVector3> origin = [((id<PythagorasFIRay3>) NIL_CHK(ray)) origin], dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  float t = (x - [((id<PythagorasFIVector3>) NIL_CHK(origin)) x]) / [((id<PythagorasFIVector3>) NIL_CHK(dir)) x];
  if (t < 0.0f) {
    return JavaLangFloat_MAX_VALUE;
  }
  float iy = [((id<PythagorasFIVector3>) NIL_CHK(origin)) y] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) y], iz = [((id<PythagorasFIVector3>) NIL_CHK(origin)) z] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) z];
  return (iy >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ && iy <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_ && iz >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ && iz <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_) ? t : JavaLangFloat_MAX_VALUE;
}

- (float)intersectionYWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray
                                 withFloat:(float)y {
  id<PythagorasFIVector3> origin = [((id<PythagorasFIRay3>) NIL_CHK(ray)) origin], dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  float t = (y - [((id<PythagorasFIVector3>) NIL_CHK(origin)) y]) / [((id<PythagorasFIVector3>) NIL_CHK(dir)) y];
  if (t < 0.0f) {
    return JavaLangFloat_MAX_VALUE;
  }
  float ix = [((id<PythagorasFIVector3>) NIL_CHK(origin)) x] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) x], iz = [((id<PythagorasFIVector3>) NIL_CHK(origin)) z] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) z];
  return (ix >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ && ix <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ && iz >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).z_ && iz <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).z_) ? t : JavaLangFloat_MAX_VALUE;
}

- (float)intersectionZWithPythagorasFIRay3:(id<PythagorasFIRay3>)ray
                                 withFloat:(float)z {
  id<PythagorasFIVector3> origin = [((id<PythagorasFIRay3>) NIL_CHK(ray)) origin], dir = [((id<PythagorasFIRay3>) NIL_CHK(ray)) direction];
  float t = (z - [((id<PythagorasFIVector3>) NIL_CHK(origin)) z]) / [((id<PythagorasFIVector3>) NIL_CHK(dir)) z];
  if (t < 0.0f) {
    return JavaLangFloat_MAX_VALUE;
  }
  float ix = [((id<PythagorasFIVector3>) NIL_CHK(origin)) x] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) x], iy = [((id<PythagorasFIVector3>) NIL_CHK(origin)) y] + t * [((id<PythagorasFIVector3>) NIL_CHK(dir)) y];
  return (ix >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).x_ && ix <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).x_ && iy >= ((PythagorasFVector3 *) NIL_CHK(_minExtent_)).y_ && iy <= ((PythagorasFVector3 *) NIL_CHK(_maxExtent_)).y_) ? t : JavaLangFloat_MAX_VALUE;
}

+ (void)initialize {
  if (self == [PythagorasFBox class]) {
    JreOperatorRetainedAssign(&PythagorasFBox_UNIT_, self, [[[PythagorasFBox alloc] initWithPythagorasFIVector3:[((id<PythagorasFIVector3>) NIL_CHK([PythagorasFVector3 UNIT_XYZ])) negate] withPythagorasFIVector3:[PythagorasFVector3 UNIT_XYZ]] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFBox_ZERO_, self, [[[PythagorasFBox alloc] initWithPythagorasFIVector3:[PythagorasFVector3 ZERO] withPythagorasFIVector3:[PythagorasFVector3 ZERO]] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFBox_EMPTY_, self, [[[PythagorasFBox alloc] initWithPythagorasFIVector3:[PythagorasFVector3 MAX_VALUE] withPythagorasFIVector3:[PythagorasFVector3 MIN_VALUE]] autorelease]);
    JreOperatorRetainedAssign(&PythagorasFBox_MAX_VALUE_, self, [[[PythagorasFBox alloc] initWithPythagorasFIVector3:[PythagorasFVector3 MIN_VALUE] withPythagorasFIVector3:[PythagorasFVector3 MAX_VALUE]] autorelease]);
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_maxExtent_, self, nil);
  JreOperatorRetainedAssign(&_minExtent_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFBox *typedCopy = (PythagorasFBox *) copy;
  typedCopy._minExtent = _minExtent_;
  typedCopy._maxExtent = _maxExtent_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/AbstractRectangle.java
//
//  Created by Thomas on 7/1/13.
//

#import "Dimension.h"
#import "Dimensions.h"
#import "ILine.h"
#import "IOSFloatArray.h"
#import "IPoint.h"
#import "IRectangle.h"
#import "IRectangularShape.h"
#import "Lines.h"
#import "PathIterator.h"
#import "Platform.h"
#import "Point.h"
#import "Points.h"
#import "Rectangle.h"
#import "RectangularShape.h"
#import "Transform.h"
#import "java/lang/Math.h"
#import "java/util/NoSuchElementException.h"
#import "AbstractRectangle.h"

@implementation PythagorasFAbstractRectangle

- (PythagorasFPoint *)location {
  return [self locationWithPythagorasFPoint:[[[PythagorasFPoint alloc] init] autorelease]];
}

- (PythagorasFPoint *)locationWithPythagorasFPoint:(PythagorasFPoint *)target {
  return [((PythagorasFPoint *) NIL_CHK(target)) setWithFloat:[self x] withFloat:[self y]];
}

- (PythagorasFDimension *)size {
  return [self sizeWithPythagorasFDimension:[[[PythagorasFDimension alloc] init] autorelease]];
}

- (PythagorasFDimension *)sizeWithPythagorasFDimension:(PythagorasFDimension *)target {
  [((PythagorasFDimension *) NIL_CHK(target)) setSizeWithFloat:[self width] withFloat:[self height]];
  return target;
}

- (PythagorasFRectangle *)intersectionWithFloat:(float)rx
                                      withFloat:(float)ry
                                      withFloat:(float)rw
                                      withFloat:(float)rh {
  float x1 = [JavaLangMath maxWithFloat:[self x] withFloat:rx];
  float y1 = [JavaLangMath maxWithFloat:[self y] withFloat:ry];
  float x2 = [JavaLangMath minWithFloat:[self maxX] withFloat:rx + rw];
  float y2 = [JavaLangMath minWithFloat:[self maxY] withFloat:ry + rh];
  return [[[PythagorasFRectangle alloc] initWithFloat:x1 withFloat:y1 withFloat:x2 - x1 withFloat:y2 - y1] autorelease];
}

- (PythagorasFRectangle *)intersectionWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)r {
  return [self intersectionWithFloat:[((id<PythagorasFIRectangle>) NIL_CHK(r)) x] withFloat:[((id<PythagorasFIRectangle>) NIL_CHK(r)) y] withFloat:[((id<PythagorasFIRectangle>) NIL_CHK(r)) width] withFloat:[((id<PythagorasFIRectangle>) NIL_CHK(r)) height]];
}

- (PythagorasFRectangle *)union__WithPythagorasFIRectangle:(id<PythagorasFIRectangle>)r {
  PythagorasFRectangle *rect = [[[PythagorasFRectangle alloc] initWithPythagorasFIRectangle:self] autorelease];
  [((PythagorasFRectangle *) NIL_CHK(rect)) addWithPythagorasFIRectangle:r];
  return rect;
}

- (BOOL)intersectsLineWithFloat:(float)x1
                      withFloat:(float)y1
                      withFloat:(float)x2
                      withFloat:(float)y2 {
  return [PythagorasFLines lineIntersectsRectWithFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2 withFloat:[self x] withFloat:[self y] withFloat:[self width] withFloat:[self height]];
}

- (BOOL)intersectsLineWithPythagorasFILine:(id<PythagorasFILine>)l {
  return [self intersectsLineWithFloat:[((id<PythagorasFILine>) NIL_CHK(l)) x1] withFloat:[((id<PythagorasFILine>) NIL_CHK(l)) y1] withFloat:[((id<PythagorasFILine>) NIL_CHK(l)) x2] withFloat:[((id<PythagorasFILine>) NIL_CHK(l)) y2]];
}

- (int)outcodeWithFloat:(float)px
              withFloat:(float)py {
  int code = 0;
  if ([self width] <= 0) {
    code |= PythagorasFIRectangle_OUT_LEFT | PythagorasFIRectangle_OUT_RIGHT;
  }
  else if (px < [self x]) {
    code |= PythagorasFIRectangle_OUT_LEFT;
  }
  else if (px > [self maxX]) {
    code |= PythagorasFIRectangle_OUT_RIGHT;
  }
  if ([self height] <= 0) {
    code |= PythagorasFIRectangle_OUT_TOP | PythagorasFIRectangle_OUT_BOTTOM;
  }
  else if (py < [self y]) {
    code |= PythagorasFIRectangle_OUT_TOP;
  }
  else if (py > [self maxY]) {
    code |= PythagorasFIRectangle_OUT_BOTTOM;
  }
  return code;
}

- (int)outcodeWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  return [self outcodeWithFloat:[((id<PythagorasFIPoint>) NIL_CHK(p)) x] withFloat:[((id<PythagorasFIPoint>) NIL_CHK(p)) y]];
}

- (PythagorasFRectangle *)clone {
  return [[[PythagorasFRectangle alloc] initWithPythagorasFIRectangle:self] autorelease];
}

- (BOOL)containsWithFloat:(float)px
                withFloat:(float)py {
  if ([self isEmpty]) return NO;
  float x = [self x], y = [self y];
  if (px < x || py < y) return NO;
  px -= x;
  py -= y;
  return px < [self width] && py < [self height];
}

- (BOOL)containsWithFloat:(float)rx
                withFloat:(float)ry
                withFloat:(float)rw
                withFloat:(float)rh {
  if ([self isEmpty]) return NO;
  float x1 = [self x], y1 = [self y], x2 = x1 + [self width], y2 = y1 + [self height];
  return (x1 <= rx) && (rx + rw <= x2) && (y1 <= ry) && (ry + rh <= y2);
}

- (BOOL)intersectsWithFloat:(float)rx
                  withFloat:(float)ry
                  withFloat:(float)rw
                  withFloat:(float)rh {
  if ([self isEmpty]) return NO;
  float x1 = [self x], y1 = [self y], x2 = x1 + [self width], y2 = y1 + [self height];
  return (rx + rw > x1) && (rx < x2) && (ry + rh > y1) && (ry < y2);
}

- (id<PythagorasFPathIterator>)pathIteratorWithPythagorasFTransform:(id<PythagorasFTransform>)t {
  return [[[PythagorasFAbstractRectangle_Iterator alloc] initWithPythagorasFIRectangle:self withPythagorasFTransform:t] autorelease];
}

- (id<PythagorasFPathIterator>)pathIteratorWithPythagorasFTransform:(id<PythagorasFTransform>)t
                                                          withFloat:(float)flatness {
  return [[[PythagorasFAbstractRectangle_Iterator alloc] initWithPythagorasFIRectangle:self withPythagorasFTransform:t] autorelease];
}

- (BOOL)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[PythagorasFAbstractRectangle class]]) {
    PythagorasFAbstractRectangle *r = (PythagorasFAbstractRectangle *) obj;
    return [((PythagorasFAbstractRectangle *) NIL_CHK(r)) x] == [self x] && [((PythagorasFAbstractRectangle *) NIL_CHK(r)) y] == [self y] && [((PythagorasFAbstractRectangle *) NIL_CHK(r)) width] == [self width] && [((PythagorasFAbstractRectangle *) NIL_CHK(r)) height] == [self height];
  }
  return NO;
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithFloat:[self x]] ^ [PythagorasUtilPlatform hashCodeWithFloat:[self y]] ^ [PythagorasUtilPlatform hashCodeWithFloat:[self width]] ^ [PythagorasUtilPlatform hashCodeWithFloat:[self height]];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@%@", [PythagorasFDimensions dimenToStringWithFloat:[self width] withFloat:[self height]], [PythagorasFPoints pointToStringWithFloat:[self x] withFloat:[self y]]];
}

- (float)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation PythagorasFAbstractRectangle_Iterator

@synthesize x = x_;
@synthesize y = y_;
@synthesize width = width_;
@synthesize height = height_;
- (id<PythagorasFTransform>)t {
  return t_;
}
- (void)setT:(id<PythagorasFTransform>)t {
  JreOperatorRetainedAssign(&t_, self, t);
}
@synthesize t = t_;
@synthesize index = index_;

- (id)initWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)r
           withPythagorasFTransform:(id<PythagorasFTransform>)at {
  if ((self = [super init])) {
    self.x = [((id<PythagorasFIRectangle>) NIL_CHK(r)) x];
    self.y = [((id<PythagorasFIRectangle>) NIL_CHK(r)) y];
    self.width = [((id<PythagorasFIRectangle>) NIL_CHK(r)) width];
    self.height = [((id<PythagorasFIRectangle>) NIL_CHK(r)) height];
    self.t = at;
    if (width_ < 0.0f || height_ < 0.0f) {
      index_ = 6;
    }
  }
  return self;
}

- (int)windingRule {
  return PythagorasFPathIterator_WIND_NON_ZERO;
}

- (BOOL)isDone {
  return index_ > 5;
}

- (void)next {
  index_++;
}

- (int)currentSegmentWithJavaLangFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    @throw [[[JavaUtilNoSuchElementException alloc] initWithNSString:@"Iterator out of bounds"] autorelease];
  }
  if (index_ == 5) {
    return PythagorasFPathIterator_SEG_CLOSE;
  }
  int type;
  if (index_ == 0) {
    type = PythagorasFPathIterator_SEG_MOVETO;
    [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:0 withFloat:x_];
    [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:1 withFloat:y_];
  }
  else {
    type = PythagorasFPathIterator_SEG_LINETO;
    switch (index_) {
      case 1:
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:0 withFloat:x_ + width_];
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:1 withFloat:y_];
      break;
      case 2:
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:0 withFloat:x_ + width_];
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:1 withFloat:y_ + height_];
      break;
      case 3:
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:0 withFloat:x_];
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:1 withFloat:y_ + height_];
      break;
      case 4:
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:0 withFloat:x_];
      [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:1 withFloat:y_];
      break;
    }
  }
  if (t_ != nil) {
    [t_ transformWithJavaLangFloatArray:coords withInt:0 withJavaLangFloatArray:coords withInt:0 withInt:1];
  }
  return type;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&t_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFAbstractRectangle_Iterator *typedCopy = (PythagorasFAbstractRectangle_Iterator *) copy;
  typedCopy.x = x_;
  typedCopy.y = y_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.t = t_;
  typedCopy.index = index_;
}

@end

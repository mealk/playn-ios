//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/i/AbstractRectangle.java
//
//  Created by Thomas on 7/1/13.
//

#import "Dimension.h"
#import "Dimensions.h"
#import "IPoint.h"
#import "IRectangle.h"
#import "Point.h"
#import "Points.h"
#import "Rectangle.h"
#import "java/lang/Math.h"
#import "AbstractRectangle.h"

@implementation PythagorasIAbstractRectangle

- (int)minX {
  return [self x];
}

- (int)minY {
  return [self y];
}

- (int)maxX {
  return [self x] + [self width] - 1;
}

- (int)maxY {
  return [self y] + [self height] - 1;
}

- (PythagorasIPoint *)location {
  return [self locationWithPythagorasIPoint:[[[PythagorasIPoint alloc] init] autorelease]];
}

- (PythagorasIPoint *)locationWithPythagorasIPoint:(PythagorasIPoint *)target {
  [((PythagorasIPoint *) NIL_CHK(target)) setLocationWithInt:[self x] withInt:[self y]];
  return target;
}

- (PythagorasIDimension *)size {
  return [self sizeWithPythagorasIDimension:[[[PythagorasIDimension alloc] init] autorelease]];
}

- (PythagorasIDimension *)sizeWithPythagorasIDimension:(PythagorasIDimension *)target {
  [((PythagorasIDimension *) NIL_CHK(target)) setSizeWithInt:[self width] withInt:[self height]];
  return target;
}

- (PythagorasIRectangle *)intersectionWithInt:(int)rx
                                      withInt:(int)ry
                                      withInt:(int)rw
                                      withInt:(int)rh {
  int x1 = [JavaLangMath maxWithInt:[self x] withInt:rx];
  int y1 = [JavaLangMath maxWithInt:[self y] withInt:ry];
  int x2 = [JavaLangMath minWithInt:[self maxX] withInt:rx + rw - 1];
  int y2 = [JavaLangMath minWithInt:[self maxY] withInt:ry + rh - 1];
  return [[[PythagorasIRectangle alloc] initWithInt:x1 withInt:y1 withInt:x2 - x1 withInt:y2 - y1] autorelease];
}

- (PythagorasIRectangle *)intersectionWithPythagorasIIRectangle:(id<PythagorasIIRectangle>)r {
  return [self intersectionWithInt:[((id<PythagorasIIRectangle>) NIL_CHK(r)) x] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(r)) y] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(r)) width] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(r)) height]];
}

- (PythagorasIRectangle *)union__WithPythagorasIIRectangle:(id<PythagorasIIRectangle>)r {
  PythagorasIRectangle *rect = [[[PythagorasIRectangle alloc] initWithPythagorasIIRectangle:self] autorelease];
  [((PythagorasIRectangle *) NIL_CHK(rect)) addWithPythagorasIIRectangle:r];
  return rect;
}

- (int)outcodeWithInt:(int)px
              withInt:(int)py {
  int code = 0;
  if ([self width] <= 0) {
    code |= PythagorasIIRectangle_OUT_LEFT | PythagorasIIRectangle_OUT_RIGHT;
  }
  else if (px < [self x]) {
    code |= PythagorasIIRectangle_OUT_LEFT;
  }
  else if (px > [self maxX]) {
    code |= PythagorasIIRectangle_OUT_RIGHT;
  }
  if ([self height] <= 0) {
    code |= PythagorasIIRectangle_OUT_TOP | PythagorasIIRectangle_OUT_BOTTOM;
  }
  else if (py < [self y]) {
    code |= PythagorasIIRectangle_OUT_TOP;
  }
  else if (py > [self maxY]) {
    code |= PythagorasIIRectangle_OUT_BOTTOM;
  }
  return code;
}

- (int)outcodeWithPythagorasIIPoint:(id<PythagorasIIPoint>)p {
  return [self outcodeWithInt:[((id<PythagorasIIPoint>) NIL_CHK(p)) x] withInt:[((id<PythagorasIIPoint>) NIL_CHK(p)) y]];
}

- (PythagorasIRectangle *)clone {
  return [[[PythagorasIRectangle alloc] initWithPythagorasIIRectangle:self] autorelease];
}

- (BOOL)isEmpty {
  return [self width] <= 0 || [self height] <= 0;
}

- (BOOL)containsWithInt:(int)px
                withInt:(int)py {
  if ([self isEmpty]) return NO;
  int x = [self x], y = [self y];
  if (px < x || py < y) return NO;
  px -= x;
  py -= y;
  return px < [self width] && py < [self height];
}

- (BOOL)containsWithPythagorasIIPoint:(id<PythagorasIIPoint>)point {
  return [self containsWithInt:[((id<PythagorasIIPoint>) NIL_CHK(point)) x] withInt:[((id<PythagorasIIPoint>) NIL_CHK(point)) y]];
}

- (BOOL)containsWithInt:(int)rx
                withInt:(int)ry
                withInt:(int)rw
                withInt:(int)rh {
  if ([self isEmpty]) return NO;
  int x1 = [self x], y1 = [self y], x2 = x1 + [self width], y2 = y1 + [self height];
  return (x1 <= rx) && (rx + rw <= x2) && (y1 <= ry) && (ry + rh <= y2);
}

- (BOOL)containsWithPythagorasIIRectangle:(id<PythagorasIIRectangle>)rect {
  return [self containsWithInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) x] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) y] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) width] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) height]];
}

- (BOOL)intersectsWithInt:(int)rx
                  withInt:(int)ry
                  withInt:(int)rw
                  withInt:(int)rh {
  if ([self isEmpty]) return NO;
  int x1 = [self x], y1 = [self y], x2 = x1 + [self width], y2 = y1 + [self height];
  return (rx + rw > x1) && (rx < x2) && (ry + rh > y1) && (ry < y2);
}

- (BOOL)intersectsWithPythagorasIIRectangle:(id<PythagorasIIRectangle>)rect {
  return [self intersectsWithInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) x] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) y] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) width] withInt:[((id<PythagorasIIRectangle>) NIL_CHK(rect)) height]];
}

- (PythagorasIRectangle *)bounds {
  return [self boundsWithPythagorasIRectangle:[[[PythagorasIRectangle alloc] init] autorelease]];
}

- (PythagorasIRectangle *)boundsWithPythagorasIRectangle:(PythagorasIRectangle *)target {
  [((PythagorasIRectangle *) NIL_CHK(target)) setBoundsWithInt:[self x] withInt:[self y] withInt:[self width] withInt:[self height]];
  return target;
}

- (BOOL)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[PythagorasIAbstractRectangle class]]) {
    PythagorasIAbstractRectangle *r = (PythagorasIAbstractRectangle *) obj;
    return [((PythagorasIAbstractRectangle *) NIL_CHK(r)) x] == [self x] && [((PythagorasIAbstractRectangle *) NIL_CHK(r)) y] == [self y] && [((PythagorasIAbstractRectangle *) NIL_CHK(r)) width] == [self width] && [((PythagorasIAbstractRectangle *) NIL_CHK(r)) height] == [self height];
  }
  return NO;
}

- (NSUInteger)hash {
  return [self x] ^ [self y] ^ [self width] ^ [self height];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@%@", [PythagorasIDimensions dimenToStringWithInt:[self width] withInt:[self height]], [PythagorasIPoints pointToStringWithInt:[self x] withInt:[self y]]];
}

- (int)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  [super dealloc];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/QuadShader.java
//
//  Created by Thomas on 7/1/13.
//

#import "GL20.h"
#import "GLBuffer.h"
#import "GLContext.h"
#import "GLProgram.h"
#import "GLShader.h"
#import "java/lang/RuntimeException.h"
#import "QuadShader.h"

@implementation PlaynCoreGlQuadShader

static NSString * PlaynCoreGlQuadShader_VERT_UNIFS_ = @"uniform vec2 u_ScreenSize;\nuniform vec4 u_Data[_VEC4S_PER_QUAD_*_MAX_QUADS_];\n";
static NSString * PlaynCoreGlQuadShader_VERT_ATTRS_ = @"attribute vec3 a_Vertex;\n";
static NSString * PlaynCoreGlQuadShader_VERT_VARS_ = @"varying vec2 v_TexCoord;\nvarying vec4 v_Color;\n";
static NSString * PlaynCoreGlQuadShader_VERT_EXTRACTDATA_ = @"int index = _VEC4S_PER_QUAD_*int(a_Vertex.z);\nvec4 mat = u_Data[index+0];\nvec4 txc = u_Data[index+1];\nvec4 tcs = u_Data[index+2];\n";
static NSString * PlaynCoreGlQuadShader_VERT_SETPOS_ = @"mat3 transform = mat3(\n  mat.x, mat.y, 0,\n  mat.z, mat.w, 0,\n  txc.x, txc.y, 1);\ngl_Position = vec4(transform * vec3(a_Vertex.xy, 1.0), 1.0);\ngl_Position.xy /= u_ScreenSize.xy;\ngl_Position.x -= 1.0;\ngl_Position.y = 1.0 - gl_Position.y;\n";
static NSString * PlaynCoreGlQuadShader_VERT_SETTEX_ = @"v_TexCoord = a_Vertex.xy * tcs.xy + txc.zw;\n";
static NSString * PlaynCoreGlQuadShader_VERT_SETCOLOR_ = @"float red = mod(tcs.z, 256.0);\nfloat alpha = (tcs.z - red) / 256.0;\nfloat blue = mod(tcs.w, 256.0);\nfloat green = (tcs.w - blue) / 256.0;\nv_Color = vec4(red / 255.0, green / 255.0, blue / 255.0, alpha / 255.0);\n";
static NSString * PlaynCoreGlQuadShader_VERTEX_SHADER_ = @"uniform vec2 u_ScreenSize;\nuniform vec4 u_Data[_VEC4S_PER_QUAD_*_MAX_QUADS_];\nattribute vec3 a_Vertex;\nvarying vec2 v_TexCoord;\nvarying vec4 v_Color;\nvoid main(void) {\nint index = _VEC4S_PER_QUAD_*int(a_Vertex.z);\nvec4 mat = u_Data[index+0];\nvec4 txc = u_Data[index+1];\nvec4 tcs = u_Data[index+2];\nmat3 transform = mat3(\n  mat.x, mat.y, 0,\n  mat.z, mat.w, 0,\n  txc.x, txc.y, 1);\ngl_Position = vec4(transform * vec3(a_Vertex.xy, 1.0), 1.0);\ngl_Position.xy /= u_ScreenSize.xy;\ngl_Position.x -= 1.0;\ngl_Position.y = 1.0 - gl_Position.y;\nv_TexCoord = a_Vertex.xy * tcs.xy + txc.zw;\nfloat red = mod(tcs.z, 256.0);\nfloat alpha = (tcs.z - red) / 256.0;\nfloat blue = mod(tcs.w, 256.0);\nfloat green = (tcs.w - blue) / 256.0;\nv_Color = vec4(red / 255.0, green / 255.0, blue / 255.0, alpha / 255.0);\n}";

@synthesize maxQuads = maxQuads_;

+ (NSString *)VERT_UNIFS {
  return PlaynCoreGlQuadShader_VERT_UNIFS_;
}

+ (NSString *)VERT_ATTRS {
  return PlaynCoreGlQuadShader_VERT_ATTRS_;
}

+ (NSString *)VERT_VARS {
  return PlaynCoreGlQuadShader_VERT_VARS_;
}

+ (NSString *)VERT_EXTRACTDATA {
  return PlaynCoreGlQuadShader_VERT_EXTRACTDATA_;
}

+ (NSString *)VERT_SETPOS {
  return PlaynCoreGlQuadShader_VERT_SETPOS_;
}

+ (NSString *)VERT_SETTEX {
  return PlaynCoreGlQuadShader_VERT_SETTEX_;
}

+ (NSString *)VERT_SETCOLOR {
  return PlaynCoreGlQuadShader_VERT_SETCOLOR_;
}

+ (NSString *)VERTEX_SHADER {
  return PlaynCoreGlQuadShader_VERTEX_SHADER_;
}

+ (BOOL)isLikelyToPerformWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  int maxVecs = [PlaynCoreGlQuadShader usableMaxUniformVectorsWithPlaynCoreGlGLContext:ctx];
  return (maxVecs >= 16 * PlaynCoreGlQuadShader_BASE_VEC4S_PER_QUAD);
}

+ (int)usableMaxUniformVectorsWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  return [((PlaynCoreGlGLContext *) NIL_CHK(ctx)) getIntegerWithInt:PlaynCoreGlGL20_GL_MAX_VERTEX_UNIFORM_VECTORS] - 3;
}

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  if ((self = [super initWithPlaynCoreGlGLContext:ctx])) {
    int maxVecs = [PlaynCoreGlQuadShader usableMaxUniformVectorsWithPlaynCoreGlGLContext:ctx] - [self extraVec4s];
    if (maxVecs < [self vec4sPerQuad]) @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"GL_MAX_VERTEX_UNIFORM_VECTORS too low: have %d, need at least %d", maxVecs, [self vec4sPerQuad]]] autorelease];
    self.maxQuads = maxVecs / [self vec4sPerQuad];
  }
  return self;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"quad/%d", maxQuads_];
}

- (int)vec4sPerQuad {
  return PlaynCoreGlQuadShader_BASE_VEC4S_PER_QUAD;
}

- (int)extraVec4s {
  return 0;
}

- (NSString *)vertexShader {
  return [[[self baseVertexShader] replace:@"_MAX_QUADS_" withSequence:[NSString stringWithFormat:@"%d", maxQuads_]] replace:@"_VEC4S_PER_QUAD_" withSequence:[NSString stringWithFormat:@"%d", [self vec4sPerQuad]]];
}

- (NSString *)baseVertexShader {
  return PlaynCoreGlQuadShader_VERTEX_SHADER_;
}

- (PlaynCoreGlGLShader_Core *)createTextureCore {
  return [[[PlaynCoreGlQuadShader_QuadCore alloc] initWithPlaynCoreGlQuadShader:self withNSString:[self vertexShader] withNSString:[self textureFragmentShader]] autorelease];
}

- (PlaynCoreGlGLShader_Core *)createColorCore {
  return [[[PlaynCoreGlQuadShader_QuadCore alloc] initWithPlaynCoreGlQuadShader:self withNSString:[self vertexShader] withNSString:[self colorFragmentShader]] autorelease];
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlQuadShader *typedCopy = (PlaynCoreGlQuadShader *) copy;
  typedCopy.maxQuads = maxQuads_;
}

@end
@implementation PlaynCoreGlQuadShader_QuadCore

- (PlaynCoreGlQuadShader *)this$1 {
  return this$1_;
}
- (void)setThis$1:(PlaynCoreGlQuadShader *)this$1 {
  JreOperatorRetainedAssign(&this$1_, self, this$1);
}
@synthesize this$1 = this$1_;
- (id<PlaynCoreGlGLShader_Uniform2f>)uScreenSize {
  return uScreenSize_;
}
- (void)setUScreenSize:(id<PlaynCoreGlGLShader_Uniform2f>)uScreenSize {
  JreOperatorRetainedAssign(&uScreenSize_, self, uScreenSize);
}
@synthesize uScreenSize = uScreenSize_;
- (id<PlaynCoreGlGLShader_Uniform4fv>)uData {
  return uData_;
}
- (void)setUData:(id<PlaynCoreGlGLShader_Uniform4fv>)uData {
  JreOperatorRetainedAssign(&uData_, self, uData);
}
@synthesize uData = uData_;
- (id<PlaynCoreGlGLShader_Attrib>)aVertex {
  return aVertex_;
}
- (void)setAVertex:(id<PlaynCoreGlGLShader_Attrib>)aVertex {
  JreOperatorRetainedAssign(&aVertex_, self, aVertex);
}
@synthesize aVertex = aVertex_;
- (id<PlaynCoreGlGLBuffer_Float>)data {
  return data_;
}
- (void)setData:(id<PlaynCoreGlGLBuffer_Float>)data {
  JreOperatorRetainedAssign(&data_, self, data);
}
@synthesize data = data_;
- (id<PlaynCoreGlGLBuffer_Short>)vertices {
  return vertices_;
}
- (void)setVertices:(id<PlaynCoreGlGLBuffer_Short>)vertices {
  JreOperatorRetainedAssign(&vertices_, self, vertices);
}
@synthesize vertices = vertices_;
- (id<PlaynCoreGlGLBuffer_Short>)elements {
  return elements_;
}
- (void)setElements:(id<PlaynCoreGlGLBuffer_Short>)elements {
  JreOperatorRetainedAssign(&elements_, self, elements);
}
@synthesize elements = elements_;
@synthesize quadCounter = quadCounter_;
@synthesize arTint = arTint_;
@synthesize gbTint = gbTint_;

- (id)initWithPlaynCoreGlQuadShader:(PlaynCoreGlQuadShader *)outer$
                       withNSString:(NSString *)vertShader
                       withNSString:(NSString *)fragShader {
  if ((self = [super initWithPlaynCoreGlGLShader:outer$ withNSString:vertShader withNSString:fragShader])) {
    JreOperatorRetainedAssign(&this$1_, self, outer$);
    JreOperatorRetainedAssign(&data_, self, [((PlaynCoreGlGLContext *) NIL_CHK(outer$.ctx)) createFloatBufferWithInt:outer$.maxQuads * [outer$ vec4sPerQuad] * 4]);
    JreOperatorRetainedAssign(&uScreenSize_, self, [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getUniform2fWithNSString:@"u_ScreenSize"]);
    JreOperatorRetainedAssign(&uData_, self, [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getUniform4fvWithNSString:@"u_Data"]);
    JreOperatorRetainedAssign(&aVertex_, self, [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getAttribWithNSString:@"a_Vertex" withInt:PlaynCoreGlQuadShader_VERTEX_SIZE withInt:PlaynCoreGlGL20_GL_SHORT]);
    JreOperatorRetainedAssign(&vertices_, self, [((PlaynCoreGlGLContext *) NIL_CHK(outer$.ctx)) createShortBufferWithInt:outer$.maxQuads * PlaynCoreGlQuadShader_VERTICES_PER_QUAD * PlaynCoreGlQuadShader_VERTEX_SIZE]);
    JreOperatorRetainedAssign(&elements_, self, [((PlaynCoreGlGLContext *) NIL_CHK(outer$.ctx)) createShortBufferWithInt:outer$.maxQuads * PlaynCoreGlQuadShader_ELEMENTS_PER_QUAD]);
    for (int ii = 0; ii < outer$.maxQuads; ii++) {
      (void) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) addWithInt:0 withInt:0]) addWithInt:ii];
      (void) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) addWithInt:1 withInt:0]) addWithInt:ii];
      (void) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) addWithInt:0 withInt:1]) addWithInt:ii];
      (void) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) addWithInt:1 withInt:1]) addWithInt:ii];
      int base = ii * PlaynCoreGlQuadShader_VERTICES_PER_QUAD;
      (void) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:base + 0]) addWithInt:base + 1]) addWithInt:base + 2];
      (void) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:base + 1]) addWithInt:base + 3]) addWithInt:base + 2];
    }
    [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) bindWithInt:PlaynCoreGlGL20_GL_ARRAY_BUFFER];
    [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) sendWithInt:PlaynCoreGlGL20_GL_ARRAY_BUFFER withInt:PlaynCoreGlGL20_GL_STATIC_DRAW];
    [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) bindWithInt:PlaynCoreGlGL20_GL_ELEMENT_ARRAY_BUFFER];
    [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) sendWithInt:PlaynCoreGlGL20_GL_ELEMENT_ARRAY_BUFFER withInt:PlaynCoreGlGL20_GL_STATIC_DRAW];
  }
  return self;
}

- (void)activateWithInt:(int)fbufWidth
                withInt:(int)fbufHeight {
  [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) bind];
  [((id<PlaynCoreGlGLShader_Uniform2f>) NIL_CHK(uScreenSize_)) bindWithFloat:fbufWidth / 2.0f withFloat:fbufHeight / 2.0f];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) bindWithInt:PlaynCoreGlGL20_GL_ARRAY_BUFFER];
  [((id<PlaynCoreGlGLShader_Attrib>) NIL_CHK(aVertex_)) bindWithInt:0 withInt:0];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) bindWithInt:PlaynCoreGlGL20_GL_ELEMENT_ARRAY_BUFFER];
}

- (void)prepareWithInt:(int)tint
              withBOOL:(BOOL)justActivated {
  self.arTint = (tint >> 16) & (int) 0xFFFF;
  self.gbTint = tint & (int) 0xFFFF;
}

- (void)flush {
  if (quadCounter_ == 0) return;
  [((id<PlaynCoreGlGLShader_Uniform4fv>) NIL_CHK(uData_)) bindWithPlaynCoreGlGLBuffer_Float:data_ withInt:quadCounter_ * [this$1_ vec4sPerQuad]];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) drawElementsWithInt:PlaynCoreGlGL20_GL_TRIANGLES withInt:PlaynCoreGlQuadShader_ELEMENTS_PER_QUAD * quadCounter_];
  quadCounter_ = 0;
}

- (void)destroy {
  [super destroy];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(vertices_)) destroy];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) destroy];
  [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(data_)) destroy];
}

- (void)addQuadWithFloat:(float)m00
               withFloat:(float)m01
               withFloat:(float)m10
               withFloat:(float)m11
               withFloat:(float)tx
               withFloat:(float)ty
               withFloat:(float)x1
               withFloat:(float)y1
               withFloat:(float)sx1
               withFloat:(float)sy1
               withFloat:(float)x2
               withFloat:(float)y2
               withFloat:(float)sx2
               withFloat:(float)sy2
               withFloat:(float)x3
               withFloat:(float)y3
               withFloat:(float)sx3
               withFloat:(float)sy3
               withFloat:(float)x4
               withFloat:(float)y4
               withFloat:(float)sx4
               withFloat:(float)sy4 {
  float dw = x2 - x1, dh = y3 - y1;
  (void) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(data_)) addWithFloat:m00 * dw withFloat:m01 * dw withFloat:m10 * dh withFloat:m11 * dh withFloat:tx + m00 * x1 + m10 * y1 withFloat:ty + m01 * x1 + m11 * y1];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(data_)) addWithFloat:sx1 withFloat:sy1];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(data_)) addWithFloat:sx2 - sx1 withFloat:sy3 - sy1];
  [self addExtraDataWithPlaynCoreGlGLBuffer_Float:data_];
  quadCounter_++;
  if (quadCounter_ >= this$1_.maxQuads) [this$1_ flush];
}

- (void)addExtraDataWithPlaynCoreGlGLBuffer_Float:(id<PlaynCoreGlGLBuffer_Float>)data {
  (void) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(data)) addWithFloat:arTint_ withFloat:gbTint_];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&elements_, self, nil);
  JreOperatorRetainedAssign(&vertices_, self, nil);
  JreOperatorRetainedAssign(&data_, self, nil);
  JreOperatorRetainedAssign(&aVertex_, self, nil);
  JreOperatorRetainedAssign(&uData_, self, nil);
  JreOperatorRetainedAssign(&uScreenSize_, self, nil);
  JreOperatorRetainedAssign(&this$1_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlQuadShader_QuadCore *typedCopy = (PlaynCoreGlQuadShader_QuadCore *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.uScreenSize = uScreenSize_;
  typedCopy.uData = uData_;
  typedCopy.aVertex = aVertex_;
  typedCopy.data = data_;
  typedCopy.vertices = vertices_;
  typedCopy.elements = elements_;
  typedCopy.quadCounter = quadCounter_;
  typedCopy.arTint = arTint_;
  typedCopy.gbTint = gbTint_;
}

@end

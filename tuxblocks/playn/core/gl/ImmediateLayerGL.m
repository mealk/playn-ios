//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/ImmediateLayerGL.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractLayer.h"
#import "GLContext.h"
#import "GLShader.h"
#import "Graphics.h"
#import "IOSClass.h"
#import "ImmediateLayer.h"
#import "InternalTransform.h"
#import "LayerGL.h"
#import "PlayN.h"
#import "Point.h"
#import "Surface.h"
#import "Tint.h"
#import "Transform.h"
#import "Vector.h"
#import "java/lang/Math.h"
#import "ImmediateLayerGL.h"

@implementation PlaynCoreGlImmediateLayerGL

- (PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *)surface {
  return surface_;
}
- (void)setSurface:(PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *)surface {
  JreOperatorRetainedAssign(&surface_, self, surface);
}
@synthesize surface = surface_;
- (id<PlaynCoreImmediateLayer_Renderer>)renderer_ {
  return renderer__;
}
- (void)setRenderer_:(id<PlaynCoreImmediateLayer_Renderer>)renderer_ {
  JreOperatorRetainedAssign(&renderer__, self, renderer_);
}
@synthesize renderer_ = renderer__;

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
withPlaynCoreImmediateLayer_Renderer:(id<PlaynCoreImmediateLayer_Renderer>)renderer {
  return [self initPlaynCoreGlImmediateLayerGLWithPlaynCoreGlGLContext:ctx withPlaynCoreImmediateLayer_Renderer:renderer withPlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL:[[[PlaynCoreGlImmediateLayerGL_$1 alloc] initWithPlaynCoreGlGLContext:ctx] autorelease]];
}

- (id<PlaynCoreImmediateLayer_Renderer>)renderer {
  return renderer__;
}

- (id)initPlaynCoreGlImmediateLayerGLWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
                         withPlaynCoreImmediateLayer_Renderer:(id<PlaynCoreImmediateLayer_Renderer>)renderer
           withPlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL:(PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *)surface {
  if ((self = [super initWithPlaynCoreGlGLContext:ctx])) {
    self.surface = surface;
    self.renderer_ = renderer;
  }
  return self;
}

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
withPlaynCoreImmediateLayer_Renderer:(id<PlaynCoreImmediateLayer_Renderer>)renderer
withPlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL:(PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *)surface {
  return [self initPlaynCoreGlImmediateLayerGLWithPlaynCoreGlGLContext:ctx withPlaynCoreImmediateLayer_Renderer:renderer withPlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL:surface];
}

- (void)paintWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)curTransform
                                    withInt:(int)curTint
                    withPlaynCoreGlGLShader:(PlaynCoreGlGLShader *)curShader {
  if (![self visible]) return;
  id<PlaynCoreInternalTransform> xform = [self localTransformWithPlaynCoreInternalTransform:curTransform];
  (void) [((id<PlaynCoreInternalTransform>) [((PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *) NIL_CHK(surface_)) topTransform]) setWithPythagorasFTransform:xform];
  if (tint__ != PlaynCoreTint_NOOP_TINT) curTint = [PlaynCoreTint combineWithInt:curTint withInt:tint__];
  (void) [((PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *) NIL_CHK(surface_)) setTintWithInt:curTint];
  (void) [((PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *) NIL_CHK(surface_)) setShaderWithPlaynCoreGlGLShader:(shader_ == nil) ? curShader : shader_];
  [self renderWithPlaynCoreInternalTransform:xform];
  (void) [((PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL *) NIL_CHK(surface_)) setShaderWithPlaynCoreGlGLShader:nil];
}

- (void)renderWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform {
  [((id<PlaynCoreImmediateLayer_Renderer>) NIL_CHK(renderer__)) renderWithPlaynCoreSurface:surface_];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&renderer__, self, nil);
  JreOperatorRetainedAssign(&surface_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlImmediateLayerGL *typedCopy = (PlaynCoreGlImmediateLayerGL *) copy;
  typedCopy.surface = surface_;
  typedCopy.renderer_ = renderer__;
}

@end
@implementation PlaynCoreGlImmediateLayerGL_Clipped

@synthesize width_ = width__;
@synthesize height_ = height__;
- (PythagorasFPoint *)pos {
  return pos_;
}
- (void)setPos:(PythagorasFPoint *)pos {
  JreOperatorRetainedAssign(&pos_, self, pos);
}
@synthesize pos = pos_;
- (PythagorasFVector *)size {
  return size_;
}
- (void)setSize:(PythagorasFVector *)size {
  JreOperatorRetainedAssign(&size_, self, size);
}
@synthesize size = size_;

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
                           withInt:(int)width
                           withInt:(int)height
withPlaynCoreImmediateLayer_Renderer:(id<PlaynCoreImmediateLayer_Renderer>)renderer {
  if ((self = [super initWithPlaynCoreGlGLContext:ctx withPlaynCoreImmediateLayer_Renderer:renderer withPlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL:[[[PlaynCoreGlImmediateLayerGL_Clipped_$1 alloc] initWithPlaynCoreGlGLContext:ctx withInt:width withInt:height] autorelease]])) {
    JreOperatorRetainedAssign(&pos_, self, [[[PythagorasFPoint alloc] init] autorelease]);
    JreOperatorRetainedAssign(&size_, self, [[[PythagorasFVector alloc] init] autorelease]);
    self.width_ = width;
    self.height_ = height;
  }
  return self;
}

- (float)width {
  return width__;
}

- (float)height {
  return height__;
}

- (float)scaledWidth {
  return [self scaleX] * [self width];
}

- (float)scaledHeight {
  return [self scaleY] * [self height];
}

- (void)renderWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform {
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) translateWithFloat:originX__ withFloat:originY__];
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) transformWithPythagorasFIPoint:[((PythagorasFPoint *) NIL_CHK(pos_)) setWithFloat:-originX__ withFloat:-originY__] withPythagorasFPoint:pos_];
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) transformWithPythagorasFIVector:[((PythagorasFVector *) NIL_CHK(size_)) setWithFloat:width__ withFloat:height__] withPythagorasFVector:size_];
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) translateWithFloat:-originX__ withFloat:-originY__];
  [((PlaynCoreGlGLContext *) NIL_CHK(ctx_)) startClippedWithInt:(int) ((PythagorasFPoint *) NIL_CHK(pos_)).x_ withInt:(int) ((PythagorasFPoint *) NIL_CHK(pos_)).y_ withInt:(int) [JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(size_)).x_] withInt:(int) [JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(size_)).y_]];
  @try {
    [super renderWithPlaynCoreInternalTransform:xform];
  }
  @finally {
    [((PlaynCoreGlGLContext *) NIL_CHK(ctx_)) endClipped];
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&size_, self, nil);
  JreOperatorRetainedAssign(&pos_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlImmediateLayerGL_Clipped *typedCopy = (PlaynCoreGlImmediateLayerGL_Clipped *) copy;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
  typedCopy.pos = pos_;
  typedCopy.size = size_;
}

@end
@implementation PlaynCoreGlImmediateLayerGL_ImmediateSurfaceGL

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  return [super initWithPlaynCoreGlGLContext:ctx];
}

- (void)bindFramebuffer {
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation PlaynCoreGlImmediateLayerGL_Clipped_$1

@synthesize val$width = val$width_;
@synthesize val$height = val$height_;

- (float)width {
  return val$width_;
}

- (float)height {
  return val$height_;
}

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)arg$0
                           withInt:(int)capture$0
                           withInt:(int)capture$1 {
  if ((self = [super initWithPlaynCoreGlGLContext:arg$0])) {
    val$width_ = capture$0;
    val$height_ = capture$1;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlImmediateLayerGL_Clipped_$1 *typedCopy = (PlaynCoreGlImmediateLayerGL_Clipped_$1 *) copy;
  typedCopy.val$width = val$width_;
  typedCopy.val$height = val$height_;
}

@end
@implementation PlaynCoreGlImmediateLayerGL_$1

- (float)width {
  return [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) width];
}

- (float)height {
  return [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) height];
}

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)arg$0 {
  return [super initWithPlaynCoreGlGLContext:arg$0];
}

- (void)dealloc {
  [super dealloc];
}

@end

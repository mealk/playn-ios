//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/GL20Program.java
//
//  Created by Thomas on 7/1/13.
//

#import "GL20.h"
#import "GL20Buffer.h"
#import "GLBuffer.h"
#import "GLContext.h"
#import "GLShader.h"
#import "IOSIntArray.h"
#import "java/lang/RuntimeException.h"
#import "java/nio/Buffer.h"
#import "java/nio/FloatBuffer.h"
#import "GL20Program.h"

@implementation PlaynCoreGlGL20Program

- (id<PlaynCoreGlGL20>)gl {
  return gl_;
}
- (void)setGl:(id<PlaynCoreGlGL20>)gl {
  JreOperatorRetainedAssign(&gl_, self, gl);
}
@synthesize gl = gl_;
@synthesize vertexShader = vertexShader_;
@synthesize fragmentShader = fragmentShader_;
@synthesize program = program_;

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
               withPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl
                      withNSString:(NSString *)vertexSource
                      withNSString:(NSString *)fragmentSource {
  if ((self = [super init])) {
    self.gl = gl;
    int program = 0, vertexShader = 0, fragmentShader = 0;
    @try {
      program = [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glCreateProgram];
      if (program == 0) {
        @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Failed to create program: %d", [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glGetError]]] autorelease];
      }
      vertexShader = [self compileShaderWithInt:PlaynCoreGlGL20_GL_VERTEX_SHADER withNSString:vertexSource];
      [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glAttachShaderWithInt:program withInt:vertexShader];
      [((PlaynCoreGlGLContext *) NIL_CHK(ctx)) checkGLErrorWithNSString:@"Attached vertex shader"];
      fragmentShader = [self compileShaderWithInt:PlaynCoreGlGL20_GL_FRAGMENT_SHADER withNSString:fragmentSource];
      [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glAttachShaderWithInt:program withInt:fragmentShader];
      [((PlaynCoreGlGLContext *) NIL_CHK(ctx)) checkGLErrorWithNSString:@"Attached fragment shader"];
      [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glLinkProgramWithInt:program];
      IOSIntArray *linkStatus = [[[IOSIntArray alloc] initWithLength:1] autorelease];
      [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glGetProgramivWithInt:program withInt:PlaynCoreGlGL20_GL_LINK_STATUS withJavaLangIntegerArray:linkStatus withInt:0];
      if ([((IOSIntArray *) NIL_CHK(linkStatus)) intAtIndex:0] == PlaynCoreGlGL20_GL_FALSE) {
        NSString *log = [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glGetProgramInfoLogWithInt:program];
        [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glDeleteProgramWithInt:program];
        @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Failed to link program: %@", log]] autorelease];
      }
      self.program = program;
      self.vertexShader = vertexShader;
      self.fragmentShader = fragmentShader;
      program = vertexShader = fragmentShader = 0;
    }
    @finally {
      if (program != 0) [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glDeleteProgramWithInt:program];
      if (vertexShader != 0) [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glDeleteShaderWithInt:vertexShader];
      if (fragmentShader != 0) [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glDeleteShaderWithInt:fragmentShader];
    }
  }
  return self;
}

- (id<PlaynCoreGlGLShader_Uniform1f>)getUniform1fWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$1 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Uniform2f>)getUniform2fWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$2 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Uniform3f>)getUniform3fWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$3 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Uniform4f>)getUniform4fWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$4 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Uniform1i>)getUniform1iWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$5 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Uniform2i>)getUniform2iWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$6 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Uniform2fv>)getUniform2fvWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$7 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Uniform4fv>)getUniform4fvWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$8 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_UniformMatrix4fv>)getUniformMatrix4fvWithNSString:(NSString *)name {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetUniformLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$9 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc] autorelease];
}

- (id<PlaynCoreGlGLShader_Attrib>)getAttribWithNSString:(NSString *)name
                                                withInt:(int)size
                                                withInt:(int)type {
  int loc = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetAttribLocationWithInt:program_ withNSString:name];
  return (loc < 0) ? nil : [[[PlaynCoreGlGL20Program_$10 alloc] initWithPlaynCoreGlGL20Program:self withInt:loc withInt:size withInt:type] autorelease];
}

- (void)bind {
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glUseProgramWithInt:program_];
}

- (void)destroy {
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glDeleteShaderWithInt:vertexShader_];
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glDeleteShaderWithInt:fragmentShader_];
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glDeleteProgramWithInt:program_];
}

- (int)compileShaderWithInt:(int)type
               withNSString:(NSString *)shaderSource {
  int shader = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glCreateShaderWithInt:type];
  if (shader == 0) @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Failed to create shader (%d): %d", type, [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetError]]] autorelease];
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glShaderSourceWithInt:shader withNSString:shaderSource];
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glCompileShaderWithInt:shader];
  IOSIntArray *compiled = [[[IOSIntArray alloc] initWithLength:1] autorelease];
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetShaderivWithInt:shader withInt:PlaynCoreGlGL20_GL_COMPILE_STATUS withJavaLangIntegerArray:compiled withInt:0];
  if ([((IOSIntArray *) NIL_CHK(compiled)) intAtIndex:0] == PlaynCoreGlGL20_GL_FALSE) {
    NSString *log = [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glGetShaderInfoLogWithInt:shader];
    [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glDeleteShaderWithInt:shader];
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Failed to compile shader (%d): %@", type, log]] autorelease];
  }
  return shader;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&gl_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program *typedCopy = (PlaynCoreGlGL20Program *) copy;
  typedCopy.gl = gl_;
  typedCopy.vertexShader = vertexShader_;
  typedCopy.fragmentShader = fragmentShader_;
  typedCopy.program = program_;
}

@end
@implementation PlaynCoreGlGL20Program_$1

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithFloat:(float)a {
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform1fWithInt:val$loc_ withFloat:a];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$1 *typedCopy = (PlaynCoreGlGL20Program_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$2

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithFloat:(float)a
            withFloat:(float)b {
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform2fWithInt:val$loc_ withFloat:a withFloat:b];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$2 *typedCopy = (PlaynCoreGlGL20Program_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$3

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithFloat:(float)a
            withFloat:(float)b
            withFloat:(float)c {
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform3fWithInt:val$loc_ withFloat:a withFloat:b withFloat:c];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$3 *typedCopy = (PlaynCoreGlGL20Program_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$4

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithFloat:(float)a
            withFloat:(float)b
            withFloat:(float)c
            withFloat:(float)d {
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform4fWithInt:val$loc_ withFloat:a withFloat:b withFloat:c withFloat:d];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$4 *typedCopy = (PlaynCoreGlGL20Program_$4 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$5

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithInt:(int)a {
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform1iWithInt:val$loc_ withInt:a];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$5 *typedCopy = (PlaynCoreGlGL20Program_$5 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$6

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithInt:(int)a
            withInt:(int)b {
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform2iWithInt:val$loc_ withInt:a withInt:b];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$6 *typedCopy = (PlaynCoreGlGL20Program_$6 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$7

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithPlaynCoreGlGLBuffer_Float:(id<PlaynCoreGlGLBuffer_Float>)data
                                  withInt:(int)count {
  JavaNioFloatBuffer *buffer = ((PlaynCoreGlGL20Buffer_FloatImpl *) data).buffer_;
  (void) [((JavaNioFloatBuffer *) NIL_CHK(buffer)) positionWithInt:0];
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform2fvWithInt:val$loc_ withInt:count withJavaNioFloatBuffer:buffer];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$7 *typedCopy = (PlaynCoreGlGL20Program_$7 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$8

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithPlaynCoreGlGLBuffer_Float:(id<PlaynCoreGlGLBuffer_Float>)data
                                  withInt:(int)count {
  JavaNioFloatBuffer *buffer = ((PlaynCoreGlGL20Buffer_FloatImpl *) data).buffer_;
  (void) [((JavaNioFloatBuffer *) NIL_CHK(buffer)) positionWithInt:0];
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniform4fvWithInt:val$loc_ withInt:count withJavaNioFloatBuffer:buffer];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$8 *typedCopy = (PlaynCoreGlGL20Program_$8 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$9

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;

- (void)bindWithPlaynCoreGlGLBuffer_Float:(id<PlaynCoreGlGLBuffer_Float>)data
                                  withInt:(int)count {
  JavaNioFloatBuffer *buffer = ((PlaynCoreGlGL20Buffer_FloatImpl *) data).buffer_;
  (void) [((JavaNioFloatBuffer *) NIL_CHK(buffer)) positionWithInt:0];
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glUniformMatrix4fvWithInt:val$loc_ withInt:count withBOOL:NO withJavaNioFloatBuffer:buffer];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$9 *typedCopy = (PlaynCoreGlGL20Program_$9 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation PlaynCoreGlGL20Program_$10

- (PlaynCoreGlGL20Program *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreGlGL20Program *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$loc = val$loc_;
@synthesize val$size = val$size_;
@synthesize val$type = val$type_;

- (void)bindWithInt:(int)stride
            withInt:(int)offset {
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glEnableVertexAttribArrayWithInt:val$loc_];
  [((id<PlaynCoreGlGL20>) NIL_CHK(this$0_.gl)) glVertexAttribPointerWithInt:val$loc_ withInt:val$size_ withInt:val$type_ withBOOL:NO withInt:stride withInt:offset];
}

- (id)initWithPlaynCoreGlGL20Program:(PlaynCoreGlGL20Program *)outer$
                             withInt:(int)capture$0
                             withInt:(int)capture$1
                             withInt:(int)capture$2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$loc_ = capture$0;
    val$size_ = capture$1;
    val$type_ = capture$2;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Program_$10 *typedCopy = (PlaynCoreGlGL20Program_$10 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$loc = val$loc_;
  typedCopy.val$size = val$size_;
  typedCopy.val$type = val$type_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/GL20Buffer.java
//
//  Created by Thomas on 7/1/13.
//

#import "Asserts.h"
#import "GL20.h"
#import "GLBuffer.h"
#import "IOSFloatArray.h"
#import "IOSIntArray.h"
#import "InternalTransform.h"
#import "java/nio/Buffer.h"
#import "java/nio/ByteBuffer.h"
#import "java/nio/ByteOrder.h"
#import "java/nio/FloatBuffer.h"
#import "java/nio/IntBuffer.h"
#import "java/nio/ShortBuffer.h"
#import "GL20Buffer.h"

@implementation PlaynCoreGlGL20Buffer

- (id<PlaynCoreGlGL20>)gl {
  return gl_;
}
- (void)setGl:(id<PlaynCoreGlGL20>)gl {
  JreOperatorRetainedAssign(&gl_, self, gl);
}
@synthesize gl = gl_;
@synthesize bufferId = bufferId_;

- (void)bindWithInt:(int)target {
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glBindBufferWithInt:target withInt:bufferId_];
}

- (int)sendWithInt:(int)target
           withInt:(int)usage {
  JavaNioBuffer *buffer = [self buffer];
  int count = [((JavaNioBuffer *) NIL_CHK(buffer)) position], byteSize = [self byteSize];
  (void) [((JavaNioBuffer *) NIL_CHK(buffer)) positionWithInt:0];
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glBufferDataWithInt:target withInt:byteSize withJavaNioBuffer:buffer withInt:usage];
  return count;
}

- (void)destroy {
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glDeleteBuffersWithInt:1 withJavaLangIntegerArray:[IOSIntArray arrayWithInts:(int[]){ bufferId_ } count:1] withInt:0];
}

- (JavaNioBuffer *)buffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl {
  if ((self = [super init])) {
    self.gl = gl;
    self.bufferId = [PlaynCoreGlGL20Buffer genBufferIdWithPlaynCoreGlGL20:gl];
  }
  return self;
}

+ (int)genBufferIdWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl {
  IOSIntArray *ids = [[[IOSIntArray alloc] initWithLength:1] autorelease];
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl)) glGenBuffersWithInt:1 withJavaLangIntegerArray:ids withInt:0];
  return [((IOSIntArray *) NIL_CHK(ids)) intAtIndex:0];
}

- (int)byteSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)capacity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)expandWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)position {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)skipWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&gl_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Buffer *typedCopy = (PlaynCoreGlGL20Buffer *) copy;
  typedCopy.gl = gl_;
  typedCopy.bufferId = bufferId_;
}

@end
@implementation PlaynCoreGlGL20Buffer_FloatImpl

- (JavaNioFloatBuffer *)buffer_ {
  return buffer__;
}
- (void)setBuffer_:(JavaNioFloatBuffer *)buffer_ {
  JreOperatorRetainedAssign(&buffer__, self, buffer_);
}
@synthesize buffer_ = buffer__;
- (JavaNioIntBuffer *)intBuffer {
  return intBuffer_;
}
- (void)setIntBuffer:(JavaNioIntBuffer *)intBuffer {
  JreOperatorRetainedAssign(&intBuffer_, self, intBuffer);
}
@synthesize intBuffer = intBuffer_;

- (id)initWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl
                      withInt:(int)capacity {
  if ((self = [super initWithPlaynCoreGlGL20:gl])) {
    [self expandWithInt:capacity];
  }
  return self;
}

- (int)capacity {
  return [((JavaNioFloatBuffer *) NIL_CHK(buffer__)) capacity];
}

- (int)position {
  return [((JavaNioFloatBuffer *) NIL_CHK(buffer__)) position];
}

- (int)byteSize {
  return [self position] * PlaynCoreGlGL20Buffer_FloatImpl_BYTES_PER_FLOAT;
}

- (void)skipWithInt:(int)count {
  (void) [((JavaNioFloatBuffer *) NIL_CHK(buffer__)) positionWithInt:[self position] + count];
}

- (void)expandWithInt:(int)capacity {
  [PlaynCoreAsserts checkStateWithBOOL:buffer__ == nil || [((JavaNioFloatBuffer *) NIL_CHK(buffer__)) position] == 0];
  JavaNioByteBuffer *raw = [[JavaNioByteBuffer allocateDirectWithInt:capacity * PlaynCoreGlGL20Buffer_FloatImpl_BYTES_PER_FLOAT] orderWithJavaNioByteOrder:[JavaNioByteOrder nativeOrder]];
  JreOperatorRetainedAssign(&buffer__, self, [((JavaNioByteBuffer *) NIL_CHK(raw)) asFloatBuffer]);
  JreOperatorRetainedAssign(&intBuffer_, self, [((JavaNioByteBuffer *) NIL_CHK(raw)) asIntBuffer]);
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithFloat:(float)value {
  (void) [((JavaNioFloatBuffer *) NIL_CHK(buffer__)) putWithFloat:value];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform {
  return [self addWithFloat:[((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) m00] withFloat:[((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) m01] withFloat:[((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) m10] withFloat:[((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) m11] withFloat:[((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) tx] withFloat:[((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) ty]];
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithFloat:(float)x
                                    withFloat:(float)y {
  (void) [[((JavaNioFloatBuffer *) NIL_CHK(buffer__)) putWithFloat:x] putWithFloat:y];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithFloat:(float)m00
                                    withFloat:(float)m01
                                    withFloat:(float)m10
                                    withFloat:(float)m11
                                    withFloat:(float)tx
                                    withFloat:(float)ty {
  (void) [[[[[[((JavaNioFloatBuffer *) NIL_CHK(buffer__)) putWithFloat:m00] putWithFloat:m01] putWithFloat:m10] putWithFloat:m11] putWithFloat:tx] putWithFloat:ty];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithJavaLangFloatArray:(IOSFloatArray *)data
                                                   withInt:(int)offset
                                                   withInt:(int)length {
  (void) [((JavaNioFloatBuffer *) NIL_CHK(buffer__)) putWithJavaLangFloatArray:data withInt:offset withInt:length];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithInt:(int)value {
  (void) [((JavaNioIntBuffer *) NIL_CHK(intBuffer_)) positionWithInt:[((JavaNioFloatBuffer *) NIL_CHK(buffer__)) position]];
  (void) [((JavaNioIntBuffer *) NIL_CHK(intBuffer_)) putWithInt:value];
  (void) [((JavaNioFloatBuffer *) NIL_CHK(buffer__)) positionWithInt:[((JavaNioIntBuffer *) NIL_CHK(intBuffer_)) position]];
  return self;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"floatbuf:%d", bufferId_];
}

- (JavaNioBuffer *)buffer {
  return buffer__;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&intBuffer_, self, nil);
  JreOperatorRetainedAssign(&buffer__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Buffer_FloatImpl *typedCopy = (PlaynCoreGlGL20Buffer_FloatImpl *) copy;
  typedCopy.buffer_ = buffer__;
  typedCopy.intBuffer = intBuffer_;
}

@end
@implementation PlaynCoreGlGL20Buffer_ShortImpl

- (JavaNioShortBuffer *)buffer_ {
  return buffer__;
}
- (void)setBuffer_:(JavaNioShortBuffer *)buffer_ {
  JreOperatorRetainedAssign(&buffer__, self, buffer_);
}
@synthesize buffer_ = buffer__;

- (id)initWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl
                      withInt:(int)capacity {
  if ((self = [super initWithPlaynCoreGlGL20:gl])) {
    [self expandWithInt:capacity];
  }
  return self;
}

- (int)capacity {
  return [((JavaNioShortBuffer *) NIL_CHK(buffer__)) capacity];
}

- (int)position {
  return [((JavaNioShortBuffer *) NIL_CHK(buffer__)) position];
}

- (int)byteSize {
  return [self position] * PlaynCoreGlGL20Buffer_ShortImpl_BYTES_PER_SHORT;
}

- (void)skipWithInt:(int)count {
  (void) [((JavaNioShortBuffer *) NIL_CHK(buffer__)) positionWithInt:[self position] + count];
}

- (void)expandWithInt:(int)capacity {
  [PlaynCoreAsserts checkStateWithBOOL:buffer__ == nil || [((JavaNioShortBuffer *) NIL_CHK(buffer__)) position] == 0];
  JreOperatorRetainedAssign(&buffer__, self, [[[JavaNioByteBuffer allocateDirectWithInt:capacity * PlaynCoreGlGL20Buffer_ShortImpl_BYTES_PER_SHORT] orderWithJavaNioByteOrder:[JavaNioByteOrder nativeOrder]] asShortBuffer]);
}

- (id<PlaynCoreGlGLBuffer_Short>)addWithInt:(int)value {
  (void) [((JavaNioShortBuffer *) NIL_CHK(buffer__)) putWithShortInt:(short int) value];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Short>)addWithInt:(int)x
                                    withInt:(int)y {
  (void) [[((JavaNioShortBuffer *) NIL_CHK(buffer__)) putWithShortInt:(short int) x] putWithShortInt:(short int) y];
  return self;
}

- (void)drawElementsWithInt:(int)mode
                    withInt:(int)count {
  [((id<PlaynCoreGlGL20>) NIL_CHK(gl_)) glDrawElementsWithInt:mode withInt:count withInt:PlaynCoreGlGL20_GL_UNSIGNED_SHORT withInt:0];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"shortbuf:%d", bufferId_];
}

- (JavaNioBuffer *)buffer {
  return buffer__;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&buffer__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Buffer_ShortImpl *typedCopy = (PlaynCoreGlGL20Buffer_ShortImpl *) copy;
  typedCopy.buffer_ = buffer__;
}

@end

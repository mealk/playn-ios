//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/canvas/ImmediateLayerCanvas.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractLayer.h"
#import "Canvas.h"
#import "CanvasSurface.h"
#import "IOSClass.h"
#import "ImmediateLayer.h"
#import "InternalTransform.h"
#import "LayerCanvas.h"
#import "ImmediateLayerCanvas.h"

@implementation PlaynCoreCanvasImmediateLayerCanvas

- (PlaynCoreCanvasCanvasSurface *)surf {
  return surf_;
}
- (void)setSurf:(PlaynCoreCanvasCanvasSurface *)surf {
  JreOperatorRetainedAssign(&surf_, self, surf);
}
@synthesize surf = surf_;
- (id<PlaynCoreImmediateLayer_Renderer>)renderer_ {
  return renderer__;
}
- (void)setRenderer_:(id<PlaynCoreImmediateLayer_Renderer>)renderer_ {
  JreOperatorRetainedAssign(&renderer__, self, renderer_);
}
@synthesize renderer_ = renderer__;

- (id)initWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform
    withPlaynCoreImmediateLayer_Renderer:(id<PlaynCoreImmediateLayer_Renderer>)renderer {
  if ((self = [super initWithPlaynCoreInternalTransform:xform])) {
    JreOperatorRetainedAssign(&surf_, self, [[[PlaynCoreCanvasCanvasSurface alloc] initWithPlaynCoreCanvas:nil] autorelease]);
    self.renderer_ = renderer;
  }
  return self;
}

- (id<PlaynCoreImmediateLayer_Renderer>)renderer {
  return renderer__;
}

- (void)paintWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                       withFloat:(float)parentAlpha {
  if (![self visible]) return;
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  [self transformWithPlaynCoreCanvas:canvas];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setAlphaWithFloat:parentAlpha * [self alpha]];
  [self renderWithPlaynCoreCanvas:canvas];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
}

- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  ((PlaynCoreCanvasCanvasSurface *) NIL_CHK(surf_)).canvas = canvas;
  [((id<PlaynCoreImmediateLayer_Renderer>) NIL_CHK(renderer__)) renderWithPlaynCoreSurface:surf_];
  ((PlaynCoreCanvasCanvasSurface *) NIL_CHK(surf_)).canvas = nil;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&renderer__, self, nil);
  JreOperatorRetainedAssign(&surf_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreCanvasImmediateLayerCanvas *typedCopy = (PlaynCoreCanvasImmediateLayerCanvas *) copy;
  typedCopy.surf = surf_;
  typedCopy.renderer_ = renderer__;
}

@end
@implementation PlaynCoreCanvasImmediateLayerCanvas_Clipped

@synthesize width_ = width__;
@synthesize height_ = height__;

- (id)initWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform
                                 withInt:(int)width
                                 withInt:(int)height
    withPlaynCoreImmediateLayer_Renderer:(id<PlaynCoreImmediateLayer_Renderer>)renderer {
  if ((self = [super initWithPlaynCoreInternalTransform:xform withPlaynCoreImmediateLayer_Renderer:renderer])) {
    self.width_ = width;
    self.height_ = height;
  }
  return self;
}

- (float)width {
  return width__;
}

- (float)height {
  return height__;
}

- (float)scaledWidth {
  return [self scaleX] * [self width];
}

- (float)scaledHeight {
  return [self scaleY] * [self height];
}

- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) clipRectWithFloat:0 withFloat:0 withFloat:width__ withFloat:height__];
  [super renderWithPlaynCoreCanvas:canvas];
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreCanvasImmediateLayerCanvas_Clipped *typedCopy = (PlaynCoreCanvasImmediateLayerCanvas_Clipped *) copy;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/canvas/ImageLayerCanvas.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractLayer.h"
#import "Asserts.h"
#import "Canvas.h"
#import "IOSObjectArray.h"
#import "Image.h"
#import "ImageLayer.h"
#import "InternalTransform.h"
#import "LayerCanvas.h"
#import "Pattern.h"
#import "java/lang/Float.h"
#import "ImageLayerCanvas.h"

@implementation PlaynCoreCanvasImageLayerCanvas

@synthesize width_ = width__;
@synthesize height_ = height__;
@synthesize widthSet = widthSet_;
@synthesize heightSet = heightSet_;
- (id<PlaynCoreImage>)img {
  return img_;
}
- (void)setImg:(id<PlaynCoreImage>)img {
  JreOperatorRetainedAssign(&img_, self, img);
}
@synthesize img = img_;
- (id<PlaynCorePattern>)pattern {
  return pattern_;
}
- (void)setPattern:(id<PlaynCorePattern>)pattern {
  JreOperatorRetainedAssign(&pattern_, self, pattern);
}
@synthesize pattern = pattern_;
@synthesize patternRepeatX = patternRepeatX_;
@synthesize patternRepeatY = patternRepeatY_;

- (id)initWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform {
  return [super initWithPlaynCoreInternalTransform:xform];
}

- (id<PlaynCoreImage>)image {
  return img_;
}

- (id<PlaynCoreImageLayer>)setImageWithPlaynCoreImage:(id<PlaynCoreImage>)img {
  self.img = img;
  return self;
}

- (float)width {
  (void) [PlaynCoreAsserts checkNotNullWithId:img_ withId:@"Image must not be null"];
  return widthSet_ ? width__ : [((id<PlaynCoreImage>) NIL_CHK(img_)) width];
}

- (float)height {
  (void) [PlaynCoreAsserts checkNotNullWithId:img_ withId:@"Image must not be null"];
  return heightSet_ ? height__ : [((id<PlaynCoreImage>) NIL_CHK(img_)) height];
}

- (float)scaledWidth {
  return [self scaleX] * [self width];
}

- (float)scaledHeight {
  return [self scaleY] * [self height];
}

- (void)setHeightWithFloat:(float)height {
  [PlaynCoreAsserts checkArgumentWithBOOL:height > 0 withId:@"Height must be > 0"];
  heightSet_ = YES;
  self.height_ = height;
}

- (void)setWidthWithFloat:(float)width {
  [PlaynCoreAsserts checkArgumentWithBOOL:width > 0 withId:@"Width must be > 0"];
  widthSet_ = YES;
  self.width_ = width;
}

- (void)setSizeWithFloat:(float)width
               withFloat:(float)height {
  [PlaynCoreAsserts checkArgumentWithBOOL:width > 0 && height > 0 withNSString:@"Width and height must be > 0 (got %dx%d)" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, [JavaLangFloat valueOfWithFloat:width], [JavaLangFloat valueOfWithFloat:height] ]];
  widthSet_ = YES;
  self.width_ = width;
  heightSet_ = YES;
  self.height_ = height;
}

- (void)clearHeight {
  heightSet_ = NO;
}

- (void)clearWidth {
  widthSet_ = NO;
}

- (void)paintWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                       withFloat:(float)parentAlpha {
  if (![self visible] || img_ == nil || ![((id<PlaynCoreImage>) NIL_CHK(img_)) isReady]) return;
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setAlphaWithFloat:parentAlpha * [self alpha]];
  [self transformWithPlaynCoreCanvas:canvas];
  float width = [self width], height = [self height];
  BOOL repX = [((id<PlaynCoreImage>) NIL_CHK(img_)) repeatX], repY = [((id<PlaynCoreImage>) NIL_CHK(img_)) repeatY];
  if (repX || repY) {
    if (pattern_ == nil || repX != patternRepeatX_ || repY != patternRepeatY_) {
      patternRepeatX_ = repX;
      patternRepeatY_ = repY;
      JreOperatorRetainedAssign(&pattern_, self, [((id<PlaynCoreImage>) NIL_CHK(img_)) toPattern]);
    }
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillPatternWithPlaynCorePattern:pattern_];
    float xScale = repX ? 1 : width / [((id<PlaynCoreImage>) NIL_CHK(img_)) width], yScale = repY ? 1 : height / [((id<PlaynCoreImage>) NIL_CHK(img_)) height];
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) scale__WithFloat:xScale withFloat:yScale];
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillRectWithFloat:0 withFloat:0 withFloat:width / xScale withFloat:height / yScale];
  }
  else {
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) drawImageWithPlaynCoreImage:img_ withFloat:0 withFloat:0 withFloat:width withFloat:height];
  }
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&pattern_, self, nil);
  JreOperatorRetainedAssign(&img_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreCanvasImageLayerCanvas *typedCopy = (PlaynCoreCanvasImageLayerCanvas *) copy;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
  typedCopy.widthSet = widthSet_;
  typedCopy.heightSet = heightSet_;
  typedCopy.img = img_;
  typedCopy.pattern = pattern_;
  typedCopy.patternRepeatX = patternRepeatX_;
  typedCopy.patternRepeatY = patternRepeatY_;
}

@end

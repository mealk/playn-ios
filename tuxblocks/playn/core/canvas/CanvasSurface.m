//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/canvas/CanvasSurface.java
//
//  Created by Thomas on 7/1/13.
//

#import "Canvas.h"
#import "GLShader.h"
#import "IOSFloatArray.h"
#import "IOSIntArray.h"
#import "Image.h"
#import "Layer.h"
#import "LayerCanvas.h"
#import "Path.h"
#import "Pattern.h"
#import "Surface.h"
#import "CanvasSurface.h"

@implementation PlaynCoreCanvasCanvasSurface

- (id<PlaynCoreCanvas>)canvas {
  return canvas_;
}
- (void)setCanvas:(id<PlaynCoreCanvas>)canvas {
  JreOperatorRetainedAssign(&canvas_, self, canvas);
}
@synthesize canvas = canvas_;

- (id)initWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  if ((self = [super init])) {
    self.canvas = canvas;
  }
  return self;
}

- (id<PlaynCoreSurface>)clear {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) clear];
  return self;
}

- (id<PlaynCoreSurface>)drawImageWithPlaynCoreImage:(id<PlaynCoreImage>)image
                                          withFloat:(float)dx
                                          withFloat:(float)dy {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) drawImageWithPlaynCoreImage:image withFloat:dx withFloat:dy];
  return self;
}

- (id<PlaynCoreSurface>)drawImageWithPlaynCoreImage:(id<PlaynCoreImage>)image
                                          withFloat:(float)dx
                                          withFloat:(float)dy
                                          withFloat:(float)dw
                                          withFloat:(float)dh {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) drawImageWithPlaynCoreImage:image withFloat:dx withFloat:dy withFloat:dw withFloat:dh];
  return self;
}

- (id<PlaynCoreSurface>)drawImageWithPlaynCoreImage:(id<PlaynCoreImage>)image
                                          withFloat:(float)dx
                                          withFloat:(float)dy
                                          withFloat:(float)dw
                                          withFloat:(float)dh
                                          withFloat:(float)sx
                                          withFloat:(float)sy
                                          withFloat:(float)sw
                                          withFloat:(float)sh {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) drawImageWithPlaynCoreImage:image withFloat:dx withFloat:dy withFloat:dw withFloat:dh withFloat:sx withFloat:sy withFloat:sw withFloat:sh];
  return self;
}

- (id<PlaynCoreSurface>)drawImageCenteredWithPlaynCoreImage:(id<PlaynCoreImage>)image
                                                  withFloat:(float)dx
                                                  withFloat:(float)dy {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) drawImageCenteredWithPlaynCoreImage:image withFloat:dx withFloat:dy];
  return self;
}

- (id<PlaynCoreSurface>)drawLayerWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  [((PlaynCoreCanvasLayerCanvas *) layer) paintWithPlaynCoreCanvas:canvas_ withFloat:1];
  return self;
}

- (id<PlaynCoreSurface>)drawLineWithFloat:(float)x0
                                withFloat:(float)y0
                                withFloat:(float)x1
                                withFloat:(float)y1
                                withFloat:(float)width {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) save];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) setStrokeWidthWithFloat:width];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) drawLineWithFloat:x0 withFloat:y0 withFloat:x1 withFloat:y1];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) restore];
  return self;
}

- (id<PlaynCoreSurface>)fillRectWithFloat:(float)x
                                withFloat:(float)y
                                withFloat:(float)width
                                withFloat:(float)height {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) fillRectWithFloat:x withFloat:y withFloat:width withFloat:height];
  return self;
}

- (id<PlaynCoreSurface>)fillTrianglesWithJavaLangFloatArray:(IOSFloatArray *)xys
                                   withJavaLangIntegerArray:(IOSIntArray *)indices {
  id<PlaynCorePath> path = [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) createPath];
  for (int ii = 0; ii < (int) [((IOSIntArray *) NIL_CHK(indices)) count]; ii += 3) {
    int a = 2 * [((IOSIntArray *) NIL_CHK(indices)) intAtIndex:ii], b = 2 * [((IOSIntArray *) NIL_CHK(indices)) intAtIndex:ii + 1], c = 2 * [((IOSIntArray *) NIL_CHK(indices)) intAtIndex:ii + 2];
    [((id<PlaynCorePath>) NIL_CHK(path)) moveToWithFloat:[((IOSFloatArray *) NIL_CHK(xys)) floatAtIndex:a] withFloat:[((IOSFloatArray *) NIL_CHK(xys)) floatAtIndex:a + 1]];
    [((id<PlaynCorePath>) NIL_CHK(path)) lineToWithFloat:[((IOSFloatArray *) NIL_CHK(xys)) floatAtIndex:b] withFloat:[((IOSFloatArray *) NIL_CHK(xys)) floatAtIndex:b + 1]];
    [((id<PlaynCorePath>) NIL_CHK(path)) lineToWithFloat:[((IOSFloatArray *) NIL_CHK(xys)) floatAtIndex:c] withFloat:[((IOSFloatArray *) NIL_CHK(xys)) floatAtIndex:c + 1]];
    [((id<PlaynCorePath>) NIL_CHK(path)) close];
  }
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) fillPathWithPlaynCorePath:path];
  return self;
}

- (id<PlaynCoreSurface>)fillTrianglesWithJavaLangFloatArray:(IOSFloatArray *)xys
                                     withJavaLangFloatArray:(IOSFloatArray *)sxys
                                   withJavaLangIntegerArray:(IOSIntArray *)indices {
  return [self fillTrianglesWithJavaLangFloatArray:xys withJavaLangIntegerArray:indices];
}

- (float)height {
  return [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) height];
}

- (id<PlaynCoreSurface>)restore {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) restore];
  return self;
}

- (id<PlaynCoreSurface>)rotateWithFloat:(float)radians {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) rotateWithFloat:radians];
  return self;
}

- (id<PlaynCoreSurface>)save {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) save];
  return self;
}

- (id<PlaynCoreSurface>)scale__WithFloat:(float)sx
                               withFloat:(float)sy {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) scale__WithFloat:sx withFloat:sy];
  return self;
}

- (id<PlaynCoreSurface>)setAlphaWithFloat:(float)alpha {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) setAlphaWithFloat:alpha];
  return self;
}

- (id<PlaynCoreSurface>)setTintWithInt:(int)tint {
  return self;
}

- (id<PlaynCoreSurface>)setFillColorWithInt:(int)color {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) setFillColorWithInt:color];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) setStrokeColorWithInt:color];
  return self;
}

- (id<PlaynCoreSurface>)setFillPatternWithPlaynCorePattern:(id<PlaynCorePattern>)pattern {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) setFillPatternWithPlaynCorePattern:pattern];
  return self;
}

- (id<PlaynCoreSurface>)setShaderWithPlaynCoreGlGLShader:(PlaynCoreGlGLShader *)shader {
  return self;
}

- (id<PlaynCoreSurface>)setTransformWithFloat:(float)m11
                                    withFloat:(float)m12
                                    withFloat:(float)m21
                                    withFloat:(float)m22
                                    withFloat:(float)dx
                                    withFloat:(float)dy {
  return self;
}

- (id<PlaynCoreSurface>)transformWithFloat:(float)m11
                                 withFloat:(float)m12
                                 withFloat:(float)m21
                                 withFloat:(float)m22
                                 withFloat:(float)dx
                                 withFloat:(float)dy {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) transformWithFloat:m11 withFloat:m12 withFloat:m21 withFloat:m22 withFloat:dx withFloat:dy];
  return self;
}

- (id<PlaynCoreSurface>)translateWithFloat:(float)x
                                 withFloat:(float)y {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) translateWithFloat:x withFloat:y];
  return self;
}

- (float)width {
  return [((id<PlaynCoreCanvas>) NIL_CHK(canvas_)) width];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&canvas_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreCanvasCanvasSurface *typedCopy = (PlaynCoreCanvasCanvasSurface *) copy;
  typedCopy.canvas = canvas_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/AbstractAssets.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractPlatform.h"
#import "Assets.h"
#import "AsyncImage.h"
#import "Callback.h"
#import "Image.h"
#import "Scale.h"
#import "Sound.h"
#import "java/lang/Exception.h"
#import "java/lang/Throwable.h"
#import "AbstractAssets.h"

@implementation PlaynCoreAbstractAssets

- (PlaynCoreAbstractPlatform *)platform {
  return platform_;
}
- (void)setPlatform:(PlaynCoreAbstractPlatform *)platform {
  JreOperatorRetainedAssign(&platform_, self, platform);
}
@synthesize platform = platform_;

- (id<PlaynCoreImage>)getImageSyncWithNSString:(NSString *)path {
  return [self loadImageWithNSString:path withPlaynCoreAbstractAssets_ImageReceiver:[[[PlaynCoreAbstractAssets_$1 alloc] initWithPlaynCoreAbstractAssets:self] autorelease]];
}

- (id<PlaynCoreImage>)getImageWithNSString:(NSString *)path {
  id<PlaynCoreAsyncImage> image = [self createAsyncImageWithFloat:0 withFloat:0];
  [((PlaynCoreAbstractPlatform *) NIL_CHK(platform_)) invokeAsyncWithJavaLangRunnable:[[[PlaynCoreAbstractAssets_$2 alloc] initWithPlaynCoreAbstractAssets:self withNSString:path withPlaynCoreAsyncImage:image] autorelease]];
  return image;
}

- (id<PlaynCoreImage>)getRemoteImageWithNSString:(NSString *)url {
  return [self getRemoteImageWithNSString:url withFloat:0 withFloat:0];
}

- (id<PlaynCoreImage>)getRemoteImageWithNSString:(NSString *)url
                                       withFloat:(float)width
                                       withFloat:(float)height {
  JavaLangException *error = [[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Remote image loading not yet supported: %@@%fx%f", url, width, height]] autorelease];
  return [self createRemoteErrorImageWithJavaLangThrowable:error withFloat:width withFloat:height];
}

- (id<PlaynCoreSound>)getMusicWithNSString:(NSString *)path {
  return [self getSoundWithNSString:path];
}

- (void)getTextWithNSString:(NSString *)path
  withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  [((PlaynCoreAbstractPlatform *) NIL_CHK(platform_)) invokeAsyncWithJavaLangRunnable:[[[PlaynCoreAbstractAssets_$3 alloc] initWithPlaynCoreAbstractAssets:self withPlaynCoreUtilCallback:callback withNSString:path] autorelease]];
}

- (id)initWithPlaynCoreAbstractPlatform:(PlaynCoreAbstractPlatform *)platform {
  if ((self = [super init])) {
    self.platform = platform;
  }
  return self;
}

- (id<PlaynCoreImage>)createStaticImageWithId:(id)iimpl
                         withPlaynCoreGlScale:(PlaynCoreGlScale *)scale_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreAsyncImage>)createAsyncImageWithFloat:(float)width
                                           withFloat:(float)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreImage>)loadImageWithNSString:(NSString *)path
  withPlaynCoreAbstractAssets_ImageReceiver:(id<PlaynCoreAbstractAssets_ImageReceiver>)recv {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreImage>)createRemoteErrorImageWithJavaLangThrowable:(JavaLangThrowable *)cause
                                                        withFloat:(float)width
                                                        withFloat:(float)height {
  return (width <= 0 || height <= 0) ? [self createErrorImageWithJavaLangThrowable:cause] : [self createErrorImageWithJavaLangThrowable:cause withFloat:width withFloat:height];
}

- (id<PlaynCoreImage>)createErrorImageWithJavaLangThrowable:(JavaLangThrowable *)cause {
  return [self createErrorImageWithJavaLangThrowable:cause withFloat:50 withFloat:50];
}

- (id<PlaynCoreImage>)createErrorImageWithJavaLangThrowable:(JavaLangThrowable *)cause
                                                  withFloat:(float)width
                                                  withFloat:(float)height {
  id<PlaynCoreAsyncImage> image = [self createAsyncImageWithFloat:width withFloat:height];
  [((id<PlaynCoreAsyncImage>) NIL_CHK(image)) setErrorWithJavaLangThrowable:cause];
  return image;
}

- (void)setImageLaterWithPlaynCoreAsyncImage:(id<PlaynCoreAsyncImage>)image
                                      withId:(id)impl
                        withPlaynCoreGlScale:(PlaynCoreGlScale *)scale_ {
  [((PlaynCoreAbstractPlatform *) NIL_CHK(platform_)) invokeLaterWithJavaLangRunnable:[[[PlaynCoreAbstractAssets_$4 alloc] initWithPlaynCoreAsyncImage:image withId:impl withPlaynCoreGlScale:scale_] autorelease]];
}

- (void)setErrorLaterWithPlaynCoreAsyncImage:(id<PlaynCoreAsyncImage>)image
                       withJavaLangThrowable:(JavaLangThrowable *)error {
  [((PlaynCoreAbstractPlatform *) NIL_CHK(platform_)) invokeLaterWithJavaLangRunnable:[[[PlaynCoreAbstractAssets_$5 alloc] initWithPlaynCoreAsyncImage:image withJavaLangThrowable:error] autorelease]];
}

+ (NSString *)normalizePathWithNSString:(NSString *)path {
  int pathLen;
  do {
    pathLen = [NIL_CHK(path) length];
    path = [NIL_CHK(path) replaceAll:@"[^/]+/\\.\\./" withReplacement:@""];
  }
  while ([NIL_CHK(path) length] != pathLen);
  return path;
}

- (id<PlaynCoreSound>)getSoundWithNSString:(NSString *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getTextSyncWithNSString:(NSString *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&platform_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractAssets *typedCopy = (PlaynCoreAbstractAssets *) copy;
  typedCopy.platform = platform_;
}

@end
@implementation PlaynCoreAbstractAssets_$1

- (PlaynCoreAbstractAssets *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreAbstractAssets *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (id<PlaynCoreImage>)imageLoadedWithId:(id)impl
                   withPlaynCoreGlScale:(PlaynCoreGlScale *)scale_ {
  return [this$0_ createStaticImageWithId:impl withPlaynCoreGlScale:scale_];
}

- (id<PlaynCoreImage>)loadFailedWithJavaLangThrowable:(JavaLangThrowable *)error {
  return [this$0_ createErrorImageWithJavaLangThrowable:error];
}

- (id)initWithPlaynCoreAbstractAssets:(PlaynCoreAbstractAssets *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractAssets_$1 *typedCopy = (PlaynCoreAbstractAssets_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation PlaynCoreAbstractAssets_$2

- (PlaynCoreAbstractAssets *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreAbstractAssets *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)val$path {
  return val$path_;
}
- (void)setVal$path:(NSString *)val$path {
  JreOperatorRetainedAssign(&val$path_, self, val$path);
}
@synthesize val$path = val$path_;
- (id<PlaynCoreAsyncImage>)val$image {
  return val$image_;
}
- (void)setVal$image:(id<PlaynCoreAsyncImage>)val$image {
  JreOperatorRetainedAssign(&val$image_, self, val$image);
}
@synthesize val$image = val$image_;

- (void)run {
  (void) [this$0_ loadImageWithNSString:val$path_ withPlaynCoreAbstractAssets_ImageReceiver:[[[PlaynCoreAbstractAssets_$2_$1 alloc] initWithPlaynCoreAbstractAssets_$2:self] autorelease]];
}

- (id)initWithPlaynCoreAbstractAssets:(PlaynCoreAbstractAssets *)outer$
                         withNSString:(NSString *)capture$0
              withPlaynCoreAsyncImage:(id<PlaynCoreAsyncImage>)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$path_, self, capture$0);
    JreOperatorRetainedAssign(&val$image_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$image_, self, nil);
  JreOperatorRetainedAssign(&val$path_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractAssets_$2 *typedCopy = (PlaynCoreAbstractAssets_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$path = val$path_;
  typedCopy.val$image = val$image_;
}

@end
@implementation PlaynCoreAbstractAssets_$2_$1

- (PlaynCoreAbstractAssets_$2 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreAbstractAssets_$2 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (id<PlaynCoreImage>)imageLoadedWithId:(id)impl
                   withPlaynCoreGlScale:(PlaynCoreGlScale *)scale_ {
  [this$0_.this$0 setImageLaterWithPlaynCoreAsyncImage:this$0_.val$image withId:impl withPlaynCoreGlScale:scale_];
  return this$0_.val$image;
}

- (id<PlaynCoreImage>)loadFailedWithJavaLangThrowable:(JavaLangThrowable *)error {
  [this$0_.this$0 setErrorLaterWithPlaynCoreAsyncImage:this$0_.val$image withJavaLangThrowable:error];
  return this$0_.val$image;
}

- (id)initWithPlaynCoreAbstractAssets_$2:(PlaynCoreAbstractAssets_$2 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractAssets_$2_$1 *typedCopy = (PlaynCoreAbstractAssets_$2_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation PlaynCoreAbstractAssets_$3

- (PlaynCoreAbstractAssets *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreAbstractAssets *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreUtilCallback>)val$callback {
  return val$callback_;
}
- (void)setVal$callback:(id<PlaynCoreUtilCallback>)val$callback {
  JreOperatorRetainedAssign(&val$callback_, self, val$callback);
}
@synthesize val$callback = val$callback_;
- (NSString *)val$path {
  return val$path_;
}
- (void)setVal$path:(NSString *)val$path {
  JreOperatorRetainedAssign(&val$path_, self, val$path);
}
@synthesize val$path = val$path_;

- (void)run {
  @try {
    [((PlaynCoreAbstractPlatform *) NIL_CHK(this$0_.platform)) notifySuccessWithPlaynCoreUtilCallback:val$callback_ withId:[this$0_ getTextSyncWithNSString:val$path_]];
  }
  @catch (JavaLangThrowable *t) {
    [((PlaynCoreAbstractPlatform *) NIL_CHK(this$0_.platform)) notifyFailureWithPlaynCoreUtilCallback:val$callback_ withJavaLangThrowable:t];
  }
}

- (id)initWithPlaynCoreAbstractAssets:(PlaynCoreAbstractAssets *)outer$
            withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)capture$0
                         withNSString:(NSString *)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$callback_, self, capture$0);
    JreOperatorRetainedAssign(&val$path_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$path_, self, nil);
  JreOperatorRetainedAssign(&val$callback_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractAssets_$3 *typedCopy = (PlaynCoreAbstractAssets_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$callback = val$callback_;
  typedCopy.val$path = val$path_;
}

@end
@implementation PlaynCoreAbstractAssets_$4

- (id<PlaynCoreAsyncImage>)val$image {
  return val$image_;
}
- (void)setVal$image:(id<PlaynCoreAsyncImage>)val$image {
  JreOperatorRetainedAssign(&val$image_, self, val$image);
}
@synthesize val$image = val$image_;
- (id)val$impl {
  return val$impl_;
}
- (void)setVal$impl:(id)val$impl {
  JreOperatorRetainedAssign(&val$impl_, self, val$impl);
}
@synthesize val$impl = val$impl_;
- (PlaynCoreGlScale *)val$scale {
  return val$scale_;
}
- (void)setVal$scale:(PlaynCoreGlScale *)val$scale {
  JreOperatorRetainedAssign(&val$scale_, self, val$scale);
}
@synthesize val$scale = val$scale_;

- (void)run {
  [((id<PlaynCoreAsyncImage>) NIL_CHK(val$image_)) setImageWithId:val$impl_ withPlaynCoreGlScale:val$scale_];
}

- (id)initWithPlaynCoreAsyncImage:(id<PlaynCoreAsyncImage>)capture$0
                           withId:(id)capture$1
             withPlaynCoreGlScale:(PlaynCoreGlScale *)capture$2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$image_, self, capture$0);
    JreOperatorRetainedAssign(&val$impl_, self, capture$1);
    JreOperatorRetainedAssign(&val$scale_, self, capture$2);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$scale_, self, nil);
  JreOperatorRetainedAssign(&val$impl_, self, nil);
  JreOperatorRetainedAssign(&val$image_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractAssets_$4 *typedCopy = (PlaynCoreAbstractAssets_$4 *) copy;
  typedCopy.val$image = val$image_;
  typedCopy.val$impl = val$impl_;
  typedCopy.val$scale = val$scale_;
}

@end
@implementation PlaynCoreAbstractAssets_$5

- (id<PlaynCoreAsyncImage>)val$image {
  return val$image_;
}
- (void)setVal$image:(id<PlaynCoreAsyncImage>)val$image {
  JreOperatorRetainedAssign(&val$image_, self, val$image);
}
@synthesize val$image = val$image_;
- (JavaLangThrowable *)val$error {
  return val$error_;
}
- (void)setVal$error:(JavaLangThrowable *)val$error {
  JreOperatorRetainedAssign(&val$error_, self, val$error);
}
@synthesize val$error = val$error_;

- (void)run {
  [((id<PlaynCoreAsyncImage>) NIL_CHK(val$image_)) setErrorWithJavaLangThrowable:val$error_];
}

- (id)initWithPlaynCoreAsyncImage:(id<PlaynCoreAsyncImage>)capture$0
            withJavaLangThrowable:(JavaLangThrowable *)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$image_, self, capture$0);
    JreOperatorRetainedAssign(&val$error_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$error_, self, nil);
  JreOperatorRetainedAssign(&val$image_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractAssets_$5 *typedCopy = (PlaynCoreAbstractAssets_$5 *) copy;
  typedCopy.val$image = val$image_;
  typedCopy.val$error = val$error_;
}

@end

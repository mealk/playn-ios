//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/NetImpl.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractPlatform.h"
#import "Asserts.h"
#import "Callback.h"
#import "IOSByteArray.h"
#import "Net.h"
#import "java/io/UnsupportedEncodingException.h"
#import "java/lang/Iterable.h"
#import "java/lang/UnsupportedOperationException.h"
#import "java/util/ArrayList.h"
#import "java/util/Collections.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "java/util/Set.h"
#import "NetImpl.h"

@implementation PlaynCoreNetImpl

static NSString * PlaynCoreNetImpl_UTF8_ = @"UTF-8";

- (PlaynCoreAbstractPlatform *)platform {
  return platform_;
}
- (void)setPlatform:(PlaynCoreAbstractPlatform *)platform {
  JreOperatorRetainedAssign(&platform_, self, platform);
}
@synthesize platform = platform_;

+ (NSString *)UTF8 {
  return PlaynCoreNetImpl_UTF8_;
}

- (id<PlaynCoreNet_WebSocket>)createWebSocketWithNSString:(NSString *)url
                      withPlaynCoreNet_WebSocket_Listener:(id<PlaynCoreNet_WebSocket_Listener>)listener {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)getWithNSString:(NSString *)url
withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  [((id<PlaynCoreNet_Builder>) [self reqWithNSString:url]) executeWithPlaynCoreUtilCallback:[self adaptWithPlaynCoreUtilCallback:callback]];
}

- (void)postWithNSString:(NSString *)url
            withNSString:(NSString *)data
withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  [((id<PlaynCoreNet_Builder>) [((id<PlaynCoreNet_Builder>) [self reqWithNSString:url]) setPayloadWithNSString:data]) executeWithPlaynCoreUtilCallback:[self adaptWithPlaynCoreUtilCallback:callback]];
}

- (id<PlaynCoreNet_Builder>)reqWithNSString:(NSString *)url {
  return [[[PlaynCoreNetImpl_BuilderImpl alloc] initWithPlaynCoreNetImpl:self withNSString:url] autorelease];
}

- (id)initWithPlaynCoreAbstractPlatform:(PlaynCoreAbstractPlatform *)platform {
  if ((self = [super init])) {
    self.platform = platform;
  }
  return self;
}

- (void)executeWithPlaynCoreNetImpl_BuilderImpl:(PlaynCoreNetImpl_BuilderImpl *)req
                      withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<PlaynCoreUtilCallback>)adaptWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  return [[[PlaynCoreNetImpl_$1 alloc] initWithPlaynCoreUtilCallback:callback withPlaynCoreUtilCallback:callback] autorelease];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&platform_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreNetImpl *typedCopy = (PlaynCoreNetImpl *) copy;
  typedCopy.platform = platform_;
}

@end
@implementation PlaynCoreNetImpl_Header

- (NSString *)name {
  return name_;
}
- (void)setName:(NSString *)name {
  JreOperatorRetainedAssign(&name_, self, name);
}
@synthesize name = name_;
- (NSString *)value {
  return value_;
}
- (void)setValue:(NSString *)value {
  JreOperatorRetainedAssign(&value_, self, value);
}
@synthesize value = value_;

- (id)initWithPlaynCoreNetImpl:(PlaynCoreNetImpl *)outer$
                  withNSString:(NSString *)name
                  withNSString:(NSString *)value {
  if ((self = [super init])) {
    self.name = name;
    self.value = value;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&value_, self, nil);
  JreOperatorRetainedAssign(&name_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreNetImpl_Header *typedCopy = (PlaynCoreNetImpl_Header *) copy;
  typedCopy.name = name_;
  typedCopy.value = value_;
}

@end
@implementation PlaynCoreNetImpl_BuilderImpl

- (PlaynCoreNetImpl *)this$0 {
  return this$0_;
}
- (void)setThis$0:(PlaynCoreNetImpl *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)url {
  return url_;
}
- (void)setUrl:(NSString *)url {
  JreOperatorRetainedAssign(&url_, self, url);
}
@synthesize url = url_;
- (id<JavaUtilList>)headers {
  return headers_;
}
- (void)setHeaders:(id<JavaUtilList>)headers {
  JreOperatorRetainedAssign(&headers_, self, headers);
}
@synthesize headers = headers_;
- (NSString *)contentType_ {
  return contentType__;
}
- (void)setContentType_:(NSString *)contentType_ {
  JreOperatorRetainedAssign(&contentType__, self, contentType_);
}
@synthesize contentType_ = contentType__;
- (NSString *)payloadString {
  return payloadString_;
}
- (void)setPayloadString:(NSString *)payloadString {
  JreOperatorRetainedAssign(&payloadString_, self, payloadString);
}
@synthesize payloadString = payloadString_;
- (IOSByteArray *)payloadBytes {
  return payloadBytes_;
}
- (void)setPayloadBytes:(IOSByteArray *)payloadBytes {
  JreOperatorRetainedAssign(&payloadBytes_, self, payloadBytes);
}
@synthesize payloadBytes = payloadBytes_;

- (id)initWithPlaynCoreNetImpl:(PlaynCoreNetImpl *)outer$
                  withNSString:(NSString *)url {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&headers_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&contentType__, self, @"text/plain");
    [PlaynCoreAsserts checkArgumentWithBOOL:[NIL_CHK(url) hasPrefix:@"http:"] || [NIL_CHK(url) hasPrefix:@"https:"] withId:@"Only http and https URLs are supported"];
    self.url = url;
  }
  return self;
}

- (BOOL)isPost {
  return payloadString_ != nil || payloadBytes_ != nil;
}

- (NSString *)method {
  return [self isPost] ? @"POST" : @"GET";
}

- (NSString *)contentType {
  return [NSString stringWithFormat:@"%@%@", contentType__, (payloadString_ != nil ? (@"; charset=UTF-8") : @"")];
}

- (id<PlaynCoreNet_Builder>)setPayloadWithNSString:(NSString *)payload {
  return [self setPayloadWithNSString:payload withNSString:@"text/plain"];
}

- (id<PlaynCoreNet_Builder>)setPayloadWithNSString:(NSString *)payload
                                      withNSString:(NSString *)contentType {
  self.payloadString = payload;
  self.contentType_ = contentType;
  return self;
}

- (id<PlaynCoreNet_Builder>)setPayloadWithJavaLangByteArray:(IOSByteArray *)payload {
  return [self setPayloadWithJavaLangByteArray:payload withNSString:@"application/octet-stream"];
}

- (id<PlaynCoreNet_Builder>)setPayloadWithJavaLangByteArray:(IOSByteArray *)payload
                                               withNSString:(NSString *)contentType {
  self.payloadBytes = payload;
  self.contentType_ = contentType;
  return self;
}

- (id<PlaynCoreNet_Builder>)addHeaderWithNSString:(NSString *)name
                                     withNSString:(NSString *)value {
  [((id<JavaUtilList>) NIL_CHK(headers_)) addWithId:[[[PlaynCoreNetImpl_Header alloc] initWithPlaynCoreNetImpl:this$0_ withNSString:name withNSString:value] autorelease]];
  return self;
}

- (void)executeWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  [this$0_ executeWithPlaynCoreNetImpl_BuilderImpl:self withPlaynCoreUtilCallback:callback];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&payloadBytes_, self, nil);
  JreOperatorRetainedAssign(&payloadString_, self, nil);
  JreOperatorRetainedAssign(&contentType__, self, nil);
  JreOperatorRetainedAssign(&headers_, self, nil);
  JreOperatorRetainedAssign(&url_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreNetImpl_BuilderImpl *typedCopy = (PlaynCoreNetImpl_BuilderImpl *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.url = url_;
  typedCopy.headers = headers_;
  typedCopy.contentType_ = contentType__;
  typedCopy.payloadString = payloadString_;
  typedCopy.payloadBytes = payloadBytes_;
}

@end
@implementation PlaynCoreNetImpl_ResponseImpl

@synthesize responseCode_ = responseCode__;
- (id<JavaUtilMap>)headersMap {
  return headersMap_;
}
- (void)setHeadersMap:(id<JavaUtilMap>)headersMap {
  JreOperatorRetainedAssign(&headersMap_, self, headersMap);
}
@synthesize headersMap = headersMap_;

- (id)initWithPlaynCoreNetImpl:(PlaynCoreNetImpl *)outer$
                       withInt:(int)responseCode {
  if ((self = [super init])) {
    self.responseCode_ = responseCode;
  }
  return self;
}

- (int)responseCode {
  return self.responseCode_;
}

- (id<JavaLangIterable>)headerNames {
  return ((id<JavaUtilSet>) [[self headers] keySet]);
}

- (NSString *)headerWithNSString:(NSString *)name {
  id<JavaUtilList> values = ((id<JavaUtilList>) [[self headers] getWithId:name]);
  return (values == nil) ? nil : ((NSString *) [((id<JavaUtilList>) NIL_CHK(values)) getWithInt:0]);
}

- (id<JavaUtilList>)headersWithNSString:(NSString *)name {
  id<JavaUtilList> values = ((id<JavaUtilList>) [[self headers] getWithId:name]);
  return values == nil ? ((id<JavaUtilList>) [JavaUtilCollections emptyList]) : values;
}

- (id<JavaUtilMap>)headers {
  if (headersMap_ == nil) {
    JreOperatorRetainedAssign(&headersMap_, self, [self extractHeaders]);
  }
  return headersMap_;
}

- (id<JavaUtilMap>)extractHeaders {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)payload {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)payloadString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&headersMap_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreNetImpl_ResponseImpl *typedCopy = (PlaynCoreNetImpl_ResponseImpl *) copy;
  typedCopy.responseCode_ = responseCode__;
  typedCopy.headersMap = headersMap_;
}

@end
@implementation PlaynCoreNetImpl_StringResponse

- (NSString *)payload_ {
  return payload__;
}
- (void)setPayload_:(NSString *)payload_ {
  JreOperatorRetainedAssign(&payload__, self, payload_);
}
@synthesize payload_ = payload__;

- (id)initWithPlaynCoreNetImpl:(PlaynCoreNetImpl *)outer$
                       withInt:(int)responseCode
                  withNSString:(NSString *)payload {
  if ((self = [super initWithPlaynCoreNetImpl:outer$ withInt:responseCode])) {
    self.payload_ = payload;
  }
  return self;
}

- (NSString *)payloadString {
  return payload__;
}

- (IOSByteArray *)payload {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&payload__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreNetImpl_StringResponse *typedCopy = (PlaynCoreNetImpl_StringResponse *) copy;
  typedCopy.payload_ = payload__;
}

@end
@implementation PlaynCoreNetImpl_BinaryResponse

- (IOSByteArray *)payload_ {
  return payload__;
}
- (void)setPayload_:(IOSByteArray *)payload_ {
  JreOperatorRetainedAssign(&payload__, self, payload_);
}
@synthesize payload_ = payload__;
- (NSString *)encoding {
  return encoding_;
}
- (void)setEncoding:(NSString *)encoding {
  JreOperatorRetainedAssign(&encoding_, self, encoding);
}
@synthesize encoding = encoding_;

- (id)initWithPlaynCoreNetImpl:(PlaynCoreNetImpl *)outer$
                       withInt:(int)responseCode
         withJavaLangByteArray:(IOSByteArray *)payload
                  withNSString:(NSString *)encoding {
  if ((self = [super initWithPlaynCoreNetImpl:outer$ withInt:responseCode])) {
    self.payload_ = payload;
    self.encoding = encoding;
  }
  return self;
}

- (NSString *)payloadString {
  @try {
    return [NSString stringWithBytes:payload__ charsetName:encoding_];
  }
  @catch (JavaIoUnsupportedEncodingException *uee) {
    return [((JavaIoUnsupportedEncodingException *) NIL_CHK(uee)) description];
  }
}

- (IOSByteArray *)payload {
  return payload__;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&encoding_, self, nil);
  JreOperatorRetainedAssign(&payload__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreNetImpl_BinaryResponse *typedCopy = (PlaynCoreNetImpl_BinaryResponse *) copy;
  typedCopy.payload_ = payload__;
  typedCopy.encoding = encoding_;
}

@end
@implementation PlaynCoreNetImpl_$1

- (id<PlaynCoreUtilCallback>)val$callback {
  return val$callback_;
}
- (void)setVal$callback:(id<PlaynCoreUtilCallback>)val$callback {
  JreOperatorRetainedAssign(&val$callback_, self, val$callback);
}
@synthesize val$callback = val$callback_;

- (void)onSuccessWithId:(id<PlaynCoreNet_Response>)rsp {
  if ([((id<PlaynCoreNet_Response>) NIL_CHK(rsp)) responseCode] == 200) {
    [((id<PlaynCoreUtilCallback>) NIL_CHK(val$callback_)) onSuccessWithId:[((id<PlaynCoreNet_Response>) NIL_CHK(rsp)) payloadString]];
  }
  else {
    [((id<PlaynCoreUtilCallback>) NIL_CHK(val$callback_)) onFailureWithJavaLangThrowable:[[[PlaynCoreNet_HttpException alloc] initWithInt:[((id<PlaynCoreNet_Response>) NIL_CHK(rsp)) responseCode] withNSString:[((id<PlaynCoreNet_Response>) NIL_CHK(rsp)) payloadString]] autorelease]];
  }
}

- (id)initWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)arg$0
          withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)capture$0 {
  if ((self = [super initWithPlaynCoreUtilCallback:arg$0])) {
    JreOperatorRetainedAssign(&val$callback_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$callback_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreNetImpl_$1 *typedCopy = (PlaynCoreNetImpl_$1 *) copy;
  typedCopy.val$callback = val$callback_;
}

@end

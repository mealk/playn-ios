//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/AudioImpl.java
//
//  Created by Thomas on 7/1/13.
//

#import "AbstractSound.h"
#import "Platform.h"
#import "java/lang/Throwable.h"
#import "AudioImpl.h"

@implementation PlaynCoreAudioImpl

- (id<PlaynCorePlatform>)platform {
  return platform_;
}
- (void)setPlatform:(id<PlaynCorePlatform>)platform {
  JreOperatorRetainedAssign(&platform_, self, platform);
}
@synthesize platform = platform_;

- (id)initWithPlaynCorePlatform:(id<PlaynCorePlatform>)platform {
  if ((self = [super init])) {
    self.platform = platform;
  }
  return self;
}

- (void)dispatchLoadedWithPlaynCoreAbstractSound:(PlaynCoreAbstractSound *)sound
                                          withId:(id)impl {
  [((id<PlaynCorePlatform>) NIL_CHK(platform_)) invokeLaterWithJavaLangRunnable:[[[PlaynCoreAudioImpl_$1 alloc] initWithPlaynCoreAbstractSound:sound withId:impl] autorelease]];
}

- (void)dispatchLoadErrorWithPlaynCoreAbstractSound:(PlaynCoreAbstractSound *)sound
                              withJavaLangThrowable:(JavaLangThrowable *)error {
  [((id<PlaynCorePlatform>) NIL_CHK(platform_)) invokeLaterWithJavaLangRunnable:[[[PlaynCoreAudioImpl_$2 alloc] initWithPlaynCoreAbstractSound:sound withJavaLangThrowable:error] autorelease]];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&platform_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAudioImpl *typedCopy = (PlaynCoreAudioImpl *) copy;
  typedCopy.platform = platform_;
}

@end
@implementation PlaynCoreAudioImpl_$1

- (PlaynCoreAbstractSound *)val$sound {
  return val$sound_;
}
- (void)setVal$sound:(PlaynCoreAbstractSound *)val$sound {
  JreOperatorRetainedAssign(&val$sound_, self, val$sound);
}
@synthesize val$sound = val$sound_;
- (id)val$impl {
  return val$impl_;
}
- (void)setVal$impl:(id)val$impl {
  JreOperatorRetainedAssign(&val$impl_, self, val$impl);
}
@synthesize val$impl = val$impl_;

- (void)run {
  [((PlaynCoreAbstractSound *) NIL_CHK(val$sound_)) onLoadedWithId:val$impl_];
}

- (id)initWithPlaynCoreAbstractSound:(PlaynCoreAbstractSound *)capture$0
                              withId:(id)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$sound_, self, capture$0);
    JreOperatorRetainedAssign(&val$impl_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$impl_, self, nil);
  JreOperatorRetainedAssign(&val$sound_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAudioImpl_$1 *typedCopy = (PlaynCoreAudioImpl_$1 *) copy;
  typedCopy.val$sound = val$sound_;
  typedCopy.val$impl = val$impl_;
}

@end
@implementation PlaynCoreAudioImpl_$2

- (PlaynCoreAbstractSound *)val$sound {
  return val$sound_;
}
- (void)setVal$sound:(PlaynCoreAbstractSound *)val$sound {
  JreOperatorRetainedAssign(&val$sound_, self, val$sound);
}
@synthesize val$sound = val$sound_;
- (JavaLangThrowable *)val$error {
  return val$error_;
}
- (void)setVal$error:(JavaLangThrowable *)val$error {
  JreOperatorRetainedAssign(&val$error_, self, val$error);
}
@synthesize val$error = val$error_;

- (void)run {
  [((PlaynCoreAbstractSound *) NIL_CHK(val$sound_)) onLoadErrorWithJavaLangThrowable:val$error_];
}

- (id)initWithPlaynCoreAbstractSound:(PlaynCoreAbstractSound *)capture$0
               withJavaLangThrowable:(JavaLangThrowable *)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$sound_, self, capture$0);
    JreOperatorRetainedAssign(&val$error_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$error_, self, nil);
  JreOperatorRetainedAssign(&val$sound_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAudioImpl_$2 *typedCopy = (PlaynCoreAudioImpl_$2 *) copy;
  typedCopy.val$sound = val$sound_;
  typedCopy.val$error = val$error_;
}

@end

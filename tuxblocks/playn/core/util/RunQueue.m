//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/util/RunQueue.java
//
//  Created by Thomas on 7/1/13.
//

#import "Log.h"
#import "java/lang/Runnable.h"
#import "java/lang/Throwable.h"
#import "RunQueue.h"

@implementation PlaynCoreUtilRunQueue

- (id<PlaynCoreLog>)log {
  return log_;
}
- (void)setLog:(id<PlaynCoreLog>)log {
  JreOperatorRetainedAssign(&log_, self, log);
}
@synthesize log = log_;
- (PlaynCoreUtilRunQueue_Entry *)head {
  return head_;
}
- (void)setHead:(PlaynCoreUtilRunQueue_Entry *)head {
  JreOperatorRetainedAssign(&head_, self, head);
}
@synthesize head = head_;

- (id)initWithPlaynCoreLog:(id<PlaynCoreLog>)log {
  if ((self = [super init])) {
    self.log = log;
  }
  return self;
}

- (void)execute {
  PlaynCoreUtilRunQueue_Entry *head;
  @synchronized (self) {
    head = self.head;
    self.head = nil;
  }
  while (head != nil) {
    @try {
      [((id<JavaLangRunnable>) NIL_CHK(head.runnable)) run];
    }
    @catch (JavaLangThrowable *t) {
      [((id<PlaynCoreLog>) NIL_CHK(log_)) warnWithNSString:[NSString stringWithFormat:@"Failure executing runnable: %@", ((PlaynCoreUtilRunQueue_Entry *) NIL_CHK(head)).runnable] withJavaLangThrowable:t];
    }
    head = ((PlaynCoreUtilRunQueue_Entry *) NIL_CHK(head)).next;
  }
}

- (void)addWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  @synchronized(self) {
    {
      if (head_ == nil) {
        JreOperatorRetainedAssign(&head_, self, [[[PlaynCoreUtilRunQueue_Entry alloc] initWithPlaynCoreUtilRunQueue:self withJavaLangRunnable:runnable] autorelease]);
      }
      else {
        PlaynCoreUtilRunQueue_Entry *parent = head_;
        while (((PlaynCoreUtilRunQueue_Entry *) NIL_CHK(parent)).next != nil) {
          parent = ((PlaynCoreUtilRunQueue_Entry *) NIL_CHK(parent)).next;
        }
        ((PlaynCoreUtilRunQueue_Entry *) NIL_CHK(parent)).next = [[[PlaynCoreUtilRunQueue_Entry alloc] initWithPlaynCoreUtilRunQueue:self withJavaLangRunnable:runnable] autorelease];
      }
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&head_, self, nil);
  JreOperatorRetainedAssign(&log_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreUtilRunQueue *typedCopy = (PlaynCoreUtilRunQueue *) copy;
  typedCopy.log = log_;
  typedCopy.head = head_;
}

@end
@implementation PlaynCoreUtilRunQueue_Entry

- (id<JavaLangRunnable>)runnable {
  return runnable_;
}
- (void)setRunnable:(id<JavaLangRunnable>)runnable {
  JreOperatorRetainedAssign(&runnable_, self, runnable);
}
@synthesize runnable = runnable_;
- (PlaynCoreUtilRunQueue_Entry *)next {
  return next_;
}
- (void)setNext:(PlaynCoreUtilRunQueue_Entry *)next {
  JreOperatorRetainedAssign(&next_, self, next);
}
@synthesize next = next_;

- (id)initWithPlaynCoreUtilRunQueue:(PlaynCoreUtilRunQueue *)outer$
               withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  if ((self = [super init])) {
    self.runnable = runnable;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&next_, self, nil);
  JreOperatorRetainedAssign(&runnable_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreUtilRunQueue_Entry *typedCopy = (PlaynCoreUtilRunQueue_Entry *) copy;
  typedCopy.runnable = runnable_;
  typedCopy.next = next_;
}

@end

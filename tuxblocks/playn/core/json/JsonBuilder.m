//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/json/JsonBuilder.java
//
//  Created by Thomas on 7/1/13.
//

#import "Json.h"
#import "JsonArray.h"
#import "JsonObject.h"
#import "JsonWriterException.h"
#import "java/lang/Boolean.h"
#import "java/lang/ClassCastException.h"
#import "java/util/Collection.h"
#import "java/util/Map.h"
#import "java/util/Stack.h"
#import "JsonBuilder.h"

@implementation PlaynCoreJsonJsonBuilder

- (JavaUtilStack *)json {
  return json_;
}
- (void)setJson:(JavaUtilStack *)json {
  JreOperatorRetainedAssign(&json_, self, json);
}
@synthesize json = json_;
- (id)root {
  return root_;
}
- (void)setRoot:(id)root {
  JreOperatorRetainedAssign(&root_, self, root);
}
@synthesize root = root_;

- (id)initWithId:(id)root {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&json_, self, [[[JavaUtilStack alloc] init] autorelease]);
    self.root = root;
    (void) [((JavaUtilStack *) NIL_CHK(json_)) pushWithId:root];
  }
  return self;
}

- (id)done {
  return root_;
}

- (PlaynCoreJsonJsonBuilder *)arrayWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [self valueWithId:c];
}

- (PlaynCoreJsonJsonBuilder *)arrayWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)c {
  return [self valueWithId:c];
}

- (PlaynCoreJsonJsonBuilder *)arrayWithNSString:(NSString *)key
                         withJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [self valueWithNSString:key withId:c];
}

- (PlaynCoreJsonJsonBuilder *)arrayWithNSString:(NSString *)key
                        withPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)c {
  return [self valueWithNSString:key withId:c];
}

- (PlaynCoreJsonJsonBuilder *)objectWithJavaUtilMap:(id<JavaUtilMap>)map {
  return [self valueWithId:map];
}

- (PlaynCoreJsonJsonBuilder *)objectWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)object {
  return [self valueWithId:object];
}

- (PlaynCoreJsonJsonBuilder *)objectWithNSString:(NSString *)key
                                 withJavaUtilMap:(id<JavaUtilMap>)map {
  return [self valueWithNSString:key withId:map];
}

- (PlaynCoreJsonJsonBuilder *)objectWithNSString:(NSString *)key
                        withPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)object {
  return [self valueWithNSString:key withId:object];
}

- (PlaynCoreJsonJsonBuilder *)nul {
  return [self valueWithId:(id) nil];
}

- (PlaynCoreJsonJsonBuilder *)nulWithNSString:(NSString *)key {
  return [self valueWithNSString:key withId:(id) nil];
}

- (PlaynCoreJsonJsonBuilder *)valueWithId:(id)o {
  [[self arr] addWithId:o];
  return self;
}

- (PlaynCoreJsonJsonBuilder *)valueWithNSString:(NSString *)key
                                         withId:(id)o {
  [[self obj] putWithNSString:key withId:o];
  return self;
}

- (PlaynCoreJsonJsonBuilder *)valueWithNSString:(NSString *)s {
  return [self valueWithId:(id) s];
}

- (PlaynCoreJsonJsonBuilder *)valueWithBOOL:(BOOL)b {
  return [self valueWithId:[JavaLangBoolean valueOfWithBOOL:b]];
}

- (PlaynCoreJsonJsonBuilder *)valueWithNSNumber:(NSNumber *)n {
  return [self valueWithId:(id) n];
}

- (PlaynCoreJsonJsonBuilder *)valueWithNSString:(NSString *)key
                                   withNSString:(NSString *)s {
  return [self valueWithNSString:key withId:(id) s];
}

- (PlaynCoreJsonJsonBuilder *)valueWithNSString:(NSString *)key
                                       withBOOL:(BOOL)b {
  return [self valueWithNSString:key withId:[JavaLangBoolean valueOfWithBOOL:b]];
}

- (PlaynCoreJsonJsonBuilder *)valueWithNSString:(NSString *)key
                                   withNSNumber:(NSNumber *)n {
  return [self valueWithNSString:key withId:(id) n];
}

- (PlaynCoreJsonJsonBuilder *)array {
  PlaynCoreJsonJsonArray *a = [[[PlaynCoreJsonJsonArray alloc] init] autorelease];
  (void) [self valueWithId:a];
  (void) [((JavaUtilStack *) NIL_CHK(json_)) pushWithId:a];
  return self;
}

- (PlaynCoreJsonJsonBuilder *)object {
  PlaynCoreJsonJsonObject *o = [[[PlaynCoreJsonJsonObject alloc] init] autorelease];
  (void) [self valueWithId:o];
  (void) [((JavaUtilStack *) NIL_CHK(json_)) pushWithId:o];
  return self;
}

- (PlaynCoreJsonJsonBuilder *)arrayWithNSString:(NSString *)key {
  PlaynCoreJsonJsonArray *a = [[[PlaynCoreJsonJsonArray alloc] init] autorelease];
  (void) [self valueWithNSString:key withId:a];
  (void) [((JavaUtilStack *) NIL_CHK(json_)) pushWithId:a];
  return self;
}

- (PlaynCoreJsonJsonBuilder *)objectWithNSString:(NSString *)key {
  PlaynCoreJsonJsonObject *o = [[[PlaynCoreJsonJsonObject alloc] init] autorelease];
  (void) [self valueWithNSString:key withId:o];
  (void) [((JavaUtilStack *) NIL_CHK(json_)) pushWithId:o];
  return self;
}

- (PlaynCoreJsonJsonBuilder *)end {
  if ([((JavaUtilStack *) NIL_CHK(json_)) size] == 1) @throw [[[PlaynCoreJsonJsonWriterException alloc] initWithNSString:@"Cannot end the root object or array"] autorelease];
  (void) [((JavaUtilStack *) NIL_CHK(json_)) pop];
  return self;
}

- (PlaynCoreJsonJsonObject *)obj {
  @try {
    return (PlaynCoreJsonJsonObject *) [((JavaUtilStack *) NIL_CHK(json_)) peek];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [[[PlaynCoreJsonJsonWriterException alloc] initWithNSString:@"Attempted to write a keyed value to a JsonArray"] autorelease];
  }
}

- (PlaynCoreJsonJsonArray *)arr {
  @try {
    return (PlaynCoreJsonJsonArray *) [((JavaUtilStack *) NIL_CHK(json_)) peek];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [[[PlaynCoreJsonJsonWriterException alloc] initWithNSString:@"Attempted to write a non-keyed value to a JsonObject"] autorelease];
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&root_, self, nil);
  JreOperatorRetainedAssign(&json_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreJsonJsonBuilder *typedCopy = (PlaynCoreJsonJsonBuilder *) copy;
  typedCopy.json = json_;
  typedCopy.root = root_;
}

@end

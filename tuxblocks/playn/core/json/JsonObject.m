//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/json/JsonObject.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "Json.h"
#import "JsonBuilder.h"
#import "JsonImpl.h"
#import "JsonSink.h"
#import "JsonStringTypedArray.h"
#import "JsonTypedArray.h"
#import "java/lang/Boolean.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/Map.h"
#import "java/util/Set.h"
#import "JsonObject.h"

@implementation PlaynCoreJsonJsonObject

- (JavaUtilHashMap *)map {
  return map_;
}
- (void)setMap:(JavaUtilHashMap *)map {
  JreOperatorRetainedAssign(&map_, self, map);
}
@synthesize map = map_;

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&map_, self, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
  return self;
}

+ (PlaynCoreJsonJsonBuilder *)builder {
  return [[[PlaynCoreJsonJsonBuilder alloc] initWithId:[[[PlaynCoreJsonJsonObject alloc] init] autorelease]] autorelease];
}

- (id<PlaynCoreJson_Array>)getArrayWithNSString:(NSString *)key {
  return [self getArrayWithNSString:key withPlaynCoreJson_Array:(id<PlaynCoreJson_Array>) nil];
}

- (id<PlaynCoreJson_Array>)getArrayWithNSString:(NSString *)key
                        withPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)default_ {
  id o = [self getWithNSString:key];
  return ([o conformsToProtocol: @protocol(PlaynCoreJson_Array)]) ? (id<PlaynCoreJson_Array>) o : default_;
}

- (BOOL)getBooleanWithNSString:(NSString *)key {
  return [self getBooleanWithNSString:key withBOOL:NO];
}

- (BOOL)getBooleanWithNSString:(NSString *)key
                      withBOOL:(BOOL)default_ {
  id o = [self getWithNSString:key];
  return [o isKindOfClass:[JavaLangBoolean class]] ? [(JavaLangBoolean *) o booleanValue] : default_;
}

- (double)getDoubleWithNSString:(NSString *)key {
  return [self getDoubleWithNSString:key withDouble:0];
}

- (double)getDoubleWithNSString:(NSString *)key
                     withDouble:(double)default_ {
  id o = [self getWithNSString:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) doubleValue] : default_;
}

- (float)getNumberWithNSString:(NSString *)key {
  return [self getNumberWithNSString:key withFloat:0];
}

- (float)getNumberWithNSString:(NSString *)key
                     withFloat:(float)default_ {
  id o = [self getWithNSString:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) floatValue] : default_;
}

- (int)getIntWithNSString:(NSString *)key {
  return [self getIntWithNSString:key withInt:0];
}

- (int)getIntWithNSString:(NSString *)key
                  withInt:(int)default_ {
  id o = [self getWithNSString:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) intValue] : default_;
}

- (long long int)getLongWithNSString:(NSString *)key {
  return [self getLongWithNSString:key withLongInt:0LL];
}

- (long long int)getLongWithNSString:(NSString *)key
                         withLongInt:(long long int)default_ {
  id o = [self getWithNSString:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) longLongValue] : default_;
}

- (id<PlaynCoreJson_Object>)getObjectWithNSString:(NSString *)key {
  return [self getObjectWithNSString:key withPlaynCoreJson_Object:nil];
}

- (id<PlaynCoreJson_Object>)getObjectWithNSString:(NSString *)key
                         withPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)default_ {
  id o = [self getWithNSString:key];
  return ([o isKindOfClass:[PlaynCoreJsonJsonObject class]]) ? (PlaynCoreJsonJsonObject *) o : ((id) default_);
}

- (NSString *)getStringWithNSString:(NSString *)key {
  return [self getStringWithNSString:key withNSString:nil];
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)default_ {
  id o = [self getWithNSString:key];
  return ([o isKindOfClass:[NSString class]]) ? (NSString *) o : default_;
}

- (BOOL)containsKeyWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) NIL_CHK(map_)) containsKeyWithId:key];
}

- (BOOL)isArrayWithNSString:(NSString *)key {
  return [[self getWithNSString:key] conformsToProtocol: @protocol(PlaynCoreJson_Array)];
}

- (BOOL)isBooleanWithNSString:(NSString *)key {
  return [[self getWithNSString:key] isKindOfClass:[JavaLangBoolean class]];
}

- (BOOL)isNullWithNSString:(NSString *)key {
  return [self getWithNSString:key] == nil;
}

- (BOOL)isNumberWithNSString:(NSString *)key {
  return [[self getWithNSString:key] isKindOfClass:[NSNumber class]];
}

- (BOOL)isStringWithNSString:(NSString *)key {
  return [[self getWithNSString:key] isKindOfClass:[NSString class]];
}

- (BOOL)isObjectWithNSString:(NSString *)key {
  return [[self getWithNSString:key] conformsToProtocol: @protocol(PlaynCoreJson_Object)];
}

- (id<PlaynCoreJson_TypedArray>)getArrayWithNSString:(NSString *)key
                                        withIOSClass:(IOSClass *)valueType {
  return ((id<PlaynCoreJson_TypedArray>) [self getArrayWithNSString:key withIOSClass:valueType withPlaynCoreJson_TypedArray:nil]);
}

- (id<PlaynCoreJson_TypedArray>)getArrayWithNSString:(NSString *)key
                                        withIOSClass:(IOSClass *)valueType
                        withPlaynCoreJson_TypedArray:(id<PlaynCoreJson_TypedArray>)dflt {
  id<PlaynCoreJson_Array> array = [self getArrayWithNSString:key];
  return array == nil ? ((id) dflt) : [[[PlaynCoreJsonJsonTypedArray alloc] initWithPlaynCoreJson_Array:array withIOSClass:valueType] autorelease];
}

- (id<PlaynCoreJson_TypedArray>)keys {
  return [[[PlaynCoreJsonJsonStringTypedArray alloc] initWithJavaUtilCollection:((id<JavaUtilSet>) [((JavaUtilHashMap *) NIL_CHK(map_)) keySet])] autorelease];
}

- (void)putWithNSString:(NSString *)key
                 withId:(id)value {
  [PlaynCoreJsonJsonImpl checkJsonTypeWithId:value];
  (void) [((JavaUtilHashMap *) NIL_CHK(map_)) putWithId:key withId:value];
}

- (void)removeWithNSString:(NSString *)key {
  (void) [((JavaUtilHashMap *) NIL_CHK(map_)) removeWithId:key];
}

- (NSString *)description {
  return [((JavaUtilHashMap *) NIL_CHK(map_)) description];
}

- (id<PlaynCoreJsonJsonSink>)writeWithPlaynCoreJsonJsonSink:(id<PlaynCoreJsonJsonSink>)sink {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((JavaUtilHashMap *) NIL_CHK(map_)) entrySet]) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> entry = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      (void) [((id<PlaynCoreJsonJsonSink>) NIL_CHK(sink)) valueWithNSString:((NSString *) [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey]) withId:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue]];
    }
  }
  return sink;
}

- (id)getWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) NIL_CHK(map_)) getWithId:key];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&map_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreJsonJsonObject *typedCopy = (PlaynCoreJsonJsonObject *) copy;
  typedCopy.map = map_;
}

@end

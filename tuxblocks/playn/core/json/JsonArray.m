//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/json/JsonArray.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "Json.h"
#import "JsonBuilder.h"
#import "JsonImpl.h"
#import "JsonSink.h"
#import "JsonTypedArray.h"
#import "java/lang/Boolean.h"
#import "java/util/ArrayList.h"
#import "java/util/Arrays.h"
#import "java/util/Collection.h"
#import "java/util/List.h"
#import "JsonArray.h"

@implementation PlaynCoreJsonJsonArray

- (JavaUtilArrayList *)list {
  return list_;
}
- (void)setList:(JavaUtilArrayList *)list {
  JreOperatorRetainedAssign(&list_, self, list);
}
@synthesize list = list_;

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&list_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  return self;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&list_, self, [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:collection] autorelease]);
  }
  return self;
}

+ (PlaynCoreJsonJsonArray *)fromWithNSObjectArray:(IOSObjectArray *)contents {
  return [[[PlaynCoreJsonJsonArray alloc] initWithJavaUtilCollection:((id<JavaUtilList>) [JavaUtilArrays asListWithNSObjectArray:contents])] autorelease];
}

+ (PlaynCoreJsonJsonBuilder *)builder {
  return [[[PlaynCoreJsonJsonBuilder alloc] initWithId:[[[PlaynCoreJsonJsonArray alloc] init] autorelease]] autorelease];
}

- (void)addWithId:(id)value {
  [PlaynCoreJsonJsonImpl checkJsonTypeWithId:value];
  [((JavaUtilArrayList *) NIL_CHK(list_)) addWithId:value];
}

- (void)addWithInt:(int)index
            withId:(id)value {
  [PlaynCoreJsonJsonImpl checkJsonTypeWithId:value];
  while ([((JavaUtilArrayList *) NIL_CHK(list_)) size] < index) [((JavaUtilArrayList *) NIL_CHK(list_)) addWithId:nil];
  [((JavaUtilArrayList *) NIL_CHK(list_)) addWithInt:index withId:value];
}

- (id<PlaynCoreJson_Array>)getArrayWithInt:(int)key {
  return [self getArrayWithInt:key withPlaynCoreJson_Array:(id<PlaynCoreJson_Array>) nil];
}

- (id<PlaynCoreJson_Array>)getArrayWithInt:(int)key
                   withPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)default_ {
  id o = [self getWithInt:key];
  return ([o conformsToProtocol: @protocol(PlaynCoreJson_Array)]) ? (id<PlaynCoreJson_Array>) [self getWithInt:key] : default_;
}

- (id<PlaynCoreJson_TypedArray>)getArrayWithInt:(int)index
                                   withIOSClass:(IOSClass *)jsonType {
  id<PlaynCoreJson_Array> array = [self getArrayWithInt:index];
  return array == nil ? nil : [[[PlaynCoreJsonJsonTypedArray alloc] initWithPlaynCoreJson_Array:array withIOSClass:jsonType] autorelease];
}

- (BOOL)getBooleanWithInt:(int)key {
  return [self getBooleanWithInt:key withBOOL:NO];
}

- (BOOL)getBooleanWithInt:(int)key
                 withBOOL:(BOOL)default_ {
  id o = [self getWithInt:key];
  return [o isKindOfClass:[JavaLangBoolean class]] ? [(JavaLangBoolean *) o booleanValue] : default_;
}

- (double)getDoubleWithInt:(int)key {
  return [self getDoubleWithInt:key withDouble:0];
}

- (double)getDoubleWithInt:(int)key
                withDouble:(double)default_ {
  id o = [self getWithInt:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) doubleValue] : default_;
}

- (float)getNumberWithInt:(int)key {
  return [self getNumberWithInt:key withFloat:0];
}

- (float)getNumberWithInt:(int)key
                withFloat:(float)default_ {
  id o = [self getWithInt:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) floatValue] : default_;
}

- (int)getIntWithInt:(int)key {
  return [self getIntWithInt:key withInt:0];
}

- (int)getIntWithInt:(int)key
             withInt:(int)default_ {
  id o = [self getWithInt:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) intValue] : default_;
}

- (long long int)getLongWithInt:(int)key {
  return [self getLongWithInt:key withLongInt:0];
}

- (long long int)getLongWithInt:(int)key
                    withLongInt:(long long int)default_ {
  id o = [self getWithInt:key];
  return [o isKindOfClass:[NSNumber class]] ? [((NSNumber *) o) longLongValue] : default_;
}

- (id<PlaynCoreJson_Object>)getObjectWithInt:(int)key {
  return [self getObjectWithInt:key withPlaynCoreJson_Object:nil];
}

- (id<PlaynCoreJson_Object>)getObjectWithInt:(int)key
                    withPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)default_ {
  id o = [self getWithInt:key];
  return [o conformsToProtocol: @protocol(PlaynCoreJson_Object)] ? (id<PlaynCoreJson_Object>) [self getWithInt:key] : default_;
}

- (NSString *)getStringWithInt:(int)key {
  return [self getStringWithInt:key withNSString:nil];
}

- (NSString *)getStringWithInt:(int)key
                  withNSString:(NSString *)default_ {
  id o = [self getWithInt:key];
  return ([o isKindOfClass:[NSString class]]) ? (NSString *) o : default_;
}

- (BOOL)isArrayWithInt:(int)key {
  return [[self getWithInt:key] conformsToProtocol: @protocol(PlaynCoreJson_Array)];
}

- (BOOL)isBooleanWithInt:(int)key {
  return [[self getWithInt:key] isKindOfClass:[JavaLangBoolean class]];
}

- (BOOL)isNullWithInt:(int)key {
  return [self getWithInt:key] == nil;
}

- (BOOL)isNumberWithInt:(int)key {
  return [[self getWithInt:key] isKindOfClass:[NSNumber class]];
}

- (BOOL)isStringWithInt:(int)key {
  return [[self getWithInt:key] isKindOfClass:[NSString class]];
}

- (BOOL)isObjectWithInt:(int)key {
  return [[self getWithInt:key] conformsToProtocol: @protocol(PlaynCoreJson_Object)];
}

- (int)length {
  return [((JavaUtilArrayList *) NIL_CHK(list_)) size];
}

- (void)removeWithInt:(int)index {
  if (index < 0 || index >= [((JavaUtilArrayList *) NIL_CHK(list_)) size]) return;
  (void) [((JavaUtilArrayList *) NIL_CHK(list_)) removeWithInt:index];
}

- (void)setWithInt:(int)index
            withId:(id)value {
  [PlaynCoreJsonJsonImpl checkJsonTypeWithId:value];
  while ([((JavaUtilArrayList *) NIL_CHK(list_)) size] <= index) [((JavaUtilArrayList *) NIL_CHK(list_)) addWithId:nil];
  (void) [((JavaUtilArrayList *) NIL_CHK(list_)) setWithInt:index withId:value];
}

- (NSString *)description {
  return [((JavaUtilArrayList *) NIL_CHK(list_)) description];
}

- (id<PlaynCoreJsonJsonSink>)writeWithPlaynCoreJsonJsonSink:(id<PlaynCoreJsonJsonSink>)sink {
  for (int i = 0; i < [((JavaUtilArrayList *) NIL_CHK(list_)) size]; i++) (void) [((id<PlaynCoreJsonJsonSink>) NIL_CHK(sink)) valueWithId:[((JavaUtilArrayList *) NIL_CHK(list_)) getWithInt:i]];
  return sink;
}

- (id)getWithInt:(int)key {
  return (key >= 0 && key < [((JavaUtilArrayList *) NIL_CHK(list_)) size]) ? [((JavaUtilArrayList *) NIL_CHK(list_)) getWithInt:key] : nil;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&list_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreJsonJsonArray *typedCopy = (PlaynCoreJsonJsonArray *) copy;
  typedCopy.list = list_;
}

@end

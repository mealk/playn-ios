//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/Inventory.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Math.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Color.h"
#import "playn/core/Font.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/Pointer.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/MenuSprite.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/defense/DefenseScreen.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/Inventory.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/tower/TowerType.h"
#import "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TuxkidsTuxblocksCoreDefenseInventory

@synthesize grid = grid_;
@synthesize groupLayer = groupLayer_;
@synthesize width = width_;
@synthesize height = height_;
@synthesize countSprites = countSprites_;
@synthesize itemButtons = itemButtons_;
@synthesize textFormat = textFormat_;
@synthesize screen = screen_;

- (id<PlaynCoreGroupLayer>)layer {
  return groupLayer_;
}

- (int)getItemSpriteSize {
  int wSize = (int) ((width_ - TuxkidsTuxblocksCoreDefenseInventory_ITEM_SPRITE_MARGIN * 2) / TuxkidsTuxblocksCoreDefenseInventory_COLS * 0.9f);
  int hSize = (int) ((height_ - TuxkidsTuxblocksCoreDefenseInventory_ITEM_SPRITE_MARGIN * 2) / [self rows] * 0.9f) - [self getItemCaptionHeight];
  return [JavaLangMath minWithInt:wSize withInt:hSize];
}

- (int)getItemCaptionHeight {
  return textFormat_ == nil ? 0 : (int) ([((id<PlaynCoreFont>) NIL_CHK(textFormat_.font)) size] + TuxkidsTuxblocksCoreDefenseInventory_ITEM_SPRITE_MARGIN);
}

- (float)getItemSpriteXWithInt:(int)index {
  int j = index % TuxkidsTuxblocksCoreDefenseInventory_COLS;
  float spriteWidth = width_ / TuxkidsTuxblocksCoreDefenseInventory_COLS;
  return width_ / 2 + (j - (TuxkidsTuxblocksCoreDefenseInventory_COLS - 1) * 0.5f) * spriteWidth;
}

- (int)rows {
  return ([TuxkidsTuxblocksCoreDefenseTowerTower towerCount] - 1) / TuxkidsTuxblocksCoreDefenseInventory_COLS + 1;
}

- (float)getItemSpriteYWithInt:(int)index {
  int i = index / TuxkidsTuxblocksCoreDefenseInventory_COLS;
  int rows = [self rows];
  float spriteHeight = [self getItemSpriteSize] + TuxkidsTuxblocksCoreDefenseInventory_ITEM_SPRITE_MARGIN * 2 + [self getItemCaptionHeight];
  return height_ / 2 + (i - (rows - 1) * 0.5f) * spriteHeight;
}

- (IOSIntArray *)towerCounts {
  return [[((TuxkidsTuxblocksCoreDefenseDefenseScreen *) NIL_CHK(screen_)) state] towerCounts];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseDefenseScreen:(TuxkidsTuxblocksCoreDefenseDefenseScreen *)screen
                   withTuxkidsTuxblocksCoreDefenseGrid:(TuxkidsTuxblocksCoreDefenseGrid *)grid
                                               withInt:(int)width
                                               withInt:(int)height {
  if ((self = [super init])) {
    groupLayer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createGroupLayer];
    self.screen = screen;
    self.grid = grid;
    self.width = width;
    self.height = height;
    textFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum BOLD] withFloat:[self getItemSpriteSize] / 7]];
    [self createSelectionSprites];
    [self createCountSprites];
    [[((TuxkidsTuxblocksCoreDefenseDefenseScreen *) NIL_CHK(screen)) state] setInventoryChangedListenerWithTuxkidsTuxblocksCoreGameState_InventoryChangedListener:[[TuxkidsTuxblocksCoreDefenseInventory_$1 alloc] initWithTuxkidsTuxblocksCoreDefenseInventory:self]];
  }
  return self;
}

- (void)createCountSprites {
  countSprites_ = [[IOSObjectArray alloc] initWithLength:(int) [[self towerCounts] count] type:[IOSClass classWithProtocol:@protocol(PlaynCoreImageLayer)]];
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(countSprites_)) count]; i++) {
    [((IOSObjectArray *) NIL_CHK(countSprites_)) replaceObjectAtIndex:i withObject:[((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageLayer]];
    (void) [((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(countSprites_)) objectAtIndex:i]) setTranslationWithFloat:[self getItemSpriteXWithInt:i] - [self getItemSpriteSize] / 2 + TuxkidsTuxblocksCoreDefenseInventory_ITEM_SPRITE_MARGIN withFloat:[self getItemSpriteYWithInt:i] - [self getItemSpriteSize] / 2 - [self getItemCaptionHeight] / 2 + TuxkidsTuxblocksCoreDefenseInventory_ITEM_SPRITE_MARGIN];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) addWithPlaynCoreLayer:((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(countSprites_)) objectAtIndex:i])];
    [self refreshCountSpriteWithInt:i];
  }
}

- (void)refreshCountSprites {
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(countSprites_)) count]; i++) {
    [self refreshCountSpriteWithInt:i];
  }
}

- (void)refreshCountSpriteWithInt:(int)index {
  NSString *text = [NSString stringWithFormat:@"x%d", [[self towerCounts] intAtIndex:index]];
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) layoutTextWithNSString:text withPlaynCoreTextFormat:textFormat_];
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width] withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) height]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:[TripleplayUtilColors BLACK]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillTextWithPlaynCoreTextLayout:layout withFloat:0 withFloat:0];
  (void) [((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(countSprites_)) objectAtIndex:index]) setImageWithPlaynCoreImage:image];
  [((TuxkidsTuxblocksCoreButton *) [((IOSObjectArray *) NIL_CHK(itemButtons_)) objectAtIndex:index]) setEnabledWithBOOL:[[self towerCounts] intAtIndex:index] > 0];
}

- (void)createSelectionSprites {
  int spriteSize = [self getItemSpriteSize];
  int textHeight = [self getItemCaptionHeight];
  int rad = (int) (spriteSize * 0.05f);
  float padding = spriteSize * 0.1f;
  float cellSize = (spriteSize - padding * 2) / 3;
  float strokeWidth = 5;
  itemButtons_ = [[IOSObjectArray alloc] initWithLength:[TuxkidsTuxblocksCoreDefenseTowerTower towerCount] type:[IOSClass classWithClass:[TuxkidsTuxblocksCoreButton class]]];
  for (int index = 0; index < (int) [((IOSObjectArray *) NIL_CHK(itemButtons_)) count]; index++) {
    TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *towerType = [TuxkidsTuxblocksCoreDefenseTowerTower getTypeByIndexWithInt:index];
    id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) layoutTextWithNSString:[[((TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *) NIL_CHK(towerType)) instance] name] withPlaynCoreTextFormat:textFormat_];
    float indentX = [JavaLangMath maxWithFloat:0 withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width] - spriteSize] / 2;
    id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageWithFloat:[JavaLangMath maxWithFloat:spriteSize withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width]] withFloat:spriteSize + textHeight];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:[TripleplayUtilColors WHITE]];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRoundRectWithFloat:indentX withFloat:0 withFloat:spriteSize withFloat:spriteSize withFloat:rad];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeColorWithInt:[TripleplayUtilColors DARK_GRAY]];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeWidthWithFloat:strokeWidth];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) strokeRoundRectWithFloat:indentX + strokeWidth / 2 - 1 withFloat:strokeWidth / 2 - 1 withFloat:spriteSize - strokeWidth + 2 withFloat:spriteSize - strokeWidth + 2 withFloat:rad];
    id<PlaynCoreImage> towerImage = [[((TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *) NIL_CHK(towerType)) instance] createImageWithFloat:cellSize withInt:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) towerColor]];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) drawImageWithPlaynCoreImage:towerImage withFloat:indentX + (spriteSize - [((id<PlaynCoreImage>) NIL_CHK(towerImage)) width]) / 2 withFloat:(spriteSize - [((id<PlaynCoreImage>) NIL_CHK(towerImage)) height]) / 2];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:[TripleplayUtilColors WHITE]];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillTextWithPlaynCoreTextLayout:layout withFloat:([((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] - [((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width]) / 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] - textHeight + TuxkidsTuxblocksCoreDefenseInventory_ITEM_SPRITE_MARGIN / 2];
    TuxkidsTuxblocksCoreButton *button = [[TuxkidsTuxblocksCoreButton alloc] initWithPlaynCoreImage:image withBOOL:NO];
    float x = [self getItemSpriteXWithInt:index];
    float y = [self getItemSpriteYWithInt:index];
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) setPositionWithFloat:x withFloat:y];
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) setTintWithInt:[TripleplayUtilColors WHITE] withInt:[PlaynCoreColor rgbWithInt:230 withInt:230 withInt:230]];
    int fi = index;
    [[((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) imageLayer] addListenerWithPlaynCorePointer_Listener:[[TuxkidsTuxblocksCoreDefenseInventory_$2 alloc] initWithTuxkidsTuxblocksCoreDefenseInventory:self withTuxkidsTuxblocksCoreButton:button withTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:towerType withInt:fi]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) layerAddable]];
    [((IOSObjectArray *) NIL_CHK(itemButtons_)) replaceObjectAtIndex:index withObject:button];
  }
}

- (void)createBackgroundSprite {
  id<PlaynCoreImage> image = [TuxkidsTuxblocksCoreUtilsCanvasUtils createRectWithFloat:width_ withFloat:height_ withInt:[PlaynCoreColor rgbWithInt:200 withInt:125 withInt:125] withFloat:1 withInt:[TripleplayUtilColors DARK_GRAY]];
  id<PlaynCoreImageLayer> layer = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageLayerWithPlaynCoreImage:image];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setAlphaWithFloat:[TuxkidsTuxblocksCoreMenuSprite DEFAULT_ALPHA]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) addWithPlaynCoreLayer:layer];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseInventory *typedCopy = (TuxkidsTuxblocksCoreDefenseInventory *) copy;
  typedCopy.grid = grid_;
  typedCopy.groupLayer = groupLayer_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.countSprites = countSprites_;
  typedCopy.itemButtons = itemButtons_;
  typedCopy.textFormat = textFormat_;
  typedCopy.screen = screen_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseInventory_$1

@synthesize this$0 = this$0_;

- (void)onInventoryChangedWithInt:(int)index
                          withInt:(int)count {
  [this$0_ refreshCountSpriteWithInt:index];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseInventory:(TuxkidsTuxblocksCoreDefenseInventory *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseInventory_$1 *typedCopy = (TuxkidsTuxblocksCoreDefenseInventory_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseInventory_$2

@synthesize this$0 = this$0_;
@synthesize val$button = val$button_;
@synthesize val$towerType = val$towerType_;
@synthesize val$fi = val$fi_;

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (![((TuxkidsTuxblocksCoreButton *) NIL_CHK(val$button_)) enabled]) return;
  [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(this$0_.grid)) startPlacementWithTuxkidsTuxblocksCoreDefenseTowerTower:[((TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *) NIL_CHK(val$towerType_)) newInstance]];
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (![((TuxkidsTuxblocksCoreButton *) NIL_CHK(val$button_)) enabled]) return;
  if ([((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(this$0_.grid)) endPlacementWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]]) {
    [[this$0_ towerCounts] postDecr:val$fi_];
    [this$0_ refreshCountSpriteWithInt:val$fi_];
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (![((TuxkidsTuxblocksCoreButton *) NIL_CHK(val$button_)) enabled]) return;
  [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(this$0_.grid)) updatePlacementWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]];
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (id)initWithTuxkidsTuxblocksCoreDefenseInventory:(TuxkidsTuxblocksCoreDefenseInventory *)outer$
                    withTuxkidsTuxblocksCoreButton:(TuxkidsTuxblocksCoreButton *)capture$0
 withTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:(TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *)capture$1
                                           withInt:(int)capture$2 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$button_ = capture$0;
    val$towerType_ = capture$1;
    val$fi_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseInventory_$2 *typedCopy = (TuxkidsTuxblocksCoreDefenseInventory_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$button = val$button_;
  typedCopy.val$towerType = val$towerType_;
  typedCopy.val$fi = val$fi_;
}

@end

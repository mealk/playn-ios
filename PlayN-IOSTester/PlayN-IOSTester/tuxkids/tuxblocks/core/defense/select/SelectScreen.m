//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/select/SelectScreen.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Color.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/ImmediateLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/Pointer.h"
#import "playn/core/Surface.h"
#import "playn/core/util/Clock.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/game/trans/SlideTransition.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/MenuSprite.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/select/Problem.h"
#import "tuxkids/tuxblocks/core/defense/select/ProblemButton.h"
#import "tuxkids/tuxblocks/core/defense/select/SelectScreen.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"
#import "tuxkids/tuxblocks/core/solve/SolveScreen.h"
#import "tuxkids/tuxblocks/core/solve/expression/Equation.h"

@implementation TuxkidsTuxblocksCoreDefenseSelectSelectScreen

@synthesize grid = grid_;
@synthesize gridHolder = gridHolder_;
@synthesize problemLayer = problemLayer_;
@synthesize selectedProblem = selectedProblem_;
@synthesize problemButtons = problemButtons_;
@synthesize bottomLeft = bottomLeft_;
@synthesize bottomRight = bottomRight_;
@synthesize solveScreen = solveScreen_;
@synthesize del = del_;

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
      withTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)gameState
    withTuxkidsTuxblocksCoreDefenseGrid:(TuxkidsTuxblocksCoreDefenseGrid *)grid {
  if ((self = [super initWithTripleplayGameScreenStack:screens withTuxkidsTuxblocksCoreGameState:gameState])) {
    problemButtons_ = [[JavaUtilArrayList alloc] init];
    self.grid = grid;
    TuxkidsTuxblocksCoreButton *button = [self createMenuButtonWithNSString:[TuxkidsTuxblocksCoreConstant BUTTON_FORWARD]];
    (void) [((id<PlaynCoreLayer>) [((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) layerAddable]) setDepthWithFloat:1];
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) setPositionWithFloat:[self width] - [((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) width] * 0.6f withFloat:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) height] * 0.6f];
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) setOnReleasedListenerWithTuxkidsTuxblocksCoreButton_OnReleasedListener:[[TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$1 alloc] initWithTuxkidsTuxblocksCoreDefenseSelectSelectScreen:self]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(button)) layerAddable]];
    TuxkidsTuxblocksCoreMenuSprite *menu = [[TuxkidsTuxblocksCoreMenuSprite alloc] initWithFloat:[self width] withFloat:[TuxkidsTuxblocksCoreScreenGameScreen defaultButtonSize] * 1.2f];
    (void) [((id<PlaynCoreLayer>) [((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu)) layer]) setDepthWithFloat:-1];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu)) layer]];
    gridHolder_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createGroupLayer];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setScaleWithFloat:[((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu)) height] / [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid)) height]];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setTranslationWithFloat:0 withFloat:0];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setAlphaWithFloat:0.75f];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:gridHolder_];
    problemLayer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createGroupLayer];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(problemLayer_)) setTyWithFloat:[((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu)) height]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:problemLayer_];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [[((TuxkidsTuxblocksCoreGameState *) NIL_CHK(state__)) problems] iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreDefenseSelectProblem *problem = ((TuxkidsTuxblocksCoreDefenseSelectProblem *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [self addProblemButtonWithTuxkidsTuxblocksCoreDefenseSelectProblem:problem];
      }
    }
    solveScreen_ = [[TuxkidsTuxblocksCoreSolveSolveScreen alloc] initWithTripleplayGameScreenStack:screens withTuxkidsTuxblocksCoreGameState:gameState];
    id<PlaynCoreImmediateLayer> il = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:[[TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$2 alloc] initWithTuxkidsTuxblocksCoreDefenseSelectSelectScreen:self]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) addWithPlaynCoreLayer:il];
    [((TuxkidsTuxblocksCoreGameState *) NIL_CHK(state__)) setProblemAddedListenerWithTuxkidsTuxblocksCoreGameState_ProblemAddedListener:self];
  }
  return self;
}

- (void)popThis {
  [self popThisWithTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(screens_)) slide] left]];
}

- (void)addProblemButtonWithTuxkidsTuxblocksCoreDefenseSelectProblem:(TuxkidsTuxblocksCoreDefenseSelectProblem *)problem {
  int margin = TuxkidsTuxblocksCoreDefenseSelectProblemButton_MARGIN;
  int width = (int) (([self width] - margin * (TuxkidsTuxblocksCoreDefenseSelectSelectScreen_COLS + 1)) / TuxkidsTuxblocksCoreDefenseSelectSelectScreen_COLS);
  int minHeight = (int) ([self height] / 6);
  int col;
  if (bottomLeft_ == nil) {
    col = 0;
  }
  else if (bottomRight_ == nil) {
    col = 1;
  }
  else if ([((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(bottomLeft_)) bottom] <= [bottomRight_ bottom]) {
    col = 0;
  }
  else {
    col = 1;
  }
  TuxkidsTuxblocksCoreDefenseSelectProblemButton *above = col == 0 ? bottomLeft_ : bottomRight_;
  float aboveY = above == nil ? 0 : [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(above)) bottom];
  TuxkidsTuxblocksCoreDefenseSelectProblemButton *pb = [[TuxkidsTuxblocksCoreDefenseSelectProblemButton alloc] initWithTuxkidsTuxblocksCoreDefenseSelectProblem:problem withFloat:width withFloat:minHeight withInt:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) towerColor]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(problemLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(pb)) layerAddable]];
  [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(pb)) setPositionWithFloat:(col + 0.5f) * [self width] / TuxkidsTuxblocksCoreDefenseSelectSelectScreen_COLS withFloat:aboveY + margin + [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(pb)) height] / 2];
  [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(pb)) setTintWithInt:[PlaynCoreColor withAlphaWithInt:[TripleplayUtilColors WHITE] withInt:225] withInt:[TripleplayUtilColors LIGHT_GRAY]];
  [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(pb)) setOnReleasedListenerWithTuxkidsTuxblocksCoreButton_OnReleasedListener:[[TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$3 alloc] initWithTuxkidsTuxblocksCoreDefenseSelectSelectScreen:self withTuxkidsTuxblocksCoreDefenseSelectProblemButton:pb]];
  [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(pb)) fadeInWithFloat:1];
  if (above != nil) {
    [above setBelowWithTuxkidsTuxblocksCoreDefenseSelectProblemButton:pb];
    [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(pb)) setAboveWithTuxkidsTuxblocksCoreDefenseSelectProblemButton:above];
  }
  if (col == 0) {
    bottomLeft_ = pb;
  }
  else {
    bottomRight_ = pb;
  }
  [((id<JavaUtilList>) NIL_CHK(problemButtons_)) addWithId:pb];
}

- (void)solveProblemWithTuxkidsTuxblocksCoreDefenseSelectProblemButton:(TuxkidsTuxblocksCoreDefenseSelectProblemButton *)button {
  [((TuxkidsTuxblocksCoreGameState *) NIL_CHK(state__)) solveProblemWithTuxkidsTuxblocksCoreDefenseSelectProblem:[((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) problem]];
  [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) destroy];
  if ([((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) above] != nil) {
    [[((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) above] setBelowWithTuxkidsTuxblocksCoreDefenseSelectProblemButton:[((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) below]];
  }
  if ([((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) below] != nil) {
    [[((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) below] setAboveWithTuxkidsTuxblocksCoreDefenseSelectProblemButton:[((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(button)) above]];
  }
  if (bottomLeft_ == button) bottomLeft_ = [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(bottomLeft_)) above];
  if (bottomRight_ == button) bottomRight_ = [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(bottomRight_)) above];
}

- (void)showTransitionCompleted {
  [super showTransitionCompleted];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) updateWithInt:delta];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) paintWithPlaynCoreUtilClock:clock];
  if ([self entering]) return;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(problemButtons_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreDefenseSelectProblemButton *problem = ((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(problem)) paintWithPlaynCoreUtilClock:clock];
    }
  }
  if (del_ && selectedProblem_ != nil && [((id<PlaynCoreLayer>) [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(selectedProblem_)) layerAddable]) alpha] < 0.03f) {
    [self solveProblemWithTuxkidsTuxblocksCoreDefenseSelectProblemButton:selectedProblem_];
    del_ = NO;
  }
}

- (void)onChildScreenFinishedWithTuxkidsTuxblocksCoreScreenGameScreen:(TuxkidsTuxblocksCoreScreenGameScreen *)screen {
  [super onChildScreenFinishedWithTuxkidsTuxblocksCoreScreenGameScreen:screen];
  if ([screen isKindOfClass:[TuxkidsTuxblocksCoreSolveSolveScreen class]]) {
    [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(selectedProblem_)) setEquationWithTuxkidsTuxblocksCoreSolveExpressionEquation:[((TuxkidsTuxblocksCoreSolveSolveScreen *) screen) equation]];
    del_ = [((TuxkidsTuxblocksCoreSolveSolveScreen *) screen) solved];
    if (del_) {
      [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(selectedProblem_)) setEnabledWithBOOL:NO];
      [((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(selectedProblem_)) fadeOut];
    }
  }
}

- (void)onProblemAddedWithTuxkidsTuxblocksCoreDefenseSelectProblem:(TuxkidsTuxblocksCoreDefenseSelectProblem *)problem {
  [self addProblemButtonWithTuxkidsTuxblocksCoreDefenseSelectProblem:problem];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseSelectSelectScreen *typedCopy = (TuxkidsTuxblocksCoreDefenseSelectSelectScreen *) copy;
  typedCopy.grid = grid_;
  typedCopy.gridHolder = gridHolder_;
  typedCopy.problemLayer = problemLayer_;
  typedCopy.selectedProblem = selectedProblem_;
  typedCopy.problemButtons = problemButtons_;
  typedCopy.bottomLeft = bottomLeft_;
  typedCopy.bottomRight = bottomRight_;
  typedCopy.solveScreen = solveScreen_;
  typedCopy.del = del_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$1

@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) {
    [this$0_ popThis];
  }
}

- (id)initWithTuxkidsTuxblocksCoreDefenseSelectSelectScreen:(TuxkidsTuxblocksCoreDefenseSelectSelectScreen *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$1 *typedCopy = (TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$2

@synthesize this$0 = this$0_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface {
  (void) [((id<PlaynCoreSurface>) NIL_CHK(surface)) drawLayerWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(this$0_.grid)) layer]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseSelectSelectScreen:(TuxkidsTuxblocksCoreDefenseSelectSelectScreen *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$2 *typedCopy = (TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$3

@synthesize this$0 = this$0_;
@synthesize val$pb = val$pb_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) {
    this$0_.selectedProblem = val$pb_;
    [((TuxkidsTuxblocksCoreSolveSolveScreen *) NIL_CHK(this$0_.solveScreen)) setEquationWithTuxkidsTuxblocksCoreSolveExpressionEquation:[((TuxkidsTuxblocksCoreDefenseSelectProblemButton *) NIL_CHK(val$pb_)) equation]];
    [this$0_ pushScreenWithTuxkidsTuxblocksCoreScreenGameScreen:this$0_.solveScreen withTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(this$0_.screens)) slide] down]];
  }
}

- (id)initWithTuxkidsTuxblocksCoreDefenseSelectSelectScreen:(TuxkidsTuxblocksCoreDefenseSelectSelectScreen *)outer$
         withTuxkidsTuxblocksCoreDefenseSelectProblemButton:(TuxkidsTuxblocksCoreDefenseSelectProblemButton *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$pb_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$3 *typedCopy = (TuxkidsTuxblocksCoreDefenseSelectSelectScreen_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$pb = val$pb_;
}

@end

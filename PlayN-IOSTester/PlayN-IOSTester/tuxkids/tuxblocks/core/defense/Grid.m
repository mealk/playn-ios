//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/Grid.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSBooleanArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Boolean.h"
#import "java/lang/Float.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/Platform.h"
#import "playn/core/PlayN.h"
#import "playn/core/Touch.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Vector.h"
#import "pythagoras/i/Point.h"
#import "tripleplay/particle/Emitter.h"
#import "tripleplay/particle/Particles.h"
#import "tripleplay/particle/TuxParticles.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/GridObject.h"
#import "tuxkids/tuxblocks/core/defense/Pathing.h"
#import "tuxkids/tuxblocks/core/defense/projectile/ChainProjectile.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Projectile.h"
#import "tuxkids/tuxblocks/core/defense/round/Level.h"
#import "tuxkids/tuxblocks/core/defense/round/Round.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"
#import "tuxkids/tuxblocks/core/effect/Effect.h"
#import "tuxkids/tuxblocks/core/utils/MultiList.h"

@implementation TuxkidsTuxblocksCoreDefenseGrid

@synthesize cellSize_ = cellSize__;
@synthesize rows_ = rows__;
@synthesize cols_ = cols__;
@synthesize layer_ = layer__;
@synthesize gridLayer = gridLayer_;
@synthesize overlayLayer = overlayLayer_;
@synthesize gridSprite = gridSprite_;
@synthesize passability = passability_;
@synthesize walkers = walkers_;
@synthesize projectiles = projectiles_;
@synthesize towers = towers_;
@synthesize effects = effects_;
@synthesize gridObjects = gridObjects_;
@synthesize walkerStart = walkerStart_;
@synthesize walkerDestination = walkerDestination_;
@synthesize toPlace = toPlace_;
@synthesize toPlaceRadius = toPlaceRadius_;
@synthesize currentPath_ = currentPath__;
@synthesize level_ = level__;
@synthesize targetAlpha = targetAlpha_;
@synthesize towerColor_ = towerColor__;
@synthesize particles_ = particles__;
@synthesize state = state_;
@synthesize validPlacementMap = validPlacementMap_;

- (TripleplayParticleParticles *)particles {
  return particles__;
}

- (TuxkidsTuxblocksCoreDefenseRoundLevel *)level {
  return level__;
}

- (int)towerColor {
  return towerColor__;
}

- (int)width {
  return cols__ * cellSize__;
}

- (int)height {
  return rows__ * cellSize__;
}

- (int)rows {
  return rows__;
}

- (int)cols {
  return cols__;
}

- (id<JavaUtilList>)currentPath {
  return currentPath__;
}

- (id<PlaynCoreGroupLayer>)layer {
  return layer__;
}

- (IOSObjectArray *)getPassability {
  return passability_;
}

- (float)cellSize {
  return cellSize__;
}

- (void)setTowerColorWithInt:(int)themeColor {
  self.towerColor_ = themeColor;
}

- (id)initWithTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)gameState
                                    withInt:(int)rows
                                    withInt:(int)cols
                                    withInt:(int)maxWidth
                                    withInt:(int)maxHeight {
  if ((self = [super init])) {
    walkers_ = [[JavaUtilArrayList alloc] init];
    projectiles_ = [[JavaUtilArrayList alloc] init];
    towers_ = [[JavaUtilArrayList alloc] init];
    effects_ = [[JavaUtilArrayList alloc] init];
    gridObjects_ = [[TuxkidsTuxblocksCoreUtilsMultiList alloc] initWithJavaUtilListArray:[IOSObjectArray arrayWithType:[IOSClass classWithProtocol:@protocol(JavaUtilList)] count:4, walkers_, projectiles_, towers_, effects_ ]];
    targetAlpha_ = 1;
    validPlacementMap_ = [[JavaUtilHashMap alloc] init];
    self.state = gameState;
    self.rows_ = rows;
    self.cols_ = cols;
      IOSBooleanArray* innerArray = [[IOSBooleanArray alloc] initWithLength:cols];
    passability_ = [IOSObjectArray arrayWithObjects:(id[]){ innerArray } count:rows type:[IOSClass classWithClass:[IOSBooleanArray class]]];
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        [((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:i]) replaceBooleanAtIndex:j withBoolean:YES];
      }
    }
    int maxRowSize = maxHeight / rows, maxColSize = maxWidth / cols;
    cellSize__ = [JavaLangMath minWithInt:maxRowSize withInt:maxColSize];
    layer__ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createGroupLayer];
    gridLayer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createGroupLayer];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) addWithPlaynCoreLayer:gridLayer_];
    overlayLayer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createGroupLayer];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(overlayLayer_)) setDepthWithFloat:1];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) addWithPlaynCoreLayer:overlayLayer_];
    walkerStart_ = [[PythagorasIPoint alloc] initWithInt:rows / 2 withInt:0];
    walkerDestination_ = [[PythagorasIPoint alloc] initWithInt:rows / 2 withInt:cols - 1];
    for (int i = 0; i < rows; i++) {
      if (i != rows / 2) {
        [((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:i]) replaceBooleanAtIndex:0 withBoolean:NO];
        [((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:i]) replaceBooleanAtIndex:cols - 1 withBoolean:NO];
      }
    }
    for (int i = 0; i < cols; i++) {
      [((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:0]) replaceBooleanAtIndex:i withBoolean:NO];
      [((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:rows - 1]) replaceBooleanAtIndex:i withBoolean:NO];
    }
    [self refreshPath];
    [self createGridSprite];
    particles__ = [[TripleplayParticleTuxParticles alloc] init];
    level__ = [TuxkidsTuxblocksCoreDefenseRoundLevel generate];
    [((TuxkidsTuxblocksCoreDefenseRoundLevel *) NIL_CHK(level__)) setRoundCompletedListenerWithTuxkidsTuxblocksCoreDefenseRoundLevel_RoundCompletedListener:self];
  }
  return self;
}

- (TripleplayParticleEmitter *)createEmitterWithInt:(int)maxParticles
                                 withPlaynCoreImage:(id<PlaynCoreImage>)image {
  TripleplayParticleEmitter *e = [((TripleplayParticleParticles *) NIL_CHK(particles__)) createEmitterWithInt:maxParticles withPlaynCoreImage:image withPlaynCoreGroupLayer:overlayLayer_];
  return e;
}

- (void)fadeInWithFloat:(float)targetAlpha {
  self.targetAlpha = targetAlpha;
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setAlphaWithFloat:0];
}

- (void)updateWithInt:(int)delta {
  if ([((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) alpha] < targetAlpha_ * 0.99f) {
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setAlphaWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) alpha] withFloat:targetAlpha_ withFloat:0.99f withFloat:delta]];
  }
  else {
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setAlphaWithFloat:targetAlpha_];
  }
  TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = [((TuxkidsTuxblocksCoreDefenseRoundLevel *) NIL_CHK(level__)) updateWithInt:delta];
  if (walker != nil) {
    [self addWalkerWithTuxkidsTuxblocksCoreDefenseWalkerWalker:[walker placeWithTuxkidsTuxblocksCoreDefenseGrid:self withPythagorasIPoint:walkerStart_ withPythagorasIPoint:walkerDestination_ withFloat:0]];
  }
  int nObjects = [((TuxkidsTuxblocksCoreUtilsMultiList *) NIL_CHK(gridObjects_)) size];
  for (int i = 0; i < nObjects; i++) {
    TuxkidsTuxblocksCoreDefenseGridObject *gridObject = ((TuxkidsTuxblocksCoreDefenseGridObject *) [((TuxkidsTuxblocksCoreUtilsMultiList *) NIL_CHK(gridObjects_)) getWithInt:i]);
    if ([((TuxkidsTuxblocksCoreDefenseGridObject *) NIL_CHK(gridObject)) updateWithInt:delta]) {
      [((TuxkidsTuxblocksCoreUtilsMultiList *) NIL_CHK(gridObjects_)) removeWithId:gridObject];
      i--;
      nObjects--;
      continue;
    }
  }
  [self updateToPlace];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  int nObjects = [((TuxkidsTuxblocksCoreUtilsMultiList *) NIL_CHK(gridObjects_)) size];
  for (int i = 0; i < nObjects; i++) {
    TuxkidsTuxblocksCoreDefenseGridObject *gridObject = ((TuxkidsTuxblocksCoreDefenseGridObject *) [((TuxkidsTuxblocksCoreUtilsMultiList *) NIL_CHK(gridObjects_)) getWithInt:i]);
    [((TuxkidsTuxblocksCoreDefenseGridObject *) NIL_CHK(gridObject)) paintWithPlaynCoreUtilClock:clock];
  }
  [((TripleplayParticleParticles *) NIL_CHK(particles__)) paintWithPlaynCoreUtilClock:clock];
}

- (void)refreshPath {
  currentPath__ = [TuxkidsTuxblocksCoreDefensePathing getPathWithTuxkidsTuxblocksCoreDefenseGrid:self withPythagorasIPoint:walkerStart_ withPythagorasIPoint:walkerDestination_];
}

- (void)addWalkerWithTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)walker {
  [((id<JavaUtilList>) NIL_CHK(walkers_)) addWithId:walker];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) layerAddable]];
}

- (void)createGridSprite {
  if (gridSprite_ != nil) {
    [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) removeWithPlaynCoreLayer:gridSprite_];
  }
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageWithFloat:[self width] withFloat:[self height]];
  id<PlaynCoreCanvas> canvas = [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:[TripleplayUtilColors WHITE]];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillRectWithFloat:0 withFloat:0 withFloat:[self width] withFloat:[self height]];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:[TripleplayUtilColors BLACK]];
  for (int i = 0; i < rows__; i++) {
    for (int j = 0; j < cols__; j++) {
      int x = j * cellSize__;
      int y = i * cellSize__;
      (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:[TripleplayUtilColors WHITE]];
      if (![((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:i]) booleanAtIndex:j]) {
        (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:[TripleplayUtilColors GRAY]];
      }
      (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillRectWithFloat:x withFloat:y withFloat:cellSize__ withFloat:cellSize__];
      if (TuxkidsTuxblocksCoreDefenseGrid_SHOW_GRID) (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) strokeRectWithFloat:x withFloat:y withFloat:cellSize__ withFloat:cellSize__];
    }
  }
  gridSprite_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageLayerWithPlaynCoreImage:image];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) addWithPlaynCoreLayer:gridSprite_];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(gridSprite_)) setDepthWithFloat:-1];
}

- (PythagorasIPoint *)getCellWithFloat:(float)x
                             withFloat:(float)y {
  int r = [JavaLangMath minWithInt:[JavaLangMath maxWithInt:(int) y / cellSize__ withInt:0] withInt:rows__ - 1];
  int c = [JavaLangMath minWithInt:[JavaLangMath maxWithInt:(int) x / cellSize__ withInt:0] withInt:cols__ - 1];
  return [[PythagorasIPoint alloc] initWithInt:r withInt:c];
}

- (PythagorasIPoint *)getCellWithFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  return [self getCellWithFloat:x - width / 2 + [self cellSize] / 2 withFloat:y - height / 2 + [self cellSize] / 2];
}

- (float)getPlaceXWithFloat:(float)globalX {
  float placeX = globalX - [TuxkidsTuxblocksCorePlayNObject getGlobalTxWithPlaynCoreLayer:gridLayer_];
  if ([((id<PlaynCoreTouch>) [((id<PlaynCorePlatform>) [PlaynCorePlayN platform]) touch]) hasTouch]) placeX -= [self width] / 20;
  return placeX;
}

- (float)getPlaceYWithFloat:(float)globalY {
  float placeY = globalY - [TuxkidsTuxblocksCorePlayNObject getGlobalTyWithPlaynCoreLayer:gridLayer_];
  if ([((id<PlaynCoreTouch>) [((id<PlaynCorePlatform>) [PlaynCorePlayN platform]) touch]) hasTouch]) placeY -= [self width] / 20;
  return placeY;
}

- (void)startPlacementWithTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)toPlace {
  self.toPlace = toPlace;
  (void) [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace)) previewWithTuxkidsTuxblocksCoreDefenseGrid:self];
  [[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace)) layer] setVisibleWithBOOL:NO];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(overlayLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace)) layerAddable]];
  [((JavaUtilHashMap *) NIL_CHK(validPlacementMap_)) clear];
  toPlaceRadius_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageLayerWithPlaynCoreImage:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace)) createRadiusImage]];
  [TuxkidsTuxblocksCorePlayNObject centerImageLayerWithPlaynCoreImageLayer:toPlaceRadius_];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) addWithPlaynCoreLayer:toPlaceRadius_];
  [self updateToPlace];
}

- (void)updatePlacementWithFloat:(float)globalX
                       withFloat:(float)globalY {
  float placeX = [self getPlaceXWithFloat:globalX], placeY = [self getPlaceYWithFloat:globalY];
  if (toPlace_ != nil) {
    PythagorasIPoint *cell = [self getCellWithFloat:placeX withFloat:placeY withFloat:[toPlace_ baseWidth] withFloat:[toPlace_ baseHeight]];
    [toPlace_ setCoordinatesWithPythagorasIPoint:cell];
    [[toPlace_ layer] setVisibleWithBOOL:![self isOutOfBoundsWithFloat:placeX withFloat:placeY]];
    [self updateToPlace];
  }
}

- (BOOL)endPlacementWithFloat:(float)globalX
                    withFloat:(float)globalY {
  BOOL canPlace = [self canPlace];
  if (canPlace) {
    (void) [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) placeWithTuxkidsTuxblocksCoreDefenseGrid:self withPythagorasIPoint:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) coordinates]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(overlayLayer_)) removeWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) layerAddable]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) layerAddable]];
    [((id<JavaUtilList>) NIL_CHK(towers_)) addWithId:toPlace_];
    [((id<PlaynCoreImageLayer>) NIL_CHK(toPlaceRadius_)) destroy];
    [self refreshPath];
  }
  else if (toPlace_ != nil) {
    [[toPlace_ layer] destroy];
  }
  toPlace_ = nil;
  [((id<PlaynCoreImageLayer>) NIL_CHK(toPlaceRadius_)) destroy];
  toPlaceRadius_ = nil;
  return canPlace;
}

- (void)updateToPlace {
  if (toPlace_ == nil) return;
  [[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) layer] setAlphaWithFloat:[self canPlace] ? 1 : 0.5f];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(toPlaceRadius_)) setTranslationWithFloat:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) position].x_ withFloat:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) position].y_];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(toPlaceRadius_)) setVisibleWithBOOL:[[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) layer] visible] && [[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) layer] alpha] == 1];
}

- (BOOL)canPlace {
  if (toPlace_ == nil) return NO;
  PythagorasIPoint *p = [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) coordinates];
  int rows = [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) rows], cols = [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) cols];
  if (((PythagorasIPoint *) NIL_CHK(p)).x_ < 0 || ((PythagorasIPoint *) NIL_CHK(p)).x_ + rows > self.rows_ || ((PythagorasIPoint *) NIL_CHK(p)).y_ < 0 || ((PythagorasIPoint *) NIL_CHK(p)).y_ + cols > self.cols_) {
    return NO;
  }
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      {
        id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(walkers_)) iterator]);
        while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
          TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = ((TuxkidsTuxblocksCoreDefenseWalkerWalker *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
          PythagorasIPoint *walkerPos = [((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) coordinates];
          if (((PythagorasIPoint *) NIL_CHK(walkerPos)).x_ == ((PythagorasIPoint *) NIL_CHK(p)).x_ + i && ((PythagorasIPoint *) NIL_CHK(walkerPos)).y_ == ((PythagorasIPoint *) NIL_CHK(p)).y_ + j) {
            return NO;
          }
        }
      }
    }
  }
  if ([((JavaUtilHashMap *) NIL_CHK(validPlacementMap_)) containsKeyWithId:p]) return [((JavaLangBoolean *) [((JavaUtilHashMap *) NIL_CHK(validPlacementMap_)) getWithId:p]) booleanValue];
  BOOL canPlace = [self canPlaceStaticWithPythagorasIPoint:p];
  (void) [((JavaUtilHashMap *) NIL_CHK(validPlacementMap_)) putWithId:[((PythagorasIPoint *) NIL_CHK(p)) clone] withId:[JavaLangBoolean valueOfWithBOOL:canPlace]];
  return canPlace;
}

- (BOOL)canPlaceStaticWithPythagorasIPoint:(PythagorasIPoint *)p {
  int rows = [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) rows], cols = [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(toPlace_)) cols];
  if ([((PythagorasIPoint *) NIL_CHK(p)) isEqual:walkerStart_]) return NO;
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      if (![((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:((PythagorasIPoint *) NIL_CHK(p)).x_ + i]) booleanAtIndex:((PythagorasIPoint *) NIL_CHK(p)).y_ + j]) return NO;
    }
  }
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      [((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:((PythagorasIPoint *) NIL_CHK(p)).x_ + i]) replaceBooleanAtIndex:((PythagorasIPoint *) NIL_CHK(p)).y_ + j withBoolean:NO];
    }
  }
  id<JavaUtilList> path = [TuxkidsTuxblocksCoreDefensePathing getPathWithTuxkidsTuxblocksCoreDefenseGrid:self withPythagorasIPoint:walkerStart_ withPythagorasIPoint:walkerDestination_];
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      [((IOSBooleanArray *) [((IOSObjectArray *) NIL_CHK(passability_)) objectAtIndex:((PythagorasIPoint *) NIL_CHK(p)).x_ + i]) replaceBooleanAtIndex:((PythagorasIPoint *) NIL_CHK(p)).y_ + j withBoolean:YES];
    }
  }
  return path != nil;
}

- (BOOL)fireProjectileWithTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)tower {
  if ([((id<JavaUtilList>) NIL_CHK(walkers_)) size] == 0) return NO;
  TuxkidsTuxblocksCoreDefenseWalkerWalker *target = nil;
  float targetDis = JavaLangFloat_MAX_VALUE;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(walkers_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = ((TuxkidsTuxblocksCoreDefenseWalkerWalker *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if (![((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) isAlive]) continue;
      float dis = [[((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) position] distanceWithPythagorasFIVector:[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(tower)) position]];
      if (dis < [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(tower)) range] * cellSize__) {
        if (walker == [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(tower)) lastTarget]) {
          target = walker;
          targetDis = dis;
          break;
        }
        else if (dis < targetDis) {
          target = walker;
          targetDis = dis;
        }
      }
    }
  }
  [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(tower)) setLastTargetWithTuxkidsTuxblocksCoreDefenseWalkerWalker:target];
  if (target == nil) return NO;
  TuxkidsTuxblocksCoreDefenseProjectileProjectile *p = [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(tower)) createProjectile];
  [((TuxkidsTuxblocksCoreDefenseProjectileProjectile *) NIL_CHK(p)) placeWithTuxkidsTuxblocksCoreDefenseGrid:self withTuxkidsTuxblocksCoreDefenseWalkerWalker:target withTuxkidsTuxblocksCoreDefenseTowerTower:tower];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseProjectileProjectile *) NIL_CHK(p)) layer]];
  [((id<JavaUtilList>) NIL_CHK(projectiles_)) addWithId:p];
  return YES;
}

- (BOOL)fireProjectileWithTuxkidsTuxblocksCoreDefenseProjectileChainProjectile:(TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *)from {
  if ([((id<JavaUtilList>) NIL_CHK(walkers_)) size] == 0) return NO;
  TuxkidsTuxblocksCoreDefenseWalkerWalker *target = nil;
  float targetDis = JavaLangFloat_MAX_VALUE;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(walkers_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = ((TuxkidsTuxblocksCoreDefenseWalkerWalker *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if (![((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) isAlive]) continue;
      if ([((TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *) NIL_CHK(from)) partOfChainWithTuxkidsTuxblocksCoreDefenseWalkerWalker:walker]) continue;
      float dis = [[((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) position] distanceWithPythagorasFIVector:[[((TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *) NIL_CHK(from)) target] position]];
      if (dis < [((TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *) NIL_CHK(from)) range] * cellSize__ && dis < targetDis) {
        target = walker;
        targetDis = dis;
      }
    }
  }
  if (target == nil) return NO;
  TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *p = [((TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *) NIL_CHK(from)) createProjectile];
  [((TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *) NIL_CHK(p)) placeWithTuxkidsTuxblocksCoreDefenseGrid:self withTuxkidsTuxblocksCoreDefenseWalkerWalker:target withTuxkidsTuxblocksCoreDefenseProjectileChainProjectile:from];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *) NIL_CHK(p)) layer]];
  [((id<JavaUtilList>) NIL_CHK(projectiles_)) addWithId:p];
  return YES;
}

- (void)dealDamageWithTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)source
                withTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)target
                                                  withFloat:(float)damage
                                      withPythagorasFVector:(PythagorasFVector *)hit {
  if ([((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(source)) splashRadius] == 0) {
    [((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(target)) damageWithFloat:damage];
    [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(source)) addBuffsWithTuxkidsTuxblocksCoreDefenseWalkerWalker:target];
  }
  else {
    float actualRadius = [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(source)) splashRadius] * cellSize__;
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(walkers_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = ((TuxkidsTuxblocksCoreDefenseWalkerWalker *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        float distance = [[((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) position] distanceWithPythagorasFIVector:hit];
        float perc = (actualRadius - distance) / actualRadius;
        float dealt = perc * damage;
        if (dealt > 0) {
          [((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) damageWithFloat:dealt];
          [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(source)) addBuffsWithTuxkidsTuxblocksCoreDefenseWalkerWalker:walker];
        }
      }
    }
  }
}

- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)getHitWalkerWithPythagorasFVector:(PythagorasFVector *)position {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(walkers_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = ((TuxkidsTuxblocksCoreDefenseWalkerWalker *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if (![((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) isAlive]) continue;
      float dx = [((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) position].x_ - ((PythagorasFVector *) NIL_CHK(position)).x_;
      float dy = [((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) position].y_ - ((PythagorasFVector *) NIL_CHK(position)).y_;
      if ([JavaLangMath absWithFloat:dx] < [((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) width] / 2 && [JavaLangMath absWithFloat:dy] < [((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(walker)) height] / 2) {
        return walker;
      }
    }
  }
  return nil;
}

- (BOOL)isOutOfBoundsWithPythagorasFVector:(PythagorasFVector *)position {
  return [self isOutOfBoundsWithFloat:((PythagorasFVector *) NIL_CHK(position)).x_ withFloat:((PythagorasFVector *) NIL_CHK(position)).y_];
}

- (BOOL)isOutOfBoundsWithFloat:(float)x
                     withFloat:(float)y {
  return x < 0 || y < 0 || x >= [self width] || y >= [self height];
}

- (void)addEffectWithTuxkidsTuxblocksCoreEffectEffect:(TuxkidsTuxblocksCoreEffectEffect *)effect {
  [((id<JavaUtilList>) NIL_CHK(effects_)) addWithId:effect];
  (void) [((id<PlaynCoreLayer>) [((TuxkidsTuxblocksCoreEffectEffect *) NIL_CHK(effect)) layer]) setDepthWithFloat:5];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(gridLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreEffectEffect *) NIL_CHK(effect)) layer]];
}

- (void)onRoundCompletedWithTuxkidsTuxblocksCoreDefenseRoundRound:(TuxkidsTuxblocksCoreDefenseRoundRound *)round {
  [((TuxkidsTuxblocksCoreDefenseRoundRound *) NIL_CHK(round)) winRoundWithTuxkidsTuxblocksCoreGameState:state_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseGrid *typedCopy = (TuxkidsTuxblocksCoreDefenseGrid *) copy;
  typedCopy.cellSize_ = cellSize__;
  typedCopy.rows_ = rows__;
  typedCopy.cols_ = cols__;
  typedCopy.layer_ = layer__;
  typedCopy.gridLayer = gridLayer_;
  typedCopy.overlayLayer = overlayLayer_;
  typedCopy.gridSprite = gridSprite_;
  typedCopy.passability = passability_;
  typedCopy.walkers = walkers_;
  typedCopy.projectiles = projectiles_;
  typedCopy.towers = towers_;
  typedCopy.effects = effects_;
  typedCopy.gridObjects = gridObjects_;
  typedCopy.walkerStart = walkerStart_;
  typedCopy.walkerDestination = walkerDestination_;
  typedCopy.toPlace = toPlace_;
  typedCopy.toPlaceRadius = toPlaceRadius_;
  typedCopy.currentPath_ = currentPath__;
  typedCopy.level_ = level__;
  typedCopy.targetAlpha = targetAlpha_;
  typedCopy.towerColor_ = towerColor__;
  typedCopy.particles_ = particles__;
  typedCopy.state = state_;
  typedCopy.validPlacementMap = validPlacementMap_;
}

@end

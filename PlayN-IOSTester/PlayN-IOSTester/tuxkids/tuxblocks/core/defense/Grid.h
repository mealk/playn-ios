//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/Grid.java
//
//  Created by Thomas on 7/10/13.
//

@class IOSObjectArray;
@class JavaUtilHashMap;
@class PythagorasFVector;
@class PythagorasIPoint;
@class TripleplayParticleEmitter;
@class TripleplayParticleParticles;
@class TuxkidsTuxblocksCoreDefenseProjectileChainProjectile;
@class TuxkidsTuxblocksCoreDefenseRoundLevel;
@class TuxkidsTuxblocksCoreDefenseRoundRound;
@class TuxkidsTuxblocksCoreDefenseTowerTower;
@class TuxkidsTuxblocksCoreDefenseWalkerWalker;
@class TuxkidsTuxblocksCoreEffectEffect;
@class TuxkidsTuxblocksCoreGameState;
@class TuxkidsTuxblocksCoreUtilsMultiList;
@protocol JavaUtilList;
@protocol PlaynCoreGroupLayer;
@protocol PlaynCoreImage;
@protocol PlaynCoreImageLayer;
@protocol PlaynCoreUtilClock;

#import "JreEmulation.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/defense/round/Level.h"

#define TuxkidsTuxblocksCoreDefenseGrid_SHOW_GRID FALSE

@interface TuxkidsTuxblocksCoreDefenseGrid : TuxkidsTuxblocksCorePlayNObject < TuxkidsTuxblocksCoreDefenseRoundLevel_RoundCompletedListener > {
 @public
  int cellSize__;
  int rows__, cols__;
  id<PlaynCoreGroupLayer> layer__, gridLayer_, overlayLayer_;
  id<PlaynCoreImageLayer> gridSprite_;
  IOSObjectArray *passability_;
  id<JavaUtilList> walkers_;
  id<JavaUtilList> projectiles_;
  id<JavaUtilList> towers_;
  id<JavaUtilList> effects_;
  TuxkidsTuxblocksCoreUtilsMultiList *gridObjects_;
  PythagorasIPoint *walkerStart_, *walkerDestination_;
  TuxkidsTuxblocksCoreDefenseTowerTower *toPlace_;
  id<PlaynCoreImageLayer> toPlaceRadius_;
  id<JavaUtilList> currentPath__;
  TuxkidsTuxblocksCoreDefenseRoundLevel *level__;
  float targetAlpha_;
  int towerColor__;
  TripleplayParticleParticles *particles__;
  TuxkidsTuxblocksCoreGameState *state_;
  JavaUtilHashMap *validPlacementMap_;
}

@property (nonatomic, assign) int cellSize_;
@property (nonatomic, assign) int rows_;
@property (nonatomic, assign) int cols_;
@property (nonatomic, strong) id<PlaynCoreGroupLayer> layer_;
@property (nonatomic, strong) id<PlaynCoreGroupLayer> gridLayer;
@property (nonatomic, strong) id<PlaynCoreGroupLayer> overlayLayer;
@property (nonatomic, strong) id<PlaynCoreImageLayer> gridSprite;
@property (nonatomic, strong) IOSObjectArray *passability;
@property (nonatomic, strong) id<JavaUtilList> walkers;
@property (nonatomic, strong) id<JavaUtilList> projectiles;
@property (nonatomic, strong) id<JavaUtilList> towers;
@property (nonatomic, strong) id<JavaUtilList> effects;
@property (nonatomic, strong) TuxkidsTuxblocksCoreUtilsMultiList *gridObjects;
@property (nonatomic, strong) PythagorasIPoint *walkerStart;
@property (nonatomic, strong) PythagorasIPoint *walkerDestination;
@property (nonatomic, strong) TuxkidsTuxblocksCoreDefenseTowerTower *toPlace;
@property (nonatomic, strong) id<PlaynCoreImageLayer> toPlaceRadius;
@property (nonatomic, strong) id<JavaUtilList> currentPath_;
@property (nonatomic, strong) TuxkidsTuxblocksCoreDefenseRoundLevel *level_;
@property (nonatomic, assign) float targetAlpha;
@property (nonatomic, assign) int towerColor_;
@property (nonatomic, strong) TripleplayParticleParticles *particles_;
@property (nonatomic, strong) TuxkidsTuxblocksCoreGameState *state;
@property (nonatomic, strong) JavaUtilHashMap *validPlacementMap;

- (TripleplayParticleParticles *)particles;
- (TuxkidsTuxblocksCoreDefenseRoundLevel *)level;
- (int)towerColor;
- (int)width;
- (int)height;
- (int)rows;
- (int)cols;
- (id<JavaUtilList>)currentPath;
- (id<PlaynCoreGroupLayer>)layer;
- (IOSObjectArray *)getPassability;
- (float)cellSize;
- (void)setTowerColorWithInt:(int)themeColor;
- (id)initWithTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)gameState
                                    withInt:(int)rows
                                    withInt:(int)cols
                                    withInt:(int)maxWidth
                                    withInt:(int)maxHeight;
- (TripleplayParticleEmitter *)createEmitterWithInt:(int)maxParticles
                                 withPlaynCoreImage:(id<PlaynCoreImage>)image;
- (void)fadeInWithFloat:(float)targetAlpha;
- (void)updateWithInt:(int)delta;
- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock;
- (void)refreshPath;
- (void)addWalkerWithTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)walker;
- (void)createGridSprite;
- (PythagorasIPoint *)getCellWithFloat:(float)x
                             withFloat:(float)y;
- (PythagorasIPoint *)getCellWithFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height;
- (float)getPlaceXWithFloat:(float)globalX;
- (float)getPlaceYWithFloat:(float)globalY;
- (void)startPlacementWithTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)toPlace;
- (void)updatePlacementWithFloat:(float)globalX
                       withFloat:(float)globalY;
- (BOOL)endPlacementWithFloat:(float)globalX
                    withFloat:(float)globalY;
- (void)updateToPlace;
- (BOOL)canPlace;
- (BOOL)canPlaceStaticWithPythagorasIPoint:(PythagorasIPoint *)p;
- (BOOL)fireProjectileWithTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)tower;
- (BOOL)fireProjectileWithTuxkidsTuxblocksCoreDefenseProjectileChainProjectile:(TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *)from;
- (void)dealDamageWithTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)source
                withTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)target
                                                  withFloat:(float)damage
                                      withPythagorasFVector:(PythagorasFVector *)hit;
- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)getHitWalkerWithPythagorasFVector:(PythagorasFVector *)position;
- (BOOL)isOutOfBoundsWithPythagorasFVector:(PythagorasFVector *)position;
- (BOOL)isOutOfBoundsWithFloat:(float)x
                     withFloat:(float)y;
- (void)addEffectWithTuxkidsTuxblocksCoreEffectEffect:(TuxkidsTuxblocksCoreEffectEffect *)effect;
- (void)onRoundCompletedWithTuxkidsTuxblocksCoreDefenseRoundRound:(TuxkidsTuxblocksCoreDefenseRoundRound *)round;
@end

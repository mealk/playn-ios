//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/tower/Tower.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSBooleanArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Color.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Vector.h"
#import "pythagoras/i/Point.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/defense/DiscreteGridObject.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Projectile.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/tower/TowerType.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"
#import "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TuxkidsTuxblocksCoreDefenseTowerTower

static id<JavaUtilList> TuxkidsTuxblocksCoreDefenseTowerTower_towerBag_;

@synthesize layer_ = layer__;
@synthesize fireTimer = fireTimer_;
@synthesize position_ = position__;
@synthesize id_ = id__;
@synthesize lastTarget_ = lastTarget__;

+ (id<JavaUtilList>)towerBag {
  return TuxkidsTuxblocksCoreDefenseTowerTower_towerBag_;
}

- (int)rows {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)cols {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)damage {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)fireRate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)range {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TuxkidsTuxblocksCoreDefenseProjectileProjectile *)createProjectile {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TuxkidsTuxblocksCoreDefenseTowerTower *)copy__ OBJC_METHOD_FAMILY_NONE {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)cost {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)commonness {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *)getTypeByIndexWithInt:(int)index {
  return ((TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *) [[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum values] objectAtIndex:index]);
}

- (float)splashRadius {
  return 0;
}

- (float)baseWidth {
  return [self cols] * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize];
}

- (float)baseHeight {
  return [self rows] * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize];
}

- (float)width {
  return [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) width];
}

- (float)height {
  return [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) height];
}

- (TuxkidsTuxblocksCoreImageLayerTintable *)layer {
  return layer__;
}

- (id<PlaynCoreLayer>)layerAddable {
  return [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) layer];
}

- (PythagorasFVector *)position {
  return position__;
}

- (PythagorasFVector *)projectileStart {
  return position__;
}

- (int)id__ {
  return id__;
}

+ (TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *)randomTower {
  return ((TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *) [((id<JavaUtilList>) NIL_CHK(TuxkidsTuxblocksCoreDefenseTowerTower_towerBag_)) getWithInt:(int) ([JavaLangMath random] * [((id<JavaUtilList>) NIL_CHK(TuxkidsTuxblocksCoreDefenseTowerTower_towerBag_)) size])]);
}

+ (int)towerCount {
  return (int) [[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum values] count];
}

- (void)addBuffsWithTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)walker {
}

- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)lastTarget {
  return lastTarget__;
}

- (void)setLastTargetWithTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)target {
  lastTarget__ = target;
}

- (void)setCoordinatesWithPythagorasIPoint:(PythagorasIPoint *)coordinates {
  [self setCoordinatesWithInt:((PythagorasIPoint *) NIL_CHK(coordinates)).x_ withInt:((PythagorasIPoint *) NIL_CHK(coordinates)).y_];
}

- (void)setCoordinatesWithInt:(int)row
                      withInt:(int)col {
  [((PythagorasIPoint *) NIL_CHK(coordinates__)) setLocationWithInt:row withInt:col];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) setTranslationWithFloat:col * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize] + ([self baseWidth] - [self width]) / 2 withFloat:row * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize] + ([self baseHeight] - [self height])];
  (void) [((PythagorasFVector *) NIL_CHK(position__)) setWithFloat:col * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize] + [self width] / 2 withFloat:row * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize] + [self height] / 2];
}

- (void)setDepthWithFloat:(float)depth {
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) setDepthWithFloat:depth];
}

- (TuxkidsTuxblocksCoreDefenseTowerTower *)previewWithTuxkidsTuxblocksCoreDefenseGrid:(TuxkidsTuxblocksCoreDefenseGrid *)grid {
  if (self.grid != nil) return self;
  self.grid = grid;
  layer__ = [[TuxkidsTuxblocksCoreImageLayerTintable alloc] initWithPlaynCoreImage:[self createImageWithFloat:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid)) cellSize] withInt:[TripleplayUtilColors WHITE]]];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) setTintWithInt:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid)) towerColor]];
  return self;
}

- (TuxkidsTuxblocksCoreDefenseTowerTower *)placeWithTuxkidsTuxblocksCoreDefenseGrid:(TuxkidsTuxblocksCoreDefenseGrid *)grid
                                                               withPythagorasIPoint:(PythagorasIPoint *)coordinates {
  [self placeWithTuxkidsTuxblocksCoreDefenseGrid:grid withFloat:0];
  [self setCoordinatesWithPythagorasIPoint:coordinates];
  for (int i = 0; i < [self rows]; i++) {
    for (int j = 0; j < [self cols]; j++) {
      [((IOSBooleanArray *) [[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid)) getPassability] objectAtIndex:i + ((PythagorasIPoint *) NIL_CHK(coordinates)).x_]) replaceBooleanAtIndex:j + ((PythagorasIPoint *) NIL_CHK(coordinates)).y_ withBoolean:NO];
    }
  }
  return self;
}

- (BOOL)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  int fireRate = [self fireRate];
  if (fireRate > 0 && fireTimer_ > fireRate) {
    if ([self fire]) {
      fireTimer_ -= fireRate;
    }
    else {
      fireTimer_ = fireRate;
    }
  }
  return NO;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  fireTimer_ += [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
}

- (BOOL)fire {
  return [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) fireProjectileWithTuxkidsTuxblocksCoreDefenseTowerTower:self];
}

- (BOOL)canPlaceWithInt:(int)row
                withInt:(int)col {
  for (int i = 0; i < [self rows]; i++) {
    for (int j = 0; j < [self cols]; j++) {
      if (![((IOSBooleanArray *) [[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) getPassability] objectAtIndex:i + row]) booleanAtIndex:j + col]) return NO;
    }
  }
  return YES;
}

- (id<PlaynCoreImage>)createRadiusImage {
  if ([self range] == 0) return nil;
  float rad = [self range] * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize];
  int color = [PlaynCoreColor rgbWithInt:255 withInt:0 withInt:100];
  return [TuxkidsTuxblocksCoreUtilsCanvasUtils createCircleWithFloat:rad withInt:[PlaynCoreColor withAlphaWithInt:color withInt:50] withFloat:1 withInt:color];
}

- (id<PlaynCoreImage>)createImageWithFloat:(float)cellSize
                                   withInt:(int)color {
  int width = (int) (cellSize * [self cols]), height = (int) (cellSize * [self rows]);
  int padding = (int) (cellSize * 0.1f);
  int rad = (int) ([JavaLangMath minWithInt:width withInt:height] * 0.1f);
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:width withFloat:height];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:color];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRoundRectWithFloat:padding withFloat:padding withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] - padding * 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] - padding * 2 withFloat:rad];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeColorWithInt:[TripleplayUtilColors BLACK]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) strokeRoundRectWithFloat:padding withFloat:padding withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] - padding * 2 - 1 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] - padding * 2 - 1 withFloat:rad];
  return image;
}

- (id)init {
  if ((self = [super init])) {
    position__ = [[PythagorasFVector alloc] init];
  }
  return self;
}

+ (void)initialize {
  if (self == [TuxkidsTuxblocksCoreDefenseTowerTower class]) {
    {
      TuxkidsTuxblocksCoreDefenseTowerTower_towerBag_ = [[JavaUtilArrayList alloc] init];
      {
        IOSObjectArray *a__ = [TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum values];
        int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
        for (int i__ = 0; i__ < n__; i__++) {
          TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *type = ((TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
          for (int i = 0; i < [[((TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum *) NIL_CHK(type)) instance] commonness]; i++) [((id<JavaUtilList>) NIL_CHK(TuxkidsTuxblocksCoreDefenseTowerTower_towerBag_)) addWithId:type];
        }
      }
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseTowerTower *typedCopy = (TuxkidsTuxblocksCoreDefenseTowerTower *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.fireTimer = fireTimer_;
  typedCopy.position_ = position__;
  typedCopy.id_ = id__;
  typedCopy.lastTarget_ = lastTarget__;
}

@end

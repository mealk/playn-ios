//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/round/Level.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Integer.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "tuxkids/tuxblocks/core/defense/round/Level.h"
#import "tuxkids/tuxblocks/core/defense/round/Reward.h"
#import "tuxkids/tuxblocks/core/defense/round/Round.h"
#import "tuxkids/tuxblocks/core/defense/round/Wave.h"
#import "tuxkids/tuxblocks/core/defense/tower/TowerType.h"
#import "tuxkids/tuxblocks/core/defense/walker/FlipWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/InchWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/ShrinkWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/SlideWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/SpinWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"

@implementation TuxkidsTuxblocksCoreDefenseRoundLevel

@synthesize rounds = rounds_;
@synthesize waitTimes = waitTimes_;
@synthesize roundCompletedListener = roundCompletedListener_;
@synthesize timer = timer_;
@synthesize currentRound = currentRound_;
@synthesize round_ = round__;

- (int)round {
  return round__;
}

- (int)timeUntilNextRound {
  if (currentRound_ != nil) return 0;
  if ([((id<JavaUtilList>) NIL_CHK(waitTimes_)) size] == 0) return 0;
  return [((JavaLangInteger *) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) getWithInt:0]) intValue] - timer_;
}

- (void)startNextRound {
  if (currentRound_ != nil) return;
  if ([((id<JavaUtilList>) NIL_CHK(waitTimes_)) size] == 0) return;
  timer_ = [((JavaLangInteger *) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) getWithInt:0]) intValue];
}

- (BOOL)duringRound {
  return currentRound_ != nil;
}

- (void)setRoundCompletedListenerWithTuxkidsTuxblocksCoreDefenseRoundLevel_RoundCompletedListener:(id<TuxkidsTuxblocksCoreDefenseRoundLevel_RoundCompletedListener>)roundCompletedListener {
  self.roundCompletedListener = roundCompletedListener;
}

- (void)populateLevel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  if ((self = [super init])) {
    rounds_ = [[JavaUtilArrayList alloc] init];
    waitTimes_ = [[JavaUtilArrayList alloc] init];
    round__ = 0;
    [self populateLevel];
  }
  return self;
}

- (void)addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:(TuxkidsTuxblocksCoreDefenseRoundRound *)round
                                                withFloat:(float)waitTimeSeconds {
  [((id<JavaUtilList>) NIL_CHK(rounds_)) addWithId:round];
  [((id<JavaUtilList>) NIL_CHK(waitTimes_)) addWithId:[JavaLangInteger valueOfWithInt:(int) (waitTimeSeconds * 1000)]];
}

- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)updateWithInt:(int)delta {
  if ([self finished]) return nil;
  if (currentRound_ != nil) {
    TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = [currentRound_ updateWithInt:delta];
    if ([currentRound_ finished]) {
      [((id<TuxkidsTuxblocksCoreDefenseRoundLevel_RoundCompletedListener>) NIL_CHK(roundCompletedListener_)) onRoundCompletedWithTuxkidsTuxblocksCoreDefenseRoundRound:currentRound_];
      currentRound_ = nil;
    }
    return walker;
  }
  timer_ += delta;
  if (currentRound_ == nil && [((id<JavaUtilList>) NIL_CHK(waitTimes_)) size] > 0 && timer_ >= [((JavaLangInteger *) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) getWithInt:0]) intValue]) {
    currentRound_ = ((TuxkidsTuxblocksCoreDefenseRoundRound *) [((id<JavaUtilList>) NIL_CHK(rounds_)) removeWithInt:0]);
    (void) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) removeWithInt:0];
    timer_ = 0;
    round__++;
  }
  return nil;
}

- (BOOL)finished {
  return [((id<JavaUtilList>) NIL_CHK(rounds_)) size] == 0 && currentRound_ == nil;
}

+ (TuxkidsTuxblocksCoreDefenseRoundLevel *)generate {
  TuxkidsTuxblocksCoreDefenseWalkerWalker *basic = [[TuxkidsTuxblocksCoreDefenseWalkerSlideWalker alloc] initWithInt:10 withInt:500];
  TuxkidsTuxblocksCoreDefenseWalkerWalker *medium = [[TuxkidsTuxblocksCoreDefenseWalkerFlipWalker alloc] initWithInt:30 withInt:750];
  TuxkidsTuxblocksCoreDefenseWalkerWalker *hard = [[TuxkidsTuxblocksCoreDefenseWalkerInchWalker alloc] initWithInt:70 withInt:1500];
  TuxkidsTuxblocksCoreDefenseWalkerWalker *quick = [[TuxkidsTuxblocksCoreDefenseWalkerSpinWalker alloc] initWithInt:15 withInt:375];
  TuxkidsTuxblocksCoreDefenseWalkerWalker *quicker = [[TuxkidsTuxblocksCoreDefenseWalkerShrinkWalker alloc] initWithInt:20 withInt:250];
  int timeBetween = 30;
  return [[TuxkidsTuxblocksCoreDefenseRoundLevel_$1 alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:basic withTuxkidsTuxblocksCoreDefenseWalkerWalker:medium withTuxkidsTuxblocksCoreDefenseWalkerWalker:quick withTuxkidsTuxblocksCoreDefenseWalkerWalker:hard];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel *) copy;
  typedCopy.rounds = rounds_;
  typedCopy.waitTimes = waitTimes_;
  typedCopy.roundCompletedListener = roundCompletedListener_;
  typedCopy.timer = timer_;
  typedCopy.currentRound = currentRound_;
  typedCopy.round_ = round__;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1

@synthesize val$basic = val$basic_;
@synthesize val$medium = val$medium_;
@synthesize val$quick = val$quick_;
@synthesize val$hard = val$hard_;

- (void)populateLevel {
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$1 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$2 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$3 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$4 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$5 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$6 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$7 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$8 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$9 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
  [self addRoundWithTuxkidsTuxblocksCoreDefenseRoundRound:[[TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$10 alloc] initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:self] withFloat:30];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)capture$0
          withTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)capture$1
          withTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)capture$2
          withTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)capture$3 {
  if ((self = [super init])) {
    val$basic_ = capture$0;
    val$medium_ = capture$1;
    val$quick_ = capture$2;
    val$hard_ = capture$3;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *) copy;
  typedCopy.val$basic = val$basic_;
  typedCopy.val$medium = val$medium_;
  typedCopy.val$quick = val$quick_;
  typedCopy.val$hard = val$hard_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$1

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:1000 withInt:5] withInt:0];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum PeaShooter] withInt:2]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$1 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$2

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:5] withInt:0];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:5] withInt:2000];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum PeaShooter] withInt:2]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$2 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$3

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:3] withInt:0];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$medium withInt:1000 withInt:3] withInt:2000];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:3] withInt:2000];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum BigShooter] withInt:1]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$3 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$4

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:15] withInt:0];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum PeaShooter] withInt:2]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$4 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$4 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$5

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:2] withInt:0];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$medium withInt:500 withInt:2] withInt:500];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:2] withInt:500];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$medium withInt:500 withInt:2] withInt:500];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:500 withInt:2] withInt:500];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$medium withInt:500 withInt:2] withInt:500];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum BigShooter] withInt:1]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$5 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$5 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$6

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$quick withInt:250 withInt:6] withInt:0];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum HorizontalWall] withInt:1]];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum VerticalWall] withInt:1]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$6 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$6 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$7

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$medium withInt:500 withInt:3] withInt:0];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$quick withInt:500 withInt:3] withInt:1000];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$medium withInt:500 withInt:4] withInt:1000];
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$quick withInt:500 withInt:4] withInt:1000];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum BigShooter] withInt:1]];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum PeaShooter] withInt:2]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$7 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$7 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$8

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$basic withInt:300 withInt:25] withInt:0];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum Freezer] withInt:1]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$8 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$8 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$9

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$medium withInt:500 withInt:15] withInt:0];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum Freezer] withInt:1]];
  [self addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:[[TuxkidsTuxblocksCoreDefenseRoundReward alloc] initWithTuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum:[TuxkidsTuxblocksCoreDefenseTowerTowerTypeEnum BigShooter] withInt:1]];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$9 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$9 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$10

@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:[[TuxkidsTuxblocksCoreDefenseRoundWave alloc] initWithTuxkidsTuxblocksCoreDefenseWalkerWalker:this$0_.val$hard withInt:1500 withInt:5] withInt:0];
}

- (id)initWithTuxkidsTuxblocksCoreDefenseRoundLevel_$1:(TuxkidsTuxblocksCoreDefenseRoundLevel_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$10 *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundLevel_$1_$10 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/round/Round.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "tuxkids/tuxblocks/core/GameState.h"
#include "tuxkids/tuxblocks/core/defense/GridObject.h"
#include "tuxkids/tuxblocks/core/defense/round/Reward.h"
#include "tuxkids/tuxblocks/core/defense/round/Round.h"
#include "tuxkids/tuxblocks/core/defense/round/Wave.h"
#include "tuxkids/tuxblocks/core/defense/walker/Walker.h"

@implementation TuxkidsTuxblocksCoreDefenseRoundRound

@synthesize waves = waves_;
@synthesize waitTimes = waitTimes_;
@synthesize timer = timer_;
@synthesize currentWave = currentWave_;
@synthesize nextDepth_ = nextDepth__;
@synthesize rewards = rewards_;

- (void)populateRound {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (float)nextDepth {
  return nextDepth__;
}

- (id)init {
  if ((self = [super init])) {
    waves_ = [[JavaUtilArrayList alloc] init];
    waitTimes_ = [[JavaUtilArrayList alloc] init];
    rewards_ = [[JavaUtilArrayList alloc] init];
    [self populateRound];
  }
  return self;
}

- (void)addWaveWithTuxkidsTuxblocksCoreDefenseRoundWave:(TuxkidsTuxblocksCoreDefenseRoundWave *)wave
                                                withInt:(int)waitTime {
  [((id<JavaUtilList>) nil_chk(waves_)) addWithId:wave];
  [((id<JavaUtilList>) nil_chk(waitTimes_)) addWithId:[JavaLangInteger valueOfWithInt:waitTime]];
}

- (void)addRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:(TuxkidsTuxblocksCoreDefenseRoundReward *)reward {
  [((id<JavaUtilList>) nil_chk(rewards_)) addWithId:reward];
}

- (void)winRoundWithTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)gameState {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(rewards_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreDefenseRoundReward *reward = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreGameState *) nil_chk(gameState)) addProblemWithRewardWithTuxkidsTuxblocksCoreDefenseRoundReward:reward];
    }
  }
}

- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)updateWithInt:(int)delta {
  if ([self finished]) return nil;
  if (currentWave_ != nil) {
    TuxkidsTuxblocksCoreDefenseWalkerWalker *walker = [currentWave_ updateWithInt:delta];
    if (walker != nil) nextDepth__--;
    if ([currentWave_ finished]) {
      currentWave_ = nil;
    }
    return walker;
  }
  timer_ += delta;
  if (currentWave_ == nil && [((id<JavaUtilList>) nil_chk(waitTimes_)) size] > 0 && timer_ >= [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(waitTimes_)) getWithInt:0])) intValue]) {
    currentWave_ = [((id<JavaUtilList>) nil_chk(waves_)) removeWithInt:0];
    (void) [((id<JavaUtilList>) nil_chk(waitTimes_)) removeWithInt:0];
    nextDepth__ = TuxkidsTuxblocksCoreDefenseGridObject_MAX_BASE_DEPTH;
    timer_ = 0;
  }
  return nil;
}

- (BOOL)finished {
  return [((id<JavaUtilList>) nil_chk(waves_)) size] == 0 && currentWave_ == nil;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseRoundRound *typedCopy = (TuxkidsTuxblocksCoreDefenseRoundRound *) copy;
  typedCopy.waves = waves_;
  typedCopy.waitTimes = waitTimes_;
  typedCopy.timer = timer_;
  typedCopy.currentWave = currentWave_;
  typedCopy.nextDepth_ = nextDepth__;
  typedCopy.rewards = rewards_;
}

@end

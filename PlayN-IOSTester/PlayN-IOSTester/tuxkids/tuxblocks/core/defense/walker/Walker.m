//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/walker/Walker.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSBooleanArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Graphics.h"
#import "playn/core/Layer.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Vector.h"
#import "pythagoras/i/Point.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/defense/DiscreteGridObject.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/Pathing.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"
#import "tuxkids/tuxblocks/core/defense/walker/buff/Buff.h"

@implementation TuxkidsTuxblocksCoreDefenseWalkerWalker

@synthesize path = path_;
@synthesize lastCoordinates = lastCoordinates_;
@synthesize destination = destination_;
@synthesize layer_ = layer__;
@synthesize hp = hp_;
@synthesize alpha = alpha_;
@synthesize walkingMs = walkingMs_;
@synthesize placed = placed_;
@synthesize position_ = position__;
@synthesize buffs = buffs_;

- (void)updateMovementWithFloat:(float)perc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)getMaxHp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)walkCellTime {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)copy__ OBJC_METHOD_FAMILY_NONE {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreLayer>)layerAddable {
  return [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) layer];
}

- (TuxkidsTuxblocksCoreImageLayerTintable *)layer {
  return layer__;
}

- (PythagorasFVector *)position {
  return position__;
}

- (float)width {
  return [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize];
}

- (float)height {
  return [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize];
}

- (BOOL)isAlive {
  return hp_ > 0 && ![self destroyed];
}

- (BOOL)destroyed {
  return [((id<PlaynCoreLayer>) [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) layer]) destroyed];
}

- (void)setDepthWithFloat:(float)depth {
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) setDepthWithFloat:depth];
}

- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)placeWithTuxkidsTuxblocksCoreDefenseGrid:(TuxkidsTuxblocksCoreDefenseGrid *)grid
                                                                 withPythagorasIPoint:(PythagorasIPoint *)coordinates
                                                                 withPythagorasIPoint:(PythagorasIPoint *)desitnation
                                                                            withFloat:(float)depth {
  [self placeWithTuxkidsTuxblocksCoreDefenseGrid:grid withFloat:depth];
  self.destination = desitnation;
  self.coordinates_ = lastCoordinates_ = coordinates;
  self.walkingMs = [self walkCellTime];
  self.hp = [self getMaxHp];
  placed_ = YES;
  path_ = [[JavaUtilArrayList alloc] init];
  [((id<JavaUtilList>) NIL_CHK(path_)) addAllWithJavaUtilCollection:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid)) currentPath]];
  (void) [((id<JavaUtilList>) NIL_CHK(path_)) removeWithInt:0];
  [self createSprite];
  [self updateWithInt:0];
  return self;
}

- (void)createSprite {
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageWithFloat:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize] withFloat:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:[TripleplayUtilColors WHITE]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeColorWithInt:[TripleplayUtilColors BLACK]];
  int border = (int) ([((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize] * 0.1f);
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRectWithFloat:border withFloat:border withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] - border * 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] - border * 2];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) strokeRectWithFloat:border withFloat:border withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] - 1 - border * 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] - 1 - border * 2];
  layer__ = [[TuxkidsTuxblocksCoreImageLayerTintable alloc] initWithPlaynCoreImage:image];
  [self updateWithInt:0];
}

- (void)refreshPath {
  path_ = [TuxkidsTuxblocksCoreDefensePathing getPathWithTuxkidsTuxblocksCoreDefenseGrid:grid_ withPythagorasIPoint:coordinates__ withPythagorasIPoint:destination_];
  (void) [((id<JavaUtilList>) NIL_CHK(path_)) removeWithInt:0];
}

- (float)depthRow {
  return ((PythagorasFVector *) NIL_CHK(position__)).y_ / [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize];
}

- (float)depthCol {
  return ((PythagorasFVector *) NIL_CHK(position__)).x_ / [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize];
}

- (BOOL)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  if (hp_ == 0) {
    if ([((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) alpha] < 0.01f) {
      [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) destroy];
      return YES;
    }
    return NO;
  }
  if (walkingMs_ >= [self walkCellTime]) {
    walkingMs_ -= [self walkCellTime];
    if ([((id<JavaUtilList>) NIL_CHK(path_)) size] > 0) {
      lastCoordinates_ = coordinates__;
      PythagorasIPoint *nLoc = ((PythagorasIPoint *) [((id<JavaUtilList>) NIL_CHK(path_)) removeWithInt:0]);
      if (![((IOSBooleanArray *) [[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) getPassability] objectAtIndex:((PythagorasIPoint *) NIL_CHK(nLoc)).x_]) booleanAtIndex:((PythagorasIPoint *) NIL_CHK(nLoc)).y_]) {
        [self refreshPath];
        nLoc = ((PythagorasIPoint *) [((id<JavaUtilList>) NIL_CHK(path_)) removeWithInt:0]);
      }
      coordinates__ = nLoc;
    }
    else {
      [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) destroy];
      return YES;
    }
  }
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) setTintWithInt:[TripleplayUtilColors WHITE] withInt:[((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) towerColor] withFloat:(float) hp_ / [self getMaxHp]];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) setAlphaWithFloat:alpha_];
  for (int i = 0; i < [((id<JavaUtilList>) NIL_CHK(buffs_)) size]; i++) {
    TuxkidsTuxblocksCoreDefenseWalkerBuffBuff *buff = ((TuxkidsTuxblocksCoreDefenseWalkerBuffBuff *) [((id<JavaUtilList>) NIL_CHK(buffs_)) getWithInt:i]);
    if ([((TuxkidsTuxblocksCoreDefenseWalkerBuffBuff *) NIL_CHK(buff)) updateWithInt:delta]) {
      (void) [((id<JavaUtilList>) NIL_CHK(buffs_)) removeWithInt:i];
      i--;
      continue;
    }
  }
  return NO;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  float dt = [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
  if (hp_ > 0) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(buffs_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreDefenseWalkerBuffBuff *buff = ((TuxkidsTuxblocksCoreDefenseWalkerBuffBuff *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        dt = [((TuxkidsTuxblocksCoreDefenseWalkerBuffBuff *) NIL_CHK(buff)) modifySpeedWithFloat:dt];
      }
    }
    walkingMs_ += dt;
  }
  else {
    [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) setAlphaWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(layer__)) alpha] withFloat:0 withFloat:0.995f withFloat:dt]];
  }
  float perc = (float) walkingMs_ / [self walkCellTime];
  (void) [((PythagorasFVector *) NIL_CHK(position__)) setWithFloat:([TuxkidsTuxblocksCorePlayNObject lerpWithFloat:((PythagorasIPoint *) NIL_CHK(coordinates__)).y_ withFloat:((PythagorasIPoint *) NIL_CHK(lastCoordinates_)).y_ withFloat:1 - perc] + 0.5f) * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize] withFloat:([TuxkidsTuxblocksCorePlayNObject lerpWithFloat:((PythagorasIPoint *) NIL_CHK(coordinates__)).x_ withFloat:((PythagorasIPoint *) NIL_CHK(lastCoordinates_)).x_ withFloat:1 - perc] + 0.5f) * [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) cellSize]];
  [self updateMovementWithFloat:perc];
}

- (void)damageWithFloat:(float)damage {
  hp_ -= damage;
  hp_ = [JavaLangMath maxWithFloat:hp_ withFloat:0];
}

- (void)addBuffWithTuxkidsTuxblocksCoreDefenseWalkerBuffBuff:(TuxkidsTuxblocksCoreDefenseWalkerBuffBuff *)buff
                                                    withBOOL:(BOOL)replaceIfPresent {
  if (replaceIfPresent && [((id<JavaUtilList>) NIL_CHK(buffs_)) containsWithId:buff]) {
    [((id<JavaUtilList>) NIL_CHK(buffs_)) removeWithId:buff];
  }
  [((id<JavaUtilList>) NIL_CHK(buffs_)) addWithId:buff];
}

- (id)init {
  if ((self = [super init])) {
    alpha_ = 1;
    position__ = [[PythagorasFVector alloc] init];
    buffs_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseWalkerWalker *typedCopy = (TuxkidsTuxblocksCoreDefenseWalkerWalker *) copy;
  typedCopy.path = path_;
  typedCopy.lastCoordinates = lastCoordinates_;
  typedCopy.destination = destination_;
  typedCopy.layer_ = layer__;
  typedCopy.hp = hp_;
  typedCopy.alpha = alpha_;
  typedCopy.walkingMs = walkingMs_;
  typedCopy.placed = placed_;
  typedCopy.position_ = position__;
  typedCopy.buffs = buffs_;
}

@end

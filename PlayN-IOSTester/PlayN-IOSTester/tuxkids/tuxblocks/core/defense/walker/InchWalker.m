//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/walker/InchWalker.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Math.h"
#include "pythagoras/i/Point.h"
#include "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#include "tuxkids/tuxblocks/core/defense/Grid.h"
#include "tuxkids/tuxblocks/core/defense/walker/InchWalker.h"
#include "tuxkids/tuxblocks/core/defense/walker/Walker.h"

@implementation TuxkidsTuxblocksCoreDefenseWalkerInchWalker

- (id)initWithInt:(int)maxHp
          withInt:(int)walkCellTime {
  return [super initWithInt:maxHp withInt:walkCellTime];
}

- (void)updateMovementWithFloat:(float)perc {
  float cellSize = [((TuxkidsTuxblocksCoreDefenseGrid *) nil_chk(grid_)) cellSize];
  float ox, oy, scaleX, scaleY, x, y;
  if (perc < 0.5f) {
    ox = (0.5f - (((PythagorasIPoint *) nil_chk(coordinates__)).y_ - ((PythagorasIPoint *) nil_chk(lastCoordinates_)).y_) / 2.0f) * cellSize;
    oy = (0.5f - (((PythagorasIPoint *) nil_chk(coordinates__)).x_ - ((PythagorasIPoint *) nil_chk(lastCoordinates_)).x_) / 2.0f) * cellSize;
    scaleX = [JavaLangMath absWithFloat:perc * (ox / cellSize - 0.5f) * 4] + 1;
    scaleY = [JavaLangMath absWithFloat:perc * (oy / cellSize - 0.5f) * 4] + 1;
    x = ((PythagorasIPoint *) nil_chk(lastCoordinates_)).y_ * cellSize + ox;
    y = ((PythagorasIPoint *) nil_chk(lastCoordinates_)).x_ * cellSize + oy;
  }
  else {
    ox = (0.5f + (((PythagorasIPoint *) nil_chk(coordinates__)).y_ - ((PythagorasIPoint *) nil_chk(lastCoordinates_)).y_) / 2.0f) * cellSize;
    oy = (0.5f + (((PythagorasIPoint *) nil_chk(coordinates__)).x_ - ((PythagorasIPoint *) nil_chk(lastCoordinates_)).x_) / 2.0f) * cellSize;
    scaleX = [JavaLangMath absWithFloat:(1 - perc) * (ox / cellSize - 0.5f) * 4] + 1;
    scaleY = [JavaLangMath absWithFloat:(1 - perc) * (oy / cellSize - 0.5f) * 4] + 1;
    x = ((PythagorasIPoint *) nil_chk(coordinates__)).y_ * cellSize + ox;
    y = ((PythagorasIPoint *) nil_chk(coordinates__)).x_ * cellSize + oy;
  }
  [((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(layer__)) setOriginWithFloat:ox withFloat:oy];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(layer__)) setTranslationWithFloat:x withFloat:y];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(layer__)) setScaleWithFloat:scaleX withFloat:scaleY];
}

- (TuxkidsTuxblocksCoreDefenseWalkerWalker *)copy__ OBJC_METHOD_FAMILY_NONE {
  return [[TuxkidsTuxblocksCoreDefenseWalkerInchWalker alloc] initWithInt:maxHp_ withInt:walkCellTime__];
}

@end

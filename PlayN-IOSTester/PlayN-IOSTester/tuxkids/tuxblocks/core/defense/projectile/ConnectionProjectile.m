//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/projectile/ConnectionProjectile.java
//
//  Created by Thomas on 7/10/13.
//

#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Transform.h"
#import "pythagoras/f/Vector.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/projectile/ConnectionProjectile.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Projectile.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"

@implementation TuxkidsTuxblocksCoreDefenseProjectileConnectionProjectile

@synthesize direction = direction_;
@synthesize timer = timer_;

- (int)duration {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (PythagorasFVector *)sourcePosition {
  return [((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(source__)) projectileStart];
}

- (float)progress {
  return (float) timer_ / [self duration];
}

- (void)placeWithTuxkidsTuxblocksCoreDefenseGrid:(TuxkidsTuxblocksCoreDefenseGrid *)grid
     withTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)target
       withTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)source {
  [super placeWithTuxkidsTuxblocksCoreDefenseGrid:grid withTuxkidsTuxblocksCoreDefenseWalkerWalker:target withTuxkidsTuxblocksCoreDefenseTowerTower:source];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setOriginWithFloat:0 withFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) height] / 2];
}

- (BOOL)doUpdateWithInt:(int)delta {
  timer_ += delta;
  if (timer_ > [self duration]) {
    [self dealDamage];
    return YES;
  }
  return NO;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setTranslationWithFloat:[self sourcePosition].x_ withFloat:[self sourcePosition].y_];
  (void) [((PythagorasFVector *) NIL_CHK(direction_)) setWithPythagorasFIVector:[((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(target__)) position]];
  (void) [((PythagorasFVector *) NIL_CHK(direction_)) subtractWithPythagorasFIVector:[self sourcePosition] withPythagorasFVector:direction_];
  (void) [((id<PythagorasFTransform>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) transform]) setRotationWithFloat:[((PythagorasFVector *) NIL_CHK(direction_)) angle]];
  (void) [((id<PythagorasFTransform>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) transform]) setScaleWithFloat:[((PythagorasFVector *) NIL_CHK(direction_)) length] / [((id<PlaynCoreImage>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) image]) width] withFloat:1.0f];
}

- (id)init {
  if ((self = [super init])) {
    direction_ = [[PythagorasFVector alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseProjectileConnectionProjectile *typedCopy = (TuxkidsTuxblocksCoreDefenseProjectileConnectionProjectile *) copy;
  typedCopy.direction = direction_;
  typedCopy.timer = timer_;
}

@end

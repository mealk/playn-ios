//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/projectile/Lightning.java
//
//  Created by Thomas on 7/10/13.
//

#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Path.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Transform.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/defense/projectile/ChainProjectile.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Lightning.h"

@implementation TuxkidsTuxblocksCoreDefenseProjectileLightning

@synthesize t = t_;
@synthesize timer_Lightning = timer_Lightning_;

- (id)initWithInt:(int)hits
        withFloat:(float)damageReduceFactor
        withFloat:(float)rangeReduceFactor {
  if ((self = [super initWithInt:hits withFloat:damageReduceFactor withFloat:rangeReduceFactor])) {
    t_ = 1;
    timer_Lightning_ = 0;
  }
  return self;
}

- (int)duration {
  return 200;
}

- (id<PlaynCoreImage>)createImage {
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageWithFloat:100 withFloat:10];
  id<PlaynCorePath> path = [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) createPath];
  int n = 5;
  [((id<PlaynCorePath>) NIL_CHK(path)) moveToWithFloat:0 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] / 2];
  for (int i = 1; i <= n; i++) {
    float x = [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] / n * (i - 0.5f);
    float y = (i % 2) * ([((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] - 1) + 0.5f;
    [((id<PlaynCorePath>) NIL_CHK(path)) lineToWithFloat:x withFloat:y];
  }
  [((id<PlaynCorePath>) NIL_CHK(path)) lineToWithFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] - 1 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] / 2];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeColorWithInt:[TripleplayUtilColors BLUE]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) strokePathWithPlaynCorePath:path];
  return image;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  (void) [((id<PythagorasFTransform>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) transform]) setScaleYWithFloat:[((id<PythagorasFTransform>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) transform]) scaleY] * t_];
  timer_Lightning_ += [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
  if (timer_Lightning_ > 50) {
    timer_Lightning_ -= 50;
    t_ *= -1;
  }
}

- (TuxkidsTuxblocksCoreDefenseProjectileChainProjectile *)copy__WithInt:(int)hits
                                                              withFloat:(float)damageReduceFactor
                                                              withFloat:(float)rangeReduceFactor OBJC_METHOD_FAMILY_NONE {
  return [[TuxkidsTuxblocksCoreDefenseProjectileLightning alloc] initWithInt:hits withFloat:damageReduceFactor withFloat:rangeReduceFactor];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseProjectileLightning *typedCopy = (TuxkidsTuxblocksCoreDefenseProjectileLightning *) copy;
  typedCopy.t = t_;
  typedCopy.timer_Lightning = timer_Lightning_;
}

@end

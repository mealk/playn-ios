//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/defense/projectile/BodyProjectile.java
//
//  Created by Thomas on 7/10/13.
//

#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Vector.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/projectile/BodyProjectile.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Projectile.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"

@implementation TuxkidsTuxblocksCoreDefenseProjectileBodyProjectile

@synthesize position = position_;
@synthesize velocity = velocity_;
@synthesize temp = temp_;

- (float)maxSpeed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)acceleration {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)placeWithTuxkidsTuxblocksCoreDefenseGrid:(TuxkidsTuxblocksCoreDefenseGrid *)grid
     withTuxkidsTuxblocksCoreDefenseWalkerWalker:(TuxkidsTuxblocksCoreDefenseWalkerWalker *)target
       withTuxkidsTuxblocksCoreDefenseTowerTower:(TuxkidsTuxblocksCoreDefenseTowerTower *)source {
  [super placeWithTuxkidsTuxblocksCoreDefenseGrid:grid withTuxkidsTuxblocksCoreDefenseWalkerWalker:target withTuxkidsTuxblocksCoreDefenseTowerTower:source];
  [TuxkidsTuxblocksCorePlayNObject centerImageLayerWithPlaynCoreImageLayer:layer__];
  self.position = [[((TuxkidsTuxblocksCoreDefenseTowerTower *) NIL_CHK(source)) projectileStart] clone];
  velocity_ = [[PythagorasFVector alloc] init];
  [self updateWithInt:0];
}

- (BOOL)doUpdateWithInt:(int)delta {
  TuxkidsTuxblocksCoreDefenseWalkerWalker *hit = [((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) getHitWalkerWithPythagorasFVector:position_];
  if (hit != nil) {
    [self dealDamage];
    return YES;
  }
  if ([((TuxkidsTuxblocksCoreDefenseGrid *) NIL_CHK(grid_)) isOutOfBoundsWithPythagorasFVector:position_]) {
    return YES;
  }
  if ([((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(target__)) isAlive]) {
    (void) [[((TuxkidsTuxblocksCoreDefenseWalkerWalker *) NIL_CHK(target__)) position] subtractWithPythagorasFIVector:position_ withPythagorasFVector:temp_];
    (void) [((PythagorasFVector *) NIL_CHK(temp_)) normalizeLocal];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setRotationWithFloat:[((PythagorasFVector *) NIL_CHK(temp_)) angle]];
    (void) [((PythagorasFVector *) NIL_CHK(velocity_)) addScaledWithPythagorasFIVector:temp_ withFloat:[self acceleration] * delta * 30 withPythagorasFVector:velocity_];
    if ([((PythagorasFVector *) NIL_CHK(velocity_)) length] > [self maxSpeed]) (void) [((PythagorasFVector *) NIL_CHK(velocity_)) scale__WithFloat:[self maxSpeed] / [((PythagorasFVector *) NIL_CHK(velocity_)) length] withPythagorasFVector:velocity_];
  }
  else if ([((PythagorasFVector *) NIL_CHK(velocity_)) length] == 0) {
    return YES;
  }
  return NO;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  ((PythagorasFVector *) NIL_CHK(position_)).x_ += ((PythagorasFVector *) NIL_CHK(velocity_)).x_ * [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
  ((PythagorasFVector *) NIL_CHK(position_)).y_ += ((PythagorasFVector *) NIL_CHK(velocity_)).y_ * [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setTranslationWithFloat:((PythagorasFVector *) NIL_CHK(position_)).x_ withFloat:((PythagorasFVector *) NIL_CHK(position_)).y_];
}

- (PythagorasFVector *)getHitPosition {
  return position_;
}

- (id)init {
  if ((self = [super init])) {
    temp_ = [[PythagorasFVector alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreDefenseProjectileBodyProjectile *typedCopy = (TuxkidsTuxblocksCoreDefenseProjectileBodyProjectile *) copy;
  typedCopy.position = position_;
  typedCopy.velocity = velocity_;
  typedCopy.temp = temp_;
}

@end

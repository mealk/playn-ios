//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/TuxBlocksGame.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Math.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Color.h"
#include "playn/core/Game.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "tripleplay/game/ScreenStack.h"
#include "tripleplay/game/trans/SlideTransition.h"
#include "tuxkids/tuxblocks/core/GameBackgroundSprite.h"
#include "tuxkids/tuxblocks/core/GameState.h"
#include "tuxkids/tuxblocks/core/SolidClock.h"
#include "tuxkids/tuxblocks/core/TuxBlocksGame.h"
#include "tuxkids/tuxblocks/core/solve/blocks/n/SolveScene.h"
#include "tuxkids/tuxblocks/core/defense/DefenseScreen.h"

@implementation TuxkidsTuxblocksCoreTuxBlocksGame

static TuxkidsTuxblocksCoreTuxBlocksGame * TuxkidsTuxblocksCoreTuxBlocksGame_instance_;

@synthesize clock = clock_;
@synthesize screens = screens_;
@synthesize background = background_;
@synthesize frames = frames_;
@synthesize lastUpdate = lastUpdate_;
@synthesize fpsLayer = fpsLayer_;

+ (int)UPDATE_RATE {
  return TuxkidsTuxblocksCoreTuxBlocksGame_UPDATE_RATE;
}

+ (TuxkidsTuxblocksCoreTuxBlocksGame *)instance {
  return TuxkidsTuxblocksCoreTuxBlocksGame_instance_;
}

+ (void)setInstance:(TuxkidsTuxblocksCoreTuxBlocksGame *)instance {
  TuxkidsTuxblocksCoreTuxBlocksGame_instance_ = instance;
}

+ (int)screenDepth {
  return [((TripleplayGameScreenStack *) nil_chk(((TuxkidsTuxblocksCoreTuxBlocksGame *) nil_chk(TuxkidsTuxblocksCoreTuxBlocksGame_instance_)).screens)) size];
}

- (id)init {
  if ((self = [super initWithInt:TuxkidsTuxblocksCoreTuxBlocksGame_UPDATE_RATE])) {
    clock_ = [[TuxkidsTuxblocksCoreSolidClock alloc] initWithInt:TuxkidsTuxblocksCoreTuxBlocksGame_UPDATE_RATE];
    screens_ = [[TuxkidsTuxblocksCoreTuxBlocksGame_$1 alloc] init];
    TuxkidsTuxblocksCoreTuxBlocksGame_instance_ = self;
  }
  return self;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  TuxkidsTuxblocksCoreGameState *state = [[TuxkidsTuxblocksCoreGameState alloc] init];
  background_ = [((TuxkidsTuxblocksCoreGameState *) nil_chk(state)) background];
  (void) [((id<PlaynCoreGroupLayer>) nil_chk([((TuxkidsTuxblocksCoreGameBackgroundSprite *) nil_chk(background_)) layer])) setDepthWithFloat:-10];
  [((id<PlaynCoreGroupLayer>) nil_chk([((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer])) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreGameBackgroundSprite *) nil_chk(background_)) layer]];
  [((TripleplayGameScreenStack *) nil_chk(screens_)) pushWithTripleplayGameScreen:[[TuxkidsTuxblocksCoreDefenseDefenseScreen alloc] initWithTripleplayGameScreenStack:screens_ withTuxkidsTuxblocksCoreGameState:state]];
}

- (void)updateFPS {
  frames_++;
  if (lastUpdate_ < [PlaynCorePlayN currentTime] - 1000) {
    lastUpdate_ = [PlaynCorePlayN currentTime];
    id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageWithFloat:40 withFloat:13];
    id<PlaynCoreCanvas> canvas = [((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setFillColorWithInt:[PlaynCoreColor rgbWithInt:50 withInt:50 withInt:50]];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) drawTextWithNSString:[NSString stringWithFormat:@"%d FPS", frames_] withFloat:0 withFloat:[((id<PlaynCoreCanvasImage>) nil_chk(image)) height]];
    if (fpsLayer_ != nil) [((id<PlaynCoreGroupLayer>) nil_chk([((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer])) removeWithPlaynCoreLayer:fpsLayer_];
    fpsLayer_ = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageLayerWithPlaynCoreImage:image];
    (void) [((id<PlaynCoreImageLayer>) nil_chk(fpsLayer_)) setDepthWithFloat:10000];
    [((id<PlaynCoreGroupLayer>) nil_chk([((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer])) addWithPlaynCoreLayer:fpsLayer_];
    frames_ = 0;
  }
}

- (void)updateWithInt:(int)delta {
  delta = [JavaLangMath minWithInt:delta withInt:TuxkidsTuxblocksCoreTuxBlocksGame_MAX_DELTA];
  [((TuxkidsTuxblocksCoreSolidClock *) nil_chk(clock_)) updateWithInt:delta];
  [((TuxkidsTuxblocksCoreGameBackgroundSprite *) nil_chk(background_)) updateWithInt:delta];
  [((TripleplayGameScreenStack *) nil_chk(screens_)) updateWithInt:delta];
}

- (void)paintWithFloat:(float)alpha {
  [((TuxkidsTuxblocksCoreSolidClock *) nil_chk(clock_)) paintWithFloat:alpha];
  [((TuxkidsTuxblocksCoreGameBackgroundSprite *) nil_chk(background_)) paintWithPlaynCoreUtilClock:clock_];
  [((TripleplayGameScreenStack *) nil_chk(screens_)) paintWithPlaynCoreUtilClock:clock_];
  [self updateFPS];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreTuxBlocksGame *typedCopy = (TuxkidsTuxblocksCoreTuxBlocksGame *) copy;
  typedCopy.clock = clock_;
  typedCopy.screens = screens_;
  typedCopy.background = background_;
  typedCopy.frames = frames_;
  typedCopy.lastUpdate = lastUpdate_;
  typedCopy.fpsLayer = fpsLayer_;
}

@end
@implementation TuxkidsTuxblocksCoreTuxBlocksGame_$1

- (id<TripleplayGameScreenStack_Transition>)defaultPushTransition {
  return [self slide];
}

- (id<TripleplayGameScreenStack_Transition>)defaultPopTransition {
  return [((TripleplayGameTransSlideTransition *) nil_chk([self slide])) right];
}

- (id)init {
  return [super init];
}

@end

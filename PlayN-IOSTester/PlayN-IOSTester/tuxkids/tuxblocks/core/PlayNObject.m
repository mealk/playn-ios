//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/PlayNObject.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Double.h"
#include "java/lang/Throwable.h"
#include "playn/core/Assets.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Image.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Keyboard.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/Pointer.h"
#include "pythagoras/f/FloatMath.h"
#include "pythagoras/f/IVector.h"
#include "pythagoras/f/Vector.h"
#include "pythagoras/i/IPoint.h"
#include "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/utils/Debug.h"
#include "tuxkids/tuxblocks/core/utils/HashCode.h"
#include "tuxkids/tuxblocks/core/utils/Positioned.h"

@implementation TuxkidsTuxblocksCorePlayNObject

@synthesize hashCode_ = hashCode__;

+ (id<PlaynCoreGraphics>)graphics {
  return [PlaynCorePlayN graphics];
}

+ (id<PlaynCorePointer>)pointer {
  return [PlaynCorePlayN pointer];
}

+ (id<PlaynCoreKeyboard>)keyboard {
  return [PlaynCorePlayN keyboard];
}

+ (id<PlaynCoreAssets>)assets {
  return [PlaynCorePlayN assets];
}

+ (long long int)currentTime {
  return (long long int) [PlaynCorePlayN currentTime];
}

+ (int)gWidth {
  return [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) width];
}

+ (int)gHidth {
  return [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) height];
}

+ (id<PlaynCoreGroupLayer>)gRootLayer {
  return [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) rootLayer];
}

+ (void)debugWithNSString:(NSString *)msg {
  [TuxkidsTuxblocksCoreUtilsDebug writeWithNSString:msg];
}

+ (void)debugWithNSString:(NSString *)msg
        withNSObjectArray:(IOSObjectArray *)args {
  [TuxkidsTuxblocksCoreUtilsDebug writeWithNSString:msg withNSObjectArray:args];
}

+ (void)debugWithInt:(int)msg {
  [TuxkidsTuxblocksCoreUtilsDebug writeWithInt:msg];
}

+ (void)debugWithFloat:(float)msg {
  [TuxkidsTuxblocksCoreUtilsDebug writeWithFloat:msg];
}

+ (void)debugWithDouble:(double)msg {
  [TuxkidsTuxblocksCoreUtilsDebug writeWithId:[JavaLangDouble valueOfWithDouble:msg]];
}

+ (void)debugWithLongInt:(long long int)msg {
  [TuxkidsTuxblocksCoreUtilsDebug writeWithLongInt:msg];
}

+ (void)debugWithId:(id)o {
  [TuxkidsTuxblocksCoreUtilsDebug writeWithId:o];
}

+ (float)lerpWithFloat:(float)x0
             withFloat:(float)x1
             withFloat:(float)perc {
  return x0 * (1 - perc) + x1 * perc;
}

+ (void)lerpWithPythagorasFVector:(PythagorasFVector *)v0
                        withFloat:(float)x1
                        withFloat:(float)y1
                        withFloat:(float)perc {
  ((PythagorasFVector *) nil_chk(v0)).x_ = [TuxkidsTuxblocksCorePlayNObject lerpWithFloat:((PythagorasFVector *) nil_chk(v0)).x_ withFloat:x1 withFloat:perc];
  ((PythagorasFVector *) nil_chk(v0)).y_ = [TuxkidsTuxblocksCorePlayNObject lerpWithFloat:((PythagorasFVector *) nil_chk(v0)).y_ withFloat:y1 withFloat:perc];
}

+ (float)lerpTimeWithFloat:(float)x0
                 withFloat:(float)x1
                 withFloat:(float)base
                 withFloat:(float)dt {
  float perc = 1 - [PythagorasFFloatMath powWithFloat:base withFloat:dt];
  return x0 * (1 - perc) + x1 * perc;
}

+ (void)lerpTimeWithPythagorasFVector:(PythagorasFVector *)v0
                              withInt:(int)x1
                              withInt:(int)y1
                            withFloat:(float)base
                            withFloat:(float)dt {
  ((PythagorasFVector *) nil_chk(v0)).x_ = [TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:((PythagorasFVector *) nil_chk(v0)).x_ withFloat:x1 withFloat:base withFloat:dt];
  ((PythagorasFVector *) nil_chk(v0)).y_ = [TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:((PythagorasFVector *) nil_chk(v0)).y_ withFloat:y1 withFloat:base withFloat:dt];
}

+ (float)distanceWithFloat:(float)x1
                 withFloat:(float)y1
                 withFloat:(float)x2
                 withFloat:(float)y2 {
  float dx = x2 - x1;
  float dy = y2 - y1;
  return [PythagorasFFloatMath sqrtWithFloat:dx * dx + dy * dy];
}

+ (float)distanceWithId:(id)o1
                 withId:(id)o2 {
  return [TuxkidsTuxblocksCorePlayNObject distanceWithFloat:[TuxkidsTuxblocksCorePlayNObject getXWithId:o1] withFloat:[TuxkidsTuxblocksCorePlayNObject getYWithId:o1] withFloat:[TuxkidsTuxblocksCorePlayNObject getXWithId:o2] withFloat:[TuxkidsTuxblocksCorePlayNObject getYWithId:o2]];
}

+ (float)distanceWithId:(id)o1
              withFloat:(float)x2
              withFloat:(float)y2 {
  return [TuxkidsTuxblocksCorePlayNObject distanceWithFloat:[TuxkidsTuxblocksCorePlayNObject getXWithId:o1] withFloat:[TuxkidsTuxblocksCorePlayNObject getYWithId:o1] withFloat:x2 withFloat:y2];
}

+ (float)getXWithId:(id)o {
  if ([o conformsToProtocol: @protocol(PythagorasIIPoint)]) {
    return [((id<PythagorasIIPoint>) o) x];
  }
  else if ([o conformsToProtocol: @protocol(PythagorasFIVector)]) {
    return [((id<PythagorasFIVector>) o) x];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCorePointer_Event)]) {
    return [((id<PlaynCorePointer_Event>) o) x];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCoreLayer)]) {
    return [((id<PlaynCoreLayer>) o) tx];
  }
  else if ([o conformsToProtocol: @protocol(TuxkidsTuxblocksCoreUtilsPositioned)]) {
    return [((id<TuxkidsTuxblocksCoreUtilsPositioned>) o) x];
  }
  return 0;
}

+ (float)getYWithId:(id)o {
  if ([o conformsToProtocol: @protocol(PythagorasIIPoint)]) {
    return [((id<PythagorasIIPoint>) o) y];
  }
  else if ([o conformsToProtocol: @protocol(PythagorasFIVector)]) {
    return [((id<PythagorasFIVector>) o) y];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCorePointer_Event)]) {
    return [((id<PlaynCorePointer_Event>) o) y];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCoreLayer)]) {
    return [((id<PlaynCoreLayer>) o) ty];
  }
  else if ([o conformsToProtocol: @protocol(TuxkidsTuxblocksCoreUtilsPositioned)]) {
    return [((id<TuxkidsTuxblocksCoreUtilsPositioned>) o) y];
  }
  return 0;
}

+ (void)centerImageLayerWithPlaynCoreImageLayer:(id<PlaynCoreImageLayer>)layer {
  if ([((id<PlaynCoreImageLayer>) nil_chk(layer)) image] != nil) {
    [((id<PlaynCoreImage>) nil_chk([((id<PlaynCoreImageLayer>) nil_chk(layer)) image])) addCallbackWithPlaynCoreUtilCallback:[[TuxkidsTuxblocksCorePlayNObject_$1 alloc] initWithPlaynCoreImageLayer:layer]];
  }
}

+ (void)centerImageLayerWithTuxkidsTuxblocksCoreImageLayerTintable:(TuxkidsTuxblocksCoreImageLayerTintable *)layer {
  if ([((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(layer)) image] != nil) {
    [((id<PlaynCoreImage>) nil_chk([((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(layer)) image])) addCallbackWithPlaynCoreUtilCallback:[[TuxkidsTuxblocksCorePlayNObject_$2 alloc] initWithTuxkidsTuxblocksCoreImageLayerTintable:layer]];
  }
}

+ (float)getGlobalTxWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  id<PlaynCoreLayer> parent = layer;
  float tx = 0;
  while (parent != nil) {
    tx += [((id<PlaynCoreLayer>) nil_chk(parent)) tx];
    parent = [((id<PlaynCoreLayer>) nil_chk(parent)) parent];
  }
  return tx;
}

+ (float)getGlobalTyWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  id<PlaynCoreLayer> parent = layer;
  float ty = 0;
  while (parent != nil) {
    ty += [((id<PlaynCoreLayer>) nil_chk(parent)) ty];
    parent = [((id<PlaynCoreLayer>) nil_chk(parent)) parent];
  }
  return ty;
}

- (id)init {
  if ((self = [super init])) {
    if ([self conformsToProtocol: @protocol(TuxkidsTuxblocksCoreUtilsHashCode_Hashable)]) hashCode__ = [[TuxkidsTuxblocksCoreUtilsHashCode alloc] initWithTuxkidsTuxblocksCoreUtilsHashCode_Hashable:(id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable>) self];
  }
  return self;
}

- (NSUInteger)hash {
  if (hashCode__ == nil) return [super hash];
  return [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode__)) hash];
}

- (BOOL)isEqual:(id)obj {
  if (hashCode__ == nil) return [super isEqual:obj];
  if (self == obj) return YES;
  if (obj == nil) return NO;
  if ([self getClass] != [nil_chk(obj) getClass]) return NO;
  return [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode__)) equalsWithTuxkidsTuxblocksCoreUtilsHashCode:((TuxkidsTuxblocksCorePlayNObject *) obj).hashCode_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCorePlayNObject *typedCopy = (TuxkidsTuxblocksCorePlayNObject *) copy;
  typedCopy.hashCode_ = hashCode__;
}

@end
@implementation TuxkidsTuxblocksCorePlayNObject_$1

@synthesize val$layer = val$layer_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)result {
  (void) [((id<PlaynCoreImageLayer>) nil_chk(val$layer_)) setOriginWithFloat:[((id<PlaynCoreImage>) nil_chk(result)) width] / 2 withFloat:[((id<PlaynCoreImage>) nil_chk(result)) height] / 2];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)cause {
}

- (id)initWithPlaynCoreImageLayer:(id<PlaynCoreImageLayer>)capture$0 {
  if ((self = [super init])) {
    val$layer_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCorePlayNObject_$1 *typedCopy = (TuxkidsTuxblocksCorePlayNObject_$1 *) copy;
  typedCopy.val$layer = val$layer_;
}

@end
@implementation TuxkidsTuxblocksCorePlayNObject_$2

@synthesize val$layer = val$layer_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)result {
  [((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(val$layer_)) setOriginWithFloat:[((id<PlaynCoreImage>) nil_chk(result)) width] / 2 withFloat:[((id<PlaynCoreImage>) nil_chk(result)) height] / 2];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)cause {
}

- (id)initWithTuxkidsTuxblocksCoreImageLayerTintable:(TuxkidsTuxblocksCoreImageLayerTintable *)capture$0 {
  if ((self = [super init])) {
    val$layer_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCorePlayNObject_$2 *typedCopy = (TuxkidsTuxblocksCorePlayNObject_$2 *) copy;
  typedCopy.val$layer = val$layer_;
}

@end

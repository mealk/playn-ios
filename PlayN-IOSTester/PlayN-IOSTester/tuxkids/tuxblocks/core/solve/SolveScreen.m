//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/SolveScreen.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Assets.h"
#import "playn/core/Connection.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Pointer.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Point.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/game/trans/SlideTransition.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/MenuSprite.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"
#import "tuxkids/tuxblocks/core/solve/EquationSprite.h"
#import "tuxkids/tuxblocks/core/solve/NumberSelectScreen.h"
#import "tuxkids/tuxblocks/core/solve/SolveScreen.h"
#import "tuxkids/tuxblocks/core/solve/blocks/BaseBlock.h"
#import "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#import "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#import "tuxkids/tuxblocks/core/solve/expression/Equation.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"

@implementation TuxkidsTuxblocksCoreSolveSolveScreen

@synthesize startEquation = startEquation_;
@synthesize baseBlocks = baseBlocks_;
@synthesize leftBaseBlocks = leftBaseBlocks_;
@synthesize rightBaseBlocks = rightBaseBlocks_;
@synthesize draggingFrom = draggingFrom_;
@synthesize highlight = highlight_;
@synthesize flipModifierPreview = flipModifierPreview_;
@synthesize dragging = dragging_;
@synthesize dragOffset = dragOffset_;
@synthesize equationSprite = equationSprite_;
@synthesize simplyfyResult = simplyfyResult_;
@synthesize buttonBack = buttonBack_;
@synthesize buttonImageOk = buttonImageOk_;
@synthesize buttonImageBack = buttonImageBack_;
@synthesize menu = menu_;
@synthesize equalsX = equalsX_;
@synthesize startDoubleClick = startDoubleClick_;
@synthesize startDoubleClickTime = startDoubleClickTime_;

- (void)setEquationWithTuxkidsTuxblocksCoreSolveExpressionEquation:(TuxkidsTuxblocksCoreSolveExpressionEquation *)equation {
  self.startEquation = equation;
}

- (BOOL)solved {
  if (dragging_ != nil) return NO;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *baseBlock = ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) hasModifier]) return NO;
    }
  }
  return YES;
}

- (TuxkidsTuxblocksCoreSolveExpressionEquation *)equation {
  return [[TuxkidsTuxblocksCoreSolveExpressionEquation alloc] initWithTuxkidsTuxblocksCoreSolveExpressionExpression:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilList>) NIL_CHK(leftBaseBlocks_)) getWithInt:0]) topLevelExpression] withTuxkidsTuxblocksCoreSolveExpressionExpression:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilList>) NIL_CHK(rightBaseBlocks_)) getWithInt:0]) topLevelExpression] withInt:[((TuxkidsTuxblocksCoreSolveExpressionEquation *) NIL_CHK(startEquation_)) answer] withInt:[((TuxkidsTuxblocksCoreSolveExpressionEquation *) NIL_CHK(startEquation_)) difficulty]];
}

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
      withTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)gameState {
  if ((self = [super initWithTripleplayGameScreenStack:screens withTuxkidsTuxblocksCoreGameState:gameState])) {
    baseBlocks_ = [[JavaUtilArrayList alloc] init];
    leftBaseBlocks_ = [[JavaUtilArrayList alloc] init];
    rightBaseBlocks_ = [[JavaUtilArrayList alloc] init];
    dragOffset_ = [[PythagorasFPoint alloc] init];
    menu_ = [[TuxkidsTuxblocksCoreMenuSprite alloc] initWithFloat:[self width] withFloat:[TuxkidsTuxblocksCoreScreenGameScreen defaultButtonSize] * 1.2f];
    (void) [((id<PlaynCoreLayer>) [((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) layer]) setDepthWithFloat:-1];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) layer]];
    buttonImageBack_ = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[TuxkidsTuxblocksCoreConstant BUTTON_DOWN]];
    buttonImageOk_ = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[TuxkidsTuxblocksCoreConstant BUTTON_OK]];
    buttonBack_ = [self createMenuButtonWithNSString:[TuxkidsTuxblocksCoreConstant BUTTON_DOWN]];
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setPositionWithFloat:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) width] * 0.6f withFloat:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) height] * 0.6f];
    (void) [((id<PlaynCoreLayer>) [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) layerAddable]) setDepthWithFloat:10];
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setOnReleasedListenerWithTuxkidsTuxblocksCoreButton_OnReleasedListener:[[TuxkidsTuxblocksCoreSolveSolveScreen_$1 alloc] initWithTuxkidsTuxblocksCoreSolveSolveScreen:self]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) layerAddable]];
  }
  return self;
}

- (void)popThis {
  [self popThisWithTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(screens_)) slide] up]];
}

- (void)wasAdded {
  [super wasAdded];
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *leftHandSide = [TuxkidsTuxblocksCoreSolveBlocksBlock createBlockWithTuxkidsTuxblocksCoreSolveExpressionExpression:[((TuxkidsTuxblocksCoreSolveExpressionEquation *) NIL_CHK(startEquation_)) leftHandSide]];
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *rightHandSide = [TuxkidsTuxblocksCoreSolveBlocksBlock createBlockWithTuxkidsTuxblocksCoreSolveExpressionExpression:[((TuxkidsTuxblocksCoreSolveExpressionEquation *) NIL_CHK(startEquation_)) rightHandSide]];
  float blockHeight = [JavaLangMath maxWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) groupHeight] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) groupHeight]];
  (void) [((id<PlaynCoreGroupLayer>) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) layer]) setTyWithFloat:([((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) height] + blockHeight + [((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) height]) / 2];
  (void) [((id<PlaynCoreGroupLayer>) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) layer]) setTxWithFloat:[((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) width] / 4 - [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) groupWidth] / 2];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) layer]];
  if ([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) hasModifier]) (void) [((id<PlaynCoreImageLayer>) [[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
  [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(leftHandSide)) setSimplifyListenerWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock_OnSimplifyListener:self];
  [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) addWithId:leftHandSide];
  [((id<JavaUtilList>) NIL_CHK(leftBaseBlocks_)) addWithId:leftHandSide];
  (void) [((id<PlaynCoreGroupLayer>) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) layer]) setTyWithFloat:([((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) height] + blockHeight + [((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) height]) / 2];
  (void) [((id<PlaynCoreGroupLayer>) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) layer]) setTxWithFloat:3 * [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) width] / 4 - [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) groupWidth] / 2];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) layer]];
  if ([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) hasModifier]) (void) [((id<PlaynCoreImageLayer>) [[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
  [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(rightHandSide)) setSimplifyListenerWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock_OnSimplifyListener:self];
  [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) addWithId:rightHandSide];
  [((id<JavaUtilList>) NIL_CHK(rightBaseBlocks_)) addWithId:rightHandSide];
  equalsX_ = [self width] / 2;
  equationSprite_ = [[TuxkidsTuxblocksCoreSolveEquationSprite alloc] initWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:leftHandSide withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:rightHandSide];
  [self refreshEquationSprite];
}

- (void)wasRemoved {
  [super wasRemoved];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *block = ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(block)) destroy];
    }
  }
  [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) clear];
  [((id<JavaUtilList>) NIL_CHK(leftBaseBlocks_)) clear];
  [((id<JavaUtilList>) NIL_CHK(rightBaseBlocks_)) clear];
  [((id<PlaynCoreImageLayer>) [((TuxkidsTuxblocksCoreSolveEquationSprite *) NIL_CHK(equationSprite_)) layer]) destroy];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *baseBlock = ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<PlaynCoreGroupLayer>) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) layer]) destroy];
    }
  }
}

- (void)refreshEquationSprite {
  [((TuxkidsTuxblocksCoreSolveEquationSprite *) NIL_CHK(equationSprite_)) refreshWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:dragging_ withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:highlight_ withBOOL:flipModifierPreview_];
  id<PlaynCoreImageLayer> layer = [((TuxkidsTuxblocksCoreSolveEquationSprite *) NIL_CHK(equationSprite_)) layer];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(self.layer)) addWithPlaynCoreLayer:layer];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setTyWithFloat:10];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setTxWithFloat:[((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) width] / 2];
  [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setImageWithPlaynCoreImage:[self solved] ? buttonImageOk_ : buttonImageBack_];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (dragging_ != nil) return;
  dragging_ = nil;
  draggingFrom_ = nil;
  if ([((id<PlaynCorePointer_Event>) NIL_CHK(event)) hit] != nil) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksBaseBlock *baseBlock = ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        if ([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) hasModifier] && [[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) lastModifier] layer] == [((id<PlaynCorePointer_Event>) NIL_CHK(event)) hit]) {
          if ([[[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) lastModifier] getModifier] getPrecedence] == TuxkidsTuxblocksCoreSolveExpressionExpression_PREC_MULT && [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) size] > 2) {
            if (startDoubleClick_ != nil && startDoubleClickTime_ + TuxkidsTuxblocksCoreSolveSolveScreen_DOUBLE_CLICK_TIME > [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time]) {
              TuxkidsTuxblocksCoreSolveExpressionModificationOperation *toFlip = [[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) lastModifier] getModifier];
              {
                id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
                while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
                  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *baseBlock2 = ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
                  [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock2)) addModifierWithTuxkidsTuxblocksCoreSolveExpressionModificationOperation:[((TuxkidsTuxblocksCoreSolveExpressionModificationOperation *) NIL_CHK(toFlip)) getInverse]];
                  (void) [((id<PlaynCoreImageLayer>) [[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock2)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
                }
              }
              [self refreshEquationSprite];
            }
            else {
              startDoubleClick_ = baseBlock;
              startDoubleClickTime_ = [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time];
            }
            continue;
          }
          draggingFrom_ = baseBlock;
          break;
        }
      }
    }
    if (draggingFrom_ != nil) {
      dragging_ = [draggingFrom_ pop];
      if ([draggingFrom_ hasModifier]) {
        (void) [((id<PlaynCoreImageLayer>) [[draggingFrom_ lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
      }
      (void) [((PythagorasFPoint *) NIL_CHK(dragOffset_)) setWithFloat:[((id<PlaynCoreGroupLayer>) [draggingFrom_ layer]) tx] + [((id<PlaynCoreImageLayer>) [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) NIL_CHK(dragging_)) layer]) tx] - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCoreGroupLayer>) [draggingFrom_ layer]) ty] + [((id<PlaynCoreImageLayer>) [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) NIL_CHK(dragging_)) layer]) ty] - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]];
      (void) [((id<PlaynCoreImageLayer>) [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) NIL_CHK(dragging_)) layer]) setTranslationWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).x_ withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).y_];
      [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) NIL_CHK(dragging_)) layer]];
      (void) [((id<PlaynCoreImageLayer>) [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) NIL_CHK(dragging_)) layer]) setDepthWithFloat:2];
      [self refreshEquationSprite];
    }
  }
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (dragging_ != nil) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksBaseBlock *baseBlock = ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) stopShowingPreview];
      }
    }
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) removeWithPlaynCoreLayer:[dragging_ layer]];
    TuxkidsTuxblocksCoreSolveBlocksBaseBlock *dragStop = highlight_;
    if (flipModifierPreview_) {
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(dragStop)) addModifierWithTuxkidsTuxblocksCoreSolveExpressionModificationOperation:[dragging_ getModifier]];
    }
    else {
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(dragStop)) addModifierWithTuxkidsTuxblocksCoreSolveExpressionModificationOperation:[dragging_ getOriginalModifier]];
    }
    (void) [((id<PlaynCoreImageLayer>) [[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(dragStop)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
    dragging_ = nil;
    [self refreshEquationSprite];
  }
  dragging_ = nil;
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (dragging_ != nil) {
    (void) [((id<PlaynCoreImageLayer>) [dragging_ layer]) setTranslationWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).x_ withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).y_];
    BOOL invert = ([((id<PlaynCoreGroupLayer>) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(draggingFrom_)) layer]) tx] < equalsX_) != ([((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] < equalsX_);
    [dragging_ setInvertedWithBOOL:invert];
    [self refreshEquationSprite];
    float blockCX = [((id<PlaynCoreImageLayer>) [dragging_ layer]) tx] + [dragging_ width] / 2;
    float blockCY = [((id<PlaynCoreImageLayer>) [dragging_ layer]) ty] + [dragging_ height] / 2;
    highlight_ = draggingFrom_;
    flipModifierPreview_ = NO;
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksBaseBlock *baseBlock = ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) updateShowPreviewWithFloat:blockCX withFloat:blockCY withTuxkidsTuxblocksCoreSolveExpressionModificationOperation:[dragging_ getModifier]];
        if (baseBlock != draggingFrom_ && [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(baseBlock)) isShowingPreview]) {
          highlight_ = baseBlock;
          flipModifierPreview_ = YES;
        }
      }
    }
  }
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)onSimplifyWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)baseBlock
                                                  withNSString:(NSString *)expression
                                                       withInt:(int)answer
                                                       withInt:(int)start {
  simplyfyResult_ = baseBlock;
  TuxkidsTuxblocksCoreSolveNumberSelectScreen *nss = [[TuxkidsTuxblocksCoreSolveNumberSelectScreen alloc] initWithTripleplayGameScreenStack:screens_ withTuxkidsTuxblocksCoreGameState:state__ withNSString:expression withInt:answer];
  [((TuxkidsTuxblocksCoreSolveNumberSelectScreen *) NIL_CHK(nss)) setFocusedNumberWithInt:start];
  [self pushScreenWithTuxkidsTuxblocksCoreScreenGameScreen:nss];
}

- (void)onChildScreenFinishedWithTuxkidsTuxblocksCoreScreenGameScreen:(TuxkidsTuxblocksCoreScreenGameScreen *)screen {
  [super onChildScreenFinishedWithTuxkidsTuxblocksCoreScreenGameScreen:screen];
  if ([screen isKindOfClass:[TuxkidsTuxblocksCoreSolveNumberSelectScreen class]]) {
    if ([((TuxkidsTuxblocksCoreSolveNumberSelectScreen *) screen) hasCorrectAnswer]) {
      JavaLangInteger *answer = [((TuxkidsTuxblocksCoreSolveNumberSelectScreen *) screen) selectedAnswer];
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) NIL_CHK(simplyfyResult_)) simplfyWithInt:[((JavaLangInteger *) NIL_CHK(answer)) intValue]];
      [self refreshEquationSprite];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveSolveScreen *typedCopy = (TuxkidsTuxblocksCoreSolveSolveScreen *) copy;
  typedCopy.startEquation = startEquation_;
  typedCopy.baseBlocks = baseBlocks_;
  typedCopy.leftBaseBlocks = leftBaseBlocks_;
  typedCopy.rightBaseBlocks = rightBaseBlocks_;
  typedCopy.draggingFrom = draggingFrom_;
  typedCopy.highlight = highlight_;
  typedCopy.flipModifierPreview = flipModifierPreview_;
  typedCopy.dragging = dragging_;
  typedCopy.dragOffset = dragOffset_;
  typedCopy.equationSprite = equationSprite_;
  typedCopy.simplyfyResult = simplyfyResult_;
  typedCopy.buttonBack = buttonBack_;
  typedCopy.buttonImageOk = buttonImageOk_;
  typedCopy.buttonImageBack = buttonImageBack_;
  typedCopy.menu = menu_;
  typedCopy.equalsX = equalsX_;
  typedCopy.startDoubleClick = startDoubleClick_;
  typedCopy.startDoubleClickTime = startDoubleClickTime_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveSolveScreen_$1

@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) [this$0_ popThis];
}

- (id)initWithTuxkidsTuxblocksCoreSolveSolveScreen:(TuxkidsTuxblocksCoreSolveSolveScreen *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveSolveScreen_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveSolveScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/EquationSprite.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/lang/Math.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Color.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "tuxkids/tuxblocks/core/Constant.h"
#include "tuxkids/tuxblocks/core/solve/EquationSprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/BaseBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#include "tuxkids/tuxblocks/core/solve/expression/ExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"

@implementation TuxkidsTuxblocksCoreSolveEquationSprite

static PlaynCoreTextFormat * TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_;

@synthesize layer_ = layer__;
@synthesize rightHandSide = rightHandSide_;
@synthesize leftHandSide = leftHandSide_;

+ (PlaynCoreTextFormat *)textFormat {
  return TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_;
}

+ (void)setTextFormat:(PlaynCoreTextFormat *)textFormat {
  TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_ = textFormat;
}

- (id<PlaynCoreImageLayer>)layer {
  return layer__;
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)leftHandSide
          withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)rightHandSide {
  if ((self = [super init])) {
    self.leftHandSide = leftHandSide;
    self.rightHandSide = rightHandSide;
    if (TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_ == nil) {
      id<PlaynCoreFont> font = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:20];
      TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:font];
    }
    [self refreshWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:nil withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:nil withBOOL:NO];
  }
  return self;
}

- (void)refreshWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)dragging
                   withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)highlight
                                                       withBOOL:(BOOL)flipModifier {
  if (layer__ != nil) [layer__ destroy];
  TuxkidsTuxblocksCoreSolveExpressionExpression *leftExpression = [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(leftHandSide_)) topLevelExpression];
  TuxkidsTuxblocksCoreSolveExpressionExpression *rightExpression = [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(rightHandSide_)) topLevelExpression];
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *toModify = nil;
  if (dragging != nil) {
    toModify = highlight;
    TuxkidsTuxblocksCoreSolveExpressionModificationOperation *modOp = flipModifier ? [dragging getModifier] : [dragging getOriginalModifier];
    if (leftHandSide_ == toModify) {
      [((TuxkidsTuxblocksCoreSolveExpressionModificationOperation *) nil_chk(modOp)) setOperandWithTuxkidsTuxblocksCoreSolveExpressionExpression:leftExpression];
      leftExpression = modOp;
    }
    else {
      [((TuxkidsTuxblocksCoreSolveExpressionModificationOperation *) nil_chk(modOp)) setOperandWithTuxkidsTuxblocksCoreSolveExpressionExpression:rightExpression];
      rightExpression = modOp;
    }
  }
  TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *leftEW = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(leftExpression)) getExpressionWriterWithPlaynCoreTextFormat:TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_];
  TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *rightEW = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(rightExpression)) getExpressionWriterWithPlaynCoreTextFormat:TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_];
  id<PlaynCoreTextLayout> eqLayout = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:@"=" withPlaynCoreTextFormat:TuxkidsTuxblocksCoreSolveEquationSprite_textFormat_];
  float width = [((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(leftEW)) width] + [((id<PlaynCoreTextLayout>) nil_chk(eqLayout)) width] + [((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(rightEW)) width] + TuxkidsTuxblocksCoreSolveExpressionExpressionWriter_SPACING * 2;
  float height = [JavaLangMath maxWithFloat:[((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(leftEW)) height] withFloat:[((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(rightEW)) height]];
  id<PlaynCoreCanvasImage> canvasImage = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageWithFloat:width withFloat:height];
  id<PlaynCoreCanvas> canvas = [((id<PlaynCoreCanvasImage>) nil_chk(canvasImage)) canvas];
  int colorNormal = [PlaynCoreColor rgbWithInt:0 withInt:0 withInt:0];
  int colorHighlight = [PlaynCoreColor rgbWithInt:255 withInt:0 withInt:0];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setFillColorWithInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setStrokeColorWithInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) save];
  if (toModify == leftHandSide_) {
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setFillColorWithInt:colorHighlight];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setStrokeColorWithInt:colorHighlight];
  }
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) translateWithFloat:0 withFloat:(height - [((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(leftEW)) height]) / 2];
  [((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(leftEW)) drawExpressionWithPlaynCoreCanvas:canvas withInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) restore];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) translateWithFloat:[((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(leftEW)) width] + TuxkidsTuxblocksCoreSolveExpressionExpressionWriter_SPACING withFloat:(height - [((id<PlaynCoreTextLayout>) nil_chk(eqLayout)) height]) / 2];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) fillTextWithPlaynCoreTextLayout:eqLayout withFloat:0 withFloat:0];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) restore];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) save];
  if (toModify == rightHandSide_) {
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setFillColorWithInt:colorHighlight];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setStrokeColorWithInt:colorHighlight];
  }
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) translateWithFloat:[((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(leftEW)) width] + TuxkidsTuxblocksCoreSolveExpressionExpressionWriter_SPACING * 2 + [((id<PlaynCoreTextLayout>) nil_chk(eqLayout)) width] withFloat:(height - [((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(rightEW)) height]) / 2];
  [((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(rightEW)) drawExpressionWithPlaynCoreCanvas:canvas withInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) restore];
  layer__ = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageLayerWithPlaynCoreImage:canvasImage];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer__)) setOriginWithFloat:[((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(leftEW)) width] + TuxkidsTuxblocksCoreSolveExpressionExpressionWriter_SPACING + [((id<PlaynCoreTextLayout>) nil_chk(eqLayout)) width] / 2 withFloat:0];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveEquationSprite *typedCopy = (TuxkidsTuxblocksCoreSolveEquationSprite *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.rightHandSide = rightHandSide_;
  typedCopy.leftHandSide = leftHandSide_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/TimesBlock.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSIntArray.h"
#include "java/util/List.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Color.h"
#include "playn/core/Graphics.h"
#include "playn/core/Path.h"
#include "playn/core/PlayN.h"
#include "playn/core/TextLayout.h"
#include "tripleplay/util/Colors.h"
#include "tuxkids/tuxblocks/core/Constant.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerLike.h"
#include "tuxkids/tuxblocks/core/layers/NinepatchLayer.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/OverBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/TimesBlock.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksTimesBlock

- (id)initWithInt:(int)value {
  return [super initWithInt:value];
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksOverBlock:(TuxkidsTuxblocksCoreSolveBlocksOverBlock *)inverse {
  return [super initWithTuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock:inverse];
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksTimesBlock:(TuxkidsTuxblocksCoreSolveBlocksTimesBlock *)inverse {
  return [super initWithTuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock:inverse];
}

- (NSString *)operator__ {
  return [TuxkidsTuxblocksCoreConstant TIMES_SYMBOL];
}

- (int)color {
  if (value_ == -1) {
    return [PlaynCoreColor rgbWithInt:150 withInt:150 withInt:150];
  }
  else {
    return [PlaynCoreColor rgbWithInt:(int) 0xF7 withInt:(int) 0x9D withInt:(int) 0x04];
  }
}

- (NSString *)text {
  if (value_ == -1) {
    return @"-";
  }
  else {
    return [super text];
  }
}

- (BOOL)canSimplify {
  if (value_ == -1) {
    if (group__ == nil) return NO;
    return [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(group__)).children)) lastIndexOfWithId:inverse__] != [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(group__)).children)) indexOfWithId:inverse__];
  }
  return [super canSimplify];
}

- (TuxkidsTuxblocksCoreLayersNinepatchLayer *)generateNinepatchWithNSString:(NSString *)text {
  BOOL times = YES;
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:text withPlaynCoreTextFormat:[TuxkidsTuxblocksCoreSolveBlocksBlock textFormat]];
  int legs = [TuxkidsTuxblocksCoreSolveBlocksSprite wrapSize];
  int sides = 3;
  int width = legs * 2 + sides * 2 + (int) [((id<PlaynCoreTextLayout>) nil_chk(layout)) width] + 2;
  int height = [TuxkidsTuxblocksCoreSolveBlocksSprite modSize] + sides * 2;
  IOSIntArray *widthDims = [IOSIntArray arrayWithInts:(int[]){ legs + 2, sides - 2, width - legs * 2 - sides * 2, sides - 2, legs + 2 } count:5];
  IOSIntArray *heightDims;
  if (times) {
    heightDims = [IOSIntArray arrayWithInts:(int[]){ [TuxkidsTuxblocksCoreSolveBlocksSprite modSize] + 1, sides - 1, sides } count:3];
  }
  else {
    heightDims = [IOSIntArray arrayWithInts:(int[]){ sides, sides - 1, [TuxkidsTuxblocksCoreSolveBlocksSprite modSize] + 1 } count:3];
  }
  float hlw = 0;
  float pWidth = width - 1;
  float pHeight = height - 1;
  float lx, ly;
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createImageWithFloat:width withFloat:height];
  if (!times) {
    (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) save];
    (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) translateWithFloat:0 withFloat:[((id<PlaynCoreCanvasImage>) nil_chk(image)) height] / 2];
    (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) scale__WithFloat:1 withFloat:-1];
    (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) translateWithFloat:0 withFloat:-[((id<PlaynCoreCanvasImage>) nil_chk(image)) height] / 2 + 1];
  }
  id<PlaynCorePath> path = [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) createPath];
  [((id<PlaynCorePath>) nil_chk(path)) moveToWithFloat:lx = hlw withFloat:ly = hlw];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx = pWidth - hlw withFloat:ly];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx withFloat:ly = pHeight - hlw];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx = pWidth - legs + hlw + 1 withFloat:ly];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx withFloat:ly = pHeight - sides * 2 + hlw];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx = legs - hlw - 1 withFloat:ly];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx withFloat:ly = pHeight - hlw];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx = hlw withFloat:ly];
  [((id<PlaynCorePath>) nil_chk(path)) lineToWithFloat:lx withFloat:hlw];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) setFillColorWithInt:[TripleplayUtilColors WHITE]];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) setStrokeColorWithInt:[TripleplayUtilColors DARK_GRAY]];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) fillPathWithPlaynCorePath:path];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) strokePathWithPlaynCorePath:path];
  float textX = ([((id<PlaynCoreCanvasImage>) nil_chk(image)) width] - [((id<PlaynCoreTextLayout>) nil_chk(layout)) width]) / 2;
  float textY;
  if (times) {
    textY = ([TuxkidsTuxblocksCoreSolveBlocksSprite modSize] - [((id<PlaynCoreTextLayout>) nil_chk(layout)) height]) / 2;
  }
  else {
    (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) restore];
    textY = [((id<PlaynCoreCanvasImage>) nil_chk(image)) height] - ([TuxkidsTuxblocksCoreSolveBlocksSprite modSize] + [((id<PlaynCoreTextLayout>) nil_chk(layout)) height]) / 2;
  }
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) setFillColorWithInt:[TripleplayUtilColors BLACK]];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) fillTextWithPlaynCoreTextLayout:layout withFloat:textX withFloat:textY];
  TuxkidsTuxblocksCoreLayersNinepatchLayer *ninePatch = [[TuxkidsTuxblocksCoreLayersNinepatchLayer alloc] initWithTuxkidsTuxblocksCoreLayersImageLayerLike_Factory:[TuxkidsTuxblocksCoreSolveBlocksBlock factory] withPlaynCoreImage:image withIntArray:widthDims withIntArray:heightDims];
  for (int i = 1; i < 3; i++) {
    for (int j = 1; j < 4; j++) {
      [((TuxkidsTuxblocksCoreLayersNinepatchLayer *) nil_chk(ninePatch)) setTouchEnabledWithInt:i withInt:j withBOOL:NO];
    }
  }
  return ninePatch;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)copyChild OBJC_METHOD_FAMILY_NONE {
  return [[TuxkidsTuxblocksCoreSolveBlocksTimesBlock alloc] initWithInt:value_];
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)inverseChild {
  if (value_ == -1) return [[TuxkidsTuxblocksCoreSolveBlocksTimesBlock alloc] initWithTuxkidsTuxblocksCoreSolveBlocksTimesBlock:self];
  return [[TuxkidsTuxblocksCoreSolveBlocksOverBlock alloc] initWithTuxkidsTuxblocksCoreSolveBlocksTimesBlock:self];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/Sprite.java
//
//  Created by Thomas on 7/26/13.
//

#include "playn/core/Layer.h"
#include "playn/core/Log.h"
#include "playn/core/PlayN.h"
#include "playn/core/Pointer.h"
#include "playn/core/util/Clock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksSprite

@synthesize hasSprite_ = hasSprite__;
@synthesize previewAdd_ = previewAdd__;
@synthesize destoryed = destoryed_;
@synthesize blockListener = blockListener_;

+ (int)SIMPLIFY_DEPTH {
  return TuxkidsTuxblocksCoreSolveBlocksSprite_SIMPLIFY_DEPTH;
}

- (TuxkidsTuxblocksCoreSolveBlocksSprite *)copyChild OBJC_METHOD_FAMILY_NONE {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>)blockListener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateWithInt:(int)delta {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<PlaynCoreLayer>)layer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)destroy {
  if ([self hasSprite]) [((id<PlaynCoreLayer>) nil_chk([self layer])) destroy];
  destoryed_ = YES;
}

- (BOOL)destroyed {
  return destoryed_;
}

- (void)performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_Action>)action {
  [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_Action>) nil_chk(action)) runWithTuxkidsTuxblocksCoreSolveBlocksSprite:self];
}

- (void)setPreviewAddWithBOOL:(BOOL)previewAdd {
  self.previewAdd_ = previewAdd;
}

- (BOOL)previewAdd {
  return previewAdd__;
}

- (BOOL)hasSprite {
  return hasSprite__;
}

+ (int)baseSize {
  return 100;
}

+ (int)modSize {
  return 40;
}

+ (int)wrapSize {
  return 8;
}

+ (float)lerpBase {
  return 0.992f;
}

- (float)x {
  return [((id<PlaynCoreLayer>) nil_chk([self layer])) tx];
}

- (float)y {
  return [((id<PlaynCoreLayer>) nil_chk([self layer])) ty];
}

- (float)top {
  return [self y];
}

- (float)left {
  return [self x];
}

- (float)right {
  return [self x] + [self width];
}

- (float)bottom {
  return [self y] + [self height];
}

- (float)centerX {
  return [self x] + [self width] / 2;
}

- (float)centerY {
  return [self y] + [self height] / 2;
}

- (BOOL)containsWithFloat:(float)x
                withFloat:(float)y {
  return x >= [self left] && x <= [self right] && y >= [self top] && y <= [self bottom];
}

- (void)initSprite OBJC_METHOD_FAMILY_NONE {
  if (hasSprite__) return;
  [self initSpriteImpl];
  if (hasSprite__) [((id<PlaynCoreLog>) nil_chk([PlaynCorePlayN log])) warnWithNSString:@"Warning: initSpriteImpl() sets hasSprite"];
  hasSprite__ = YES;
}

- (void)initSpriteImpl OBJC_METHOD_FAMILY_NONE {
}

- (TuxkidsTuxblocksCoreSolveBlocksSprite *)copy__ OBJC_METHOD_FAMILY_NONE {
  return [self copy__WithBOOL:NO];
}

- (void)copyFieldsWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)castMe OBJC_METHOD_FAMILY_NONE {
}

- (TuxkidsTuxblocksCoreSolveBlocksSprite *)copy__WithBOOL:(BOOL)init_ OBJC_METHOD_FAMILY_NONE {
  TuxkidsTuxblocksCoreSolveBlocksSprite *copy_ = [self copyChild];
  [self copyFieldsWithTuxkidsTuxblocksCoreSolveBlocksSprite:copy_];
  if (init_) {
    [((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(copy_)) addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:blockListener_];
    if ([self hasSprite]) [((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(copy_)) initSprite];
  }
  return copy_;
}

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksSprite *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksSprite *) copy;
  typedCopy.hasSprite_ = hasSprite__;
  typedCopy.previewAdd_ = previewAdd__;
  typedCopy.destoryed = destoryed_;
  typedCopy.blockListener = blockListener_;
}

@end

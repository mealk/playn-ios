//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.java
//
//  Created by Thomas on 7/26/13.
//

#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/util/Clock.h"
#include "pythagoras/f/Rectangle.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/NumberBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/SimplifyLayer.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"
#include "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksModifierGroup

@synthesize layer_ = layer__;
@synthesize rect = rect_;
@synthesize parentRect = parentRect_;
@synthesize multiExpression = multiExpression_;
@synthesize simplifyLayer = simplifyLayer_;
@synthesize toRemove = toRemove_;
@synthesize children = children_;
@synthesize destroying = destroying_;
@synthesize modifiers = modifiers_;

+ (int)MODIFIERS_DEPTH {
  return TuxkidsTuxblocksCoreSolveBlocksModifierGroup_MODIFIERS_DEPTH;
}

+ (int)CHILD_START_DEPTH {
  return TuxkidsTuxblocksCoreSolveBlocksModifierGroup_CHILD_START_DEPTH;
}

- (void)updateChildrenWithFloat:(float)base
                      withFloat:(float)dt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateRect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *)createModifiers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)canAddWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TuxkidsTuxblocksCoreSolveMarkupRenderer *)createRendererWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addNegative {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<PlaynCoreLayer>)layer {
  return layer__;
}

- (float)x {
  return ((PythagorasFRectangle *) nil_chk(rect_)).x_;
}

- (float)y {
  return [((PythagorasFRectangle *) nil_chk(rect_)) y];
}

- (float)width {
  return ((PythagorasFRectangle *) nil_chk(rect_)).width_;
}

- (float)height {
  return ((PythagorasFRectangle *) nil_chk(rect_)).height_;
}

- (float)totalWidth {
  if (modifiers_ == nil) {
    return [self width];
  }
  return [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) totalWidth];
}

- (float)offsetX {
  if (modifiers_ == nil) {
    return ((PythagorasFRectangle *) nil_chk(rect_)).x_;
  }
  return [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) offsetX];
}

- (void)initSpriteImpl OBJC_METHOD_FAMILY_NONE {
  [super initSpriteImpl];
  layer__ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createGroupLayer];
  int index = 0;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) initSprite];
      [self addChildSpriteWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:child withInt:index++];
    }
  }
  [self updateRect];
  [self updateChildrenWithFloat:0 withFloat:1];
  if (modifiers_ != nil) {
    [modifiers_ updateParentRectWithTuxkidsTuxblocksCoreSolveBlocksSprite:self];
    [modifiers_ initSprite];
    [self addModifiersSprite];
  }
  simplifyLayer_ = [[TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer alloc] initWithTuxkidsTuxblocksCoreSolveBlocksSimplifyLayer_Simplifiable:self];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) layerAddable]];
  [((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksSprite_SIMPLIFY_DEPTH];
}

- (void)destroy {
  if ([self hasSprite]) [((id<PlaynCoreLayer>) nil_chk([self layer])) destroy];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) destroy];
    }
  }
  if (modifiers_ != nil) [modifiers_ destroy];
}

- (void)addNewModifiers {
  if (modifiers_ != nil) return;
  [self setModifiersWithTuxkidsTuxblocksCoreSolveBlocksModifierGroup:[self createModifiers]];
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *)removeModifiers {
  TuxkidsTuxblocksCoreSolveBlocksModifierGroup *mods = modifiers_;
  if (modifiers_ != nil && [self hasSprite]) [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) removeWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) layer]];
  modifiers_ = nil;
  return mods;
}

- (void)setModifiersWithTuxkidsTuxblocksCoreSolveBlocksModifierGroup:(TuxkidsTuxblocksCoreSolveBlocksModifierGroup *)mods {
  (void) [self removeModifiers];
  modifiers_ = mods;
  if (mods != nil && [self hasSprite]) {
    [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(mods)) initSprite];
    [self addModifiersSprite];
  }
}

- (void)addModifiersSprite {
  if (modifiers_ != nil) {
    [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:[modifiers_ layer]];
    (void) [((id<PlaynCoreLayer>) nil_chk([modifiers_ layer])) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksModifierGroup_MODIFIERS_DEPTH];
    [modifiers_ addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:blockListener_];
  }
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite {
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(children_)) size]; i++) {
    if ([((id<JavaUtilList>) nil_chk(children_)) getWithInt:i] == sprite) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilList>) nil_chk(children_)) removeWithInt:i];
      ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)).group_ = nil;
      return child;
    }
  }
  return nil;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite
                                                                                                     withBOOL:(BOOL)destroy {
  TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [self removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite];
  if (destroy) {
    [((id<JavaUtilList>) nil_chk(destroying_)) addWithId:child];
  }
  return child;
}

- (void)addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)child {
  [((id<JavaUtilList>) nil_chk(children_)) addWithId:child];
  ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)).group_ = self;
  if ([self hasSprite]) [self addChildSpriteWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:child withInt:[((id<JavaUtilList>) nil_chk(children_)) size] - 1];
  [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:blockListener_];
}

- (void)addChildSpriteWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)child
                                                               withInt:(int)index {
  float depth = TuxkidsTuxblocksCoreSolveBlocksModifierGroup_CHILD_START_DEPTH - index;
  [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) initSprite];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) layer]];
  (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) layer])) setVisibleWithBOOL:YES];
  (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) layer])) setDepthWithFloat:depth];
}

- (BOOL)isModifiedHorizontally {
  if (modifiers_ == nil) return NO;
  if ([((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).children)) size] > 0 && [modifiers_ isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup class]]) return YES;
  return [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) isModifiedHorizontally];
}

- (BOOL)isModifiedVertically {
  if (modifiers_ == nil) return NO;
  if ([((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).children)) size] > 0 && [modifiers_ isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup class]]) return YES;
  return [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) isModifiedVertically];
}

- (void)addVerticalModifiersToWithJavaUtilList:(id<JavaUtilList>)mods {
  if (modifiers_ == nil) return;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).children)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([mod isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock class]]) {
        [((id<JavaUtilList>) nil_chk(mods)) addWithId:(TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *) mod];
      }
      else {
        break;
      }
    }
  }
  [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) addVerticalModifiersToWithJavaUtilList:mods];
}

- (BOOL)containsWithFloat:(float)x
                withFloat:(float)y {
  if ([super containsWithFloat:x withFloat:y]) return YES;
  if (modifiers_ != nil) return [modifiers_ containsWithFloat:x withFloat:y];
  return NO;
}

- (void)updateParentRectWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)parent {
  [self updateParentRectWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(parent)) x] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(parent)) y] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(parent)) width] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(parent)) height]];
}

- (void)updateParentRectWithFloat:(float)x
                        withFloat:(float)y
                        withFloat:(float)width
                        withFloat:(float)height {
  [((PythagorasFRectangle *) nil_chk(parentRect_)) setBoundsWithFloat:x withFloat:y withFloat:width withFloat:height];
}

- (void)snapChildren {
  [self updateRect];
  [self updateChildrenWithFloat:0 withFloat:1];
  if (modifiers_ != nil) {
    [modifiers_ updateParentRectWithTuxkidsTuxblocksCoreSolveBlocksSprite:self];
    [modifiers_ snapChildren];
  }
}

- (void)addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>)listener {
  self.blockListener = listener;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener];
    }
  }
  if (modifiers_ != nil) {
    [modifiers_ addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener];
  }
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *)updateParentModifiers {
  if ([((id<JavaUtilList>) nil_chk(children_)) size] == 0 && [((id<JavaUtilList>) nil_chk(destroying_)) size] == 0) {
    if (modifiers_ == nil) {
      return nil;
    }
    else if ([((id<JavaUtilList>) nil_chk(modifiers_.children)) size] == 0) {
      if (modifiers_.modifiers == nil) {
        return nil;
      }
      [self releaseLayers];
      [modifiers_ releaseLayers];
      return modifiers_.modifiers;
    }
  }
  return self;
}

- (void)updateModifiers {
  if (modifiers_ != nil && [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).children)) size] == 0 && ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers != nil) {
    [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) removeWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) layer]];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)).children)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((id<JavaUtilList>) nil_chk(toRemove_)) addWithId:child];
      }
    }
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(toRemove_)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        (void) [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)) removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:child];
        [self addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:child];
      }
    }
    [((id<JavaUtilList>) nil_chk(toRemove_)) clear];
    modifiers_ = ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)).modifiers;
    if (modifiers_ != nil) {
      [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:[modifiers_ layer]];
    }
  }
}

- (void)releaseLayers {
  [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) removeWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) layer]];
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite
                                                                                                     withBOOL:(BOOL)snap {
  if (modifiers_ == nil && [self canAddWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite]) {
    [self addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite];
    if (snap) {
      [self updateRect];
      if ([self hasSprite]) [self updateChildrenWithFloat:0 withFloat:1];
    }
  }
  else {
    if (modifiers_ == nil) [self addNewModifiers];
    if (snap) {
      [self updateRect];
    }
    [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) updateParentRectWithTuxkidsTuxblocksCoreSolveBlocksSprite:self];
    (void) [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withBOOL:snap];
  }
  return sprite;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)addExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *)sprite
                                                                                                     withBOOL:(BOOL)snap {
  if (modifiers_ != nil) {
    return [modifiers_ addExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:sprite withBOOL:snap];
  }
  return nil;
}

- (BOOL)canAddExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *)sprite {
  if (modifiers_ != nil) {
    return [modifiers_ canAddExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:sprite];
  }
  return NO;
}

- (void)updateWithInt:(int)delta {
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(children_)) size]; i++) {
    TuxkidsTuxblocksCoreSolveBlocksModifierBlock *sprite = [((id<JavaUtilList>) nil_chk(children_)) getWithInt:i];
    if ([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) group] != self) {
      (void) [self removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite];
      i--;
    }
    else {
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) updateWithInt:delta withBOOL:multiExpression_];
    }
  }
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(destroying_)) size]; i++) {
    TuxkidsTuxblocksCoreSolveBlocksModifierBlock *sprite = [((id<JavaUtilList>) nil_chk(destroying_)) getWithInt:i];
    if ([((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) layer])) alpha] == 0) {
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) destroy];
      (void) [((id<JavaUtilList>) nil_chk(destroying_)) removeWithInt:i--];
    }
  }
  if (modifiers_ != nil) {
    [modifiers_ updateWithInt:delta withBOOL:multiExpression_];
    TuxkidsTuxblocksCoreSolveBlocksModifierGroup *newMods = [modifiers_ updateParentModifiers];
    if (newMods != modifiers_) {
      if (newMods != nil) {
        [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:[newMods layer]];
      }
      [((id<PlaynCoreLayer>) nil_chk([modifiers_ layer])) destroy];
      modifiers_ = newMods;
    }
  }
  [self updateModifiers];
  if (simplifyLayer_ != nil) {
    [simplifyLayer_ update];
  }
}

- (void)updateWithInt:(int)delta
             withBOOL:(BOOL)multiExpression {
  self.multiExpression = multiExpression;
  [self updateWithInt:delta];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [self updateRect];
  [self updateChildrenWithFloat:[TuxkidsTuxblocksCoreSolveBlocksSprite lerpBase] withFloat:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) paintWithPlaynCoreUtilClock:clock];
    }
  }
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(destroying_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) layer])) setAlphaWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) layer])) alpha] withFloat:0 withFloat:0.995f withFloat:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt] withFloat:0.01f]];
    }
  }
  if (modifiers_ != nil) {
    [modifiers_ updateParentRectWithTuxkidsTuxblocksCoreSolveBlocksSprite:self];
    [modifiers_ paintWithPlaynCoreUtilClock:clock];
  }
}

- (void)performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_Action>)action {
  [super performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:action];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:action];
    }
  }
  ;
  if (modifiers_ != nil) [modifiers_ performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:action];
}

- (NSString *)hierarchyWithInt:(int)tab {
  NSString *out = @"";
  for (int i = 0; i < tab; i++) out = [NSString stringWithFormat:@"%@  ", out];
  out = [NSString stringWithFormat:@"%@%@", out, [NSString stringWithFormat:@"%@\n", [((id<JavaUtilList>) nil_chk(children_)) description]]];
  if (modifiers_ != nil) out = [NSString stringWithFormat:@"%@%@", out, [modifiers_ hierarchyWithInt:tab + 1]];
  return out;
}

- (void)addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)hashCode {
  [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode)) addFieldWithId:children_];
  [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode)) addFieldWithId:modifiers_];
}

- (void)copyFieldsWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)castMe OBJC_METHOD_FAMILY_NONE {
  TuxkidsTuxblocksCoreSolveBlocksModifierGroup *copy_ = (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) castMe;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(copy_)) addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) copy__]];
    }
  }
  if (modifiers_ != nil) [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(copy_)) setModifiersWithTuxkidsTuxblocksCoreSolveBlocksModifierGroup:(TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) [modifiers_ copy__]];
}

- (void)simplifyWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)param0
                withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateSimplify {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  if ((self = [super init])) {
    rect_ = [[PythagorasFRectangle alloc] init];
    parentRect_ = [[PythagorasFRectangle alloc] init];
    toRemove_ = [[JavaUtilArrayList alloc] init];
    children_ = [[JavaUtilArrayList alloc] init];
    destroying_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksModifierGroup *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.rect = rect_;
  typedCopy.parentRect = parentRect_;
  typedCopy.multiExpression = multiExpression_;
  typedCopy.simplifyLayer = simplifyLayer_;
  typedCopy.toRemove = toRemove_;
  typedCopy.children = children_;
  typedCopy.destroying = destroying_;
  typedCopy.modifiers = modifiers_;
}

@end

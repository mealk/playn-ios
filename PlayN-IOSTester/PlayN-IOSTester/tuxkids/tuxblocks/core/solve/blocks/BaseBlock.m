//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/BaseBlock.java
//
//  Created by Thomas on 7/26/13.
//

#include "java/util/List.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/util/Clock.h"
#include "tripleplay/util/Colors.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerLike.h"
#include "tuxkids/tuxblocks/core/solve/blocks/BaseBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/MinusBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/NumberBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/OverBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/PlusBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/TimesBlock.h"
#include "tuxkids/tuxblocks/core/solve/markup/BaseRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksBaseBlock

@synthesize modifiers = modifiers_;
@synthesize groupLayer = groupLayer_;
@synthesize canMoveBase = canMoveBase_;

- (id<PlaynCoreLayer>)layerAddable {
  return groupLayer_;
}

- (id<PlaynCoreLayer>)layer {
  return groupLayer_;
}

- (float)x {
  return [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) tx];
}

- (float)y {
  return [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) ty];
}

- (BOOL)simplified {
  return ![((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) isModifiedHorizontally] && ![((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) isModifiedVertically] && [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).children)) size] == 0;
}

- (int)color {
  return [TripleplayUtilColors WHITE];
}

- (float)totalWidth {
  return [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) totalWidth];
}

- (float)offsetX {
  return [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) offsetX];
}

- (id)init {
  if ((self = [super init])) {
    modifiers_ = [[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup alloc] init];
  }
  return self;
}

- (void)initSpriteImpl OBJC_METHOD_FAMILY_NONE {
  [super initSpriteImpl];
  layer__ = [self generateNinepatchWithNSString:[self text]];
  [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setSizeWithFloat:[TuxkidsTuxblocksCoreSolveBlocksSprite baseSize] withFloat:[TuxkidsTuxblocksCoreSolveBlocksSprite baseSize]];
  [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setInteractiveWithBOOL:YES];
  groupLayer_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) addWithPlaynCoreLayer:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) layerAddable]];
  (void) [((id<PlaynCoreLayer>) nil_chk([((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) layerAddable])) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksModifierGroup_CHILD_START_DEPTH];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) updateParentRectWithTuxkidsTuxblocksCoreSolveBlocksSprite:self];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) initSprite];
  [((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) layer]];
  (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) layer])) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksModifierGroup_MODIFIERS_DEPTH];
}

- (void)destroy {
  [super destroy];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) destroy];
}

- (void)addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>)listener {
  [super addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener];
}

- (float)defaultWidth {
  return [TuxkidsTuxblocksCoreSolveBlocksSprite baseSize];
}

- (float)defaultHeight {
  return [TuxkidsTuxblocksCoreSolveBlocksSprite baseSize];
}

- (BOOL)canReleaseWithBOOL:(BOOL)openSpace {
  return YES;
}

- (BOOL)shouldShowPreviewWithBOOL:(BOOL)openSpace {
  return canMoveBase_;
}

- (BOOL)containsWithFloat:(float)gx
                withFloat:(float)gy {
  float x = gx - [((id<PlaynCoreLayer>) nil_chk([self layer])) tx];
  float y = gy - [((id<PlaynCoreLayer>) nil_chk([self layer])) ty];
  return [super containsWithFloat:x withFloat:y] || [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) containsWithFloat:x withFloat:y];
}

- (void)clearPreview {
  (void) [((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) setAlphaWithFloat:1.0f];
}

- (void)setPreviewWithBOOL:(BOOL)preview {
  (void) [((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) setAlphaWithFloat:preview ? 1.0f : 0.5f];
}

- (void)updateWithInt:(int)delta
             withBOOL:(BOOL)multiExpression
             withBOOL:(BOOL)moveBase {
  self.canMoveBase = moveBase;
  [super updateWithInt:delta withBOOL:multiExpression];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) updateWithInt:delta withBOOL:multiExpression_];
  TuxkidsTuxblocksCoreSolveBlocksModifierGroup *newMods = [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) updateParentModifiers];
  if (newMods != modifiers_) {
    if (newMods != nil) {
      [((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) addWithPlaynCoreLayer:[newMods layer]];
      (void) [((id<PlaynCoreLayer>) nil_chk([newMods layer])) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksModifierGroup_MODIFIERS_DEPTH];
      [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) layer])) destroy];
      modifiers_ = (TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) newMods;
    }
  }
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  [self interpolateDefaultRectWithPlaynCoreUtilClock:clock];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) updateParentRectWithFloat:[self x] withFloat:[self y] withFloat:[self defaultWidth] withFloat:[self defaultHeight]];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) paintWithPlaynCoreUtilClock:clock];
}

- (void)snapChildren {
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) updateParentRectWithTuxkidsTuxblocksCoreSolveBlocksSprite:self];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) snapChildren];
}

- (NSString *)hierarchy {
  return [NSString stringWithFormat:@"%@\n%@", [self description], [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) hierarchyWithInt:1]];
}

- (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite {
  (void) [self addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withBOOL:NO];
  return self;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite
                                                                                                     withBOOL:(BOOL)snap {
  return [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withBOOL:snap];
}

- (BOOL)canAcceptWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)sprite {
  if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksModifierBlock class]]) {
    return YES;
  }
  else if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksNumberBlock class]]) {
    return [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) canAddExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) sprite];
  }
  return NO;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)addBlockWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)sprite
                                                                                          withBOOL:(BOOL)snap {
  if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksModifierBlock class]]) {
    return [self addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) sprite withBOOL:snap];
  }
  else if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksNumberBlock class]]) {
    return [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) sprite withBOOL:snap];
  }
  return nil;
}

- (BOOL)isEqual:(id)o {
  return self == o;
}

- (NSUInteger)hash {
  return [self nativeHashCode];
}

- (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)plusWithInt:(int)x {
  return [self addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[[TuxkidsTuxblocksCoreSolveBlocksPlusBlock alloc] initWithInt:x]];
}

- (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)minusWithInt:(int)x {
  return [self addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[[TuxkidsTuxblocksCoreSolveBlocksMinusBlock alloc] initWithInt:x]];
}

- (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)timesWithInt:(int)x {
  return [self addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[[TuxkidsTuxblocksCoreSolveBlocksTimesBlock alloc] initWithInt:x]];
}

- (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)overWithInt:(int)x {
  return [self addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[[TuxkidsTuxblocksCoreSolveBlocksOverBlock alloc] initWithInt:x]];
}

- (void)showInverse {
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addNegative];
}

- (TuxkidsTuxblocksCoreSolveMarkupRenderer *)createRenderer {
  return [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) createRendererWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[((TuxkidsTuxblocksCoreSolveMarkupBaseRenderer *) [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:[self text]]) setHighlightWithBOOL:[self previewAdd]]];
}

- (TuxkidsTuxblocksCoreSolveMarkupRenderer *)createRendererWithWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)myCopy
                                                                   withTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)spriteCopy {
  [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(myCopy)) performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:[[TuxkidsTuxblocksCoreSolveBlocksBaseBlock_$1 alloc] init]];
  (void) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(myCopy)) addBlockWithTuxkidsTuxblocksCoreSolveBlocksBlock:spriteCopy withBOOL:NO];
  [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(myCopy)) performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:[[TuxkidsTuxblocksCoreSolveBlocksBaseBlock_$2 alloc] init]];
  return [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(myCopy)) createRenderer];
}

- (TuxkidsTuxblocksCoreSolveMarkupRenderer *)createRendererWithWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)sprite
                                                                                               withBOOL:(BOOL)invertFirst {
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *copy_ = (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [self copy__];
  sprite = (TuxkidsTuxblocksCoreSolveBlocksBlock *) [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) copy__];
  if (invertFirst) {
    [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) showInverse];
    sprite = [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) inverse];
  }
  return [self createRendererWithWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:copy_ withTuxkidsTuxblocksCoreSolveBlocksBlock:sprite];
}

- (void)performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_Action>)action {
  [super performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:action];
  [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) performActionWithTuxkidsTuxblocksCoreSolveBlocksSprite_Action:action];
}

- (void)copyFieldsWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)castMe OBJC_METHOD_FAMILY_NONE {
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *copy_ = (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) castMe;
  ((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(copy_)).modifiers = (TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) copy__];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) copy;
  typedCopy.modifiers = modifiers_;
  typedCopy.groupLayer = groupLayer_;
  typedCopy.canMoveBase = canMoveBase_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksBaseBlock_$1

- (void)runWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)sprite {
  [((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(sprite)) setPreviewAddWithBOOL:YES];
}

- (id)init {
  return [super init];
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksBaseBlock_$2

- (void)runWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)sprite {
  [((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(sprite)) setPreviewAddWithBOOL:![((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(sprite)) previewAdd]];
}

- (id)init {
  return [super init];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierBlock.java
//
//  Created by Thomas on 7/26/13.
//

#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerLike.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/NumberBlockProxy.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierBlock.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock

- (void)setPlusValueWithInt:(int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)plusValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithInt:(int)value {
  return [super initWithInt:value];
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *)inverse {
  return [super initWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:inverse];
}

- (float)defaultWidth {
  return [TuxkidsTuxblocksCoreSolveBlocksSprite modSize];
}

- (float)defaultHeight {
  return [TuxkidsTuxblocksCoreSolveBlocksSprite baseSize];
}

- (BOOL)canReleaseWithBOOL:(BOOL)openSpace {
  if (group__ == nil) return NO;
  return YES;
}

- (TuxkidsTuxblocksCoreSolveBlocksBlock *)getDraggingSprite {
  if ([((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(group__)) isModifiedVertically]) {
    return [self getProxyWithBOOL:YES];
  }
  else {
    return self;
  }
}

- (TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy *)getProxyWithBOOL:(BOOL)snapToMySize {
  TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy *sprite = [[TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy alloc] initWithInt:[self plusValue] withTuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock:self];
  if ([self hasSprite]) {
    [((TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy *) nil_chk(sprite)) initSprite];
    if (snapToMySize) {
      [((TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy *) nil_chk(sprite)) interpolateRectWithFloat:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) tx] withFloat:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) ty] withFloat:[self width] withFloat:[self height] withFloat:0 withFloat:1];
      [((TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy *) nil_chk(sprite)) snapChildren];
    }
  }
  if (group__ != nil) {
    JavaUtilArrayList *modifiers = [[JavaUtilArrayList alloc] init];
    [group__ addVerticalModifiersToWithJavaUtilList:modifiers];
    {
      id<JavaUtilIterator> iter__ = [((JavaUtilArrayList *) nil_chk(modifiers)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        (void) [((TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy *) nil_chk(sprite)) addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) [((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *) nil_chk(mod)) copy__WithBOOL:YES] withBOOL:YES];
      }
    }
  }
  return sprite;
}

@end

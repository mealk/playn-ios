//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/BlockController.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Image.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/Pointer.h"
#include "playn/core/TextFormat.h"
#include "playn/core/util/Clock.h"
#include "tripleplay/util/Colors.h"
#include "tuxkids/tuxblocks/core/Constant.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/solve/blocks/BaseBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/BlockController.h"
#include "tuxkids/tuxblocks/core/solve/blocks/BlockHolder.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Equation.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/NumberBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/NumberBlockProxy.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/TimesBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VariableBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/markup/BaseRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/markup/JoinRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"
#include "tuxkids/tuxblocks/core/utils/CanvasUtils.h"
#include "tuxkids/tuxblocks/core/utils/MultiList.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksBlockController

@synthesize parent = parent_;
@synthesize width = width_;
@synthesize height = height_;
@synthesize layer_ = layer__;
@synthesize leftSide = leftSide_;
@synthesize rightSide = rightSide_;
@synthesize baseBlocks = baseBlocks_;
@synthesize draggingFrom = draggingFrom_;
@synthesize tempDraggingFrom = tempDraggingFrom_;
@synthesize draggingFromSide = draggingFromSide_;
@synthesize dragging = dragging_;
@synthesize tempDragging = tempDragging_;
@synthesize listener = listener_;
@synthesize blockAnchorPX = blockAnchorPX_;
@synthesize blockAnchorPY = blockAnchorPY_;
@synthesize lastTouchX = lastTouchX_;
@synthesize lastTouchY = lastTouchY_;
@synthesize inverted = inverted_;
@synthesize equalsX = equalsX_;
@synthesize equals = equals_;
@synthesize solved_ = solved__;
@synthesize equationImage_ = equationImage__;
@synthesize hoverSprite = hoverSprite_;
@synthesize refreshEquation = refreshEquation_;

+ (float)EQ_BUFFER {
  return TuxkidsTuxblocksCoreSolveBlocksBlockController_EQ_BUFFER;
}

+ (float)EQ_THRESH {
  return TuxkidsTuxblocksCoreSolveBlocksBlockController_EQ_THRESH;
}

- (id<PlaynCoreLayer>)layer {
  return layer__;
}

- (id<PlaynCoreImage>)equationImage {
  return equationImage__;
}

- (float)offX {
  return [TuxkidsTuxblocksCorePlayNObject getGlobalTxWithPlaynCoreLayer:layer__];
}

- (float)offY {
  return [TuxkidsTuxblocksCorePlayNObject getGlobalTyWithPlaynCoreLayer:layer__];
}

- (TuxkidsTuxblocksCoreSolveBlocksEquation *)equation {
  JavaUtilArrayList *lhs = [[JavaUtilArrayList alloc] init], *rhs = [[JavaUtilArrayList alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(leftSide_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((JavaUtilArrayList *) nil_chk(lhs)) addWithId:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) copy__]];
    }
  }
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(rightSide_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((JavaUtilArrayList *) nil_chk(rhs)) addWithId:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) copy__]];
    }
  }
  return [[TuxkidsTuxblocksCoreSolveBlocksEquation alloc] initWithJavaUtilList:lhs withJavaUtilList:rhs];
}

- (BOOL)solved {
  return solved__;
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksBlockController_Parent:(id<TuxkidsTuxblocksCoreSolveBlocksBlockController_Parent>)parent
                                                          withFloat:(float)width
                                                          withFloat:(float)height {
  if ((self = [super init])) {
    leftSide_ = [[JavaUtilArrayList alloc] init];
    rightSide_ = [[JavaUtilArrayList alloc] init];
    baseBlocks_ = [[TuxkidsTuxblocksCoreUtilsMultiList alloc] initWithJavaUtilListArray:[IOSObjectArray arrayWithObjects:(id[]){ leftSide_, rightSide_ } count:2 type:[IOSClass classWithProtocol:@protocol(JavaUtilList)]]];
    listener_ = [[TuxkidsTuxblocksCoreSolveBlocksBlockController_Listener alloc] initWithTuxkidsTuxblocksCoreSolveBlocksBlockController:self];
    self.parent = parent;
    self.width = width;
    self.height = height;
    layer__ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createGroupLayer];
    equals_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createImageLayerWithPlaynCoreImage:[TuxkidsTuxblocksCoreUtilsCanvasUtils createTextWithNSString:@"=" withPlaynCoreTextFormat:[((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:20]] withInt:[TripleplayUtilColors WHITE]]];
    [TuxkidsTuxblocksCorePlayNObject centerImageLayerWithPlaynCoreImageLayer:equals_];
    [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:equals_];
  }
  return self;
}

- (void)clear {
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(baseBlocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) destroy];
    }
  }
  [((id<JavaUtilList>) nil_chk(leftSide_)) clear];
  [((id<JavaUtilList>) nil_chk(rightSide_)) clear];
  solved__ = NO;
  dragging_ = draggingFrom_ = nil;
}

- (void)addEquationWithTuxkidsTuxblocksCoreSolveBlocksEquation:(TuxkidsTuxblocksCoreSolveBlocksEquation *)equation {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksEquation *) nil_chk(equation)) leftSide])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [self addExpressionWithTuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum:[TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum Left] withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:sprite];
    }
  }
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksEquation *) nil_chk(equation)) rightSide])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [self addExpressionWithTuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum:[TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum Right] withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:sprite];
    }
  }
  [self updateExpressionPositionsWithFloat:0 withFloat:1];
}

- (void)addExpressionWithTuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum:(TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *)side
                                    withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)expression {
  id<JavaUtilList> blocks = [self getBlocksWithTuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum:side];
  [self addExpressionWithJavaUtilList:blocks withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:expression withFloat:0 withFloat:0 withInt:[((id<JavaUtilList>) nil_chk(blocks)) size]];
  equalsX_ = ([((id<JavaUtilList>) nil_chk(leftSide_)) size] + 0.5f) / ([((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(baseBlocks_)) size] + 1) * width_;
  (void) [((id<PlaynCoreImageLayer>) nil_chk(equals_)) setTranslationWithFloat:equalsX_ withFloat:height_ / 2];
  [self refreshEquationImage];
}

- (void)addExpressionWithJavaUtilList:(id<JavaUtilList>)side
withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)expression
                            withFloat:(float)x
                            withFloat:(float)y
                              withInt:(int)index {
  [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(expression)) initSprite];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addAtWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(expression)) layerAddable] withFloat:x withFloat:y];
  (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(expression)) layer])) setDepthWithFloat:0];
  [((id<JavaUtilList>) nil_chk(side)) addWithInt:index withId:expression];
  [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(expression)) addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener_];
}

- (void)swapExpressionWithJavaUtilList:(id<JavaUtilList>)side
withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)original
withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)newExp {
  int index = [((id<JavaUtilList>) nil_chk(side)) indexOfWithId:original];
  (void) [((id<JavaUtilList>) nil_chk(side)) removeWithInt:index];
  [self addExpressionWithJavaUtilList:side withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:newExp withFloat:[((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(original)) layer])) tx] withFloat:[((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(original)) layer])) ty] withInt:index];
}

- (BOOL)refreshSolved {
  if (dragging_ != nil) return NO;
  int numbers = 0, variables = 0;
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(baseBlocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if (![((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) simplified]) return NO;
      if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksNumberBlock class]]) {
        numbers++;
      }
      if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksVariableBlock class]]) {
        variables++;
      }
    }
  }
  return numbers == 1 && variables == 1;
}

- (void)refreshEquationImage {
  TuxkidsTuxblocksCoreSolveMarkupRenderer *lhs = [self getRendererWithJavaUtilList:leftSide_];
  TuxkidsTuxblocksCoreSolveMarkupRenderer *rhs = [self getRendererWithJavaUtilList:rightSide_];
  TuxkidsTuxblocksCoreSolveMarkupRenderer *equation = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withTuxkidsTuxblocksCoreSolveMarkupRenderer:rhs withNSString:@"="];
  PlaynCoreTextFormat *format = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:20]];
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *writer = [((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(equation)) getExpressionWriterWithPlaynCoreTextFormat:format];
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createImageWithFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(writer)) width] withFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(writer)) height]];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) setFillColorWithInt:[TripleplayUtilColors WHITE]];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) setStrokeColorWithInt:[TripleplayUtilColors WHITE]];
  [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(writer)) drawExpressionWithPlaynCoreCanvas:[((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas]];
  equationImage__ = image;
  refreshEquation_ = NO;
}

- (TuxkidsTuxblocksCoreSolveMarkupRenderer *)getRendererWithJavaUtilList:(id<JavaUtilList>)side {
  if (hoverSprite_ == nil) hoverSprite_ = draggingFrom_;
  TuxkidsTuxblocksCoreSolveMarkupRenderer *renderer = nil;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(side)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *base = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      TuxkidsTuxblocksCoreSolveMarkupRenderer *toAdd;
      if (dragging_ != nil && base == hoverSprite_) {
        toAdd = [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) createRendererWithWithTuxkidsTuxblocksCoreSolveBlocksBlock:dragging_ withBOOL:hoverSprite_ == draggingFrom_ && inverted_];
      }
      else {
        if ([base isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksBlockHolder class]]) continue;
        toAdd = [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) createRenderer];
      }
      if (renderer == nil) renderer = toAdd;
      else {
        renderer = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:renderer withTuxkidsTuxblocksCoreSolveMarkupRenderer:toAdd withNSString:@"+"];
      }
    }
  }
  if (renderer == nil) renderer = [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:@"0"];
  return renderer;
}

- (id<JavaUtilList>)getBlocksWithTuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum:(TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *)side {
  return side == [TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum Left] ? leftSide_ : rightSide_;
}

- (id<JavaUtilList>)getOppositeWithJavaUtilList:(id<JavaUtilList>)side {
  return side == rightSide_ ? leftSide_ : rightSide_;
}

- (id<JavaUtilList>)getContainingWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)block {
  return [((id<JavaUtilList>) nil_chk(leftSide_)) containsWithId:block] ? leftSide_ : rightSide_;
}

- (void)updateWithInt:(int)delta {
  int bb = 0;
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(baseBlocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *s = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if (!([s isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksBlockHolder class]])) bb++;
    }
  }
  [self updateSideWithInt:delta withJavaUtilList:leftSide_ withInt:bb];
  [self updateSideWithInt:delta withJavaUtilList:rightSide_ withInt:bb];
  if (dragging_ != nil) [dragging_ updateWithInt:delta];
  if (refreshEquation_) {
    [self refreshEquationImage];
    solved__ = [self refreshSolved];
  }
}

- (void)updateSideWithInt:(int)delta
         withJavaUtilList:(id<JavaUtilList>)side
                  withInt:(int)totalBlocks {
  BOOL multiExpression = totalBlocks > 2;
  if (!multiExpression) {
    int bb = 0;
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(side)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksBaseBlock *s = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        if (!([s isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksBlockHolder class]])) bb++;
      }
    }
    if (bb > 1) multiExpression = YES;
  }
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(side)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      BOOL moveBase = NO;
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(side)) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          TuxkidsTuxblocksCoreSolveBlocksBaseBlock *other = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
          if (other != sprite && [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(other)) canAcceptWithTuxkidsTuxblocksCoreSolveBlocksBlock:sprite]) {
            moveBase = YES;
          }
        }
      }
      if (!moveBase) {
        {
          id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([self getOppositeWithJavaUtilList:side])) iterator];
          while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
            TuxkidsTuxblocksCoreSolveBlocksBaseBlock *other = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
            if ([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(other)) canAcceptWithTuxkidsTuxblocksCoreSolveBlocksBlock:sprite]) {
              moveBase = YES;
            }
          }
        }
      }
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) updateWithInt:delta withBOOL:multiExpression withBOOL:moveBase];
    }
  }
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(baseBlocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) paintWithPlaynCoreUtilClock:clock];
    }
  }
  [self updateExpressionPositionsWithFloat:0.98f withFloat:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]];
  if (dragging_ != nil) [dragging_ paintWithPlaynCoreUtilClock:clock];
  [self updatePosition];
}

- (void)updateExpressionPositionsWithFloat:(float)base
                                 withFloat:(float)dt {
  int i = 1;
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(baseBlocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *sprite = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      float x = i++ * (width_ - TuxkidsTuxblocksCoreSolveBlocksBlockController_EQ_BUFFER) / ([((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(baseBlocks_)) size] + 1) - [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) totalWidth] / 2 - [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) offsetX];
      if (i > [((id<JavaUtilList>) nil_chk(leftSide_)) size] + 1) x += TuxkidsTuxblocksCoreSolveBlocksBlockController_EQ_BUFFER;
      (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) layer])) setTxWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) layer])) tx] withFloat:x withFloat:base withFloat:dt withFloat:1.0f]];
      (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) layer])) setTyWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) layer])) ty] withFloat:(height_ - [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(sprite)) height]) / 2 withFloat:base withFloat:dt withFloat:1.0f]];
    }
  }
}

- (void)updatePosition {
  if (dragging_ != nil) {
    float x = lastTouchX_ - [dragging_ width] * blockAnchorPX_;
    float y = lastTouchY_ - [dragging_ height] * blockAnchorPY_;
    (void) [((id<PlaynCoreLayer>) nil_chk([dragging_ layer])) setTranslationWithFloat:x withFloat:y];
  }
}

- (BOOL)canDropOnWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)base
                                                    withFloat:(float)x
                                                    withFloat:(float)y {
  return [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) containsWithFloat:x withFloat:y] && [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) canAcceptWithTuxkidsTuxblocksCoreSolveBlocksBlock:dragging_];
}

- (void)invertDraggingWithBOOL:(BOOL)refresh {
  TuxkidsTuxblocksCoreSolveBlocksBlock *block = [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(dragging_)) inverse];
  [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(dragging_)) showInverse];
  if (refresh) {
    [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) removeWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(dragging_)) layer]];
    [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(block)) layer]];
    (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(block)) layer])) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksBlockController_DRAGGING_DEPTH];
  }
  dragging_ = block;
}

- (float)getTouchXWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  return [((id<PlaynCorePointer_Event>) nil_chk(event)) x] - [self offX];
}

- (float)getTouchYWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  return [((id<PlaynCorePointer_Event>) nil_chk(event)) y] - [self offY];
}

- (float)spriteXWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)sprite {
  return [TuxkidsTuxblocksCorePlayNObject getGlobalTxWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(sprite)) layer]] - [self offX];
}

- (float)spriteYWithTuxkidsTuxblocksCoreSolveBlocksSprite:(TuxkidsTuxblocksCoreSolveBlocksSprite *)sprite {
  return [TuxkidsTuxblocksCorePlayNObject getGlobalTyWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksSprite *) nil_chk(sprite)) layer]] - [self offY];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksBlockController *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksBlockController *) copy;
  typedCopy.parent = parent_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.layer_ = layer__;
  typedCopy.leftSide = leftSide_;
  typedCopy.rightSide = rightSide_;
  typedCopy.baseBlocks = baseBlocks_;
  typedCopy.draggingFrom = draggingFrom_;
  typedCopy.tempDraggingFrom = tempDraggingFrom_;
  typedCopy.draggingFromSide = draggingFromSide_;
  typedCopy.dragging = dragging_;
  typedCopy.tempDragging = tempDragging_;
  typedCopy.listener = listener_;
  typedCopy.blockAnchorPX = blockAnchorPX_;
  typedCopy.blockAnchorPY = blockAnchorPY_;
  typedCopy.lastTouchX = lastTouchX_;
  typedCopy.lastTouchY = lastTouchY_;
  typedCopy.inverted = inverted_;
  typedCopy.equalsX = equalsX_;
  typedCopy.equals = equals_;
  typedCopy.solved_ = solved__;
  typedCopy.equationImage_ = equationImage__;
  typedCopy.hoverSprite = hoverSprite_;
  typedCopy.refreshEquation = refreshEquation_;
}

@end

static TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Left;
static TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Right;
IOSObjectArray *TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_values;

@implementation TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum

+ (TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *)Left {
  return TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Left;
}
+ (TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *)Right {
  return TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Right;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum class]) {
    TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Left = [[TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum alloc] initWithNSString:@"Left" withInt:0];
    TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Right = [[TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum alloc] initWithNSString:@"Right" withInt:1];
    TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Left, TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_Right, nil } count:2 type:[IOSClass classWithClass:[TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_values];
}

+ (TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_values count]; i++) {
    TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum *e = [TuxkidsTuxblocksCoreSolveBlocksBlockController_SideEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksBlockController_Listener

@synthesize this$0 = this$0_;

- (void)wasGrabbedWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)sprite
                                withPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  float x = [this$0_ getTouchXWithPlaynCorePointer_Event:event], y = [this$0_ getTouchYWithPlaynCorePointer_Event:event];
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(this$0_.baseBlocks)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *base = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) containsWithFloat:x withFloat:y]) {
        this$0_.draggingFrom = base;
        break;
      }
    }
  }
  if (this$0_.draggingFrom == nil) {
    [TuxkidsTuxblocksCorePlayNObject debugWithNSString:@"BIG PROBLEM!"];
  }
  this$0_.draggingFromSide = [this$0_ getContainingWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:this$0_.draggingFrom];
  this$0_.blockAnchorPX = (x - [this$0_ spriteXWithTuxkidsTuxblocksCoreSolveBlocksSprite:sprite]) / [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) width];
  this$0_.blockAnchorPY = (y - [this$0_ spriteYWithTuxkidsTuxblocksCoreSolveBlocksSprite:sprite]) / [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) height];
  if (sprite == this$0_.draggingFrom) {
    TuxkidsTuxblocksCoreSolveBlocksBlockHolder *holder = [[TuxkidsTuxblocksCoreSolveBlocksBlockHolder alloc] init];
    [this$0_ swapExpressionWithJavaUtilList:this$0_.draggingFromSide withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:this$0_.draggingFrom withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:holder];
    this$0_.draggingFrom = holder;
  }
  this$0_.dragging = [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) getDraggingSprite];
  [((id<PlaynCoreGroupLayer>) nil_chk(this$0_.layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(this$0_.dragging)) layer]];
  (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(this$0_.dragging)) layer])) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksBlockController_DRAGGING_DEPTH];
  [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) remove];
  if (sprite != this$0_.dragging) {
    (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(sprite)) layer])) setVisibleWithBOOL:NO];
  }
  this$0_.lastTouchX = x;
  this$0_.lastTouchY = y;
  this$0_.inverted = NO;
  this$0_.refreshEquation = YES;
  [this$0_ updatePosition];
}

- (void)wasReleasedWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  float x = [this$0_ getTouchXWithPlaynCorePointer_Event:event], y = [this$0_ getTouchYWithPlaynCorePointer_Event:event];
  this$0_.lastTouchX = x - [((id<PlaynCoreGroupLayer>) nil_chk(this$0_.layer_)) tx];
  this$0_.lastTouchY = y - [((id<PlaynCoreGroupLayer>) nil_chk(this$0_.layer_)) ty];
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *target = nil;
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(this$0_.baseBlocks)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *base = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) clearPreview];
      if ([this$0_ canDropOnWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:base withFloat:x withFloat:y]) {
        target = base;
      }
    }
  }
  if (target == nil) {
    target = this$0_.draggingFrom;
    if (this$0_.inverted) {
      [this$0_ invertDraggingWithBOOL:YES];
    }
  }
  [self dropOnWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:target];
}

- (void)dropOnWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *)target {
  [TuxkidsTuxblocksCorePlayNObject debugWithNSString:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(target)) hierarchy]];
  if ([target isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksBlockHolder class]]) {
    if ([this$0_.dragging isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock class]]) {
      TuxkidsTuxblocksCoreSolveBlocksNumberBlockProxy *proxy = [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) this$0_.dragging) getProxyWithBOOL:NO];
      (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(this$0_.dragging)) layer])) setVisibleWithBOOL:NO];
      this$0_.dragging = proxy;
    }
    [this$0_ swapExpressionWithJavaUtilList:[this$0_ getContainingWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:target] withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:target withTuxkidsTuxblocksCoreSolveBlocksBaseBlock:(TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) this$0_.dragging];
    [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(target)) layer])) destroy];
  }
  else {
    TuxkidsTuxblocksCoreSolveBlocksModifierBlock *added = [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(target)) addBlockWithTuxkidsTuxblocksCoreSolveBlocksBlock:this$0_.dragging withBOOL:NO];
    if (added == nil) {
      this$0_.tempDragging = this$0_.dragging;
      this$0_.tempDraggingFrom = this$0_.draggingFrom;
    }
    else {
      (void) [((id<PlaynCoreLayer>) nil_chk([added layer])) setTranslationWithFloat:[((id<PlaynCoreLayer>) nil_chk([added layer])) tx] - [this$0_ spriteXWithTuxkidsTuxblocksCoreSolveBlocksSprite:target] withFloat:[((id<PlaynCoreLayer>) nil_chk([added layer])) ty] - [this$0_ spriteYWithTuxkidsTuxblocksCoreSolveBlocksSprite:target]];
    }
  }
  this$0_.dragging = nil;
  this$0_.draggingFrom = nil;
  this$0_.hoverSprite = nil;
  this$0_.refreshEquation = YES;
  [TuxkidsTuxblocksCorePlayNObject debugWithNSString:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(target)) hierarchy]];
}

- (void)wasMovedWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  float x = [this$0_ getTouchXWithPlaynCorePointer_Event:event], y = [this$0_ getTouchYWithPlaynCorePointer_Event:event];
  this$0_.lastTouchX = x;
  this$0_.lastTouchY = y;
  TuxkidsTuxblocksCoreSolveBlocksBaseBlock *lastHover = this$0_.hoverSprite;
  this$0_.hoverSprite = nil;
  {
    id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(this$0_.baseBlocks)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksBaseBlock *base = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([this$0_ canDropOnWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:base withFloat:x withFloat:y]) {
        [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) setPreviewWithBOOL:YES];
        this$0_.hoverSprite = base;
      }
      else {
        [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) setPreviewWithBOOL:NO];
      }
    }
  }
  if (this$0_.hoverSprite == nil) {
    this$0_.hoverSprite = this$0_.draggingFrom;
  }
  if (this$0_.hoverSprite != lastHover) {
    this$0_.refreshEquation = YES;
  }
  BOOL invert;
  BOOL checkLeftDistance = this$0_.draggingFromSide == this$0_.leftSide;
  if (this$0_.inverted) checkLeftDistance = !checkLeftDistance;
  if (checkLeftDistance) {
    invert = x > this$0_.equalsX + 5;
  }
  else {
    invert = x < this$0_.equalsX - 5;
  }
  if (invert) {
    this$0_.inverted = !this$0_.inverted;
    [this$0_ invertDraggingWithBOOL:YES];
  }
}

- (void)wasDoubleClickedWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)sprite
                                      withPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock class]]) {
    if (![((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) sprite) canAddInverse]) return;
    float y;
    if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]]) {
      if (((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *) sprite).value == -1) {
        y = -[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) height] / 2;
      }
      else {
        y = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) height] / 2;
      }
    }
    else {
      y = -[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) height] / 2;
    }
    {
      id<JavaUtilIterator> iter__ = [((TuxkidsTuxblocksCoreUtilsMultiList *) nil_chk(this$0_.baseBlocks)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksBaseBlock *base = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        if (!([base isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksBlockHolder class]])) {
          TuxkidsTuxblocksCoreSolveBlocksModifierBlock *inverse = (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *) sprite) inverse])) copy__WithBOOL:YES];
          [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse)) interpolateRectWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) offsetX] withFloat:y withFloat:[((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) totalWidth] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse)) height] withFloat:0 withFloat:1];
          (void) [((TuxkidsTuxblocksCoreSolveBlocksBaseBlock *) nil_chk(base)) addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:inverse withBOOL:NO];
        }
      }
    }
    this$0_.refreshEquation = YES;
  }
}

- (void)wasSimplified {
  this$0_.refreshEquation = YES;
}

- (void)wasReducedWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)problem
                                                      withInt:(int)answer
                                                      withInt:(int)startNumber
   withTuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener>)callback {
  [((id<TuxkidsTuxblocksCoreSolveBlocksBlockController_Parent>) nil_chk(this$0_.parent)) showNumberSelectScreenWithTuxkidsTuxblocksCoreSolveMarkupRenderer:problem withInt:answer withInt:startNumber withTuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener:callback];
}

- (void)wasCanceled {
  this$0_.dragging = this$0_.tempDragging;
  this$0_.draggingFrom = this$0_.tempDraggingFrom;
  this$0_.tempDragging = this$0_.tempDraggingFrom = nil;
  [self dropOnWithTuxkidsTuxblocksCoreSolveBlocksBaseBlock:this$0_.draggingFrom];
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksBlockController:(TuxkidsTuxblocksCoreSolveBlocksBlockController *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksBlockController_Listener *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksBlockController_Listener *) copy;
  typedCopy.this$0 = this$0_;
}

@end

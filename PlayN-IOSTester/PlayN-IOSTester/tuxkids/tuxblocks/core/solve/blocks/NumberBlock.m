//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/NumberBlock.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSIntArray.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "playn/core/Color.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "tripleplay/util/Colors.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerLike.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/MinusBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/NumberBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/OverBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/PlusBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/SimplifyLayer.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/TimesBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/layer/BlockLayer.h"
#include "tuxkids/tuxblocks/core/solve/markup/AddRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/BaseRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/BlankRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/JoinRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/OverRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/TimesRenderer.h"
#include "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksNumberBlock

@synthesize value = value_;
@synthesize simplifyLayer = simplifyLayer_;

- (TuxkidsTuxblocksCoreSolveBlocksNumberBlock *)inverse {
  return self;
}

- (id)initWithInt:(int)value {
  if ((self = [super init])) {
    self.value = value;
  }
  return self;
}

- (void)initSpriteImpl OBJC_METHOD_FAMILY_NONE {
  [super initSpriteImpl];
  simplifyLayer_ = [[TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer alloc] initWithTuxkidsTuxblocksCoreSolveBlocksSimplifyLayer_Simplifiable:self];
  [((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) layerAddable]];
  [((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) setDepthWithFloat:TuxkidsTuxblocksCoreSolveBlocksSprite_SIMPLIFY_DEPTH];
}

- (int)color {
  if (value_ == 0) {
    return [TripleplayUtilColors GRAY];
  }
  else if (value_ > 0) {
    return [PlaynCoreColor rgbWithInt:(int) 0xF7 withInt:(int) 0x04 withInt:(int) 0x04];
  }
  else {
    return [PlaynCoreColor rgbWithInt:(int) 0x11 withInt:(int) 0x4C withInt:(int) 0xA3];
  }
}

- (NSString *)text {
  return [NSString stringWithFormat:@"%d", value_];
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)proxyFor {
  TuxkidsTuxblocksCoreSolveBlocksModifierBlock *proxy;
  if (value_ >= 0) {
    proxy = [self alignProxyWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[[TuxkidsTuxblocksCoreSolveBlocksPlusBlock alloc] initWithInt:value_]];
  }
  else {
    proxy = [self alignProxyWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[[TuxkidsTuxblocksCoreSolveBlocksMinusBlock alloc] initWithInt:-value_]];
  }
  [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(proxy)) addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:blockListener_];
  return proxy;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)alignProxyWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)proxy {
  if ([self hasSprite]) {
    [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(proxy)) initSprite];
    [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(proxy)) interpolateRectWithFloat:[((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) tx] withFloat:[((id<PlaynCoreGroupLayer>) nil_chk(groupLayer_)) ty] withFloat:[self width] withFloat:[self height] withFloat:0 withFloat:1];
  }
  return proxy;
}

- (void)addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)hashCode {
  [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode)) addFieldWithInt:value_];
}

- (void)showInverse {
  if ((((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).modifiers == nil || ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).modifiers)).modifiers == nil) && [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).children)) size] == 0) {
    JavaUtilArrayList *vMods = [[JavaUtilArrayList alloc] init];
    [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addVerticalModifiersToWithJavaUtilList:vMods];
    TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *last = [((JavaUtilArrayList *) nil_chk(vMods)) size] > 0 ? [((JavaUtilArrayList *) nil_chk(vMods)) getWithInt:[((JavaUtilArrayList *) nil_chk(vMods)) size] - 1] : nil;
    if (last != nil && [last isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]] && ((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *) nil_chk(last)).value == -1) {
      [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addNegative];
    }
    else {
      value_ = -value_;
      if ([self hasSprite]) [((TuxkidsTuxblocksCoreSolveBlocksLayerBlockLayer *) layer__) setTextWithNSString:[NSString stringWithFormat:@"%d", value_]];
    }
  }
  else {
    [super showInverse];
  }
}

- (TuxkidsTuxblocksCoreSolveBlocksSprite *)copyChild OBJC_METHOD_FAMILY_NONE {
  return [[TuxkidsTuxblocksCoreSolveBlocksNumberBlock alloc] initWithInt:value_];
}

- (void)updateSimplify {
  if ([((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).children)) size] > 0) {
    (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).children)) getWithInt:0]])) setTranslationWithFloat:[self width] withFloat:[self height] / 2];
  }
  else if (((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).modifiers != nil) {
    TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *mods = (TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *) ((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).modifiers;
    if ([((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *) nil_chk(mods)).timesBlocks)) size] > 0) {
      (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *) nil_chk(mods)).timesBlocks)) getWithInt:0]])) setTranslationWithFloat:[self width] / 2 withFloat:0];
    }
    if ([((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *) nil_chk(mods)).divBlocks)) size] > 0) {
      if (value_ % ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk([((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *) nil_chk(mods)).divBlocks)) getWithInt:0])).value == 0) {
        (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *) nil_chk(mods)).divBlocks)) getWithInt:0]])) setTranslationWithFloat:[self width] / 2 withFloat:[self height]];
      }
    }
  }
}

- (void)simplifyWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite
                withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)pair {
  if (blockListener_ != nil) {
    int answer;
    TuxkidsTuxblocksCoreSolveMarkupRenderer *renderer = [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:[NSString stringWithFormat:@"%d", value_]];
    IOSIntArray *operands = [IOSIntArray arrayWithInts:(int[]){ ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)).value } count:1];
    if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]]) {
      TuxkidsTuxblocksCoreSolveBlocksTimesBlock *times = (TuxkidsTuxblocksCoreSolveBlocksTimesBlock *) sprite;
      answer = value_ * ((TuxkidsTuxblocksCoreSolveBlocksTimesBlock *) nil_chk(times)).value;
      renderer = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:renderer withIntArray:operands];
    }
    else if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksOverBlock class]]) {
      TuxkidsTuxblocksCoreSolveBlocksOverBlock *over = (TuxkidsTuxblocksCoreSolveBlocksOverBlock *) sprite;
      answer = value_ / ((TuxkidsTuxblocksCoreSolveBlocksOverBlock *) nil_chk(over)).value;
      renderer = [[TuxkidsTuxblocksCoreSolveMarkupOverRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:renderer withIntArray:operands];
    }
    else if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock class]]) {
      TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *plus = (TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) sprite;
      answer = value_ + [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(plus)) plusValue];
      (*[((IOSIntArray *) nil_chk(operands)) intRefAtIndex:0]) = [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(plus)) plusValue];
      renderer = [[TuxkidsTuxblocksCoreSolveMarkupAddRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:renderer withIntArray:operands];
    }
    else {
      return;
    }
    renderer = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:renderer withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBlankRenderer alloc] init] withNSString:@"="];
    [blockListener_ wasReducedWithTuxkidsTuxblocksCoreSolveMarkupRenderer:renderer withInt:answer withInt:value_ withTuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener:[[TuxkidsTuxblocksCoreSolveBlocksNumberBlock_$1 alloc] initWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:self withInt:answer withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite]];
  }
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  [((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) update];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksNumberBlock *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) copy;
  typedCopy.value = value_;
  typedCopy.simplifyLayer = simplifyLayer_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksNumberBlock_$1

@synthesize this$0 = this$0_;
@synthesize val$answer = val$answer_;
@synthesize val$sprite = val$sprite_;

- (void)wasSimplifiedWithBOOL:(BOOL)success {
  if (success) {
    this$0_.value = val$answer_;
    [((TuxkidsTuxblocksCoreSolveBlocksLayerBlockLayer *) this$0_.layer_) setTextWithNSString:[this$0_ text]];
    (void) [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(val$sprite_)).group_)) removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:val$sprite_ withBOOL:YES];
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasSimplified];
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *)outer$
                                                 withInt:(int)capture$0
        withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)capture$1 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$answer_ = capture$0;
    val$sprite_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksNumberBlock_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksNumberBlock_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$answer = val$answer_;
  typedCopy.val$sprite = val$sprite_;
}

@end

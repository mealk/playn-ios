//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierGroup.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSBooleanArray.h"
#include "IOSIntArray.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "pythagoras/f/Rectangle.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/NumberBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/PlusBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/SimplifyLayer.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/markup/AddRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/BaseRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/BlankRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/JoinRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup

- (void)updateChildrenWithFloat:(float)base
                      withFloat:(float)dt {
  float x = [((PythagorasFRectangle *) nil_chk(parentRect_)) maxX];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(child)) interpolateRectWithFloat:x withFloat:((PythagorasFRectangle *) nil_chk(parentRect_)).y_ withFloat:[TuxkidsTuxblocksCoreSolveBlocksSprite modSize] withFloat:((PythagorasFRectangle *) nil_chk(parentRect_)).height_ withFloat:base withFloat:dt];
      x += [TuxkidsTuxblocksCoreSolveBlocksSprite modSize];
    }
  }
}

- (void)updateRect {
  ((PythagorasFRectangle *) nil_chk(rect_)).y_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).y_;
  ((PythagorasFRectangle *) nil_chk(rect_)).x_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).x_;
  ((PythagorasFRectangle *) nil_chk(rect_)).width_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).width_ + [((id<JavaUtilList>) nil_chk(children_)) size] * [TuxkidsTuxblocksCoreSolveBlocksSprite modSize];
  ((PythagorasFRectangle *) nil_chk(rect_)).height_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).height_;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *)createModifiers {
  return [[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup alloc] init];
}

- (BOOL)canAddWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite {
  return [sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock class]];
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)addExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *)sprite
                                                                                                     withBOOL:(BOOL)snap {
  id<JavaUtilList> sharedMods = [self getSharedModifiersForAddWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:sprite];
  if (sharedMods == nil) {
    return [super addExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:sprite withBOOL:snap];
  }
  id<JavaUtilList> outsideModifiers = nil;
  if (((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).modifiers != nil && ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).modifiers)).modifiers != nil) {
    outsideModifiers = ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).modifiers)).modifiers)).children;
  }
  TuxkidsTuxblocksCoreSolveBlocksModifierBlock *proxy;
  if (modifiers_ == nil || [((id<JavaUtilList>) nil_chk(sharedMods)) size] == [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).children)) size]) {
    [self addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:proxy = [((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)) proxyFor]];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).children)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [self addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:mod];
      }
    }
  }
  else {
    TuxkidsTuxblocksCoreSolveBlocksModifierBlock *superMod = [super addExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:sprite withBOOL:snap];
    if (superMod != nil) {
      return superMod;
    }
    TuxkidsTuxblocksCoreSolveBlocksModifierGroup *modMods = [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) removeModifiers];
    [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) addNewModifiers];
    [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)) addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:proxy = [((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)) proxyFor]];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).children)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)) addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:mod];
      }
    }
    [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)) addNewModifiers];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(sharedMods)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *sharedMod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *m = [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)) removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sharedMod];
        [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)).modifiers)) addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:m];
      }
    }
    [((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(modifiers_)).modifiers)).modifiers)) setModifiersWithTuxkidsTuxblocksCoreSolveBlocksModifierGroup:modMods];
  }
  if (outsideModifiers != nil) {
    {
      id<JavaUtilIterator> iter__ = [outsideModifiers iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        (void) [self addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:mod withBOOL:NO];
      }
    }
  }
  if (snap) [self snapChildren];
  if ([((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)) hasSprite]) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)) layer])) destroy];
  return proxy;
}

- (BOOL)canAddExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *)sprite {
  if ([self getSharedModifiersForAddWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:sprite] != nil) {
    return YES;
  }
  return [super canAddExpressionWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:sprite];
}

- (id<JavaUtilList>)getSharedModifiersForAddWithTuxkidsTuxblocksCoreSolveBlocksNumberBlock:(TuxkidsTuxblocksCoreSolveBlocksNumberBlock *)sprite {
  if (modifiers_ != nil || ((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).modifiers == nil) {
    if (((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).modifiers != nil && ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).modifiers)).modifiers != nil && ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)).modifiers)).modifiers)).modifiers != nil) {
      return nil;
    }
    id<JavaUtilList> myMods = [[JavaUtilArrayList alloc] init], myIndirectMods = [[JavaUtilArrayList alloc] init], spriteMods = [[JavaUtilArrayList alloc] init];
    [self addVerticalModifiersToWithJavaUtilList:myMods];
    if (modifiers_ != nil) [modifiers_ addVerticalModifiersToWithJavaUtilList:myIndirectMods];
    [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNumberBlock *) nil_chk(sprite)).modifiers)) addVerticalModifiersToWithJavaUtilList:spriteMods];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(myIndirectMods)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        int index = [((id<JavaUtilList>) nil_chk(myMods)) lastIndexOfWithId:mod];
        (void) [((id<JavaUtilList>) nil_chk(myMods)) removeWithInt:index];
        if (![((id<JavaUtilList>) nil_chk(spriteMods)) removeWithId:mod]) {
          return nil;
        }
      }
    }
    id<JavaUtilList> sharedMods = myIndirectMods;
    [((id<JavaUtilList>) nil_chk(sharedMods)) clear];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(spriteMods)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        int index = [((id<JavaUtilList>) nil_chk(myMods)) lastIndexOfWithId:mod];
        if (index < 0) {
          return nil;
        }
        else {
          [((id<JavaUtilList>) nil_chk(sharedMods)) addWithId:[((id<JavaUtilList>) nil_chk(myMods)) getWithInt:index]];
          (void) [((id<JavaUtilList>) nil_chk(myMods)) removeWithInt:index];
        }
      }
    }
    return sharedMods;
  }
  return nil;
}

- (void)updateSimplify {
  for (int i = 1; i < [((id<JavaUtilList>) nil_chk(children_)) size]; i++) {
    TuxkidsTuxblocksCoreSolveBlocksModifierBlock *sprite = [((id<JavaUtilList>) nil_chk(children_)) getWithInt:i];
    (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[((id<JavaUtilList>) nil_chk(children_)) getWithInt:i - 1]])) setTranslationWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) x] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) centerY]];
  }
}

- (void)simplifyWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite
                withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)pair {
  TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *hSprite = (TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) sprite;
  TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *before = (TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) pair;
  if ([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) inverse])) isEqual:before]) {
    (void) [self removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withBOOL:YES];
    (void) [self removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:before withBOOL:YES];
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(blockListener_)) wasSimplified];
  }
  else {
    TuxkidsTuxblocksCoreSolveMarkupRenderer *problem = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:[NSString stringWithFormat:@"%d", [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(before)) plusValue]]] withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:[NSString stringWithFormat:@"%d", ((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(hSprite)).value]] withNSString:[hSprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksPlusBlock class]] ? @"+" : @"-"] withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBlankRenderer alloc] init] withNSString:@"="];
    int answer = [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(before)) plusValue] + [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(hSprite)) plusValue];
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(blockListener_)) wasReducedWithTuxkidsTuxblocksCoreSolveMarkupRenderer:problem withInt:answer withInt:[((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(before)) plusValue] withTuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener:[[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup_$1 alloc] initWithTuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup:self withTuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock:before withInt:answer withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite]];
  }
}

- (void)addNegative {
  if (modifiers_ != nil) {
    [modifiers_ addNegative];
  }
  else {
    [self addNewModifiers];
    [modifiers_ addNegative];
  }
}

- (TuxkidsTuxblocksCoreSolveMarkupRenderer *)createRendererWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base {
  if ([((id<JavaUtilList>) nil_chk(children_)) size] != 0) {
    IOSIntArray *operands = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(children_)) size]];
    IOSBooleanArray *highlights = [IOSBooleanArray arrayWithLength:(int) [((IOSIntArray *) nil_chk(operands)) count]];
    for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(operands)) count]; i++) {
      (*[((IOSIntArray *) nil_chk(operands)) intRefAtIndex:i]) = [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) [((id<JavaUtilList>) nil_chk(children_)) getWithInt:i]) plusValue];
      (*[((IOSBooleanArray *) nil_chk(highlights)) booleanRefAtIndex:i]) = [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:i])) previewAdd];
    }
    base = [[TuxkidsTuxblocksCoreSolveMarkupAddRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withIntArray:operands withBooleanArray:highlights];
  }
  if (modifiers_ == nil) {
    return base;
  }
  else {
    return [modifiers_ createRendererWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base];
  }
}

- (TuxkidsTuxblocksCoreSolveBlocksSprite *)copyChild OBJC_METHOD_FAMILY_NONE {
  return [[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup alloc] init];
}

- (id)init {
  return [super init];
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup_$1

@synthesize this$0 = this$0_;
@synthesize val$before = val$before_;
@synthesize val$answer = val$answer_;
@synthesize val$sprite = val$sprite_;

- (void)wasSimplifiedWithBOOL:(BOOL)success {
  if (success) {
    [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *) nil_chk(val$before_)) setPlusValueWithInt:val$answer_];
    (void) [this$0_ removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:val$sprite_ withBOOL:YES];
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasSimplified];
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup:(TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *)outer$
          withTuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierBlock *)capture$0
                                                             withInt:(int)capture$1
                    withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)capture$2 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$before_ = capture$0;
    val$answer_ = capture$1;
    val$sprite_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$before = val$before_;
  typedCopy.val$answer = val$answer_;
  typedCopy.val$sprite = val$sprite_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/n/BlockGroup.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "tuxkids/tuxblocks/core/solve/blocks/n/BlockGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/n/HorizontalBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/n/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/n/VerticalBlock.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksNBlockGroup

@synthesize blocks = blocks_;
@synthesize modifiers = modifiers_;
@synthesize parent = parent_;

- (TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *)createModifiers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)canAddWithTuxkidsTuxblocksCoreSolveBlocksNModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksNModifierBlock *)block {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)modifiesNumber {
  return [((JavaUtilArrayList *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)).blocks)) size] == 0 && [((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)) modifiesNumber];
}

- (BOOL)isModifiedHorizontally {
  if (parent_ == nil) return NO;
  if ([((JavaUtilArrayList *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)).blocks)) size] > 0 && [[((JavaUtilArrayList *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)).blocks)) getWithInt:0] isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksNHorizontalBlock class]]) return YES;
  return [((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)) isModifiedHorizontally];
}

- (BOOL)isModifiedVertically {
  if (parent_ == nil) return NO;
  if ([((JavaUtilArrayList *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)).blocks)) size] > 0 && [[((JavaUtilArrayList *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)).blocks)) getWithInt:0] isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksNVerticalBlock class]]) return YES;
  return [((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)) isModifiedHorizontally];
}

- (void)addVerticalModifiersWithJavaUtilList:(id<JavaUtilList>)mods {
  if (parent_ == nil) return;
  {
    id<JavaUtilIterator> iter__ = [((JavaUtilArrayList *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)).blocks)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksNModifierBlock *b = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([b isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksNVerticalBlock class]]) {
        [((id<JavaUtilList>) nil_chk(mods)) addWithId:(TuxkidsTuxblocksCoreSolveBlocksNVerticalBlock *) b];
      }
      else {
        break;
      }
    }
  }
  [((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(parent_)) addVerticalModifiersWithJavaUtilList:mods];
}

- (void)addModifierWithTuxkidsTuxblocksCoreSolveBlocksNModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksNModifierBlock *)block {
  if ([self canAddWithTuxkidsTuxblocksCoreSolveBlocksNModifierBlock:block]) {
    if (modifiers_ == nil) {
      [((JavaUtilArrayList *) nil_chk(blocks_)) addWithId:(TuxkidsTuxblocksCoreSolveBlocksNModifierBlock *) block];
      ((TuxkidsTuxblocksCoreSolveBlocksNModifierBlock *) nil_chk(block)).group = self;
    }
    else {
      [modifiers_ addModifierWithTuxkidsTuxblocksCoreSolveBlocksNModifierBlock:block];
    }
  }
  else {
    if (modifiers_ == nil) {
      modifiers_ = [self createModifiers];
      modifiers_.parent = self;
    }
    [((TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) nil_chk(modifiers_)) addModifierWithTuxkidsTuxblocksCoreSolveBlocksNModifierBlock:block];
  }
}

- (BOOL)canReleaseWithBOOL:(BOOL)openBlock {
  return NO;
}

- (NSString *)toMathStringWithNSString:(NSString *)base {
  {
    id<JavaUtilIterator> iter__ = [((JavaUtilArrayList *) nil_chk(blocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksNModifierBlock *block = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      base = [((TuxkidsTuxblocksCoreSolveBlocksNModifierBlock *) nil_chk(block)) toMathStringWithNSString:base];
    }
  }
  if (modifiers_ != nil) base = [modifiers_ toMathStringWithNSString:base];
  return base;
}

- (id)init {
  if ((self = [super init])) {
    blocks_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksNBlockGroup *) copy;
  typedCopy.blocks = blocks_;
  typedCopy.modifiers = modifiers_;
  typedCopy.parent = parent_;
}

@end

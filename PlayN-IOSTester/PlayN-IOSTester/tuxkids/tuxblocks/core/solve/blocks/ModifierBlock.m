//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.java
//
//  Created by Thomas on 7/26/13.
//

#include "java/util/List.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/util/Clock.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerLike.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/layer/BlockLayer.h"
#include "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksModifierBlock

@synthesize group_ = group__;
@synthesize value = value_;
@synthesize inverse_ = inverse__;

- (NSString *)operator__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)inverseChild {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *)group {
  return group__;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)inverse {
  return inverse__;
}

- (id)initWithInt:(int)value {
  if ((self = [super init])) {
    self.value = value;
    inverse__ = [self inverseChild];
  }
  return self;
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)inverse {
  if ((self = [super init])) {
    self.value = ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse)).value;
    self.inverse_ = inverse;
    if (((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse)).blockListener != nil) {
      [self addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse)).blockListener];
    }
  }
  return self;
}

- (void)initSpriteImpl OBJC_METHOD_FAMILY_NONE {
  [super initSpriteImpl];
  layer__ = [self generateNinepatchWithNSString:[self text]];
  if (((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)).layer_ == nil) [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)) initSprite];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  if (group__ == nil) {
    [self interpolateDefaultRectWithPlaynCoreUtilClock:clock];
  }
}

- (void)addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>)listener {
  [super addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener];
  if (listener != nil && ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)).blockListener == nil) {
    [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)) addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener];
  }
}

- (void)showInverse {
  if (![self hasSprite]) return;
  [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setVisibleWithBOOL:NO];
  TuxkidsTuxblocksCoreSolveBlocksBlock *inverse = [self inverse];
  [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(inverse)).layer_)) setVisibleWithBOOL:YES];
  [((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(inverse)) interpolateRectWithFloat:[self x] withFloat:[self y] withFloat:[self width] withFloat:[self height] withFloat:0 withFloat:1];
  (void) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(inverse)) layer])) setTranslationWithFloat:[((id<PlaynCoreLayer>) nil_chk([self layer])) tx] withFloat:[((id<PlaynCoreLayer>) nil_chk([self layer])) ty]];
}

- (void)remove {
  if (group__ != nil) (void) [group__ removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:self];
  group__ = nil;
}

- (NSString *)text {
  return [NSString stringWithFormat:@"%@%d", [self operator__], value_];
}

- (BOOL)canSimplify {
  if (group__ == nil) return NO;
  return [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(group__)).children)) containsWithId:inverse__];
}

- (BOOL)canAddInverse {
  if (group__ == nil) return NO;
  return ![self canSimplify] && ((TuxkidsTuxblocksCoreSolveBlocksModifierGroup *) nil_chk(group__)).modifiers == nil;
}

- (void)addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)hashCode {
  [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode)) addFieldWithInt:value_];
}

- (void)destroyWithBOOL:(BOOL)destroyInverse {
  [super destroy];
  if (destroyInverse && inverse__ != nil && ![((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)) destroyed]) {
    [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)) destroy];
  }
}

- (void)destroy {
  [self destroyWithBOOL:YES];
}

- (void)setValueWithInt:(int)value {
  self.value = value;
  [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)) destroyWithBOOL:NO];
  inverse__ = [self inverseChild];
  if ([self hasSprite]) {
    if ([(id) layer__ isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksLayerBlockLayer class]]) {
      [((TuxkidsTuxblocksCoreSolveBlocksLayerBlockLayer *) layer__) setTextWithNSString:[self text]];
    }
    else {
      id<TuxkidsTuxblocksCoreLayersImageLayerLike> oldLayer = layer__;
      layer__ = [self generateNinepatchWithNSString:[self text]];
      [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setDepthWithFloat:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) depth]];
      [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setTranslationWithFloat:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) tx] withFloat:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) ty]];
      [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setSizeWithFloat:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) width] withFloat:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) height]];
      id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener> listener = blockListener_;
      blockListener_ = nil;
      [self addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:listener];
      if ([((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) parent] != nil) [((id<PlaynCoreGroupLayer>) nil_chk([((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) parent])) addWithPlaynCoreLayer:[((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) layerAddable]];
      [((id<PlaynCoreLayer>) nil_chk([((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(oldLayer)) layerAddable])) destroy];
    }
    [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(inverse__)) initSprite];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksModifierBlock *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) copy;
  typedCopy.group_ = group__;
  typedCopy.value = value_;
  typedCopy.inverse_ = inverse__;
}

@end

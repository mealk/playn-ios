//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/Block.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSFloatArray.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/HashMap.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/Image.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/Pointer.h"
#include "playn/core/TextFormat.h"
#include "playn/core/util/Clock.h"
#include "pythagoras/f/FloatMath.h"
#include "tuxkids/tuxblocks/core/Constant.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerLike.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerTintable.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/layer/BlockLayer.h"
#include "tuxkids/tuxblocks/core/utils/CanvasUtils.h"
#include "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksBlock

static PlaynCoreTextFormat * TuxkidsTuxblocksCoreSolveBlocksBlock_textFormat_;
static id<TuxkidsTuxblocksCoreLayersImageLayerLike_Factory> TuxkidsTuxblocksCoreSolveBlocksBlock_factory_;
static int TuxkidsTuxblocksCoreSolveBlocksBlock_offset_;

@synthesize layer_ = layer__;
@synthesize multiExpression = multiExpression_;
@synthesize dragging = dragging_;
@synthesize doubleClickTime = doubleClickTime_;
@synthesize colorMap = colorMap_;
@synthesize timeElapsed = timeElapsed_;
@synthesize canRelease_ = canRelease__;

+ (PlaynCoreTextFormat *)textFormat {
  return TuxkidsTuxblocksCoreSolveBlocksBlock_textFormat_;
}

+ (void)setTextFormat:(PlaynCoreTextFormat *)textFormat {
  TuxkidsTuxblocksCoreSolveBlocksBlock_textFormat_ = textFormat;
}

+ (id<TuxkidsTuxblocksCoreLayersImageLayerLike_Factory>)factory {
  return TuxkidsTuxblocksCoreSolveBlocksBlock_factory_;
}

+ (void)setFactory:(id<TuxkidsTuxblocksCoreLayersImageLayerLike_Factory>)factory {
  TuxkidsTuxblocksCoreSolveBlocksBlock_factory_ = factory;
}

+ (int)offset {
  return TuxkidsTuxblocksCoreSolveBlocksBlock_offset_;
}

+ (int *)offsetRef {
  return &TuxkidsTuxblocksCoreSolveBlocksBlock_offset_;
}

- (NSString *)text {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)defaultWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)defaultHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)canReleaseWithBOOL:(BOOL)multiExpression {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)color {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)showInverse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (TuxkidsTuxblocksCoreSolveBlocksBlock *)inverse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  if ((self = [super init])) {
    multiExpression_ = YES;
    colorMap_ = [[JavaUtilHashMap alloc] init];
    if (TuxkidsTuxblocksCoreSolveBlocksBlock_textFormat_ == nil) {
      id<PlaynCoreFont> font = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:20];
      TuxkidsTuxblocksCoreSolveBlocksBlock_textFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:font];
    }
    if (TuxkidsTuxblocksCoreSolveBlocksBlock_factory_ == nil) {
      TuxkidsTuxblocksCoreSolveBlocksBlock_factory_ = [[TuxkidsTuxblocksCoreSolveBlocksBlock_$1 alloc] init];
    }
  }
  return self;
}

- (void)initSprite OBJC_METHOD_FAMILY_NONE {
  if ([self hasSprite]) return;
  [super initSprite];
  if (blockListener_ != nil) {
    [self attachBlockListener];
  }
}

- (void)interpolateDefaultRectWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [self interpolateRectWithFloat:[((id<PlaynCoreLayer>) nil_chk([self layer])) tx] withFloat:[((id<PlaynCoreLayer>) nil_chk([self layer])) ty] withFloat:[self defaultWidth] withFloat:[self defaultHeight] withFloat:[TuxkidsTuxblocksCoreSolveBlocksSprite lerpBase] withFloat:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]];
}

- (void)interpolateRectWithFloat:(float)x
                       withFloat:(float)y
                       withFloat:(float)width
                       withFloat:(float)height
                       withFloat:(float)base
                       withFloat:(float)dt {
  float snap = 1.0f;
  (void) [((id<PlaynCoreLayer>) nil_chk([self layer])) setTxWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[((id<PlaynCoreLayer>) nil_chk([self layer])) tx] withFloat:x withFloat:base withFloat:dt withFloat:snap]];
  (void) [((id<PlaynCoreLayer>) nil_chk([self layer])) setTyWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[((id<PlaynCoreLayer>) nil_chk([self layer])) ty] withFloat:y withFloat:base withFloat:dt withFloat:snap]];
  [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setWidthWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[self width] withFloat:width withFloat:base withFloat:dt withFloat:snap]];
  [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setHeightWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:[self height] withFloat:height withFloat:base withFloat:dt withFloat:snap]];
}

- (id<PlaynCoreLayer>)layer {
  return [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) layerAddable];
}

- (float)width {
  return [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) width];
}

- (float)height {
  return [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) height];
}

- (id<TuxkidsTuxblocksCoreLayersImageLayerLike>)generateNinepatchWithNSString:(NSString *)text {
  return [[TuxkidsTuxblocksCoreSolveBlocksLayerBlockLayer alloc] initWithNSString:text withFloat:10 withFloat:10];
}

- (void)updateWithInt:(int)delta
             withBOOL:(BOOL)multiExpression {
  self.multiExpression = multiExpression;
  [self updateWithInt:delta];
}

- (void)updateWithInt:(int)delta {
  if (doubleClickTime_ > 0) {
    doubleClickTime_ = [JavaLangMath maxWithInt:0 withInt:doubleClickTime_ - delta];
  }
  if (canRelease__ != [self shouldShowPreviewWithBOOL:multiExpression_]) {
    canRelease__ = !canRelease__;
  }
}

- (BOOL)shouldShowPreviewWithBOOL:(BOOL)multiExpression {
  return [self canReleaseWithBOOL:multiExpression];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  timeElapsed_ = [PlaynCorePlayN tick];
  int color = [self color];
  if (canRelease__) {
    IOSFloatArray *hsv = [IOSFloatArray arrayWithLength:3];
    [TuxkidsTuxblocksCoreUtilsCanvasUtils rgbToHsvWithInt:color withFloatArray:hsv];
    color = [TuxkidsTuxblocksCoreUtilsCanvasUtils hsvToRgbWithFloat:[((IOSFloatArray *) nil_chk(hsv)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(hsv)) floatAtIndex:1] withFloat:0.7f];
    int flashColor = [TuxkidsTuxblocksCoreUtilsCanvasUtils hsvToRgbWithFloat:[((IOSFloatArray *) nil_chk(hsv)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(hsv)) floatAtIndex:1] withFloat:1.0f];
    [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setTintWithInt:flashColor withInt:color withFloat:[PythagorasFFloatMath powWithFloat:[PythagorasFFloatMath sinWithFloat:timeElapsed_ / 1250.0f * 2 * PythagorasFFloatMath_PI] / 2 + 0.5f withFloat:0.7f]];
  }
  else {
    [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) setTintWithInt:color];
  }
}

- (int)getColorWithInt:(int)degree {
  JavaLangInteger *color = [((JavaUtilHashMap *) nil_chk(colorMap_)) getWithId:[JavaLangInteger valueOfWithInt:degree]];
  degree += TuxkidsTuxblocksCoreSolveBlocksBlock_offset_;
  degree = degree % 360;
  if (degree <= 120) {
    degree /= 2;
  }
  else if (degree <= 180) {
    degree -= 60;
  }
  else if (degree < 240) {
    degree = (degree - 180) * 2 + 120;
  }
  if (color == nil) {
    color = [JavaLangInteger valueOfWithInt:[TuxkidsTuxblocksCoreUtilsCanvasUtils hsvToRgbWithFloat:(degree % 360) / 360.0f withFloat:0.9f withFloat:0.9f]];
    (void) [((JavaUtilHashMap *) nil_chk(colorMap_)) putWithId:[JavaLangInteger valueOfWithInt:degree] withId:color];
  }
  return [((JavaLangInteger *) nil_chk(color)) intValue];
}

- (void)addBlockListenerWithTuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener:(id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>)listener {
  if (listener == nil || blockListener_ != nil) return;
  blockListener_ = listener;
  if ([self hasSprite]) [self attachBlockListener];
}

- (void)attachBlockListener {
  [((id<TuxkidsTuxblocksCoreLayersImageLayerLike>) nil_chk(layer__)) addListenerWithPlaynCorePointer_Listener:[[TuxkidsTuxblocksCoreSolveBlocksBlock_$2 alloc] initWithTuxkidsTuxblocksCoreSolveBlocksBlock:self]];
}

- (TuxkidsTuxblocksCoreSolveBlocksBlock *)getDraggingSprite {
  return self;
}

- (void)remove {
}

- (NSString *)description {
  return [self text];
}

- (void)addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)initialize {
  if (self == [TuxkidsTuxblocksCoreSolveBlocksBlock class]) {
    TuxkidsTuxblocksCoreSolveBlocksBlock_offset_ = 0;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksBlock *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksBlock *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.multiExpression = multiExpression_;
  typedCopy.dragging = dragging_;
  typedCopy.doubleClickTime = doubleClickTime_;
  typedCopy.colorMap = colorMap_;
  typedCopy.timeElapsed = timeElapsed_;
  typedCopy.canRelease_ = canRelease__;
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksBlock_$1

- (id<TuxkidsTuxblocksCoreLayersImageLayerLike>)createWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  return [[TuxkidsTuxblocksCoreLayersImageLayerTintable alloc] initWithPlaynCoreImage:image];
}

- (id)init {
  return [super init];
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksBlock_$2

@synthesize this$0 = this$0_;

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if ([this$0_ canReleaseWithBOOL:this$0_.multiExpression]) {
    this$0_.dragging = YES;
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasGrabbedWithTuxkidsTuxblocksCoreSolveBlocksBlock:this$0_ withPlaynCorePointer_Event:event];
  }
  else if (this$0_.doubleClickTime == 0) {
    this$0_.doubleClickTime = TuxkidsTuxblocksCoreSolveBlocksBlock_DOUBLE_CLICK;
  }
  else {
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasDoubleClickedWithTuxkidsTuxblocksCoreSolveBlocksBlock:this$0_ withPlaynCorePointer_Event:event];
  }
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (this$0_.dragging) {
    this$0_.dragging = NO;
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasReleasedWithPlaynCorePointer_Event:event];
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (this$0_.dragging) {
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasMovedWithPlaynCorePointer_Event:event];
  }
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksBlock_$2 *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksBlock_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

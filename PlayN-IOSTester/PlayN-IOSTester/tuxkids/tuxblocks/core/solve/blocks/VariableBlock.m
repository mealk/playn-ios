//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/VariableBlock.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSIntArray.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "playn/core/Layer.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/TimesBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VariableBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/markup/BaseRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/BlankRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/JoinRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/TimesRenderer.h"
#include "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksVariableBlock

@synthesize symbol = symbol_;
@synthesize verticalMods = verticalMods_;

- (id)initWithNSString:(NSString *)symbol {
  if ((self = [super init])) {
    verticalMods_ = [[JavaUtilArrayList alloc] init];
    self.symbol = symbol;
  }
  return self;
}

- (NSString *)text {
  return symbol_;
}

- (void)addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)hashCode {
  [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode)) addFieldWithId:symbol_];
}

- (TuxkidsTuxblocksCoreSolveBlocksBlock *)inverse {
  return self;
}

- (TuxkidsTuxblocksCoreSolveBlocksSprite *)copyChild OBJC_METHOD_FAMILY_NONE {
  return [[TuxkidsTuxblocksCoreSolveBlocksVariableBlock alloc] initWithNSString:symbol_];
}

- (BOOL)canAcceptWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)sprite {
  if ([super canAcceptWithTuxkidsTuxblocksCoreSolveBlocksBlock:sprite]) {
    return YES;
  }
  if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksVariableBlock class]]) {
    TuxkidsTuxblocksCoreSolveBlocksVariableBlock *vBlock = (TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) sprite;
    if ([((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) nil_chk(vBlock)).modifiers)) isModifiedHorizontally] || [((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) nil_chk(vBlock)).modifiers)).children)) size] != 0) {
      return NO;
    }
    [((JavaUtilArrayList *) nil_chk(verticalMods_)) clear];
    [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addVerticalModifiersToWithJavaUtilList:verticalMods_];
    if ([((JavaUtilArrayList *) nil_chk(verticalMods_)) size] <= 1) {
      if ([((JavaUtilArrayList *) nil_chk(verticalMods_)) size] == 1) {
        if (!([[((JavaUtilArrayList *) nil_chk(verticalMods_)) getWithInt:0] isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]])) return NO;
        if ([((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)).children)) size] != 0) return NO;
      }
      [((JavaUtilArrayList *) nil_chk(verticalMods_)) clear];
      [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) nil_chk(vBlock)).modifiers)) addVerticalModifiersToWithJavaUtilList:verticalMods_];
      if ([((JavaUtilArrayList *) nil_chk(verticalMods_)) size] <= 1) {
        if ([((JavaUtilArrayList *) nil_chk(verticalMods_)) size] == 1 && !([[((JavaUtilArrayList *) nil_chk(verticalMods_)) getWithInt:0] isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]])) return NO;
        return YES;
      }
    }
  }
  return NO;
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)addBlockWithTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)sprite
                                                                                          withBOOL:(BOOL)snap {
  if ([sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksVariableBlock class]]) {
    TuxkidsTuxblocksCoreSolveBlocksVariableBlock *vBlock = (TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) sprite;
    TuxkidsTuxblocksCoreSolveBlocksTimesBlock *spriteFactor = nil;
    TuxkidsTuxblocksCoreSolveBlocksTimesBlock *myFactor;
    [((JavaUtilArrayList *) nil_chk(verticalMods_)) clear];
    [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(modifiers_)) addVerticalModifiersToWithJavaUtilList:verticalMods_];
    if ([((JavaUtilArrayList *) nil_chk(verticalMods_)) size] > 0) {
      myFactor = (TuxkidsTuxblocksCoreSolveBlocksTimesBlock *) [((JavaUtilArrayList *) nil_chk(verticalMods_)) getWithInt:0];
    }
    else {
      myFactor = nil;
    }
    [((JavaUtilArrayList *) nil_chk(verticalMods_)) clear];
    [((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) nil_chk(vBlock)).modifiers)) addVerticalModifiersToWithJavaUtilList:verticalMods_];
    if ([((JavaUtilArrayList *) nil_chk(verticalMods_)) size] > 0) spriteFactor = (TuxkidsTuxblocksCoreSolveBlocksTimesBlock *) [((JavaUtilArrayList *) nil_chk(verticalMods_)) getWithInt:0];
    int myValue = myFactor == nil ? 1 : ((TuxkidsTuxblocksCoreSolveBlocksTimesBlock *) nil_chk(myFactor)).value;
    int spriteValue = spriteFactor == nil ? 1 : ((TuxkidsTuxblocksCoreSolveBlocksTimesBlock *) nil_chk(spriteFactor)).value;
    TuxkidsTuxblocksCoreSolveMarkupRenderer *myRenderer = [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:[self text]];
    TuxkidsTuxblocksCoreSolveMarkupRenderer *spriteRenderer = [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:[((TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) nil_chk(vBlock)) text]];
    if (myFactor != nil) myRenderer = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:myRenderer withIntArray:[IOSIntArray arrayWithInts:(int[]){ myFactor.value } count:1]];
    if (spriteFactor != nil) spriteRenderer = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:spriteRenderer withIntArray:[IOSIntArray arrayWithInts:(int[]){ spriteFactor.value } count:1]];
    TuxkidsTuxblocksCoreSolveMarkupRenderer *lhs = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:myRenderer withTuxkidsTuxblocksCoreSolveMarkupRenderer:spriteRenderer withNSString:@"+"];
    TuxkidsTuxblocksCoreSolveMarkupRenderer *rhs = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:[self text]] withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBlankRenderer alloc] init]];
    TuxkidsTuxblocksCoreSolveMarkupRenderer *problem = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withTuxkidsTuxblocksCoreSolveMarkupRenderer:rhs withNSString:@"="];
    BOOL mustSolve = myFactor != nil && spriteFactor != nil;
    BOOL calcAnswer = !mustSolve || [self hasSprite];
    int answer = calcAnswer ? myValue + spriteValue : TuxkidsTuxblocksCoreSolveMarkupTimesRenderer_UNKNOWN_NUMBER;
    id<TuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener> r = [[TuxkidsTuxblocksCoreSolveBlocksVariableBlock_$1 alloc] initWithTuxkidsTuxblocksCoreSolveBlocksVariableBlock:self withTuxkidsTuxblocksCoreSolveBlocksTimesBlock:myFactor withInt:answer withTuxkidsTuxblocksCoreSolveBlocksBlock:sprite];
    if (mustSolve) {
      if (![self hasSprite]) {
        [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener>) nil_chk(r)) wasSimplifiedWithBOOL:YES];
      }
      else {
        [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(blockListener_)) wasReducedWithTuxkidsTuxblocksCoreSolveMarkupRenderer:problem withInt:answer withInt:myValue withTuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener:r];
      }
    }
    else {
      [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener>) nil_chk(r)) wasSimplifiedWithBOOL:YES];
    }
    return nil;
  }
  else {
    return [super addBlockWithTuxkidsTuxblocksCoreSolveBlocksBlock:sprite withBOOL:snap];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksVariableBlock *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksVariableBlock *) copy;
  typedCopy.symbol = symbol_;
  typedCopy.verticalMods = verticalMods_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksVariableBlock_$1

@synthesize this$0 = this$0_;
@synthesize val$myFactor = val$myFactor_;
@synthesize val$answer = val$answer_;
@synthesize val$sprite = val$sprite_;

- (void)wasSimplifiedWithBOOL:(BOOL)success {
  if (success) {
    if (val$myFactor_ != nil) {
      [val$myFactor_ setValueWithInt:val$answer_];
      [val$myFactor_ setPreviewAddWithBOOL:NO];
    }
    else {
      JavaUtilArrayList *modChildren = [[JavaUtilArrayList alloc] init];
      while (![((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(this$0_.modifiers)).children)) isEmpty]) {
        [((JavaUtilArrayList *) nil_chk(modChildren)) addWithId:[((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(this$0_.modifiers)) removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[((id<JavaUtilList>) nil_chk(((TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup *) nil_chk(this$0_.modifiers)).children)) getWithInt:0]]];
      }
      (void) [this$0_ addModifierWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[[TuxkidsTuxblocksCoreSolveBlocksTimesBlock alloc] initWithInt:val$answer_] withBOOL:YES];
      while (![((JavaUtilArrayList *) nil_chk(modChildren)) isEmpty]) {
        (void) [this$0_ addBlockWithTuxkidsTuxblocksCoreSolveBlocksBlock:[((JavaUtilArrayList *) nil_chk(modChildren)) removeWithInt:0] withBOOL:NO];
      }
    }
    if ([((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(val$sprite_)) hasSprite]) [((id<PlaynCoreLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksBlock *) nil_chk(val$sprite_)) layer])) destroy];
    if (this$0_.blockListener != nil) {
      [this$0_.blockListener wasSimplified];
    }
  }
  else {
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasCanceled];
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksVariableBlock:(TuxkidsTuxblocksCoreSolveBlocksVariableBlock *)outer$
             withTuxkidsTuxblocksCoreSolveBlocksTimesBlock:(TuxkidsTuxblocksCoreSolveBlocksTimesBlock *)capture$0
                                                   withInt:(int)capture$1
                  withTuxkidsTuxblocksCoreSolveBlocksBlock:(TuxkidsTuxblocksCoreSolveBlocksBlock *)capture$2 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$myFactor_ = capture$0;
    val$answer_ = capture$1;
    val$sprite_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksVariableBlock_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksVariableBlock_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$myFactor = val$myFactor_;
  typedCopy.val$answer = val$answer_;
  typedCopy.val$sprite = val$sprite_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/blocks/VerticalModifierGroup.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSBooleanArray.h"
#include "IOSIntArray.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "pythagoras/f/Rectangle.h"
#include "tuxkids/tuxblocks/core/solve/blocks/HorizontalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/ModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/blocks/SimplifyLayer.h"
#include "tuxkids/tuxblocks/core/solve/blocks/Sprite.h"
#include "tuxkids/tuxblocks/core/solve/blocks/TimesBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierBlock.h"
#include "tuxkids/tuxblocks/core/solve/blocks/VerticalModifierGroup.h"
#include "tuxkids/tuxblocks/core/solve/markup/BaseRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/BlankRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/JoinRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/OverRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/TimesRenderer.h"

@implementation TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup

@synthesize timesBlocks = timesBlocks_;
@synthesize divBlocks = divBlocks_;

- (id)init {
  if ((self = [super init])) {
    timesBlocks_ = [[JavaUtilArrayList alloc] init];
    divBlocks_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)updateChildrenWithFloat:(float)base
                      withFloat:(float)dt {
  float y = ((PythagorasFRectangle *) nil_chk(parentRect_)).y_ - [TuxkidsTuxblocksCoreSolveBlocksSprite modSize];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(timesBlocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *block = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(block)) interpolateRectWithFloat:((PythagorasFRectangle *) nil_chk(rect_)).x_ withFloat:y withFloat:((PythagorasFRectangle *) nil_chk(rect_)).width_ withFloat:[((PythagorasFRectangle *) nil_chk(parentRect_)) maxY] - y withFloat:base withFloat:dt];
      y -= [TuxkidsTuxblocksCoreSolveBlocksSprite modSize];
    }
  }
  y = [((PythagorasFRectangle *) nil_chk(parentRect_)) maxY];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(divBlocks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *block = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(block)) interpolateRectWithFloat:((PythagorasFRectangle *) nil_chk(rect_)).x_ withFloat:y withFloat:((PythagorasFRectangle *) nil_chk(rect_)).width_ withFloat:[TuxkidsTuxblocksCoreSolveBlocksSprite modSize] withFloat:base withFloat:dt];
      y += [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(block)) height];
    }
  }
}

- (void)updateRect {
  ((PythagorasFRectangle *) nil_chk(rect_)).y_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).y_ - [((id<JavaUtilList>) nil_chk(timesBlocks_)) size] * [TuxkidsTuxblocksCoreSolveBlocksSprite modSize];
  ((PythagorasFRectangle *) nil_chk(rect_)).x_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).x_;
  ((PythagorasFRectangle *) nil_chk(rect_)).width_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).width_;
  if ([((id<JavaUtilList>) nil_chk(timesBlocks_)) size] > 0) {
    ((PythagorasFRectangle *) nil_chk(rect_)).x_ -= [TuxkidsTuxblocksCoreSolveBlocksSprite wrapSize];
    ((PythagorasFRectangle *) nil_chk(rect_)).width_ += 2 * [TuxkidsTuxblocksCoreSolveBlocksSprite wrapSize];
  }
  ((PythagorasFRectangle *) nil_chk(rect_)).height_ = ((PythagorasFRectangle *) nil_chk(parentRect_)).height_ + [((id<JavaUtilList>) nil_chk(children_)) size] * [TuxkidsTuxblocksCoreSolveBlocksSprite modSize];
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)child {
  TuxkidsTuxblocksCoreSolveBlocksModifierBlock *mod = [super removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:child];
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(timesBlocks_)) size]; i++) {
    if ([((id<JavaUtilList>) nil_chk(timesBlocks_)) getWithInt:i] == mod) {
      (void) [((id<JavaUtilList>) nil_chk(timesBlocks_)) removeWithInt:i];
      break;
    }
  }
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(divBlocks_)) size]; i++) {
    if ([((id<JavaUtilList>) nil_chk(divBlocks_)) getWithInt:i] == mod) {
      (void) [((id<JavaUtilList>) nil_chk(divBlocks_)) removeWithInt:i];
      break;
    }
  }
  return mod;
}

- (void)addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)child {
  [super addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:child];
  if ([child isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]]) {
    [((id<JavaUtilList>) nil_chk(timesBlocks_)) addWithId:child];
  }
  else {
    [((id<JavaUtilList>) nil_chk(divBlocks_)) addWithId:child];
  }
}

- (TuxkidsTuxblocksCoreSolveBlocksModifierGroup *)createModifiers {
  return [[TuxkidsTuxblocksCoreSolveBlocksHorizontalModifierGroup alloc] init];
}

- (BOOL)canAddWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite {
  return [sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierBlock class]];
}

- (void)updateSimplify {
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(timesBlocks_)) size]; i++) {
    TuxkidsTuxblocksCoreSolveBlocksModifierBlock *sprite = [((id<JavaUtilList>) nil_chk(timesBlocks_)) getWithInt:i];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(divBlocks_)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *div = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        if ([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(div)) isEqual:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) inverse]]) {
          (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:div])) setTranslationWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) x] + [TuxkidsTuxblocksCoreSolveBlocksSprite wrapSize] withFloat:[((PythagorasFRectangle *) nil_chk(parentRect_)) maxY]];
          continue;
        }
        else if ([self areDivisibleWithInt:((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)).value withInt:((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(div)).value]) {
          (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:div withInt:-1])) setTranslationWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) x] + [TuxkidsTuxblocksCoreSolveBlocksSprite wrapSize] withFloat:[((PythagorasFRectangle *) nil_chk(parentRect_)) maxY]];
          continue;
        }
      }
    }
    if (i > 0) {
      (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[((id<JavaUtilList>) nil_chk(timesBlocks_)) getWithInt:i - 1]])) setTranslationWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) centerX] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) y] + [TuxkidsTuxblocksCoreSolveBlocksSprite modSize]];
      continue;
    }
  }
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(divBlocks_)) size]; i++) {
    TuxkidsTuxblocksCoreSolveBlocksModifierBlock *sprite = [((id<JavaUtilList>) nil_chk(divBlocks_)) getWithInt:i];
    if (i > 0) {
      (void) [((id<PlaynCoreImageLayer>) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksSimplifyLayer *) nil_chk(simplifyLayer_)) getSimplifyButtonWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:[((id<JavaUtilList>) nil_chk(divBlocks_)) getWithInt:i - 1]])) setTranslationWithFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) centerX] withFloat:[((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) y]];
      continue;
    }
  }
}

- (BOOL)areDivisibleWithInt:(int)a
                    withInt:(int)b {
  if (a != 0 && b % a == 0) return YES;
  if (b != 0 && a % b == 0) return YES;
  return NO;
}

- (void)simplifyWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)sprite
                withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)pair {
  if ([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk([((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(sprite)) inverse])) isEqual:pair]) {
    (void) [self removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withBOOL:YES];
    (void) [self removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:pair withBOOL:YES];
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(blockListener_)) wasSimplified];
  }
  else {
    BOOL spriteTimes = [sprite isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]];
    BOOL pairTimes = [pair isKindOfClass:[TuxkidsTuxblocksCoreSolveBlocksTimesBlock class]];
    if (spriteTimes == pairTimes) {
      [self reduceSameWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:pair withBOOL:spriteTimes];
    }
    else {
      [self reduceDifWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:sprite withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:pair withBOOL:spriteTimes];
    }
  }
}

- (void)reduceDifWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)a
                 withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)b
                                                         withBOOL:(BOOL)aTimes {
  if (((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(a)).value < ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(b)).value) {
    [self reduceDifWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:b withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:a withBOOL:!aTimes];
    return;
  }
  TuxkidsTuxblocksCoreSolveMarkupRenderer *lhs = [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:@"x"], *rhs;
  if (aTimes) {
    lhs = [[TuxkidsTuxblocksCoreSolveMarkupOverRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withIntArray:[IOSIntArray arrayWithInts:(int[]){ ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(a)).value } count:1]] withIntArray:[IOSIntArray arrayWithInts:(int[]){ ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(b)).value } count:1]];
    rhs = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:@"x"] withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBlankRenderer alloc] init]];
  }
  else {
    lhs = [[TuxkidsTuxblocksCoreSolveMarkupOverRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withIntArray:[IOSIntArray arrayWithInts:(int[]){ ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(b)).value } count:1]] withIntArray:[IOSIntArray arrayWithInts:(int[]){ ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(a)).value } count:1]];
    rhs = [[TuxkidsTuxblocksCoreSolveMarkupOverRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:@"x"] withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBlankRenderer alloc] init]];
  }
  TuxkidsTuxblocksCoreSolveMarkupRenderer *problem = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withTuxkidsTuxblocksCoreSolveMarkupRenderer:rhs withNSString:@"="];
  int answer = ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(a)).value / ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(b)).value;
  [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(blockListener_)) wasReducedWithTuxkidsTuxblocksCoreSolveMarkupRenderer:problem withInt:answer withInt:((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(a)).value withTuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener:[[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$1 alloc] initWithTuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup:self withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:a withInt:answer withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:b]];
}

- (void)reduceSameWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)a
                  withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)b
                                                          withBOOL:(BOOL)times {
  if (blockListener_ != nil) {
    TuxkidsTuxblocksCoreSolveMarkupRenderer *lhs = [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:@"x"], *rhs = [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer alloc] initWithNSString:@"x"];
    IOSIntArray *operands = [IOSIntArray arrayWithInts:(int[]){ ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(b)).value, ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(a)).value } count:2];
    if (times) {
      lhs = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withIntArray:operands];
      rhs = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:rhs withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBlankRenderer alloc] init]];
    }
    else {
      lhs = [[TuxkidsTuxblocksCoreSolveMarkupOverRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withIntArray:operands];
      rhs = [[TuxkidsTuxblocksCoreSolveMarkupOverRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:rhs withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupBlankRenderer alloc] init]];
    }
    TuxkidsTuxblocksCoreSolveMarkupRenderer *problem = [[TuxkidsTuxblocksCoreSolveMarkupJoinRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:lhs withTuxkidsTuxblocksCoreSolveMarkupRenderer:rhs withNSString:@"="];
    int answer = ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(a)).value * ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(b)).value;
    [blockListener_ wasReducedWithTuxkidsTuxblocksCoreSolveMarkupRenderer:problem withInt:answer withInt:((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(b)).value withTuxkidsTuxblocksCoreSolveBlocksSprite_SimplifyListener:[[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$2 alloc] initWithTuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup:self withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:b withInt:answer withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:a]];
  }
}

- (void)addNegative {
  if (modifiers_ != nil) {
    [modifiers_ addNegative];
  }
  else {
    for (int i = 0; i < [((id<JavaUtilList>) nil_chk(timesBlocks_)) size]; i++) {
      TuxkidsTuxblocksCoreSolveBlocksModifierBlock *mod = [((id<JavaUtilList>) nil_chk(timesBlocks_)) getWithInt:i];
      if (((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(mod)).value == -1) {
        (void) [self removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:mod withBOOL:YES];
        return;
      }
    }
    TuxkidsTuxblocksCoreSolveBlocksTimesBlock *neg = [[TuxkidsTuxblocksCoreSolveBlocksTimesBlock alloc] initWithInt:-1];
    [self addChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:neg];
  }
}

- (TuxkidsTuxblocksCoreSolveMarkupRenderer *)createRendererWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base {
  if ([((id<JavaUtilList>) nil_chk(children_)) size] > 0) {
    if ([((id<JavaUtilList>) nil_chk(timesBlocks_)) size] > 0) {
      IOSIntArray *operands = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(timesBlocks_)) size]];
      IOSBooleanArray *highlights = [IOSBooleanArray arrayWithLength:(int) [((IOSIntArray *) nil_chk(operands)) count]];
      for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(operands)) count]; i++) {
        TuxkidsTuxblocksCoreSolveBlocksModifierBlock *times = [((id<JavaUtilList>) nil_chk(timesBlocks_)) getWithInt:(int) [((IOSIntArray *) nil_chk(operands)) count] - 1 - i];
        (*[((IOSIntArray *) nil_chk(operands)) intRefAtIndex:i]) = ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(times)).value;
        (*[((IOSBooleanArray *) nil_chk(highlights)) booleanRefAtIndex:i]) = [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(times)) previewAdd];
      }
      base = [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withIntArray:operands withBooleanArray:highlights];
    }
    if ([((id<JavaUtilList>) nil_chk(divBlocks_)) size] > 0) {
      IOSIntArray *operands = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(divBlocks_)) size]];
      IOSBooleanArray *highlights = [IOSBooleanArray arrayWithLength:(int) [((IOSIntArray *) nil_chk(operands)) count]];
      for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(operands)) count]; i++) {
        (*[((IOSIntArray *) nil_chk(operands)) intRefAtIndex:i]) = ((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk([((id<JavaUtilList>) nil_chk(divBlocks_)) getWithInt:i])).value;
        (*[((IOSBooleanArray *) nil_chk(highlights)) booleanRefAtIndex:i]) = [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk([((id<JavaUtilList>) nil_chk(divBlocks_)) getWithInt:i])) previewAdd];
      }
      base = [[TuxkidsTuxblocksCoreSolveMarkupOverRenderer alloc] initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withIntArray:operands withBooleanArray:highlights];
    }
  }
  if (modifiers_ == nil) {
    return base;
  }
  else {
    return [modifiers_ createRendererWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base];
  }
}

- (TuxkidsTuxblocksCoreSolveBlocksSprite *)copyChild OBJC_METHOD_FAMILY_NONE {
  return [[TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup alloc] init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *) copy;
  typedCopy.timesBlocks = timesBlocks_;
  typedCopy.divBlocks = divBlocks_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$1

@synthesize this$0 = this$0_;
@synthesize val$a = val$a_;
@synthesize val$answer = val$answer_;
@synthesize val$b = val$b_;

- (void)wasSimplifiedWithBOOL:(BOOL)success {
  if (success) {
    [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(val$a_)) setValueWithInt:val$answer_];
    (void) [this$0_ removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:val$b_ withBOOL:YES];
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasSimplified];
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup:(TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *)outer$
                  withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)capture$0
                                                           withInt:(int)capture$1
                  withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)capture$2 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$a_ = capture$0;
    val$answer_ = capture$1;
    val$b_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$a = val$a_;
  typedCopy.val$answer = val$answer_;
  typedCopy.val$b = val$b_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$2

@synthesize this$0 = this$0_;
@synthesize val$b = val$b_;
@synthesize val$answer = val$answer_;
@synthesize val$a = val$a_;

- (void)wasSimplifiedWithBOOL:(BOOL)success {
  if (success) {
    [((TuxkidsTuxblocksCoreSolveBlocksModifierBlock *) nil_chk(val$b_)) setValueWithInt:val$answer_];
    (void) [this$0_ removeChildWithTuxkidsTuxblocksCoreSolveBlocksModifierBlock:val$a_ withBOOL:YES];
    [((id<TuxkidsTuxblocksCoreSolveBlocksSprite_BlockListener>) nil_chk(this$0_.blockListener)) wasSimplified];
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup:(TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup *)outer$
                  withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)capture$0
                                                           withInt:(int)capture$1
                  withTuxkidsTuxblocksCoreSolveBlocksModifierBlock:(TuxkidsTuxblocksCoreSolveBlocksModifierBlock *)capture$2 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$b_ = capture$0;
    val$answer_ = capture$1;
    val$a_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$2 *typedCopy = (TuxkidsTuxblocksCoreSolveBlocksVerticalModifierGroup_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$b = val$b_;
  typedCopy.val$answer = val$answer_;
  typedCopy.val$a = val$a_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/expression/EquationGenerator.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "tuxkids/tuxblocks/core/solve/expression/Equation.h"
#include "tuxkids/tuxblocks/core/solve/expression/EquationGenerator.h"
#include "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#include "tuxkids/tuxblocks/core/solve/expression/Number.h"
#include "tuxkids/tuxblocks/core/solve/expression/Variable.h"

@implementation TuxkidsTuxblocksCoreSolveExpressionEquationGenerator

static JavaUtilRandom * TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_;
static id<JavaUtilList> TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_;

+ (JavaUtilRandom *)random {
  return TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_;
}

+ (id<JavaUtilList>)primes {
  return TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_;
}

+ (TuxkidsTuxblocksCoreSolveExpressionEquation *)generateWithInt:(int)steps {
  int answer = [((JavaUtilRandom *) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_)) nextIntWithInt:TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MAX_ANSWER * 2 + 1] - TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MAX_ANSWER;
  double difficulty = answer / 3;
  int rhs = answer;
  TuxkidsTuxblocksCoreSolveExpressionExpression *lhs = [[TuxkidsTuxblocksCoreSolveExpressionVariable alloc] initWithNSString:@"x"];
  TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *lastOperation = nil;
  TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *lastOperationInv = nil;
  JavaLangInteger *lastTimes = nil;
  for (int i = 0; i < steps; i++) {
    id<JavaUtilList> factors = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator getFactorsWithInt:rhs];
    if (lastTimes != nil) [((id<JavaUtilList>) nil_chk(factors)) removeWithId:lastTimes];
    id<JavaUtilList> operations = [[JavaUtilArrayList alloc] init];
    {
      IOSObjectArray *a__ = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum values];
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *operation = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        [((id<JavaUtilList>) nil_chk(operations)) addWithId:operation];
      }
    }
    if ([((id<JavaUtilList>) nil_chk(factors)) isEmpty]) [((id<JavaUtilList>) nil_chk(operations)) removeWithId:[TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Over]];
    if (lastOperation != nil) [((id<JavaUtilList>) nil_chk(operations)) removeWithId:lastOperation];
    int maxTimes = TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MAX_TIMES;
    if (rhs != 0) maxTimes = [JavaLangMath minWithInt:maxTimes withInt:[JavaLangMath absWithInt:TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MAX_RHS / rhs]];
    if (maxTimes <= TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MIN_TIMES) [((id<JavaUtilList>) nil_chk(operations)) removeWithId:[TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Times]];
    if ([((id<JavaUtilList>) nil_chk(operations)) size] > 1 && lastOperationInv != nil) [((id<JavaUtilList>) nil_chk(operations)) removeWithId:lastOperationInv];
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *operation = [((id<JavaUtilList>) nil_chk(operations)) getWithInt:[((JavaUtilRandom *) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_)) nextIntWithInt:[((id<JavaUtilList>) nil_chk(operations)) size]]];
    lastOperation = operation;
    lastTimes = nil;
    double ds = difficulty;
    int value;
    if (operation == [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Plus]) {
      lastOperationInv = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Minus];
      value = [((JavaUtilRandom *) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_)) nextIntWithInt:TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MAX_ADD_SUB - 1] + 1;
      difficulty += TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_PLUS_DIFFICULTY * [JavaLangMath minWithInt:[JavaLangMath absWithInt:value] withInt:[JavaLangMath absWithInt:rhs]];
      lhs = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(lhs)) plusWithInt:value];
      rhs += value;
    }
    else if (operation == [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Minus]) {
      lastOperationInv = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Plus];
      value = [((JavaUtilRandom *) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_)) nextIntWithInt:TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MAX_ADD_SUB - 1] + 1;
      difficulty += TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MINUS_DIFFICULTY * [JavaLangMath minWithInt:[JavaLangMath absWithInt:value] withInt:[JavaLangMath absWithInt:rhs]];
      lhs = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(lhs)) minusWithInt:value];
      rhs -= value;
    }
    else if (operation == [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Times]) {
      lastOperationInv = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Over];
      value = [((JavaUtilRandom *) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_)) nextIntWithInt:maxTimes - TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MIN_TIMES] + TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MIN_TIMES;
      lhs = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(lhs)) timesWithInt:value];
      rhs *= value;
      lastTimes = [JavaLangInteger valueOfWithInt:value];
      difficulty += TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_TIMES_DIFFICULTY * [JavaLangMath sqrtWithDouble:[JavaLangMath absWithInt:rhs]];
    }
    else {
      lastOperationInv = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum Times];
      value = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(factors)) getWithInt:[((JavaUtilRandom *) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_)) nextIntWithInt:[((id<JavaUtilList>) nil_chk(factors)) size]]])) intValue];
      difficulty += TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_DIVIDE_DIFFICULTY * [JavaLangMath sqrtWithDouble:[JavaLangMath absWithInt:rhs]];
      lhs = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(lhs)) overWithInt:value];
      rhs /= value;
    }
    difficulty += TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_MIN_DIFFICULTY;
    ds = difficulty - ds;
  }
  return [[TuxkidsTuxblocksCoreSolveExpressionEquation alloc] initWithTuxkidsTuxblocksCoreSolveExpressionExpression:lhs withTuxkidsTuxblocksCoreSolveExpressionExpression:[[TuxkidsTuxblocksCoreSolveExpressionNumber alloc] initWithInt:rhs] withInt:answer withInt:(int) difficulty];
}

+ (id<JavaUtilList>)getFactorsWithInt:(int)n {
  id<JavaUtilList> factors = [[JavaUtilArrayList alloc] init];
  n = [JavaLangMath absWithInt:n];
  if (n < 3) return factors;
  double max = [JavaLangMath sqrtWithDouble:n];
  int pIndex = 0;
  int prime = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator getPrimeWithInt:pIndex++];
  while (prime <= max) {
    if (n % prime == 0) {
      if (n / prime == 1) break;
      [((id<JavaUtilList>) nil_chk(factors)) addWithId:[JavaLangInteger valueOfWithInt:prime]];
      if (![((id<JavaUtilList>) nil_chk(factors)) containsWithId:[JavaLangInteger valueOfWithInt:n / prime]]) [((id<JavaUtilList>) nil_chk(factors)) addWithId:[JavaLangInteger valueOfWithInt:n / prime]];
      id<JavaUtilList> subprimes = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator getFactorsWithInt:n / prime];
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(subprimes)) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          JavaLangInteger *subprime = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
          if (![((id<JavaUtilList>) nil_chk(factors)) containsWithId:subprime]) [((id<JavaUtilList>) nil_chk(factors)) addWithId:subprime];
          if (![((id<JavaUtilList>) nil_chk(factors)) containsWithId:[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) nil_chk(subprime)) intValue] * prime]]) [((id<JavaUtilList>) nil_chk(factors)) addWithId:[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) nil_chk(subprime)) intValue] * prime]];
        }
      }
      break;
    }
    else {
      prime = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator getPrimeWithInt:pIndex++];
    }
  }
  return factors;
}

+ (int)getPrimeWithInt:(int)index {
  while (index >= [((id<JavaUtilList>) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_)) size]) {
    int possible = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_)) getWithInt:[((id<JavaUtilList>) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_)) size] - 1])) intValue] + 1;
    while (![TuxkidsTuxblocksCoreSolveExpressionEquationGenerator isPrimeSoFarWithInt:possible]) possible++;
    [((id<JavaUtilList>) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_)) addWithId:[JavaLangInteger valueOfWithInt:possible]];
  }
  return [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_)) getWithInt:index])) intValue];
}

+ (BOOL)isPrimeSoFarWithInt:(int)n {
  double max = [JavaLangMath sqrtWithDouble:n];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      int prime = [((JavaLangInteger *) nil_chk([((id<JavaUtilIterator>) nil_chk(iter__)) next])) intValue];
      if (prime > max) break;
      if (n % prime == 0) return NO;
    }
  }
  return YES;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator class]) {
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_random_ = [[JavaUtilRandom alloc] init];
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_ = [[JavaUtilArrayList alloc] init];
    {
      [((id<JavaUtilList>) nil_chk(TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_primes_)) addWithId:[JavaLangInteger valueOfWithInt:2]];
    }
  }
}

@end

static TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Plus;
static TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Minus;
static TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Times;
static TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Over;
IOSObjectArray *TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_values;

@implementation TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum

+ (TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *)Plus {
  return TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Plus;
}
+ (TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *)Minus {
  return TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Minus;
}
+ (TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *)Times {
  return TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Times;
}
+ (TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *)Over {
  return TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Over;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum class]) {
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Plus = [[TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum alloc] initWithNSString:@"Plus" withInt:0];
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Minus = [[TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum alloc] initWithNSString:@"Minus" withInt:1];
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Times = [[TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum alloc] initWithNSString:@"Times" withInt:2];
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Over = [[TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum alloc] initWithNSString:@"Over" withInt:3];
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Plus, TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Minus, TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Times, TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_Over, nil } count:4 type:[IOSClass classWithClass:[TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_values];
}

+ (TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_values count]; i++) {
    TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum *e = [TuxkidsTuxblocksCoreSolveExpressionEquationGenerator_OperationEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end

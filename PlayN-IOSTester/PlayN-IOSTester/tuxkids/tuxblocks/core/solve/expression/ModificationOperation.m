//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/expression/ModificationOperation.java
//
//  Created by Thomas on 7/26/13.
//

#include "playn/core/Canvas.h"
#include "playn/core/Graphics.h"
#include "playn/core/PlayN.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "pythagoras/f/Vector.h"
#include "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#include "tuxkids/tuxblocks/core/solve/expression/ExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"
#include "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreSolveExpressionModificationOperation

@synthesize value = value_;
@synthesize operand = operand_;

- (int)getValue {
  return value_;
}

- (TuxkidsTuxblocksCoreSolveExpressionExpression *)getOperand {
  return operand_;
}

- (void)setOperandWithTuxkidsTuxblocksCoreSolveExpressionExpression:(TuxkidsTuxblocksCoreSolveExpressionExpression *)operand {
  self.operand = operand;
}

- (id)initWithTuxkidsTuxblocksCoreSolveExpressionExpression:(TuxkidsTuxblocksCoreSolveExpressionExpression *)operand
                                                    withInt:(int)value {
  if ((self = [super init])) {
    self.value = value;
    self.operand = operand;
  }
  return self;
}

- (BOOL)hasVariable {
  return [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(operand_)) hasVariable];
}

- (TuxkidsTuxblocksCoreSolveExpressionExpression *)getSimplified {
  return self;
}

- (TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *childWriter = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) nil_chk(operand_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  return [[TuxkidsTuxblocksCoreSolveExpressionModificationOperation_$1 alloc] initWithTuxkidsTuxblocksCoreSolveExpressionModificationOperation:self withPlaynCoreTextFormat:textFormat withTuxkidsTuxblocksCoreSolveExpressionExpressionWriter:childWriter];
}

- (NSString *)getSymbol {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isCommutative {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getColor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TuxkidsTuxblocksCoreSolveExpressionModificationOperation *)getInverse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)hashCode {
  [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode)) addFieldWithId:operand_];
  [((TuxkidsTuxblocksCoreUtilsHashCode *) nil_chk(hashCode)) addFieldWithInt:value_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveExpressionModificationOperation *typedCopy = (TuxkidsTuxblocksCoreSolveExpressionModificationOperation *) copy;
  typedCopy.value = value_;
  typedCopy.operand = operand_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveExpressionModificationOperation_$1

@synthesize this$0 = this$0_;
@synthesize opLayout = opLayout_;
@synthesize val$childWriter = val$childWriter_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  opLayout_ = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:[NSString stringWithFormat:@" %@ %d", [this$0_ getSymbol], this$0_.value] withPlaynCoreTextFormat:textFormat];
  return [[PythagorasFVector alloc] initWithFloat:[((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(val$childWriter_)) width] + [((id<PlaynCoreTextLayout>) nil_chk(opLayout_)) width] withFloat:[((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(val$childWriter_)) height]];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                                  withInt:(int)childColor {
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setFillColorWithInt:childColor];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setStrokeColorWithInt:childColor];
  [((TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *) nil_chk(val$childWriter_)) drawExpressionWithPlaynCoreCanvas:canvas withInt:childColor];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) restore];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) fillTextWithPlaynCoreTextLayout:opLayout_ withFloat:[self width] - [((id<PlaynCoreTextLayout>) nil_chk(opLayout_)) width] withFloat:([self height] - [((id<PlaynCoreTextLayout>) nil_chk(opLayout_)) height]) / 2];
}

- (id)initWithTuxkidsTuxblocksCoreSolveExpressionModificationOperation:(TuxkidsTuxblocksCoreSolveExpressionModificationOperation *)outer$
                                               withPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0
               withTuxkidsTuxblocksCoreSolveExpressionExpressionWriter:(TuxkidsTuxblocksCoreSolveExpressionExpressionWriter *)capture$0 {
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
    this$0_ = outer$;
    val$childWriter_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveExpressionModificationOperation_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveExpressionModificationOperation_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.opLayout = opLayout_;
  typedCopy.val$childWriter = val$childWriter_;
}

@end

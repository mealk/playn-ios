//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/expression/BinaryOperation.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSObjectArray.h"
#import "tuxkids/tuxblocks/core/solve/expression/BinaryOperation.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/NonevaluatableException.h"
#import "tuxkids/tuxblocks/core/solve/expression/Number.h"
#import "tuxkids/tuxblocks/core/utils/Formatter.h"
#import "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreSolveExpressionBinaryOperation

@synthesize operandA = operandA_;
@synthesize operandB = operandB_;

- (TuxkidsTuxblocksCoreSolveExpressionExpression *)getOperandA {
  return operandA_;
}

- (TuxkidsTuxblocksCoreSolveExpressionExpression *)getOperandB {
  return operandB_;
}

- (id)initWithTuxkidsTuxblocksCoreSolveExpressionExpression:(TuxkidsTuxblocksCoreSolveExpressionExpression *)operandA
          withTuxkidsTuxblocksCoreSolveExpressionExpression:(TuxkidsTuxblocksCoreSolveExpressionExpression *)operandB {
  if ((self = [super init])) {
    self.operandA = operandA;
    self.operandB = operandB;
  }
  return self;
}

- (NSString *)toMathString {
  NSString *aString = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandA_)) toMathString];
  if ([((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandA_)) getPrecedence] < [self getPrecedence]) {
    aString = [NSString stringWithFormat:@"(%@)", aString];
  }
  NSString *bString = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandB_)) toMathString];
  if ([((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandB_)) getPrecedence] < [self getPrecedence]) {
    bString = [NSString stringWithFormat:@"(%@)", bString];
  }
  return [TuxkidsTuxblocksCoreUtilsFormatter formatWithNSString:@"%s %s %s" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:3, aString, [self getSymbol], bString ]];
}

- (BOOL)hasVariable {
  return [((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandA_)) hasVariable] || [((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandB_)) hasVariable];
}

- (int)evaluate {
  return [self operateWithInt:[((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandA_)) evaluate] withInt:[((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandB_)) evaluate]];
}

- (TuxkidsTuxblocksCoreSolveExpressionExpression *)getSimplified {
  operandA_ = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandA_)) getSimplified];
  operandB_ = [((TuxkidsTuxblocksCoreSolveExpressionExpression *) NIL_CHK(operandB_)) getSimplified];
  @try {
    return [[TuxkidsTuxblocksCoreSolveExpressionNumber alloc] initWithInt:[self evaluate]];
  }
  @catch (TuxkidsTuxblocksCoreSolveExpressionNonevaluatableException *e) {
    return self;
  }
}

- (NSString *)getSymbol {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)operateWithInt:(int)a
              withInt:(int)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isCommutative {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)hashCode {
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(hashCode)) addFieldWithId:operandA_];
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(hashCode)) addFieldWithId:operandB_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveExpressionBinaryOperation *typedCopy = (TuxkidsTuxblocksCoreSolveExpressionBinaryOperation *) copy;
  typedCopy.operandA = operandA_;
  typedCopy.operandB = operandB_;
}

@end

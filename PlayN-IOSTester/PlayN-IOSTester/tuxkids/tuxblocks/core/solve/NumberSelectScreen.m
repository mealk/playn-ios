//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/NumberSelectScreen.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Double.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "playn/core/Assets.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Color.h"
#import "playn/core/Connection.h"
#import "playn/core/Events.h"
#import "playn/core/Font.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Pointer.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/FloatMath.h"
#import "pythagoras/f/Point.h"
#import "pythagoras/f/Vector.h"
#import "pythagoras/i/Point.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/GameBackgroundSprite.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/MenuSprite.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"
#import "tuxkids/tuxblocks/core/solve/NumberSelectScreen.h"
#import "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen

static NSString * TuxkidsTuxblocksCoreSolveNumberSelectScreen_PLACEHOLDER_ = @"%";

@synthesize SPACING = SPACING_;
@synthesize numberPoints = numberPoints_;
@synthesize numberImages = numberImages_;
@synthesize textFormat = textFormat_;
@synthesize equationFormat = equationFormat_;
@synthesize selectedPoint = selectedPoint_;
@synthesize possibleSelectedPoint = possibleSelectedPoint_;
@synthesize velocity = velocity_;
@synthesize position = position_;
@synthesize lastPosition = lastPosition_;
@synthesize dragOffset = dragOffset_;
@synthesize positionTrail = positionTrail_;
@synthesize timeTrail = timeTrail_;
@synthesize foregroundLayer = foregroundLayer_;
@synthesize backgroundLayer = backgroundLayer_;
@synthesize equationLayer = equationLayer_;
@synthesize createsSpritesThisFrame = createsSpritesThisFrame_;
@synthesize themeColor = themeColor_;
@synthesize equationHeight = equationHeight_;
@synthesize equationBlankX = equationBlankX_;
@synthesize equationAnswer = equationAnswer_;
@synthesize equationAnswerPoint = equationAnswerPoint_;
@synthesize expression = expression_;
@synthesize answer = answer_;
@synthesize buttonBack = buttonBack_;
@synthesize buttonCenter = buttonCenter_;
@synthesize backImageOk = backImageOk_;
@synthesize backImageBack = backImageBack_;
@synthesize backImageCancel = backImageCancel_;
@synthesize recenterPoint = recenterPoint_;
@synthesize selectedNumberLayer = selectedNumberLayer_;
@synthesize menu = menu_;
@synthesize dragging = dragging_;

+ (NSString *)PLACEHOLDER {
  return TuxkidsTuxblocksCoreSolveNumberSelectScreen_PLACEHOLDER_;
}

- (JavaLangInteger *)selectedAnswer {
  if (selectedPoint_ == nil) return nil;
  return [JavaLangInteger valueOfWithInt:[self getNumberWithPythagorasIPoint:selectedPoint_]];
}

- (BOOL)hasCorrectAnswer {
  JavaLangInteger *answer = [self selectedAnswer];
  return answer != nil && [((JavaLangInteger *) NIL_CHK(answer)) intValue] == self.answer;
}

- (void)setFocusedNumberWithInt:(int)number {
  recenterPoint_ = [self getPointWithInt:number];
}

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
      withTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)gameState
                           withNSString:(NSString *)expression
                                withInt:(int)answer {
  if ((self = [super initWithTripleplayGameScreenStack:screens withTuxkidsTuxblocksCoreGameState:gameState])) {
    SPACING_ = 150;
    numberPoints_ = [[JavaUtilArrayList alloc] init];
    numberImages_ = [[JavaUtilArrayList alloc] init];
    velocity_ = [[PythagorasFVector alloc] init];
    position_ = [[PythagorasFVector alloc] init];
    lastPosition_ = [[PythagorasFVector alloc] init];
    dragOffset_ = [[PythagorasFVector alloc] init];
    positionTrail_ = [[JavaUtilArrayList alloc] init];
    timeTrail_ = [[JavaUtilArrayList alloc] init];
    recenterPoint_ = [[PythagorasIPoint alloc] init];
    self.expression = expression;
    self.answer = answer;
  }
  return self;
}

- (void)wasAdded {
  [super wasAdded];
  themeColor_ = [((TuxkidsTuxblocksCoreGameState *) NIL_CHK(state__)) themeColor];
  SPACING_ = (int) ([self height] / 3.5f);
  (void) [((PythagorasFVector *) NIL_CHK(position_)) setWithFloat:((PythagorasIPoint *) NIL_CHK(recenterPoint_)).x_ * SPACING_ withFloat:((PythagorasIPoint *) NIL_CHK(recenterPoint_)).y_ * SPACING_];
  (void) [((PythagorasFVector *) NIL_CHK(lastPosition_)) setWithPythagorasFIVector:position_];
  textFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:SPACING_ / 3]];
  equationFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:SPACING_ / 3 * 0.8f]];
  backgroundLayer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createGroupLayer];
  foregroundLayer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:foregroundLayer_];
  [((id<PlaynCorePointer>) [PlaynCorePlayN pointer]) setListenerWithPlaynCorePointer_Listener:self];
  [self createBackground];
  [self createEquationWithNSString:expression_];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(foregroundLayer_)) setOriginWithFloat:-[self width] / 2 withFloat:-[self height] / 2 - equationHeight_ / 2];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(backgroundLayer_)) setTranslationWithFloat:0 withFloat:equationHeight_ / 2];
  selectedNumberLayer_ = [[TuxkidsTuxblocksCoreImageLayerTintable alloc] init];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) setDepthWithFloat:10];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) setTintWithInt:themeColor_];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(foregroundLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) layer]];
  [self updateWithInt:0];
}

- (void)createEquationWithNSString:(NSString *)equation {
  menu_ = [[TuxkidsTuxblocksCoreMenuSprite alloc] initWithFloat:[self width] withFloat:[TuxkidsTuxblocksCoreScreenGameScreen defaultButtonSize] * 1.2f];
  int index = [NIL_CHK(equation) indexOfString:TuxkidsTuxblocksCoreSolveNumberSelectScreen_PLACEHOLDER_];
  NSString *before = [NIL_CHK(equation) substring:0 endIndex:index];
  NSString *after = [NIL_CHK(equation) substring:index + 1];
  id<PlaynCoreTextLayout> sampleNumber = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) layoutTextWithNSString:@"-999" withPlaynCoreTextFormat:equationFormat_];
  int boxSpace = 10;
  float boxWidth = [((id<PlaynCoreTextLayout>) NIL_CHK(sampleNumber)) width] + boxSpace;
  float boxHeight = [TuxkidsTuxblocksCoreScreenGameScreen defaultButtonSize];
  float width = 0, height = 0;
  id<PlaynCoreTextLayout> beforeLayout = nil, afterLayout = nil;
  if (![NIL_CHK(before) isEmpty]) {
    beforeLayout = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) layoutTextWithNSString:before withPlaynCoreTextFormat:equationFormat_];
    width += [((id<PlaynCoreTextLayout>) NIL_CHK(beforeLayout)) width] + boxSpace;
    height = [JavaLangMath maxWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(beforeLayout)) height] withFloat:height];
  }
  if (![NIL_CHK(after) isEmpty]) {
    afterLayout = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) layoutTextWithNSString:after withPlaynCoreTextFormat:equationFormat_];
    width += [((id<PlaynCoreTextLayout>) NIL_CHK(afterLayout)) width] + boxSpace;
    height = [JavaLangMath maxWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(afterLayout)) height] withFloat:height];
  }
  width += boxWidth + boxSpace * 2;
  height = [JavaLangMath maxWithFloat:boxHeight withFloat:height];
  id<PlaynCoreCanvasImage> eqImage = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageWithFloat:width withFloat:height];
  id<PlaynCoreCanvas> canvas = [((id<PlaynCoreCanvasImage>) NIL_CHK(eqImage)) canvas];
  float x = 0;
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:[TripleplayUtilColors BLACK]];
  if (beforeLayout != nil) {
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:beforeLayout withFloat:x withFloat:(height - [beforeLayout height]) / 2];
    x += [beforeLayout width] + boxSpace;
  }
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:[PlaynCoreColor withAlphaWithInt:themeColor_ withInt:100]];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:themeColor_];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillRectWithFloat:x withFloat:(height - boxHeight) / 2 withFloat:boxWidth withFloat:boxHeight];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) strokeRectWithFloat:x withFloat:(height - boxHeight) / 2 withFloat:boxWidth - 0.5f withFloat:boxHeight - 0.5f];
  equationBlankX_ = x + boxWidth / 2;
  x += boxWidth + boxSpace;
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:[TripleplayUtilColors BLACK]];
  if (afterLayout != nil) {
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:afterLayout withFloat:x withFloat:(height - [afterLayout height]) / 2];
  }
  id<PlaynCoreImageLayer> eqLayer = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageLayerWithPlaynCoreImage:eqImage];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(eqLayer)) setTranslationWithFloat:([self width] - [((id<PlaynCoreImageLayer>) NIL_CHK(eqLayer)) width]) / 2 withFloat:([((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) height] - [((id<PlaynCoreImageLayer>) NIL_CHK(eqLayer)) height]) / 2];
  backImageOk_ = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:@"images/ok.png"];
  backImageBack_ = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:@"images/back.png"];
  backImageCancel_ = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:@"images/cancel.png"];
  float bgHeight = [((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) height];
  float buttonHeight = [TuxkidsTuxblocksCoreScreenGameScreen defaultButtonSize];
  buttonBack_ = [[TuxkidsTuxblocksCoreButton alloc] initWithPlaynCoreImage:backImageBack_ withFloat:buttonHeight withFloat:buttonHeight withBOOL:YES];
  [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setPositionWithFloat:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) width] / 2 + 10 withFloat:bgHeight / 2];
  [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setTintWithInt:themeColor_ withFloat:TuxkidsTuxblocksCoreButton_UNPRESSED_ALPHA];
  [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setOnReleasedListenerWithTuxkidsTuxblocksCoreButton_OnReleasedListener:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1 alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self]];
  buttonCenter_ = [[TuxkidsTuxblocksCoreButton alloc] initWithNSString:@"images/center.png" withFloat:buttonHeight withFloat:buttonHeight withBOOL:YES];
  [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonCenter_)) setPositionWithFloat:[self width] - [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonCenter_)) width] / 2 - 10 withFloat:bgHeight / 2];
  [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonCenter_)) setTintWithInt:themeColor_ withFloat:TuxkidsTuxblocksCoreButton_UNPRESSED_ALPHA];
  [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonCenter_)) setOnReleasedListenerWithTuxkidsTuxblocksCoreButton_OnReleasedListener:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2 alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self]];
  equationLayer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(equationLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) layer]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(equationLayer_)) addWithPlaynCoreLayer:eqLayer];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(equationLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) layerAddable]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(equationLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonCenter_)) layerAddable]];
  equationHeight_ = [((TuxkidsTuxblocksCoreMenuSprite *) NIL_CHK(menu_)) height];
  equationBlankX_ += [((id<PlaynCoreImageLayer>) NIL_CHK(eqLayer)) tx];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:equationLayer_];
}

- (void)updateEquationAnswer {
  if (selectedPoint_ == nil && equationAnswer_ != nil) {
    [((id<PlaynCoreGroupLayer>) NIL_CHK(equationLayer_)) removeWithPlaynCoreLayer:equationAnswer_];
    equationAnswer_ = nil;
    equationAnswerPoint_ = nil;
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setImageWithPlaynCoreImage:backImageBack_];
  }
  else if (selectedPoint_ != nil && ![((PythagorasIPoint *) NIL_CHK(selectedPoint_)) isEqual:equationAnswerPoint_]) {
    equationAnswerPoint_ = [[PythagorasIPoint alloc] initWithPythagorasIIPoint:selectedPoint_];
    if (equationAnswer_ != nil) [((id<PlaynCoreGroupLayer>) NIL_CHK(equationLayer_)) removeWithPlaynCoreLayer:equationAnswer_];
    NSString *text = [NSString stringWithFormat:@"%d", [self getNumberWithPythagorasIPoint:selectedPoint_]];
    id<PlaynCoreCanvasImage> image = [TuxkidsTuxblocksCoreUtilsCanvasUtils createTextWithNSString:text withPlaynCoreTextFormat:equationFormat_ withInt:[TripleplayUtilColors BLACK]];
    equationAnswer_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageLayerWithPlaynCoreImage:image];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(equationAnswer_)) setOriginWithFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(equationAnswer_)) width] / 2 withFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(equationAnswer_)) height] / 2];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(equationAnswer_)) setTranslationWithFloat:equationBlankX_ withFloat:equationHeight_ / 2];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(equationLayer_)) addWithPlaynCoreLayer:equationAnswer_];
    [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) setImageWithPlaynCoreImage:backImageOk_];
  }
}

- (void)createBackground {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(backgroundLayer_)) setDepthWithFloat:-100];
  id<PlaynCoreCanvasImage> circleImage = [TuxkidsTuxblocksCoreUtilsCanvasUtils createCircleWithFloat:SPACING_ / 2 withInt:[PlaynCoreColor argbWithInt:0 withInt:0 withInt:0 withInt:0] withFloat:20 withInt:[TripleplayUtilColors WHITE]];
  id<PlaynCoreImageLayer> circle = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageLayerWithPlaynCoreImage:circleImage];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(circle)) setOriginWithFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(circleImage)) width] / 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(circleImage)) height] / 2];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(circle)) setTranslationWithFloat:[self width] / 2 withFloat:[self height] / 2];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(circle)) setAlphaWithFloat:0.7f];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(circle)) setDepthWithFloat:0];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(backgroundLayer_)) addWithPlaynCoreLayer:circle];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:backgroundLayer_];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  int left = (int) ((((PythagorasFVector *) NIL_CHK(position_)).x_ - [self width] / 2) / SPACING_ - 0.5);
  int right = (int) ((((PythagorasFVector *) NIL_CHK(position_)).x_ + [self width] / 2) / SPACING_ + 0.5);
  int top = (int) ((((PythagorasFVector *) NIL_CHK(position_)).y_ - [self height] / 2) / SPACING_ - 0.5);
  int bot = (int) ((((PythagorasFVector *) NIL_CHK(position_)).y_ + [self height] / 2) / SPACING_ + 0.5);
  [self updateEquationAnswer];
  createsSpritesThisFrame_ = 0;
  PythagorasIPoint *p = [[PythagorasIPoint alloc] init];
  for (int i = left; i <= right; i++) {
    for (int j = top; j <= bot; j++) {
      [((PythagorasIPoint *) NIL_CHK(p)) setLocationWithInt:i withInt:j];
      (void) [self createNumberSpriteWithPythagorasIPoint:p];
    }
  }
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  [[((TuxkidsTuxblocksCoreGameState *) NIL_CHK(state__)) background] scrollWithFloat:((PythagorasFVector *) NIL_CHK(lastPosition_)).x_ - ((PythagorasFVector *) NIL_CHK(position_)).x_ withFloat:((PythagorasFVector *) NIL_CHK(lastPosition_)).y_ - ((PythagorasFVector *) NIL_CHK(position_)).y_];
  (void) [((PythagorasFVector *) NIL_CHK(lastPosition_)) setWithPythagorasFIVector:position_];
  [self updateEquationAnswer];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) setVisibleWithBOOL:NO];
  for (int i = 0; i < [((id<JavaUtilList>) NIL_CHK(numberImages_)) size]; i++) {
    id<PlaynCoreImageLayer> layer = ((id<PlaynCoreImageLayer>) [((id<JavaUtilList>) NIL_CHK(numberImages_)) getWithInt:i]);
    PythagorasIPoint *p = ((PythagorasIPoint *) [((id<JavaUtilList>) NIL_CHK(numberPoints_)) getWithInt:i]);
    float dx = ((PythagorasFVector *) NIL_CHK(position_)).x_ - ((PythagorasIPoint *) NIL_CHK(p)).x_ * SPACING_;
    float dy = ((PythagorasFVector *) NIL_CHK(position_)).y_ - ((PythagorasIPoint *) NIL_CHK(p)).y_ * SPACING_;
    float distance = [PythagorasFFloatMath sqrtWithFloat:dx * dx + dy * dy];
    float alpha = 1 - [JavaLangMath minWithFloat:distance / SPACING_ / 5 withFloat:1];
    float preAlpha = [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) alpha];
    if ([((PythagorasIPoint *) NIL_CHK(p)) isEqual:selectedPoint_]) {
      [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) setImageWithPlaynCoreImage:[((id<PlaynCoreImageLayer>) NIL_CHK(layer)) image]];
      [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) setTranslationWithFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(layer)) tx] withFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(layer)) ty]];
      [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) setOriginWithFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(layer)) width] / 2 withFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(layer)) height] / 2];
      [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(selectedNumberLayer_)) setVisibleWithBOOL:YES];
      (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setVisibleWithBOOL:NO];
    }
    else {
      (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setVisibleWithBOOL:YES];
    }
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setAlphaWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:preAlpha withFloat:alpha withFloat:0.995f withFloat:[((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt]]];
  }
  if (selectedPoint_ == nil) {
    ((PythagorasFVector *) NIL_CHK(position_)).x_ += ((PythagorasFVector *) NIL_CHK(velocity_)).x_ * [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
    ((PythagorasFVector *) NIL_CHK(position_)).y_ += ((PythagorasFVector *) NIL_CHK(velocity_)).y_ * [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
    ((PythagorasFVector *) NIL_CHK(velocity_)).x_ *= [JavaLangMath powWithDouble:0.995 withDouble:[((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt]];
    ((PythagorasFVector *) NIL_CHK(velocity_)).y_ *= [JavaLangMath powWithDouble:0.995 withDouble:[((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt]];
  }
  else {
    [TuxkidsTuxblocksCorePlayNObject lerpTimeWithPythagorasFVector:position_ withInt:selectedPoint_.x_ * SPACING_ withInt:selectedPoint_.y_ * SPACING_ withFloat:0.99f withFloat:[((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt]];
  }
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(foregroundLayer_)) setTranslationWithFloat:-((PythagorasFVector *) NIL_CHK(position_)).x_ withFloat:-((PythagorasFVector *) NIL_CHK(position_)).y_];
}

- (id<PlaynCoreImageLayer>)createNumberSpriteWithPythagorasIPoint:(PythagorasIPoint *)p {
  int index = [((id<JavaUtilList>) NIL_CHK(numberPoints_)) indexOfWithId:p];
  if (index >= 0) {
    id<PlaynCoreImageLayer> layer = ((id<PlaynCoreImageLayer>) [((id<JavaUtilList>) NIL_CHK(numberImages_)) removeWithInt:index]);
    [((id<JavaUtilList>) NIL_CHK(numberImages_)) addWithId:layer];
    PythagorasIPoint *point = ((PythagorasIPoint *) [((id<JavaUtilList>) NIL_CHK(numberPoints_)) removeWithInt:index]);
    [((id<JavaUtilList>) NIL_CHK(numberPoints_)) addWithId:point];
    return layer;
  }
  if (createsSpritesThisFrame_ == TuxkidsTuxblocksCoreSolveNumberSelectScreen_MAX_SPRITE_CREATE_PER_FRAME) {
    return nil;
  }
  createsSpritesThisFrame_++;
  p = [((PythagorasIPoint *) NIL_CHK(p)) clone];
  int border = 0;
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:[NSString stringWithFormat:@"%d", [self getNumberWithPythagorasIPoint:p]] withPlaynCoreTextFormat:textFormat_];
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width] + border * 2 withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) height] + border * 2];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:[TripleplayUtilColors WHITE]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillTextWithPlaynCoreTextLayout:layout withFloat:border withFloat:border];
  id<PlaynCoreImageLayer> layer = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageLayerWithPlaynCoreImage:image];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setOriginWithFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] / 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height] / 2];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setTranslationWithFloat:((PythagorasIPoint *) NIL_CHK(p)).x_ * SPACING_ withFloat:((PythagorasIPoint *) NIL_CHK(p)).y_ * SPACING_];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) addListenerWithPlaynCorePointer_Listener:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self withPythagorasIPoint:p]];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setAlphaWithFloat:0];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setHitTesterWithPlaynCoreLayer_HitTester:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3 alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self withPlaynCoreCanvasImage:image]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(foregroundLayer_)) addWithPlaynCoreLayer:layer];
  [((id<JavaUtilList>) NIL_CHK(numberImages_)) addWithId:layer];
  [((id<JavaUtilList>) NIL_CHK(numberPoints_)) addWithId:p];
  if ([((id<JavaUtilList>) NIL_CHK(numberImages_)) size] > TuxkidsTuxblocksCoreSolveNumberSelectScreen_MAX_NUMS) {
    id<PlaynCoreImageLayer> rem = ((id<PlaynCoreImageLayer>) [((id<JavaUtilList>) NIL_CHK(numberImages_)) removeWithInt:0]);
    (void) [((id<JavaUtilList>) NIL_CHK(numberPoints_)) removeWithInt:0];
    [((id<PlaynCoreImageLayer>) NIL_CHK(rem)) destroy];
  }
  return layer;
}

- (int)getNumberWithPythagorasIPoint:(PythagorasIPoint *)p {
  return ((PythagorasIPoint *) NIL_CHK(p)).x_ - ((PythagorasIPoint *) NIL_CHK(p)).y_ * 10;
}

- (PythagorasIPoint *)getPointWithInt:(int)number {
  if (number >= 0) {
    return [[PythagorasIPoint alloc] initWithInt:number % 10 withInt:-number / 10];
  }
  else {
    return [[PythagorasIPoint alloc] initWithInt:number % 10 withInt:-number / 10];
  }
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if ([((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonBack_)) hitWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]] || [((TuxkidsTuxblocksCoreButton *) NIL_CHK(buttonCenter_)) hitWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]]) {
    return;
  }
  dragging_ = YES;
  (void) [((PythagorasFVector *) NIL_CHK(dragOffset_)) setWithFloat:((PythagorasFVector *) NIL_CHK(position_)).x_ + [((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:((PythagorasFVector *) NIL_CHK(position_)).y_ + [((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]];
  [((id<JavaUtilList>) NIL_CHK(positionTrail_)) clear];
  [((id<JavaUtilList>) NIL_CHK(timeTrail_)) clear];
  (void) [((PythagorasFVector *) NIL_CHK(velocity_)) setWithFloat:0 withFloat:0];
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (!dragging_) return;
  dragging_ = NO;
  if ([((id<JavaUtilList>) NIL_CHK(positionTrail_)) size] > 1) {
    PythagorasFVector *last = ((PythagorasFVector *) [((id<JavaUtilList>) NIL_CHK(positionTrail_)) getWithInt:0]);
    double lastTime = [((JavaLangDouble *) [((id<JavaUtilList>) NIL_CHK(timeTrail_)) getWithInt:0]) doubleValue];
    float dx = (((PythagorasFVector *) NIL_CHK(position_)).x_ - ((PythagorasFVector *) NIL_CHK(last)).x_) / (float) ([((id<PlaynCorePointer_Event>) NIL_CHK(event)) time] - lastTime);
    float dy = (((PythagorasFVector *) NIL_CHK(position_)).y_ - ((PythagorasFVector *) NIL_CHK(last)).y_) / (float) ([((id<PlaynCorePointer_Event>) NIL_CHK(event)) time] - lastTime);
    (void) [((PythagorasFVector *) NIL_CHK(velocity_)) setWithFloat:dx withFloat:dy];
    if ([((PythagorasFVector *) NIL_CHK(velocity_)) length] > 0.5f) {
      possibleSelectedPoint_ = nil;
      selectedPoint_ = nil;
    }
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (!dragging_) return;
  (void) [((PythagorasFVector *) NIL_CHK(position_)) setWithFloat:-[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] + ((PythagorasFVector *) NIL_CHK(dragOffset_)).x_ withFloat:-[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y] + ((PythagorasFVector *) NIL_CHK(dragOffset_)).y_];
  [((id<JavaUtilList>) NIL_CHK(positionTrail_)) addWithId:[((PythagorasFVector *) NIL_CHK(position_)) clone]];
  [((id<JavaUtilList>) NIL_CHK(timeTrail_)) addWithId:[JavaLangDouble valueOfWithDouble:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) time]]];
  if ([((id<JavaUtilList>) NIL_CHK(positionTrail_)) size] > TuxkidsTuxblocksCoreSolveNumberSelectScreen_MAX_TRAIL) {
    (void) [((id<JavaUtilList>) NIL_CHK(positionTrail_)) removeWithInt:0];
    (void) [((id<JavaUtilList>) NIL_CHK(timeTrail_)) removeWithInt:0];
    selectedPoint_ = nil;
  }
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen *) copy;
  typedCopy.SPACING = SPACING_;
  typedCopy.numberPoints = numberPoints_;
  typedCopy.numberImages = numberImages_;
  typedCopy.textFormat = textFormat_;
  typedCopy.equationFormat = equationFormat_;
  typedCopy.selectedPoint = selectedPoint_;
  typedCopy.possibleSelectedPoint = possibleSelectedPoint_;
  typedCopy.velocity = velocity_;
  typedCopy.position = position_;
  typedCopy.lastPosition = lastPosition_;
  typedCopy.dragOffset = dragOffset_;
  typedCopy.positionTrail = positionTrail_;
  typedCopy.timeTrail = timeTrail_;
  typedCopy.foregroundLayer = foregroundLayer_;
  typedCopy.backgroundLayer = backgroundLayer_;
  typedCopy.equationLayer = equationLayer_;
  typedCopy.createsSpritesThisFrame = createsSpritesThisFrame_;
  typedCopy.themeColor = themeColor_;
  typedCopy.equationHeight = equationHeight_;
  typedCopy.equationBlankX = equationBlankX_;
  typedCopy.equationAnswer = equationAnswer_;
  typedCopy.equationAnswerPoint = equationAnswerPoint_;
  typedCopy.expression = expression_;
  typedCopy.answer = answer_;
  typedCopy.buttonBack = buttonBack_;
  typedCopy.buttonCenter = buttonCenter_;
  typedCopy.backImageOk = backImageOk_;
  typedCopy.backImageBack = backImageBack_;
  typedCopy.backImageCancel = backImageCancel_;
  typedCopy.recenterPoint = recenterPoint_;
  typedCopy.selectedNumberLayer = selectedNumberLayer_;
  typedCopy.menu = menu_;
  typedCopy.dragging = dragging_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener

@synthesize this$0 = this$0_;
@synthesize point = point_;

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$
                                     withPythagorasIPoint:(PythagorasIPoint *)point {
  if ((self = [super init])) {
    this$0_ = outer$;
    self.point = point;
  }
  return self;
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  [((id<PlaynCoreEvents_Flags>) [((id<PlaynCorePointer_Event>) NIL_CHK(event)) flags]) setPropagationStoppedWithBOOL:NO];
  this$0_.possibleSelectedPoint = point_;
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if ([((PythagorasIPoint *) NIL_CHK(point_)) isEqual:this$0_.possibleSelectedPoint]) {
    this$0_.selectedPoint = point_;
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.point = point_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1

@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) {
    if (this$0_.selectedPoint != nil && [this$0_ getNumberWithPythagorasIPoint:this$0_.selectedPoint] != this$0_.answer) {
      [((TuxkidsTuxblocksCoreButton *) NIL_CHK(this$0_.buttonBack)) setImageWithPlaynCoreImage:this$0_.backImageCancel];
    }
    else {
      [this$0_ popThis];
    }
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2

@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  this$0_.selectedPoint = [[PythagorasIPoint alloc] initWithPythagorasIIPoint:this$0_.recenterPoint];
}

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2 *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3

@synthesize this$0 = this$0_;
@synthesize val$image = val$image_;

- (id<PlaynCoreLayer>)hitTestWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                           withPythagorasFPoint:(PythagorasFPoint *)p {
  if ([((PythagorasFPoint *) NIL_CHK(p)) distanceWithFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(val$image_)) width] / 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(val$image_)) height] / 2] < this$0_.SPACING / 2.5f) return layer;
  return nil;
}

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$
                                 withPlaynCoreCanvasImage:(id<PlaynCoreCanvasImage>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$image_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3 *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$image = val$image_;
}

@end

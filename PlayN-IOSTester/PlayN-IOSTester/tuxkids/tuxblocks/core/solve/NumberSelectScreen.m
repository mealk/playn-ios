//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/NumberSelectScreen.java
//
//  Created by Thomas on 7/26/13.
//

#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "playn/core/Assets.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Color.h"
#include "playn/core/Connection.h"
#include "playn/core/Events.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Image.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/Pointer.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "playn/core/util/Clock.h"
#include "pythagoras/f/FloatMath.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Vector.h"
#include "pythagoras/i/Point.h"
#include "tripleplay/game/Screen.h"
#include "tripleplay/game/ScreenStack.h"
#include "tripleplay/util/Colors.h"
#include "tuxkids/tuxblocks/core/Button.h"
#include "tuxkids/tuxblocks/core/Constant.h"
#include "tuxkids/tuxblocks/core/GameBackgroundSprite.h"
#include "tuxkids/tuxblocks/core/GameState.h"
#include "tuxkids/tuxblocks/core/MenuSprite.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/layers/ImageLayerTintable.h"
#include "tuxkids/tuxblocks/core/screen/GameScreen.h"
#include "tuxkids/tuxblocks/core/solve/NumberSelectScreen.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"
#include "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen

@synthesize SPACING = SPACING_;
@synthesize numberPoints = numberPoints_;
@synthesize numberImages = numberImages_;
@synthesize numberFormat = numberFormat_;
@synthesize problemFormat = problemFormat_;
@synthesize selectedPoint = selectedPoint_;
@synthesize possibleSelectedPoint = possibleSelectedPoint_;
@synthesize velocity = velocity_;
@synthesize position = position_;
@synthesize lastPosition = lastPosition_;
@synthesize dragOffset = dragOffset_;
@synthesize positionTrail = positionTrail_;
@synthesize timeTrail = timeTrail_;
@synthesize foregroundLayer = foregroundLayer_;
@synthesize backgroundLayer = backgroundLayer_;
@synthesize equationLayer = equationLayer_;
@synthesize createsSpritesThisFrame = createsSpritesThisFrame_;
@synthesize themeColor = themeColor_;
@synthesize blankCenter = blankCenter_;
@synthesize equationAnswer = equationAnswer_;
@synthesize equationAnswerPoint = equationAnswerPoint_;
@synthesize problem = problem_;
@synthesize answer = answer_;
@synthesize buttonBack = buttonBack_;
@synthesize buttonCenter = buttonCenter_;
@synthesize backImageOk = backImageOk_;
@synthesize backImageBack = backImageBack_;
@synthesize backImageCancel = backImageCancel_;
@synthesize recenterPoint = recenterPoint_;
@synthesize selectedNumberLayer = selectedNumberLayer_;
@synthesize menu = menu_;
@synthesize dragging = dragging_;

- (JavaLangInteger *)selectedAnswer {
  if (selectedPoint_ == nil) return nil;
  return [JavaLangInteger valueOfWithInt:[self getNumberWithPythagorasIPoint:selectedPoint_]];
}

- (BOOL)hasCorrectAnswer {
  JavaLangInteger *answer = [self selectedAnswer];
  return answer != nil && [((JavaLangInteger *) nil_chk(answer)) intValue] == self.answer;
}

- (void)setFocusedNumberWithInt:(int)number {
  recenterPoint_ = [self getPointWithInt:number];
}

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
      withTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)gameState
withTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)problem
                                withInt:(int)answer {
  if ((self = [super initWithTripleplayGameScreenStack:screens withTuxkidsTuxblocksCoreGameState:gameState])) {
    SPACING_ = 150;
    numberPoints_ = [[JavaUtilArrayList alloc] init];
    numberImages_ = [[JavaUtilArrayList alloc] init];
    velocity_ = [[PythagorasFVector alloc] init];
    position_ = [[PythagorasFVector alloc] init];
    lastPosition_ = [[PythagorasFVector alloc] init];
    dragOffset_ = [[PythagorasFVector alloc] init];
    positionTrail_ = [[JavaUtilArrayList alloc] init];
    timeTrail_ = [[JavaUtilArrayList alloc] init];
    recenterPoint_ = [[PythagorasIPoint alloc] init];
    self.problem = problem;
    self.answer = answer;
  }
  return self;
}

- (void)wasAdded {
  [super wasAdded];
  themeColor_ = [((TuxkidsTuxblocksCoreGameState *) nil_chk(state__)) themeColor];
  SPACING_ = (int) ([self height] / 3.5f);
  (void) [((PythagorasFVector *) nil_chk(position_)) setWithFloat:((PythagorasIPoint *) nil_chk(recenterPoint_)).x_ * SPACING_ withFloat:((PythagorasIPoint *) nil_chk(recenterPoint_)).y_ * SPACING_];
  (void) [((PythagorasFVector *) nil_chk(lastPosition_)) setWithPythagorasFIVector:position_];
  numberFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:SPACING_ / 3]];
  problemFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:SPACING_ / 3 * 0.8f / [((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(problem_)) lines]]];
  backgroundLayer_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createGroupLayer];
  foregroundLayer_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer_)) addWithPlaynCoreLayer:foregroundLayer_];
  [((id<PlaynCorePointer>) nil_chk([PlaynCorePlayN pointer])) setListenerWithPlaynCorePointer_Listener:self];
  [self createBackground];
  [self createEquationWithTuxkidsTuxblocksCoreSolveMarkupRenderer:problem_];
  (void) [((id<PlaynCoreGroupLayer>) nil_chk(foregroundLayer_)) setOriginWithFloat:-[self width] / 2 withFloat:-[self height] / 2 - [((TuxkidsTuxblocksCoreMenuSprite *) nil_chk(menu_)) height] / 2];
  (void) [((id<PlaynCoreGroupLayer>) nil_chk(backgroundLayer_)) setTranslationWithFloat:0 withFloat:[((TuxkidsTuxblocksCoreMenuSprite *) nil_chk(menu_)) height] / 2];
  selectedNumberLayer_ = [[TuxkidsTuxblocksCoreLayersImageLayerTintable alloc] init];
  [((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) setDepthWithFloat:10];
  [((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) setTintWithInt:themeColor_];
  [((id<PlaynCoreGroupLayer>) nil_chk(foregroundLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) layerAddable]];
  [self updateWithInt:0];
}

- (void)createEquationWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)renderer {
  menu_ = [[TuxkidsTuxblocksCoreMenuSprite alloc] initWithFloat:[self width] withFloat:[TuxkidsTuxblocksCoreScreenGameScreen defaultButtonSize] * 1.2f];
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *equation = [((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(renderer)) getExpressionWriterWithPlaynCoreTextFormat:problemFormat_];
  id<PlaynCoreCanvasImage> eqImage = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createImageWithFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(equation)) width] withFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(equation)) height]];
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *config = [[TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config alloc] initWithInt:[TripleplayUtilColors BLACK] withInt:[TripleplayUtilColors BLACK] withInt:themeColor_];
  [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(equation)) drawExpressionWithPlaynCoreCanvas:[((id<PlaynCoreCanvasImage>) nil_chk(eqImage)) canvas] withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config:config];
  blankCenter_ = [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(equation)) blankCenter];
  id<PlaynCoreImageLayer> eqLayer = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createImageLayerWithPlaynCoreImage:eqImage];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(eqLayer)) setTranslationWithFloat:([self width] - [((id<PlaynCoreImageLayer>) nil_chk(eqLayer)) width]) / 2 withFloat:([((TuxkidsTuxblocksCoreMenuSprite *) nil_chk(menu_)) height] - [((id<PlaynCoreImageLayer>) nil_chk(eqLayer)) height]) / 2];
  backImageOk_ = [((id<PlaynCoreAssets>) nil_chk([PlaynCorePlayN assets])) getImageWithNSString:@"images/ok.png"];
  backImageBack_ = [((id<PlaynCoreAssets>) nil_chk([PlaynCorePlayN assets])) getImageWithNSString:@"images/back.png"];
  backImageCancel_ = [((id<PlaynCoreAssets>) nil_chk([PlaynCorePlayN assets])) getImageWithNSString:@"images/cancel.png"];
  float bgHeight = [((TuxkidsTuxblocksCoreMenuSprite *) nil_chk(menu_)) height];
  float buttonHeight = [TuxkidsTuxblocksCoreScreenGameScreen defaultButtonSize];
  buttonBack_ = [[TuxkidsTuxblocksCoreButton alloc] initWithPlaynCoreImage:backImageBack_ withFloat:buttonHeight withFloat:buttonHeight withBOOL:YES];
  [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) setPositionWithFloat:[((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) width] / 2 + 10 withFloat:bgHeight / 2];
  [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) setTintWithInt:themeColor_ withFloat:TuxkidsTuxblocksCoreButton_UNPRESSED_ALPHA];
  [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) setOnReleasedListenerWithTuxkidsTuxblocksCoreButton_OnReleasedListener:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1 alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self]];
  buttonCenter_ = [[TuxkidsTuxblocksCoreButton alloc] initWithNSString:@"images/center.png" withFloat:buttonHeight withFloat:buttonHeight withBOOL:YES];
  [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonCenter_)) setPositionWithFloat:[self width] - [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonCenter_)) width] / 2 - 10 withFloat:bgHeight / 2];
  [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonCenter_)) setTintWithInt:themeColor_ withFloat:TuxkidsTuxblocksCoreButton_UNPRESSED_ALPHA];
  [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonCenter_)) setOnReleasedListenerWithTuxkidsTuxblocksCoreButton_OnReleasedListener:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2 alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self]];
  equationLayer_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) nil_chk(equationLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreMenuSprite *) nil_chk(menu_)) layer]];
  [((id<PlaynCoreGroupLayer>) nil_chk(equationLayer_)) addWithPlaynCoreLayer:eqLayer];
  [((id<PlaynCoreGroupLayer>) nil_chk(equationLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) layerAddable]];
  [((id<PlaynCoreGroupLayer>) nil_chk(equationLayer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreButton *) nil_chk(buttonCenter_)) layerAddable]];
  ((PythagorasFVector *) nil_chk(blankCenter_)).x_ += [((id<PlaynCoreImageLayer>) nil_chk(eqLayer)) tx];
  ((PythagorasFVector *) nil_chk(blankCenter_)).y_ += [((id<PlaynCoreImageLayer>) nil_chk(eqLayer)) ty];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer_)) addWithPlaynCoreLayer:equationLayer_];
}

- (void)updateEquationAnswer {
  if (selectedPoint_ == nil && equationAnswer_ != nil) {
    [((id<PlaynCoreGroupLayer>) nil_chk(equationLayer_)) removeWithPlaynCoreLayer:equationAnswer_];
    equationAnswer_ = nil;
    equationAnswerPoint_ = nil;
    [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) setImageWithPlaynCoreImage:backImageBack_];
  }
  else if (selectedPoint_ != nil && ![((PythagorasIPoint *) nil_chk(selectedPoint_)) isEqual:equationAnswerPoint_]) {
    equationAnswerPoint_ = [[PythagorasIPoint alloc] initWithPythagorasIIPoint:selectedPoint_];
    if (equationAnswer_ != nil) [((id<PlaynCoreGroupLayer>) nil_chk(equationLayer_)) removeWithPlaynCoreLayer:equationAnswer_];
    NSString *text = [NSString stringWithFormat:@"%d", [self getNumberWithPythagorasIPoint:selectedPoint_]];
    id<PlaynCoreCanvasImage> image = [TuxkidsTuxblocksCoreUtilsCanvasUtils createTextWithNSString:text withPlaynCoreTextFormat:problemFormat_ withInt:[TripleplayUtilColors BLACK]];
    equationAnswer_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createImageLayerWithPlaynCoreImage:image];
    (void) [((id<PlaynCoreImageLayer>) nil_chk(equationAnswer_)) setOriginWithFloat:[((id<PlaynCoreImageLayer>) nil_chk(equationAnswer_)) width] / 2 withFloat:[((id<PlaynCoreImageLayer>) nil_chk(equationAnswer_)) height] / 2];
    (void) [((id<PlaynCoreImageLayer>) nil_chk(equationAnswer_)) setTranslationWithFloat:((PythagorasFVector *) nil_chk(blankCenter_)).x_ withFloat:((PythagorasFVector *) nil_chk(blankCenter_)).y_];
    [((id<PlaynCoreGroupLayer>) nil_chk(equationLayer_)) addWithPlaynCoreLayer:equationAnswer_];
    [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) setImageWithPlaynCoreImage:backImageOk_];
  }
}

- (void)createBackground {
  (void) [((id<PlaynCoreGroupLayer>) nil_chk(backgroundLayer_)) setDepthWithFloat:-100];
  id<PlaynCoreCanvasImage> circleImage = [TuxkidsTuxblocksCoreUtilsCanvasUtils createCircleWithFloat:SPACING_ / 2 withInt:[PlaynCoreColor argbWithInt:0 withInt:0 withInt:0 withInt:0] withFloat:20 withInt:[TripleplayUtilColors WHITE]];
  id<PlaynCoreImageLayer> circle = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createImageLayerWithPlaynCoreImage:circleImage];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(circle)) setOriginWithFloat:[((id<PlaynCoreCanvasImage>) nil_chk(circleImage)) width] / 2 withFloat:[((id<PlaynCoreCanvasImage>) nil_chk(circleImage)) height] / 2];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(circle)) setTranslationWithFloat:[self width] / 2 withFloat:[self height] / 2];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(circle)) setAlphaWithFloat:0.7f];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(circle)) setDepthWithFloat:0];
  [((id<PlaynCoreGroupLayer>) nil_chk(backgroundLayer_)) addWithPlaynCoreLayer:circle];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer_)) addWithPlaynCoreLayer:backgroundLayer_];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  int left = (int) ((((PythagorasFVector *) nil_chk(position_)).x_ - [self width] / 2) / SPACING_ - 0.5);
  int right = (int) ((((PythagorasFVector *) nil_chk(position_)).x_ + [self width] / 2) / SPACING_ + 0.5);
  int top = (int) ((((PythagorasFVector *) nil_chk(position_)).y_ - [self height] / 2) / SPACING_ - 0.5);
  int bot = (int) ((((PythagorasFVector *) nil_chk(position_)).y_ + [self height] / 2) / SPACING_ + 0.5);
  [self updateEquationAnswer];
  createsSpritesThisFrame_ = 0;
  PythagorasIPoint *p = [[PythagorasIPoint alloc] init];
  for (int i = left; i <= right; i++) {
    for (int j = top; j <= bot; j++) {
      [((PythagorasIPoint *) nil_chk(p)) setLocationWithInt:i withInt:j];
      (void) [self createNumberSpriteWithPythagorasIPoint:p];
    }
  }
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  [((TuxkidsTuxblocksCoreGameBackgroundSprite *) nil_chk([((TuxkidsTuxblocksCoreGameState *) nil_chk(state__)) background])) scrollWithFloat:((PythagorasFVector *) nil_chk(lastPosition_)).x_ - ((PythagorasFVector *) nil_chk(position_)).x_ withFloat:((PythagorasFVector *) nil_chk(lastPosition_)).y_ - ((PythagorasFVector *) nil_chk(position_)).y_];
  (void) [((PythagorasFVector *) nil_chk(lastPosition_)) setWithPythagorasFIVector:position_];
  [self updateEquationAnswer];
  [((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) setVisibleWithBOOL:NO];
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(numberImages_)) size]; i++) {
    id<PlaynCoreImageLayer> layer = [((id<JavaUtilList>) nil_chk(numberImages_)) getWithInt:i];
    PythagorasIPoint *p = [((id<JavaUtilList>) nil_chk(numberPoints_)) getWithInt:i];
    float dx = ((PythagorasFVector *) nil_chk(position_)).x_ - ((PythagorasIPoint *) nil_chk(p)).x_ * SPACING_;
    float dy = ((PythagorasFVector *) nil_chk(position_)).y_ - ((PythagorasIPoint *) nil_chk(p)).y_ * SPACING_;
    float distance = [PythagorasFFloatMath sqrtWithFloat:dx * dx + dy * dy];
    float alpha = 1 - [JavaLangMath minWithFloat:distance / SPACING_ / 5 withFloat:1];
    float preAlpha = [((id<PlaynCoreImageLayer>) nil_chk(layer)) alpha];
    if ([((PythagorasIPoint *) nil_chk(p)) isEqual:selectedPoint_]) {
      [((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) setImageWithPlaynCoreImage:[((id<PlaynCoreImageLayer>) nil_chk(layer)) image]];
      [((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) setTranslationWithFloat:[((id<PlaynCoreImageLayer>) nil_chk(layer)) tx] withFloat:[((id<PlaynCoreImageLayer>) nil_chk(layer)) ty]];
      [((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) setOriginWithFloat:[((id<PlaynCoreImageLayer>) nil_chk(layer)) width] / 2 withFloat:[((id<PlaynCoreImageLayer>) nil_chk(layer)) height] / 2];
      [((TuxkidsTuxblocksCoreLayersImageLayerTintable *) nil_chk(selectedNumberLayer_)) setVisibleWithBOOL:YES];
      (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setVisibleWithBOOL:NO];
    }
    else {
      (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setVisibleWithBOOL:YES];
    }
    (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setAlphaWithFloat:[TuxkidsTuxblocksCorePlayNObject lerpTimeWithFloat:preAlpha withFloat:alpha withFloat:0.995f withFloat:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]]];
  }
  if (selectedPoint_ == nil) {
    ((PythagorasFVector *) nil_chk(position_)).x_ += ((PythagorasFVector *) nil_chk(velocity_)).x_ * [((id<PlaynCoreUtilClock>) nil_chk(clock)) dt];
    ((PythagorasFVector *) nil_chk(position_)).y_ += ((PythagorasFVector *) nil_chk(velocity_)).y_ * [((id<PlaynCoreUtilClock>) nil_chk(clock)) dt];
    ((PythagorasFVector *) nil_chk(velocity_)).x_ *= [JavaLangMath powWithDouble:0.995 withDouble:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]];
    ((PythagorasFVector *) nil_chk(velocity_)).y_ *= [JavaLangMath powWithDouble:0.995 withDouble:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]];
  }
  else {
    [TuxkidsTuxblocksCorePlayNObject lerpTimeWithPythagorasFVector:position_ withInt:selectedPoint_.x_ * SPACING_ withInt:selectedPoint_.y_ * SPACING_ withFloat:0.99f withFloat:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]];
  }
  (void) [((id<PlaynCoreGroupLayer>) nil_chk(foregroundLayer_)) setTranslationWithFloat:-((PythagorasFVector *) nil_chk(position_)).x_ withFloat:-((PythagorasFVector *) nil_chk(position_)).y_];
}

- (id<PlaynCoreImageLayer>)createNumberSpriteWithPythagorasIPoint:(PythagorasIPoint *)p {
  int index = [((id<JavaUtilList>) nil_chk(numberPoints_)) indexOfWithId:p];
  if (index >= 0) {
    id<PlaynCoreImageLayer> layer = [((id<JavaUtilList>) nil_chk(numberImages_)) removeWithInt:index];
    [((id<JavaUtilList>) nil_chk(numberImages_)) addWithId:layer];
    PythagorasIPoint *point = [((id<JavaUtilList>) nil_chk(numberPoints_)) removeWithInt:index];
    [((id<JavaUtilList>) nil_chk(numberPoints_)) addWithId:point];
    return layer;
  }
  if (createsSpritesThisFrame_ == TuxkidsTuxblocksCoreSolveNumberSelectScreen_MAX_SPRITE_CREATE_PER_FRAME) {
    return nil;
  }
  createsSpritesThisFrame_++;
  p = [((PythagorasIPoint *) nil_chk(p)) clone];
  int border = 0;
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:[NSString stringWithFormat:@"%d", [self getNumberWithPythagorasIPoint:p]] withPlaynCoreTextFormat:numberFormat_];
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createImageWithFloat:[((id<PlaynCoreTextLayout>) nil_chk(layout)) width] + border * 2 withFloat:[((id<PlaynCoreTextLayout>) nil_chk(layout)) height] + border * 2];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) setFillColorWithInt:[TripleplayUtilColors WHITE]];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) fillTextWithPlaynCoreTextLayout:layout withFloat:border withFloat:border];
  id<PlaynCoreImageLayer> layer = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCoreScreenGameScreen graphics])) createImageLayerWithPlaynCoreImage:image];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setOriginWithFloat:[((id<PlaynCoreCanvasImage>) nil_chk(image)) width] / 2 withFloat:[((id<PlaynCoreCanvasImage>) nil_chk(image)) height] / 2];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setTranslationWithFloat:((PythagorasIPoint *) nil_chk(p)).x_ * SPACING_ withFloat:((PythagorasIPoint *) nil_chk(p)).y_ * SPACING_];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) addListenerWithPlaynCorePointer_Listener:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self withPythagorasIPoint:p]];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setAlphaWithFloat:0];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setHitTesterWithPlaynCoreLayer_HitTester:[[TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3 alloc] initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:self withPlaynCoreCanvasImage:image]];
  [((id<PlaynCoreGroupLayer>) nil_chk(foregroundLayer_)) addWithPlaynCoreLayer:layer];
  [((id<JavaUtilList>) nil_chk(numberImages_)) addWithId:layer];
  [((id<JavaUtilList>) nil_chk(numberPoints_)) addWithId:p];
  if ([((id<JavaUtilList>) nil_chk(numberImages_)) size] > TuxkidsTuxblocksCoreSolveNumberSelectScreen_MAX_NUMS) {
    id<PlaynCoreImageLayer> rem = [((id<JavaUtilList>) nil_chk(numberImages_)) removeWithInt:0];
    (void) [((id<JavaUtilList>) nil_chk(numberPoints_)) removeWithInt:0];
    [((id<PlaynCoreImageLayer>) nil_chk(rem)) destroy];
  }
  return layer;
}

- (int)getNumberWithPythagorasIPoint:(PythagorasIPoint *)p {
  return ((PythagorasIPoint *) nil_chk(p)).x_ - ((PythagorasIPoint *) nil_chk(p)).y_ * 10;
}

- (PythagorasIPoint *)getPointWithInt:(int)number {
  if (number >= 0) {
    return [[PythagorasIPoint alloc] initWithInt:number % 10 withInt:-number / 10];
  }
  else {
    return [[PythagorasIPoint alloc] initWithInt:number % 10 withInt:-number / 10];
  }
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if ([((TuxkidsTuxblocksCoreButton *) nil_chk(buttonBack_)) hitWithFloat:[((id<PlaynCorePointer_Event>) nil_chk(event)) x] withFloat:[((id<PlaynCorePointer_Event>) nil_chk(event)) y]] || [((TuxkidsTuxblocksCoreButton *) nil_chk(buttonCenter_)) hitWithFloat:[((id<PlaynCorePointer_Event>) nil_chk(event)) x] withFloat:[((id<PlaynCorePointer_Event>) nil_chk(event)) y]]) {
    return;
  }
  dragging_ = YES;
  (void) [((PythagorasFVector *) nil_chk(dragOffset_)) setWithFloat:((PythagorasFVector *) nil_chk(position_)).x_ + [((id<PlaynCorePointer_Event>) nil_chk(event)) x] withFloat:((PythagorasFVector *) nil_chk(position_)).y_ + [((id<PlaynCorePointer_Event>) nil_chk(event)) y]];
  [((id<JavaUtilList>) nil_chk(positionTrail_)) clear];
  [((id<JavaUtilList>) nil_chk(timeTrail_)) clear];
  (void) [((PythagorasFVector *) nil_chk(velocity_)) setWithFloat:0 withFloat:0];
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (!dragging_) return;
  dragging_ = NO;
  if ([((id<JavaUtilList>) nil_chk(positionTrail_)) size] > 1) {
    PythagorasFVector *last = [((id<JavaUtilList>) nil_chk(positionTrail_)) getWithInt:0];
    double lastTime = [((JavaLangDouble *) nil_chk([((id<JavaUtilList>) nil_chk(timeTrail_)) getWithInt:0])) doubleValue];
    float dx = (((PythagorasFVector *) nil_chk(position_)).x_ - ((PythagorasFVector *) nil_chk(last)).x_) / (float) ([((id<PlaynCorePointer_Event>) nil_chk(event)) time] - lastTime);
    float dy = (((PythagorasFVector *) nil_chk(position_)).y_ - ((PythagorasFVector *) nil_chk(last)).y_) / (float) ([((id<PlaynCorePointer_Event>) nil_chk(event)) time] - lastTime);
    (void) [((PythagorasFVector *) nil_chk(velocity_)) setWithFloat:dx withFloat:dy];
    if ([((PythagorasFVector *) nil_chk(velocity_)) length] > 0.5f) {
      possibleSelectedPoint_ = nil;
      selectedPoint_ = nil;
    }
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (!dragging_) return;
  (void) [((PythagorasFVector *) nil_chk(position_)) setWithFloat:-[((id<PlaynCorePointer_Event>) nil_chk(event)) x] + ((PythagorasFVector *) nil_chk(dragOffset_)).x_ withFloat:-[((id<PlaynCorePointer_Event>) nil_chk(event)) y] + ((PythagorasFVector *) nil_chk(dragOffset_)).y_];
  [((id<JavaUtilList>) nil_chk(positionTrail_)) addWithId:[((PythagorasFVector *) nil_chk(position_)) clone]];
  [((id<JavaUtilList>) nil_chk(timeTrail_)) addWithId:[JavaLangDouble valueOfWithDouble:[((id<PlaynCorePointer_Event>) nil_chk(event)) time]]];
  if ([((id<JavaUtilList>) nil_chk(positionTrail_)) size] > TuxkidsTuxblocksCoreSolveNumberSelectScreen_MAX_TRAIL) {
    (void) [((id<JavaUtilList>) nil_chk(positionTrail_)) removeWithInt:0];
    (void) [((id<JavaUtilList>) nil_chk(timeTrail_)) removeWithInt:0];
    selectedPoint_ = nil;
  }
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen *) copy;
  typedCopy.SPACING = SPACING_;
  typedCopy.numberPoints = numberPoints_;
  typedCopy.numberImages = numberImages_;
  typedCopy.numberFormat = numberFormat_;
  typedCopy.problemFormat = problemFormat_;
  typedCopy.selectedPoint = selectedPoint_;
  typedCopy.possibleSelectedPoint = possibleSelectedPoint_;
  typedCopy.velocity = velocity_;
  typedCopy.position = position_;
  typedCopy.lastPosition = lastPosition_;
  typedCopy.dragOffset = dragOffset_;
  typedCopy.positionTrail = positionTrail_;
  typedCopy.timeTrail = timeTrail_;
  typedCopy.foregroundLayer = foregroundLayer_;
  typedCopy.backgroundLayer = backgroundLayer_;
  typedCopy.equationLayer = equationLayer_;
  typedCopy.createsSpritesThisFrame = createsSpritesThisFrame_;
  typedCopy.themeColor = themeColor_;
  typedCopy.blankCenter = blankCenter_;
  typedCopy.equationAnswer = equationAnswer_;
  typedCopy.equationAnswerPoint = equationAnswerPoint_;
  typedCopy.problem = problem_;
  typedCopy.answer = answer_;
  typedCopy.buttonBack = buttonBack_;
  typedCopy.buttonCenter = buttonCenter_;
  typedCopy.backImageOk = backImageOk_;
  typedCopy.backImageBack = backImageBack_;
  typedCopy.backImageCancel = backImageCancel_;
  typedCopy.recenterPoint = recenterPoint_;
  typedCopy.selectedNumberLayer = selectedNumberLayer_;
  typedCopy.menu = menu_;
  typedCopy.dragging = dragging_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener

@synthesize this$0 = this$0_;
@synthesize point = point_;

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$
                                     withPythagorasIPoint:(PythagorasIPoint *)point {
  if ((self = [super init])) {
    this$0_ = outer$;
    self.point = point;
  }
  return self;
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  [((id<PlaynCoreEvents_Flags>) nil_chk([((id<PlaynCorePointer_Event>) nil_chk(event)) flags])) setPropagationStoppedWithBOOL:NO];
  this$0_.possibleSelectedPoint = point_;
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if ([((PythagorasIPoint *) nil_chk(point_)) isEqual:this$0_.possibleSelectedPoint]) {
    this$0_.selectedPoint = point_;
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_NumberListener *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.point = point_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1

@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) {
    if (this$0_.selectedPoint != nil && [this$0_ getNumberWithPythagorasIPoint:this$0_.selectedPoint] != this$0_.answer) {
      [((TuxkidsTuxblocksCoreButton *) nil_chk(this$0_.buttonBack)) setImageWithPlaynCoreImage:this$0_.backImageCancel];
    }
    else {
      [this$0_ popThis];
    }
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2

@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  this$0_.selectedPoint = [[PythagorasIPoint alloc] initWithPythagorasIIPoint:this$0_.recenterPoint];
}

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2 *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3

@synthesize this$0 = this$0_;
@synthesize val$image = val$image_;

- (id<PlaynCoreLayer>)hitTestWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                           withPythagorasFPoint:(PythagorasFPoint *)p {
  if ([((PythagorasFPoint *) nil_chk(p)) distanceWithFloat:[((id<PlaynCoreCanvasImage>) nil_chk(val$image_)) width] / 2 withFloat:[((id<PlaynCoreCanvasImage>) nil_chk(val$image_)) height] / 2] < this$0_.SPACING / 2.5f) return layer;
  return nil;
}

- (id)initWithTuxkidsTuxblocksCoreSolveNumberSelectScreen:(TuxkidsTuxblocksCoreSolveNumberSelectScreen *)outer$
                                 withPlaynCoreCanvasImage:(id<PlaynCoreCanvasImage>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$image_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3 *typedCopy = (TuxkidsTuxblocksCoreSolveNumberSelectScreen_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$image = val$image_;
}

@end

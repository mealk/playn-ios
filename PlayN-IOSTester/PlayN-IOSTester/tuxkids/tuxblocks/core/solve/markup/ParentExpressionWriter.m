//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/markup/ParentExpressionWriter.java
//
//  Created by Thomas on 7/26/13.
//

#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "playn/core/Canvas.h"
#include "playn/core/TextFormat.h"
#include "pythagoras/f/Vector.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/markup/ParentExpressionWriter.h"

@implementation TuxkidsTuxblocksCoreSolveMarkupParentExpressionWriter

@synthesize children = children_;
@synthesize childOffsets = childOffsets_;

- (void)addChildren {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)initWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  if ((self = [super initWithPlaynCoreTextFormat:textFormat])) {
    children_ = [[JavaUtilArrayList alloc] init];
    childOffsets_ = [[JavaUtilArrayList alloc] init];
    [self addChildren];
  }
  return self;
}

- (void)addChildWithTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:(TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)child
                                                          withFloat:(float)x
                                                          withFloat:(float)y {
  [self addChildWithTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:child withPythagorasFVector:[[PythagorasFVector alloc] initWithFloat:x withFloat:y]];
}

- (void)addChildWithTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:(TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)child
                                              withPythagorasFVector:(PythagorasFVector *)offset {
  [((id<JavaUtilList>) nil_chk(children_)) addWithId:child];
  [((id<JavaUtilList>) nil_chk(childOffsets_)) addWithId:offset];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(children_)) size]; i++) {
    TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *child = [((id<JavaUtilList>) nil_chk(children_)) getWithInt:i];
    PythagorasFVector *offset = [((id<JavaUtilList>) nil_chk(childOffsets_)) getWithInt:i];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) save];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) translateWithFloat:((PythagorasFVector *) nil_chk(offset)).x_ withFloat:((PythagorasFVector *) nil_chk(offset)).y_];
    [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(child)) drawExpressionWithPlaynCoreCanvas:canvas withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config:config_];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) restore];
  }
}

- (PythagorasFVector *)blankCenter {
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(children_)) size]; i++) {
    TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *child = [((id<JavaUtilList>) nil_chk(children_)) getWithInt:i];
    PythagorasFVector *center = [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(child)) blankCenter];
    if (center != nil) {
      PythagorasFVector *offset = [((id<JavaUtilList>) nil_chk(childOffsets_)) getWithInt:i];
      center.x_ += ((PythagorasFVector *) nil_chk(offset)).x_;
      center.y_ += ((PythagorasFVector *) nil_chk(offset)).y_;
      return center;
    }
  }
  return nil;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupParentExpressionWriter *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupParentExpressionWriter *) copy;
  typedCopy.children = children_;
  typedCopy.childOffsets = childOffsets_;
}

@end

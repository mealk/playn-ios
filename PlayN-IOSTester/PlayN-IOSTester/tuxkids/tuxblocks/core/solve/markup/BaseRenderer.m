//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/markup/BaseRenderer.java
//
//  Created by Thomas on 7/26/13.
//

#include "playn/core/Canvas.h"
#include "playn/core/Graphics.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "pythagoras/f/Vector.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/solve/markup/BaseRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"

@implementation TuxkidsTuxblocksCoreSolveMarkupBaseRenderer

@synthesize text = text_;
@synthesize highlight = highlight_;

- (TuxkidsTuxblocksCoreSolveMarkupBaseRenderer *)setHighlightWithBOOL:(BOOL)highlight {
  self.highlight = highlight;
  return self;
}

- (id)initWithNSString:(NSString *)text {
  if ((self = [super init])) {
    self.text = text;
  }
  return self;
}

- (TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  return [[TuxkidsTuxblocksCoreSolveMarkupBaseRenderer_$1 alloc] initWithTuxkidsTuxblocksCoreSolveMarkupBaseRenderer:self withPlaynCoreTextFormat:textFormat];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupBaseRenderer *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupBaseRenderer *) copy;
  typedCopy.text = text_;
  typedCopy.highlight = highlight_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveMarkupBaseRenderer_$1

@synthesize this$0 = this$0_;
@synthesize layout = layout_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  layout_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) layoutTextWithNSString:this$0_.text withPlaynCoreTextFormat:textFormat];
  return [[PythagorasFVector alloc] initWithFloat:[((id<PlaynCoreTextLayout>) nil_chk(layout_)) width] withFloat:[((id<PlaynCoreTextLayout>) nil_chk(layout_)) height]];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  [self setColorWithPlaynCoreCanvas:canvas withBOOL:this$0_.highlight];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) fillTextWithPlaynCoreTextLayout:layout_ withFloat:0 withFloat:0];
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupBaseRenderer:(TuxkidsTuxblocksCoreSolveMarkupBaseRenderer *)outer$
                                  withPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0 {
  this$0_ = outer$;
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
    
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupBaseRenderer_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupBaseRenderer_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.layout = layout_;
}

@end

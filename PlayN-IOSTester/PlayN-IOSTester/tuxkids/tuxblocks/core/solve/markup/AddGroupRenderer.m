//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/markup/AddGroupRenderer.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Math.h"
#include "playn/core/Canvas.h"
#include "playn/core/Graphics.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "pythagoras/f/Vector.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/solve/markup/AddGroupRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"

@implementation TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer

- (id)initWithIntArray:(IOSIntArray *)operands {
  return [super initWithIntArray:operands];
}

- (id)initWithIntArray:(IOSIntArray *)operands
      withBooleanArray:(IOSBooleanArray *)highlights {
  return [super initWithIntArray:operands withBooleanArray:highlights];
}

- (TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  return [[TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer_$1 alloc] initWithTuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer:self withPlaynCoreTextFormat:textFormat];
}

@end
@implementation TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer_$1

@synthesize this$0 = this$0_;
@synthesize layouts = layouts_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  float width = 0, height = 0;
  layouts_ = [IOSObjectArray arrayWithLength:(int) [((IOSIntArray *) nil_chk(this$0_.operands)) count] type:[IOSClass classWithProtocol:@protocol(PlaynCoreTextLayout)]];
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(this$0_.operands)) count]; i++) {
    NSString *s = [NSString stringWithFormat:@" %@%d", ([((IOSIntArray *) nil_chk(this$0_.operands)) intAtIndex:i] < 0 ? @"- " : @"+ "), [JavaLangMath absWithInt:[((IOSIntArray *) nil_chk(this$0_.operands)) intAtIndex:i]]];
    (void) [((IOSObjectArray *) nil_chk(layouts_)) replaceObjectAtIndex:i withObject:[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) layoutTextWithNSString:s withPlaynCoreTextFormat:textFormat]];
    width += [((id<PlaynCoreTextLayout>) nil_chk([((IOSObjectArray *) nil_chk(layouts_)) objectAtIndex:i])) width];
    height = [JavaLangMath maxWithFloat:[((id<PlaynCoreTextLayout>) nil_chk([((IOSObjectArray *) nil_chk(layouts_)) objectAtIndex:i])) height] withFloat:height];
  }
  return [[PythagorasFVector alloc] initWithFloat:width withFloat:height];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  float x = 0;
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(this$0_.operands)) count]; i++) {
    [self setColorWithPlaynCoreCanvas:canvas withBOOL:[((IOSBooleanArray *) nil_chk(this$0_.highlights)) booleanAtIndex:i]];
    (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) fillTextWithPlaynCoreTextLayout:[((IOSObjectArray *) nil_chk(layouts_)) objectAtIndex:i] withFloat:x withFloat:0];
    x += [((id<PlaynCoreTextLayout>) nil_chk([((IOSObjectArray *) nil_chk(layouts_)) objectAtIndex:i])) width];
  }
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer:(TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer *)outer$
withPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0 {
  this$0_ = outer$;
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.layouts = layouts_;
}

@end

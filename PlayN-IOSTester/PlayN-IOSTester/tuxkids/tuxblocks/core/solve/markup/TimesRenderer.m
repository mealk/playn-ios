//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/markup/TimesRenderer.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSBooleanArray.h"
#include "IOSIntArray.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "playn/core/Canvas.h"
#include "playn/core/Font.h"
#include "playn/core/Path.h"
#include "playn/core/TextFormat.h"
#include "pythagoras/f/Vector.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/markup/FactorGroupRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/ParentExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/TimesRenderer.h"

@implementation TuxkidsTuxblocksCoreSolveMarkupTimesRenderer

+ (int)UNKNOWN_NUMBER {
  return TuxkidsTuxblocksCoreSolveMarkupTimesRenderer_UNKNOWN_NUMBER;
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base
                                         withIntArray:(IOSIntArray *)operands {
  if ((self = [super initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupFactorGroupRenderer alloc] initWithIntArray:operands]])) {
    ((TuxkidsTuxblocksCoreSolveMarkupFactorGroupRenderer *) modifier_).useNegatives = YES;
  }
  return self;
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base
                                         withIntArray:(IOSIntArray *)operands
                                     withBooleanArray:(IOSBooleanArray *)highlights {
  if ((self = [super initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupFactorGroupRenderer alloc] initWithIntArray:operands withBooleanArray:highlights]])) {
    ((TuxkidsTuxblocksCoreSolveMarkupFactorGroupRenderer *) modifier_).useNegatives = YES;
  }
  return self;
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base
          withTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)factor {
  return [super initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withTuxkidsTuxblocksCoreSolveMarkupRenderer:factor];
}

- (TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *childWriter = [((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(base_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *factorWriter = [((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(modifier_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  return [[TuxkidsTuxblocksCoreSolveMarkupTimesRenderer_$1 alloc] initWithTuxkidsTuxblocksCoreSolveMarkupTimesRenderer:self withPlaynCoreTextFormat:textFormat withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:childWriter withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:factorWriter];
}

@end
@implementation TuxkidsTuxblocksCoreSolveMarkupTimesRenderer_$1

@synthesize this$0 = this$0_;
@synthesize w = w_;
@synthesize val$childWriter = val$childWriter_;
@synthesize val$factorWriter = val$factorWriter_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  float height = [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) height];
  w_ = height / 7;
  return [[PythagorasFVector alloc] initWithFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$factorWriter_)) width] + [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) width] + w_ * 4 withFloat:[JavaLangMath maxWithFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$factorWriter_)) height] withFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) height]]];
}

- (void)addChildren {
  [self addChildWithTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:val$factorWriter_ withFloat:0 withFloat:([self height] - [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$factorWriter_)) height]) / 2];
  [self addChildWithTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:val$childWriter_ withFloat:w_ * 2 + [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$factorWriter_)) width] withFloat:([self height] - [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) height]) / 2];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  [super drawExpressionWithPlaynCoreCanvas:canvas];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setStrokeWidthWithFloat:[((id<PlaynCoreFont>) nil_chk(((PlaynCoreTextFormat *) nil_chk(textFormat_)).font)) size] / 10];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setLineCapWithPlaynCoreCanvas_LineCapEnum:[PlaynCoreCanvas_LineCapEnum ROUND]];
  [self setColorWithPlaynCoreCanvas:canvas withBOOL:[((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(this$0_.modifier)) fullyHighlighted]];
  id<PlaynCorePath> path = [((id<PlaynCoreCanvas>) nil_chk(canvas)) createPath];
  float height = [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) height];
  float x = [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$factorWriter_)) width] + w_ * 0.5f, h = height * 0.9f;
  float y = ([self height] - h) / 2;
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) translateWithFloat:x withFloat:y];
  [((id<PlaynCorePath>) nil_chk(path)) moveToWithFloat:w_ withFloat:(h + height) / 2];
  [((id<PlaynCorePath>) nil_chk(path)) quadraticCurveToWithFloat:-w_ withFloat:height / 2 withFloat:w_ withFloat:height - h];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) strokePathWithPlaynCorePath:path];
  path = [((id<PlaynCoreCanvas>) nil_chk(canvas)) createPath];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) translateWithFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) width] + w_ * 3 withFloat:0];
  [((id<PlaynCorePath>) nil_chk(path)) moveToWithFloat:-w_ withFloat:(h + height) / 2];
  [((id<PlaynCorePath>) nil_chk(path)) quadraticCurveToWithFloat:w_ withFloat:height / 2 withFloat:-w_ withFloat:height - h];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) strokePathWithPlaynCorePath:path];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) restore];
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupTimesRenderer:(TuxkidsTuxblocksCoreSolveMarkupTimesRenderer *)outer$
                                   withPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0
       withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:(TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)capture$0
withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:(TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)capture$1 {
  this$0_ = outer$;
  val$childWriter_ = capture$0;
  val$factorWriter_ = capture$1;
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupTimesRenderer_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupTimesRenderer_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.w = w_;
  typedCopy.val$childWriter = val$childWriter_;
  typedCopy.val$factorWriter = val$factorWriter_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/markup/AddRenderer.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSBooleanArray.h"
#include "IOSIntArray.h"
#include "java/lang/Math.h"
#include "playn/core/TextFormat.h"
#include "pythagoras/f/Vector.h"
#include "tuxkids/tuxblocks/core/solve/markup/AddGroupRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/AddRenderer.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/markup/ParentExpressionWriter.h"
#include "tuxkids/tuxblocks/core/solve/markup/Renderer.h"

@implementation TuxkidsTuxblocksCoreSolveMarkupAddRenderer

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base
                                         withIntArray:(IOSIntArray *)operands {
  return [super initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer alloc] initWithIntArray:operands]];
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base
                                         withIntArray:(IOSIntArray *)operands
                                     withBooleanArray:(IOSBooleanArray *)highlights {
  return [super initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withTuxkidsTuxblocksCoreSolveMarkupRenderer:[[TuxkidsTuxblocksCoreSolveMarkupAddGroupRenderer alloc] initWithIntArray:operands withBooleanArray:highlights]];
}

- (id)initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)base
          withTuxkidsTuxblocksCoreSolveMarkupRenderer:(TuxkidsTuxblocksCoreSolveMarkupRenderer *)factor {
  return [super initWithTuxkidsTuxblocksCoreSolveMarkupRenderer:base withTuxkidsTuxblocksCoreSolveMarkupRenderer:factor];
}

- (TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *childWriter = [((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(base_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *addWriter = [((TuxkidsTuxblocksCoreSolveMarkupRenderer *) nil_chk(modifier_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  return [[TuxkidsTuxblocksCoreSolveMarkupAddRenderer_$1 alloc] initWithPlaynCoreTextFormat:textFormat withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:childWriter withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:addWriter];
}

@end
@implementation TuxkidsTuxblocksCoreSolveMarkupAddRenderer_$1

@synthesize val$childWriter = val$childWriter_;
@synthesize val$addWriter = val$addWriter_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  return [[PythagorasFVector alloc] initWithFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) width] + [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$addWriter_)) width] withFloat:[JavaLangMath maxWithFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) height] withFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$addWriter_)) height]]];
}

- (void)addChildren {
  [self addChildWithTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:val$childWriter_ withFloat:0 withFloat:0];
  [self addChildWithTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:val$addWriter_ withFloat:[((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$childWriter_)) width] withFloat:([self height] - [((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) nil_chk(val$addWriter_)) height]) / 2];
}

- (id)initWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0
withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:(TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)capture$0
withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter:(TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *)capture$1 {
  val$childWriter_ = capture$0;
  val$addWriter_ = capture$1;
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupAddRenderer_$1 *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupAddRenderer_$1 *) copy;
  typedCopy.val$childWriter = val$childWriter_;
  typedCopy.val$addWriter = val$addWriter_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.java
//
//  Created by Thomas on 7/26/13.
//

#include "playn/core/Canvas.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/PlayN.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "pythagoras/f/Vector.h"
#include "tripleplay/util/Colors.h"
#include "tuxkids/tuxblocks/core/solve/markup/ExpressionWriter.h"

@implementation TuxkidsTuxblocksCoreSolveMarkupExpressionWriter

static TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config * TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_DEFAULT_CONFIG_;

@synthesize config = config_;
@synthesize size = size_;
@synthesize textFormat = textFormat_;

+ (TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *)DEFAULT_CONFIG {
  return TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_DEFAULT_CONFIG_;
}

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (PythagorasFVector *)blankCenter {
  return nil;
}

- (int)blankColor {
  return ((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *) nil_chk(config_)).blankColor;
}

- (float)spacing {
  return [((id<PlaynCoreFont>) nil_chk(((PlaynCoreTextFormat *) nil_chk(textFormat_)).font)) size] / 4;
}

- (void)setColorWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                           withBOOL:(BOOL)highlight {
  int color = highlight ? ((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *) nil_chk(config_)).highlightColor : ((TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *) nil_chk(config_)).defaultColor;
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setFillColorWithInt:color];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setStrokeColorWithInt:color];
}

- (PythagorasFVector *)getSize {
  return size_;
}

- (float)width {
  return ((PythagorasFVector *) nil_chk(size_)).x_;
}

- (float)height {
  return ((PythagorasFVector *) nil_chk(size_)).y_;
}

- (id)initWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  if ((self = [super init])) {
    config_ = TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_DEFAULT_CONFIG_;
    self.textFormat = textFormat;
    self.size = [self formatExpressionWithPlaynCoreTextFormat:textFormat];
  }
  return self;
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
withTuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config:(TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *)config {
  self.config = config;
  [self drawExpressionWithPlaynCoreCanvas:canvas];
}

- (id<PlaynCoreTextLayout>)layoutWithNSString:(NSString *)text
                      withPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  return [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:text withPlaynCoreTextFormat:textFormat];
}

+ (void)initialize {
  if (self == [TuxkidsTuxblocksCoreSolveMarkupExpressionWriter class]) {
    TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_DEFAULT_CONFIG_ = [[TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupExpressionWriter *) copy;
  typedCopy.config = config_;
  typedCopy.size = size_;
  typedCopy.textFormat = textFormat_;
}

@end
@implementation TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config

@synthesize defaultColor = defaultColor_;
@synthesize highlightColor = highlightColor_;
@synthesize blankColor = blankColor_;

- (id)init {
  return [self initTuxkidsTuxblocksCoreSolveMarkupExpressionWriter_ConfigWithInt:[TripleplayUtilColors WHITE] withInt:[TripleplayUtilColors RED] withInt:[TripleplayUtilColors BLUE]];
}

- (id)initTuxkidsTuxblocksCoreSolveMarkupExpressionWriter_ConfigWithInt:(int)defaultColor
                                                                withInt:(int)highlightColor
                                                                withInt:(int)blankcolor {
  if ((self = [super init])) {
    self.defaultColor = defaultColor;
    self.highlightColor = highlightColor;
    self.blankColor = blankcolor;
  }
  return self;
}

- (id)initWithInt:(int)defaultColor
          withInt:(int)highlightColor
          withInt:(int)blankcolor {
  return [self initTuxkidsTuxblocksCoreSolveMarkupExpressionWriter_ConfigWithInt:defaultColor withInt:highlightColor withInt:blankcolor];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *typedCopy = (TuxkidsTuxblocksCoreSolveMarkupExpressionWriter_Config *) copy;
  typedCopy.defaultColor = defaultColor_;
  typedCopy.highlightColor = highlightColor_;
  typedCopy.blankColor = blankColor_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/TestScreen.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Math.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Color.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/util/Clock.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/TestScreen.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"
#import "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TuxkidsTuxblocksCoreTestScreen

@synthesize tint = tint_;
@synthesize l1 = l1_;
@synthesize l2 = l2_;
@synthesize total = total_;

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
      withTuxkidsTuxblocksCoreGameState:(TuxkidsTuxblocksCoreGameState *)state {
  if ((self = [super initWithTripleplayGameScreenStack:screens withTuxkidsTuxblocksCoreGameState:state])) {
    tint_ = [PlaynCoreColor rgbWithInt:125 withInt:255 withInt:0];
  }
  return self;
}

- (void)wasAdded {
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((id<PlaynCoreImageLayer>) [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageLayerWithPlaynCoreImage:[TuxkidsTuxblocksCoreUtilsCanvasUtils createRectWithFloat:[self width] withFloat:[self height] withInt:[TripleplayUtilColors LIGHT_GRAY]]]) setDepthWithFloat:-1]];
  id<PlaynCoreImage> test = [TuxkidsTuxblocksCoreUtilsCanvasUtils createCircleWithFloat:50 withInt:[TripleplayUtilColors PINK] withFloat:3 withInt:[TripleplayUtilColors GREEN]];
  l1_ = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCoreScreenGameScreen graphics]) createImageLayerWithPlaynCoreImage:test];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(l1_)) setTintWithInt:tint_];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:l1_];
  l2_ = [[TuxkidsTuxblocksCoreImageLayerTintable alloc] initWithPlaynCoreImage:test];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(l2_)) layer]];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(l2_)) setTintWithInt:tint_];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(l2_)) setTxWithFloat:[self width] - [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(l2_)) width]];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  total_ += [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
  float alpha = (float) [JavaLangMath cosWithDouble:total_ / 1000.0f * JavaLangMath_PI] / 2 + 0.5f;
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(l1_)) setTintWithInt:[TripleplayUtilColors blendWithInt:[TripleplayUtilColors WHITE] withInt:tint_ withFloat:1 - alpha]];
  [((TuxkidsTuxblocksCoreImageLayerTintable *) NIL_CHK(l2_)) setTintWithInt:[TripleplayUtilColors WHITE] withInt:tint_ withFloat:alpha];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreTestScreen *typedCopy = (TuxkidsTuxblocksCoreTestScreen *) copy;
  typedCopy.tint = tint_;
  typedCopy.l1 = l1_;
  typedCopy.l2 = l2_;
  typedCopy.total = total_;
}

@end

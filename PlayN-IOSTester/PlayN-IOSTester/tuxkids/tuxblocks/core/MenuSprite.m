//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/MenuSprite.java
//
//  Created by Thomas on 7/26/13.
//

#include "IOSClass.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Image.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/TextFormat.h"
#include "tripleplay/util/Colors.h"
#include "tuxkids/tuxblocks/core/Constant.h"
#include "tuxkids/tuxblocks/core/MenuSprite.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"
#include "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TuxkidsTuxblocksCoreMenuSprite

static float TuxkidsTuxblocksCoreMenuSprite_DEFAULT_ALPHA_;

@synthesize layer_ = layer__;
@synthesize background = background_;
@synthesize textLayer = textLayer_;
@synthesize text_ = text__;
@synthesize width_ = width__;
@synthesize height_ = height__;
@synthesize textFormat = textFormat_;
@synthesize textColor_ = textColor__;

+ (float)DEFAULT_ALPHA {
  return TuxkidsTuxblocksCoreMenuSprite_DEFAULT_ALPHA_;
}

+ (float *)DEFAULT_ALPHARef {
  return &TuxkidsTuxblocksCoreMenuSprite_DEFAULT_ALPHA_;
}

- (id<PlaynCoreLayer>)layer {
  return layer__;
}

- (float)width {
  return width__;
}

- (float)height {
  return height__;
}

- (NSString *)text {
  return text__;
}

- (int)textColor {
  return textColor__;
}

- (void)setTextColorWithInt:(int)textColor {
  self.textColor_ = textColor;
}

- (void)setTextWithNSString:(NSString *)text {
  if (text == nil) {
    (void) [((id<PlaynCoreImageLayer>) nil_chk(textLayer_)) setImageWithPlaynCoreImage:nil];
  }
  else if (![text isEqual:self.text_]) {
    (void) [((id<PlaynCoreImageLayer>) nil_chk(textLayer_)) setImageWithPlaynCoreImage:[TuxkidsTuxblocksCoreUtilsCanvasUtils createStringWithPlaynCoreTextFormat:textFormat_ withNSString:text withInt:textColor__]];
    [TuxkidsTuxblocksCorePlayNObject centerImageLayerWithPlaynCoreImageLayer:textLayer_];
  }
  self.text_ = text;
}

- (id)initWithFloat:(float)width
          withFloat:(float)height {
  if ((self = [super init])) {
    textColor__ = [TripleplayUtilColors BLACK];
    self.width_ = width;
    self.height_ = height;
    layer__ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createGroupLayer];
    background_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createImageLayerWithPlaynCoreImage:[TuxkidsTuxblocksCoreUtilsCanvasUtils createRectWithFloat:width withFloat:height withInt:[TripleplayUtilColors LIGHT_GRAY] withFloat:1 withInt:[TripleplayUtilColors DARK_GRAY]]];
    (void) [((id<PlaynCoreImageLayer>) nil_chk(background_)) setAlphaWithFloat:TuxkidsTuxblocksCoreMenuSprite_DEFAULT_ALPHA_];
    (void) [((id<PlaynCoreImageLayer>) nil_chk(background_)) setDepthWithFloat:-1];
    [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:background_];
    textFormat_ = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createFontWithNSString:[TuxkidsTuxblocksCoreConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:height / 2.0f]];
    textLayer_ = [((id<PlaynCoreGraphics>) nil_chk([TuxkidsTuxblocksCorePlayNObject graphics])) createImageLayer];
    (void) [((id<PlaynCoreImageLayer>) nil_chk(textLayer_)) setTranslationWithFloat:width / 2 withFloat:height / 2];
    [((id<PlaynCoreGroupLayer>) nil_chk(layer__)) addWithPlaynCoreLayer:textLayer_];
  }
  return self;
}

+ (void)initialize {
  if (self == [TuxkidsTuxblocksCoreMenuSprite class]) {
    TuxkidsTuxblocksCoreMenuSprite_DEFAULT_ALPHA_ = 0.75f;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreMenuSprite *typedCopy = (TuxkidsTuxblocksCoreMenuSprite *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.background = background_;
  typedCopy.textLayer = textLayer_;
  typedCopy.text_ = text__;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
  typedCopy.textFormat = textFormat_;
  typedCopy.textColor_ = textColor__;
}

@end

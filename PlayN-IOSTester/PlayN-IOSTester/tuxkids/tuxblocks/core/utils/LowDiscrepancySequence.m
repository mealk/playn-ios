//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/utils/LowDiscrepancySequence.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSDoubleArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Math.h"
#import "tuxkids/tuxblocks/core/utils/LowDiscrepancySequence.h"

@implementation TuxkidsTuxblocksCoreUtilsLowDiscrepancySequence

@synthesize dim = dim_;
@synthesize index = index_;
@synthesize x = x_;
@synthesize z = z_;

- (id)initWithInt:(int)dim {
  if ((self = [super init])) {
    self.dim = dim;
    index_ = 1;
    x_ = [[IOSDoubleArray alloc] initWithLength:dim];
    z_ = [[IOSDoubleArray alloc] initWithLength:dim];
  }
  return self;
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)restart {
  index_ = 1;
}

- (IOSDoubleArray *)nextPoint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)nextPointWithJavaLangDoubleArray:(IOSDoubleArray *)r {
  IOSDoubleArray *x = [self nextPoint];
  for (int k = 0; k < dim_; k++) [((IOSDoubleArray *) NIL_CHK(r)) replaceDoubleAtIndex:k withDouble:[((IOSDoubleArray *) NIL_CHK(x)) doubleAtIndex:k]];
}

- (double)productWithInt:(int)i
                 withInt:(int)j
 withJavaLangDoubleArray:(IOSObjectArray *)r {
  double f = 1;
  for (int k = 0; k < dim_; k++) f *= (1 - [JavaLangMath maxWithDouble:[((IOSDoubleArray *) [((IOSObjectArray *) NIL_CHK(r)) objectAtIndex:i]) doubleAtIndex:k] withDouble:[((IOSDoubleArray *) [((IOSObjectArray *) NIL_CHK(r)) objectAtIndex:j]) doubleAtIndex:k]]);
  return f;
}

- (double)productWithInt:(int)i
 withJavaLangDoubleArray:(IOSObjectArray *)r {
  double f = 1;
  for (int k = 0; k < dim_; k++) f *= (1 - [((IOSDoubleArray *) [((IOSObjectArray *) NIL_CHK(r)) objectAtIndex:i]) doubleAtIndex:k]);
  return f;
}

- (double)productSQWithInt:(int)i
   withJavaLangDoubleArray:(IOSObjectArray *)r {
  double f = 1;
  for (int k = 0; k < dim_; k++) f *= (1 - [((IOSDoubleArray *) [((IOSObjectArray *) NIL_CHK(r)) objectAtIndex:i]) doubleAtIndex:k] * [((IOSDoubleArray *) [((IOSObjectArray *) NIL_CHK(r)) objectAtIndex:i]) doubleAtIndex:k]);
  return f;
}

- (double)L2_discrepancyWithInt:(int)N
        withJavaLangDoubleArray:(IOSObjectArray *)r
                     withDouble:(double)x {
  double a = 1, b = 1;
  for (int k = 0; k < dim_; k++) {
    a /= 2.0;
    b /= 3.0;
  }
  if (N == 0) {
    double two_h_1 = [self productWithInt:0 withJavaLangDoubleArray:r] - 2 * a * [self productSQWithInt:0 withJavaLangDoubleArray:r] + b;
    return [JavaLangMath sqrtWithDouble:two_h_1];
  }
  double f = N * x, h_N = 0.5 * f * f, h;
  h = h_N;
  for (int i = 0; i < N; i++) h += [self productWithInt:i withInt:N withJavaLangDoubleArray:r];
  h += 0.5 * [self productWithInt:N withJavaLangDoubleArray:r];
  double sum = 0;
  for (int i = 0; i < N; i++) sum += [self productSQWithInt:i withJavaLangDoubleArray:r];
  sum += (N + 1) * [self productSQWithInt:N withJavaLangDoubleArray:r];
  sum *= a;
  h -= sum;
  h += (N + 0.5) * b;
  return [JavaLangMath sqrtWithDouble:2 * h] / (N + 1);
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreUtilsLowDiscrepancySequence *typedCopy = (TuxkidsTuxblocksCoreUtilsLowDiscrepancySequence *) copy;
  typedCopy.dim = dim_;
  typedCopy.index = index_;
  typedCopy.x = x_;
  typedCopy.z = z_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/utils/HashCode.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "java/lang/Double.h"
#import "java/lang/Float.h"
#import "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TuxkidsTuxblocksCoreUtilsHashCode

@synthesize result = result_;
@synthesize hashable = hashable_;
@synthesize inHash = inHash_;
@synthesize inLeftEquals = inLeftEquals_;
@synthesize inRightEquals = inRightEquals_;
@synthesize lastObject = lastObject_;
@synthesize lastInt = lastInt_;
@synthesize lastLong = lastLong_;
@synthesize lastShort = lastShort_;
@synthesize lastDouble = lastDouble_;
@synthesize lastFloat = lastFloat_;
@synthesize lastByte = lastByte_;
@synthesize lastChar = lastChar_;
@synthesize lastBoolean = lastBoolean_;
@synthesize equalSoFar = equalSoFar_;
@synthesize fieldIndex = fieldIndex_;
@synthesize compareTo = compareTo_;
@synthesize desiredFieldIndex = desiredFieldIndex_;

- (id)initWithTuxkidsTuxblocksCoreUtilsHashCode_Hashable:(id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable>)hashable {
  if ((self = [super init])) {
    result_ = 1;
    self.hashable = hashable;
  }
  return self;
}

- (NSUInteger)hash {
  inHash_ = YES;
  result_ = 1;
  [((id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable>) NIL_CHK(hashable_)) addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:self];
  inHash_ = NO;
  return result_;
}

- (void)addHashWithId:(id)o {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + ((o == nil) ? 0 : [NIL_CHK(o) hash]);
}

- (void)addHashWithInt:(int)i {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + i;
}

- (void)addHashWithLongInt:(long long int)l {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + (int) (l ^ ((long long) (((unsigned long long) l) >> 32)));
}

- (void)addHashWithShortInt:(short int)s {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + s;
}

- (void)addHashWithFloat:(float)f {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + [JavaLangFloat floatToIntBitsWithFloat:f];
}

- (void)addHashWithDouble:(double)d {
  long long int temp;
  temp = [JavaLangDouble doubleToLongBitsWithDouble:d];
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + (int) (temp ^ ((long long) (((unsigned long long) temp) >> 32)));
}

- (void)addHashWithChar:(char)b {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + b;
}

- (void)addHashWithUnichar:(unichar)c {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + c;
}

- (void)addHashWithBOOL:(BOOL)b {
  result_ = TuxkidsTuxblocksCoreUtilsHashCode_prime * result_ + (b ? 1231 : 1237);
}

- (void)addLeftEqualsWithId:(id)o {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  BOOL eq;
  id o2 = ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastObject;
  if (o == nil) {
    eq = o2 == nil;
  }
  else {
    eq = [o isEqual:o2];
  }
  if (!eq) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithInt:(int)i {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (i != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastInt) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithLongInt:(long long int)l {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (l != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastLong) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithShortInt:(short int)s {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (s != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastShort) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithFloat:(float)f {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (f != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastFloat) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithDouble:(double)d {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (d != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastDouble) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithChar:(char)b {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (b != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastByte) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithUnichar:(unichar)c {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (c != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastChar) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addLeftEqualsWithBOOL:(BOOL)b {
  if (!equalSoFar_) return;
  [((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)) populateFieldWithInt:fieldIndex_];
  if (b != ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(compareTo_)).lastBoolean) equalSoFar_ = NO;
  fieldIndex_++;
}

- (void)addRightEqualsWithId:(id)o {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastObject_ = o;
}

- (void)addRightEqualsWithInt:(int)i {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastInt_ = i;
}

- (void)addRightEqualsWithLongInt:(long long int)l {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastLong_ = l;
}

- (void)addRightEqualsWithShortInt:(short int)s {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastShort_ = s;
}

- (void)addRightEqualsWithFloat:(float)f {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastFloat_ = f;
}

- (void)addRightEqualsWithDouble:(double)d {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastDouble_ = d;
}

- (void)addRightEqualsWithChar:(char)b {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastByte_ = b;
}

- (void)addRightEqualsWithUnichar:(unichar)c {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastChar_ = c;
}

- (void)addRightEqualsWithBOOL:(BOOL)b {
  if (desiredFieldIndex_ >= 0 && fieldIndex_++ != desiredFieldIndex_) return;
  lastBoolean_ = b;
}

- (void)addFieldWithId:(id)o {
  if (inHash_) [self addHashWithId:o];
  if (inLeftEquals_) [self addLeftEqualsWithId:o];
  if (inRightEquals_) [self addRightEqualsWithId:o];
}

- (void)addFieldWithInt:(int)i {
  if (inHash_) [self addHashWithInt:i];
  if (inLeftEquals_) [self addLeftEqualsWithInt:i];
  if (inRightEquals_) [self addRightEqualsWithInt:i];
}

- (void)addFieldWithLongInt:(long long int)l {
  if (inHash_) [self addHashWithLongInt:l];
  if (inLeftEquals_) [self addLeftEqualsWithLongInt:l];
  if (inRightEquals_) [self addRightEqualsWithLongInt:l];
}

- (void)addFieldWithShortInt:(short int)s {
  if (inHash_) [self addHashWithShortInt:s];
  if (inLeftEquals_) [self addLeftEqualsWithShortInt:s];
  if (inRightEquals_) [self addRightEqualsWithShortInt:s];
}

- (void)addFieldWithFloat:(float)f {
  if (inHash_) [self addHashWithFloat:f];
  if (inLeftEquals_) [self addLeftEqualsWithFloat:f];
  if (inRightEquals_) [self addRightEqualsWithFloat:f];
}

- (void)addFieldWithDouble:(double)d {
  if (inHash_) [self addHashWithDouble:d];
  if (inLeftEquals_) [self addLeftEqualsWithDouble:d];
  if (inRightEquals_) [self addRightEqualsWithDouble:d];
}

- (void)addFieldWithChar:(char)b {
  if (inHash_) [self addHashWithChar:b];
  if (inLeftEquals_) [self addLeftEqualsWithChar:b];
  if (inRightEquals_) [self addRightEqualsWithChar:b];
}

- (void)addFieldWithUnichar:(unichar)c {
  if (inHash_) [self addHashWithUnichar:c];
  if (inLeftEquals_) [self addLeftEqualsWithUnichar:c];
  if (inRightEquals_) [self addRightEqualsWithUnichar:c];
}

- (void)addFieldWithBOOL:(BOOL)b {
  if (inHash_) [self addHashWithBOOL:b];
  if (inLeftEquals_) [self addLeftEqualsWithBOOL:b];
  if (inRightEquals_) [self addRightEqualsWithBOOL:b];
}

- (void)populateFieldWithInt:(int)index {
  inRightEquals_ = YES;
  desiredFieldIndex_ = index;
  fieldIndex_ = 0;
  [((id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable>) NIL_CHK(hashable_)) addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:self];
  inRightEquals_ = NO;
}

- (BOOL)equalsWithTuxkidsTuxblocksCoreUtilsHashCode:(TuxkidsTuxblocksCoreUtilsHashCode *)hash_ {
  if (hash_ == nil) return NO;
  id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable> hashable = ((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(hash_)).hashable;
  if (self.hashable == hashable) return YES;
  if (self.hashable == nil || hashable == nil) return NO;
  if ([(id<JavaObject>) ((id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable>) NIL_CHK(self.hashable)) getClass] != [(id<JavaObject>) ((id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable>) NIL_CHK(hashable)) getClass]) return NO;
  if ([((TuxkidsTuxblocksCoreUtilsHashCode *) NIL_CHK(hash_)) hash] != [self hash]) return NO;
  equalSoFar_ = YES;
  inLeftEquals_ = YES;
  compareTo_ = hash_;
  desiredFieldIndex_ = -1;
  fieldIndex_ = 0;
  [((id<TuxkidsTuxblocksCoreUtilsHashCode_Hashable>) NIL_CHK(self.hashable)) addFieldsWithTuxkidsTuxblocksCoreUtilsHashCode:self];
  inLeftEquals_ = NO;
  return equalSoFar_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreUtilsHashCode *typedCopy = (TuxkidsTuxblocksCoreUtilsHashCode *) copy;
  typedCopy.result = result_;
  typedCopy.hashable = hashable_;
  typedCopy.inHash = inHash_;
  typedCopy.inLeftEquals = inLeftEquals_;
  typedCopy.inRightEquals = inRightEquals_;
  typedCopy.lastObject = lastObject_;
  typedCopy.lastInt = lastInt_;
  typedCopy.lastLong = lastLong_;
  typedCopy.lastShort = lastShort_;
  typedCopy.lastDouble = lastDouble_;
  typedCopy.lastFloat = lastFloat_;
  typedCopy.lastByte = lastByte_;
  typedCopy.lastChar = lastChar_;
  typedCopy.lastBoolean = lastBoolean_;
  typedCopy.equalSoFar = equalSoFar_;
  typedCopy.fieldIndex = fieldIndex_;
  typedCopy.compareTo = compareTo_;
  typedCopy.desiredFieldIndex = desiredFieldIndex_;
}

@end

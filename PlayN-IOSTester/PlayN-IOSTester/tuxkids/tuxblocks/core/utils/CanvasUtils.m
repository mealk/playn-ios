//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/utils/CanvasUtils.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/lang/RuntimeException.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Color.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/PlayN.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/utils/CanvasUtils.h"
#import "tuxkids/tuxblocks/core/utils/Formatter.h"

@implementation TuxkidsTuxblocksCoreUtilsCanvasUtils

static id<TuxkidsTuxblocksCoreUtilsCanvasUtils_PixelSetter> TuxkidsTuxblocksCoreUtilsCanvasUtils_pixelSetter_;

+ (id<TuxkidsTuxblocksCoreUtilsCanvasUtils_PixelSetter>)pixelSetter {
  return TuxkidsTuxblocksCoreUtilsCanvasUtils_pixelSetter_;
}

+ (void)setPixelSetter:(id<TuxkidsTuxblocksCoreUtilsCanvasUtils_PixelSetter>)pixelSetter {
  TuxkidsTuxblocksCoreUtilsCanvasUtils_pixelSetter_ = pixelSetter;
}

+ (id<PlaynCoreCanvasImage>)createRectWithFloat:(float)width
                                      withFloat:(float)height
                                        withInt:(int)fillColor
                                      withFloat:(float)strokeWidth
                                        withInt:(int)strokeColor {
  width = (int) width;
  height = (int) height;
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:width withFloat:height];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:fillColor];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRectWithFloat:0 withFloat:0 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) width] withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(image)) height]];
  if (strokeWidth > 0) {
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeColorWithInt:strokeColor];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeWidthWithFloat:strokeWidth];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) strokeRectWithFloat:0 withFloat:0 withFloat:width - strokeWidth / 2 withFloat:height - strokeWidth / 2];
  }
  return image;
}

+ (id<PlaynCoreCanvasImage>)createRectWithFloat:(float)width
                                      withFloat:(float)height
                                        withInt:(int)fillColor {
  return [TuxkidsTuxblocksCoreUtilsCanvasUtils createRectWithFloat:width withFloat:height withInt:fillColor withFloat:0 withInt:0];
}

+ (id<PlaynCoreCanvasImage>)createCircleWithFloat:(float)rad
                                          withInt:(int)fillColor
                                        withFloat:(float)strokeWidth
                                          withInt:(int)strokeColor {
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:rad * 2 withFloat:rad * 2];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:fillColor];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillCircleWithFloat:rad withFloat:rad withFloat:rad];
  if (strokeWidth > 0) {
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeColorWithInt:strokeColor];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeWidthWithFloat:strokeWidth];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) strokeCircleWithFloat:rad withFloat:rad withFloat:rad - strokeWidth / 2];
  }
  return image;
}

+ (id<PlaynCoreCanvasImage>)createCircleWithFloat:(float)rad
                                          withInt:(int)fillColor {
  return [TuxkidsTuxblocksCoreUtilsCanvasUtils createCircleWithFloat:rad withInt:fillColor withFloat:0 withInt:0];
}

+ (id<PlaynCoreCanvasImage>)createTextWithNSString:(NSString *)text
                           withPlaynCoreTextFormat:(PlaynCoreTextFormat *)format
                                           withInt:(int)color {
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:text withPlaynCoreTextFormat:format];
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width] withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) height]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:color];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillTextWithPlaynCoreTextLayout:layout withFloat:0 withFloat:0];
  return image;
}

+ (id<PlaynCoreImage>)tintImageWithPlaynCoreImage:(id<PlaynCoreImage>)image
                                          withInt:(int)tint {
  return [TuxkidsTuxblocksCoreUtilsCanvasUtils tintImageWithPlaynCoreImage:image withInt:tint withFloat:1];
}

+ (id<PlaynCoreImage>)tintImageWithPlaynCoreImage:(id<PlaynCoreImage>)image
                                          withInt:(int)tint
                                        withFloat:(float)perc {
  if (![((id<PlaynCoreImage>) NIL_CHK(image)) isReady]) return nil;
  int width = (int) [((id<PlaynCoreImage>) NIL_CHK(image)) width], height = (int) [((id<PlaynCoreImage>) NIL_CHK(image)) height];
  id<PlaynCoreCanvasImage> shifted = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageWithFloat:width withFloat:height];
  IOSIntArray *rgb = [[IOSIntArray alloc] initWithLength:width * height];
  [((id<PlaynCoreImage>) NIL_CHK(image)) getRgbWithInt:0 withInt:0 withInt:width withInt:height withJavaLangIntegerArray:rgb withInt:0 withInt:width];
  for (int i = 0; i < (int) [((IOSIntArray *) NIL_CHK(rgb)) count]; i++) {
    [((IOSIntArray *) NIL_CHK(rgb)) replaceIntAtIndex:i withInt:[TuxkidsTuxblocksCoreUtilsCanvasUtils blendAdditiveWithInt:[((IOSIntArray *) NIL_CHK(rgb)) intAtIndex:i] withInt:tint withFloat:perc]];
  }
  if (TuxkidsTuxblocksCoreUtilsCanvasUtils_pixelSetter_ != nil) {
    [TuxkidsTuxblocksCoreUtilsCanvasUtils_pixelSetter_ setWithPlaynCoreCanvasImage:shifted withInt:0 withInt:0 withInt:width withInt:height withJavaLangIntegerArray:rgb withInt:0 withInt:width];
  }
  else {
    [((id<PlaynCoreCanvasImage>) NIL_CHK(shifted)) setRgbWithInt:0 withInt:0 withInt:width withInt:height withJavaLangIntegerArray:rgb withInt:0 withInt:width];
  }
  return shifted;
}

+ (NSString *)colorToStringWithInt:(int)c {
  return [TuxkidsTuxblocksCoreUtilsFormatter formatWithNSString:@"[%d,%d,%d,%d]" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:4, [JavaLangInteger valueOfWithInt:[PlaynCoreColor alphaWithInt:c]], [JavaLangInteger valueOfWithInt:[PlaynCoreColor redWithInt:c]], [JavaLangInteger valueOfWithInt:[PlaynCoreColor greenWithInt:c]], [JavaLangInteger valueOfWithInt:[PlaynCoreColor blueWithInt:c]] ]];
}

+ (int)blendAdditiveWithInt:(int)c1
                    withInt:(int)c2
                  withFloat:(float)perc {
  return [PlaynCoreColor argbWithInt:[JavaLangMath minWithInt:[PlaynCoreColor alphaWithInt:c1] withInt:[PlaynCoreColor alphaWithInt:c2]] withInt:255 - [JavaLangMath minWithInt:(int) (255 - [PlaynCoreColor redWithInt:c1] + (255 - [PlaynCoreColor redWithInt:c2]) * perc) withInt:255] withInt:255 - [JavaLangMath minWithInt:(int) (255 - [PlaynCoreColor greenWithInt:c1] + (255 - [PlaynCoreColor greenWithInt:c2]) * perc) withInt:255] withInt:255 - [JavaLangMath minWithInt:(int) (255 - [PlaynCoreColor blueWithInt:c1] + (255 - [PlaynCoreColor blueWithInt:c2]) * perc) withInt:255]];
}

+ (int)hsvToRgbWithFloat:(float)hue
               withFloat:(float)saturation
               withFloat:(float)value {
  int h = (int) (hue * 6) % 6;
  float f = hue * 6 - h;
  float p = value * (1 - saturation);
  float q = value * (1 - f * saturation);
  float t = value * (1 - (1 - f) * saturation);
  switch (h) {
    case 0:
    return [TuxkidsTuxblocksCoreUtilsCanvasUtils rgbFloatToIntWithFloat:value withFloat:t withFloat:p];
    case 1:
    return [TuxkidsTuxblocksCoreUtilsCanvasUtils rgbFloatToIntWithFloat:q withFloat:value withFloat:p];
    case 2:
    return [TuxkidsTuxblocksCoreUtilsCanvasUtils rgbFloatToIntWithFloat:p withFloat:value withFloat:t];
    case 3:
    return [TuxkidsTuxblocksCoreUtilsCanvasUtils rgbFloatToIntWithFloat:p withFloat:q withFloat:value];
    case 4:
    return [TuxkidsTuxblocksCoreUtilsCanvasUtils rgbFloatToIntWithFloat:t withFloat:p withFloat:value];
    case 5:
    return [TuxkidsTuxblocksCoreUtilsCanvasUtils rgbFloatToIntWithFloat:value withFloat:p withFloat:q];
    default:
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Something went wrong when converting from HSV to RGB. Input was %f, %f, %f", hue, saturation, value]];
  }
}

+ (int)rgbFloatToIntWithFloat:(float)r
                    withFloat:(float)g
                    withFloat:(float)b {
  return [PlaynCoreColor rgbWithInt:(int) (255 * r) withInt:(int) (255 * g) withInt:(int) (255 * b)];
}

+ (id<PlaynCoreImage>)createStringWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)format
                                             withNSString:(NSString *)text
                                                  withInt:(int)color {
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) layoutTextWithNSString:text withPlaynCoreTextFormat:format];
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [TuxkidsTuxblocksCorePlayNObject graphics]) createImageWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width] withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) height]];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:color];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillTextWithPlaynCoreTextLayout:layout withFloat:0 withFloat:0];
  return image;
}

- (id)init {
  return [super init];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tuxkids/tuxblocks/core/utils/MultiList.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSObjectArray.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "tuxkids/tuxblocks/core/utils/MultiList.h"

@implementation TuxkidsTuxblocksCoreUtilsMultiList

@synthesize lists = lists_;

- (id)initWithJavaUtilListArray:(IOSObjectArray *)lists {
  if ((self = [super init])) {
    lists_ = [[JavaUtilArrayList alloc] init];
    {
      IOSObjectArray *a__ = lists;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        id<JavaUtilList> list = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        [((id<JavaUtilList>) nil_chk(self.lists)) addWithId:list];
      }
    }
  }
  return self;
}

- (int)size {
  int size = 0;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(lists_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilList> list = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      size += [((id<JavaUtilList>) nil_chk(list)) size];
    }
  }
  return size;
}

- (BOOL)isEmpty {
  return [self size] == 0;
}

- (BOOL)containsWithId:(id)o {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(lists_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilList> list = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([((id<JavaUtilList>) nil_chk(list)) containsWithId:o]) return YES;
    }
  }
  return NO;
}

- (BOOL)addWithJavaUtilList:(id<JavaUtilList>)e {
  return [((id<JavaUtilList>) nil_chk(lists_)) addWithId:e];
}

- (BOOL)removeWithJavaUtilList:(id<JavaUtilList>)o {
  return [((id<JavaUtilList>) nil_chk(lists_)) removeWithId:o];
}

- (BOOL)removeWithId:(id)o {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(lists_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilList> list = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([((id<JavaUtilList>) nil_chk(list)) removeWithId:o]) return YES;
    }
  }
  return NO;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(lists_)) clear];
}

- (id)getWithInt:(int)index {
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(lists_)) size]; i++) {
    id<JavaUtilList> list = [((id<JavaUtilList>) nil_chk(lists_)) getWithInt:i];
    if (index < [((id<JavaUtilList>) nil_chk(list)) size]) return [((id<JavaUtilList>) nil_chk(list)) getWithInt:index];
    index -= [((id<JavaUtilList>) nil_chk(list)) size];
  }
  @throw [[JavaLangIndexOutOfBoundsException alloc] init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TuxkidsTuxblocksCoreUtilsMultiList *typedCopy = (TuxkidsTuxblocksCoreUtilsMultiList *) copy;
  typedCopy.lists = lists_;
}

@end

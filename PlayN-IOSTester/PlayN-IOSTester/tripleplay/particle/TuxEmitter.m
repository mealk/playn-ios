//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tripleplay/particle/TuxEmitter.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/util/List.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/ImmediateLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Surface.h"
#import "tripleplay/particle/CanvasParticleRenderer.h"
#import "tripleplay/particle/GLStatus.h"
#import "tripleplay/particle/ParticleBuffer.h"
#import "tripleplay/particle/Particles.h"
#import "tripleplay/particle/TuxEmitter.h"

@implementation TripleplayParticleTuxEmitter

@synthesize myLayer = myLayer_;
@synthesize renderer = renderer_;
@synthesize now = now_;

- (id)initWithTripleplayParticleParticles:(TripleplayParticleParticles *)parts
                                  withInt:(int)maxParticles
                       withPlaynCoreImage:(id<PlaynCoreImage>)image {
  if ((self = [super initWithTripleplayParticleParticles:parts withInt:maxParticles withPlaynCoreImage:image])) {
    myLayer_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:[[TripleplayParticleTuxEmitter_$1 alloc] initWithTripleplayParticleTuxEmitter:self withPlaynCoreImage:image]];
    if (![TripleplayParticleGLStatus enabled]) {
      (void) [((id<PlaynCoreImmediateLayer>) NIL_CHK(layer_)) setVisibleWithBOOL:NO];
      renderer_ = [[TripleplayParticleCanvasParticleRenderer alloc] initWithPlaynCoreImage:image];
    }
    else {
      renderer_ = nil;
    }
  }
  return self;
}

- (void)updateWithFloat:(float)now
              withFloat:(float)dt {
  [super updateWithFloat:now withFloat:dt];
  (void) [((id<PlaynCoreImmediateLayer>) NIL_CHK(myLayer_)) setTranslationWithFloat:[((id<PlaynCoreImmediateLayer>) NIL_CHK(layer_)) tx] withFloat:[((id<PlaynCoreImmediateLayer>) NIL_CHK(layer_)) ty]];
  self.now = now;
}

- (void)destroy {
  [super destroy];
  [((id<PlaynCoreImmediateLayer>) NIL_CHK(myLayer_)) destroy];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleTuxEmitter *typedCopy = (TripleplayParticleTuxEmitter *) copy;
  typedCopy.myLayer = myLayer_;
  typedCopy.renderer = renderer_;
  typedCopy.now = now_;
}

@end
@implementation TripleplayParticleTuxEmitter_$1

@synthesize this$0 = this$0_;
@synthesize val$image = val$image_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface {
  if (this$0_.renderer != nil) [this$0_.renderer renderWithPlaynCoreSurface:surface withTripleplayParticleParticleBuffer:this$0_._buffer withPlaynCoreImage:val$image_ withJavaUtilList:this$0_.effectors withFloat:this$0_.now];
}

- (id)initWithTripleplayParticleTuxEmitter:(TripleplayParticleTuxEmitter *)outer$
                        withPlaynCoreImage:(id<PlaynCoreImage>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$image_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleTuxEmitter_$1 *typedCopy = (TripleplayParticleTuxEmitter_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$image = val$image_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tripleplay/particle/TuxParticles.java
//
//  Created by Thomas on 7/26/13.
//

#include "playn/core/GroupLayer.h"
#include "playn/core/Image.h"
#include "playn/core/ImmediateLayer.h"
#include "react/Connection.h"
#include "react/Signal.h"
#include "tripleplay/particle/Emitter.h"
#include "tripleplay/particle/Particles.h"
#include "tripleplay/particle/TuxEmitter.h"
#include "tripleplay/particle/TuxParticles.h"

@implementation TripleplayParticleTuxParticles

- (TripleplayParticleEmitter *)createEmitterWithInt:(int)maxParticles
                                 withPlaynCoreImage:(id<PlaynCoreImage>)image
                            withPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)onLayer {
  TripleplayParticleTuxEmitter *emitter = [[TripleplayParticleTuxEmitter alloc] initWithTripleplayParticleParticles:self withInt:maxParticles withPlaynCoreImage:image];
  ((TripleplayParticleTuxEmitter *) nil_chk(emitter))._conn = [((ReactSignal *) nil_chk(_onPaint_)) connectWithReactSlot:[[TripleplayParticleTuxParticles_$1 alloc] initWithTripleplayParticleTuxEmitter:emitter]];
  [((id<PlaynCoreGroupLayer>) nil_chk(onLayer)) addWithPlaynCoreLayer:((TripleplayParticleTuxEmitter *) nil_chk(emitter)).layer];
  [((id<PlaynCoreGroupLayer>) nil_chk(onLayer)) addWithPlaynCoreLayer:((TripleplayParticleTuxEmitter *) nil_chk(emitter)).myLayer];
  return emitter;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayParticleTuxParticles_$1

@synthesize val$emitter = val$emitter_;

- (void)onEmitWithId:(TripleplayParticleParticles_Now *)now {
  [((TripleplayParticleTuxEmitter *) nil_chk(val$emitter_)) updateWithFloat:((TripleplayParticleParticles_Now *) nil_chk(now)).time withFloat:((TripleplayParticleParticles_Now *) nil_chk(now)).dt];
}

- (id)initWithTripleplayParticleTuxEmitter:(TripleplayParticleTuxEmitter *)capture$0 {
  if ((self = [super init])) {
    val$emitter_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleTuxParticles_$1 *typedCopy = (TripleplayParticleTuxParticles_$1 *) copy;
  typedCopy.val$emitter = val$emitter_;
}

@end

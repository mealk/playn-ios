//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/tripleplay/particle/CanvasParticleRenderer.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/Color.h"
#include "playn/core/Image.h"
#include "playn/core/Layer.h"
#include "playn/core/Surface.h"
#include "tripleplay/particle/CanvasParticleRenderer.h"
#include "tripleplay/particle/Effector.h"
#include "tripleplay/particle/ParticleBuffer.h"
#include "tripleplay/particle/init/ColorEffector.h"
#include "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#include "tuxkids/tuxblocks/core/PlayNObject.h"

@implementation TripleplayParticleCanvasParticleRenderer

@synthesize imageLayer = imageLayer_;

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  if ((self = [super init])) {
    imageLayer_ = [[TuxkidsTuxblocksCoreImageLayerTintable alloc] initWithPlaynCoreImage:image];
    [TuxkidsTuxblocksCorePlayNObject centerImageLayerWithTuxkidsTuxblocksCoreImageLayerTintable:imageLayer_];
  }
  return self;
}

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface
withTripleplayParticleParticleBuffer:(TripleplayParticleParticleBuffer *)buffer
                withPlaynCoreImage:(id<PlaynCoreImage>)image
                  withJavaUtilList:(id<JavaUtilList>)effectors
                         withFloat:(float)now {
  TripleplayParticleInitColorEffector *colorEffector = nil;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(effectors)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TripleplayParticleEffector *effector = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([effector isKindOfClass:[TripleplayParticleInitColorEffector class]]) colorEffector = (TripleplayParticleInitColorEffector *) effector;
    }
  }
  int pp = 0, ppos = 0, rendered = 0;
  IOSFloatArray *data = ((TripleplayParticleParticleBuffer *) nil_chk(buffer)).data;
  for (int aa = 0; aa < (int) [((IOSIntArray *) nil_chk(((TripleplayParticleParticleBuffer *) nil_chk(buffer)).alive)) count]; aa++) {
    int live = [((IOSIntArray *) nil_chk(((TripleplayParticleParticleBuffer *) nil_chk(buffer)).alive)) intAtIndex:aa], mask = 1;
    for (int end = pp + 32; pp < end; pp++, ppos += TripleplayParticleParticleBuffer_NUM_FIELDS, mask <<= 1) {
      if ((live & mask) == 0) continue;
      if ([((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_ALPHA] == 0) continue;
      (void) [((id<PlaynCoreSurface>) nil_chk(surface)) save];
      (void) [((id<PlaynCoreSurface>) nil_chk(surface)) transformWithFloat:[((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_M00] withFloat:[((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_M01] withFloat:[((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_M10] withFloat:[((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_M11] withFloat:[((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_TX] withFloat:[((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_TY]];
      if (colorEffector != nil) {
        [((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(imageLayer_)) setTintWithInt:[colorEffector startColor] withInt:[colorEffector endColor] withFloat:1 - [colorEffector getPercWithFloatArray:data withInt:ppos withFloat:now]];
      }
      else {
        [((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(imageLayer_)) setTintWithInt:[PlaynCoreColor rgbWithInt:(int) (255 * [((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_RED]) withInt:(int) (255 * [((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_GREEN]) withInt:(int) (255 * [((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_BLUE])]];
      }
      [((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(imageLayer_)) setAlphaWithFloat:[((IOSFloatArray *) nil_chk(data)) floatAtIndex:ppos + TripleplayParticleParticleBuffer_ALPHA]];
      (void) [((id<PlaynCoreSurface>) nil_chk(surface)) drawLayerWithPlaynCoreLayer:[((TuxkidsTuxblocksCoreImageLayerTintable *) nil_chk(imageLayer_)) layer]];
      rendered++;
      (void) [((id<PlaynCoreSurface>) nil_chk(surface)) restore];
    }
  }
  ((TripleplayParticleParticleBuffer *) nil_chk(buffer))._live = rendered;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleCanvasParticleRenderer *typedCopy = (TripleplayParticleCanvasParticleRenderer *) copy;
  typedCopy.imageLayer = imageLayer_;
}

@end

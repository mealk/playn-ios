//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/Menu.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Key.h"
#include "playn/core/Keyboard.h"
#include "playn/core/PlayN.h"
#include "playn/core/Pointer.h"
#include "playn/core/util/Clock.h"
#include "playn/showcase/core/Demo.h"
#include "playn/showcase/core/Menu.h"
#include "playn/showcase/core/Showcase.h"
#include "react/Connection.h"
#include "react/SignalView.h"
#include "tripleplay/ui/Background.h"
#include "tripleplay/ui/Button.h"
#include "tripleplay/ui/Element.h"
#include "tripleplay/ui/Group.h"
#include "tripleplay/ui/Interface.h"
#include "tripleplay/ui/Label.h"
#include "tripleplay/ui/Root.h"
#include "tripleplay/ui/SimpleStyles.h"
#include "tripleplay/ui/Style.h"
#include "tripleplay/ui/Stylesheet.h"
#include "tripleplay/ui/layout/AxisLayout.h"

@implementation PlaynShowcaseCoreMenu

@synthesize keyListener = keyListener_;
@synthesize showcase = showcase_;
@synthesize iface = iface_;
@synthesize layer = layer_;
@synthesize _clock = _clock_;

- (id)initWithPlaynShowcaseCoreShowcase:(PlaynShowcaseCoreShowcase *)showcase {
  if ((self = [super init])) {
    keyListener_ = [[PlaynShowcaseCoreMenu_$1 alloc] initWithPlaynShowcaseCoreMenu:self];
    _clock_ = [[PlaynCoreUtilClock_Source alloc] initWithInt:PlaynShowcaseCoreDemo_UPDATE_RATE];
    self.showcase = showcase;
  }
  return self;
}

- (NSString *)name {
  return @"Menu";
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  layer_ = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) nil_chk([((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer])) addWithPlaynCoreLayer:layer_];
  iface_ = [[TripleplayUiInterface alloc] init];
  TripleplayUiRoot *root = [((TripleplayUiInterface *) nil_chk(iface_)) createRootWithTripleplayUiLayout:[((TripleplayUiLayoutAxisLayout_Vertical *) nil_chk([TripleplayUiLayoutAxisLayout vertical])) gapWithInt:15] withTripleplayUiStylesheet:[TripleplayUiSimpleStyles newSheet]];
  (void) [((TripleplayUiRoot *) nil_chk(root)) setSizeWithFloat:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) width] withFloat:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) height]];
  (void) [((TripleplayUiRoot *) nil_chk(root)) addStylesWithTripleplayUiStyle_BindingArray:[IOSObjectArray arrayWithObjects:(id[]){ [((TripleplayUiStyle *) nil_chk([TripleplayUiStyle BACKGROUND])) isWithId:[((TripleplayUiBackground *) nil_chk([TripleplayUiBackground solidWithInt:(int) 0xFF99CCFF])) insetWithFloat:5]] } count:1 type:[IOSClass classWithClass:[TripleplayUiStyle_Binding class]]]];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer_)) addWithPlaynCoreLayer:((TripleplayUiRoot *) nil_chk(root)).layer];
  TripleplayUiGroup *buttons;
  (void) [((TripleplayUiRoot *) nil_chk(root)) addWithTripleplayUiElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [[TripleplayUiLabel alloc] initWithNSString:@"PlayN Demos:"], buttons = [[TripleplayUiGroup alloc] initWithTripleplayUiLayout:[((TripleplayUiLayoutAxisLayout_Vertical *) nil_chk([TripleplayUiLayoutAxisLayout vertical])) offStretch]], [[TripleplayUiLabel alloc] initWithNSString:@"ESC/BACK key or two-finger tap returns to menu from demo"], [[TripleplayUiLabel alloc] initWithNSString:[NSString stringWithFormat:@"(renderer: %@)", [[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) getClass] getName]]], [((TripleplayUiLabel *) [[TripleplayUiLabel alloc] initWithNSString:[NSString stringWithFormat:@"(device: %@)", @"iOS"]]) addStylesWithTripleplayUiStyle_BindingArray:[IOSObjectArray arrayWithObjects:(id[]){ [((TripleplayUiStyle_Flag *) nil_chk([TripleplayUiStyle TEXT_WRAP])) isWithId:[JavaLangBoolean valueOfWithBOOL:YES]] } count:1 type:[IOSClass classWithClass:[TripleplayUiStyle_Binding class]]]] } count:5 type:[IOSClass classWithClass:[TripleplayUiElement class]]]];
  int key = 1;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(((PlaynShowcaseCoreShowcase *) nil_chk(showcase_)).demos)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      PlaynShowcaseCoreDemo *demo = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      TripleplayUiButton *button = [[TripleplayUiButton alloc] initWithNSString:[NSString stringWithFormat:@"%d - %@", key++, [((PlaynShowcaseCoreDemo *) nil_chk(demo)) name]]];
      (void) [((TripleplayUiGroup *) nil_chk(buttons)) addWithTripleplayUiElementArray:[IOSObjectArray arrayWithObjects:(id[]){ button } count:1 type:[IOSClass classWithClass:[TripleplayUiElement class]]]];
      (void) [((id<ReactSignalView>) nil_chk([((TripleplayUiButton *) nil_chk(button)) clicked])) connectWithReactSlot:[[PlaynShowcaseCoreMenu_$2 alloc] initWithPlaynShowcaseCoreMenu:self withPlaynShowcaseCoreDemo:demo]];
    }
  }
}

- (void)shutdown {
  if (iface_ != nil) {
    [((id<PlaynCorePointer>) nil_chk([PlaynCorePlayN pointer])) setListenerWithPlaynCorePointer_Listener:nil];
    iface_ = nil;
  }
  [((id<PlaynCoreGroupLayer>) nil_chk(layer_)) destroy];
  layer_ = nil;
}

- (void)updateWithInt:(int)delta {
  [((PlaynCoreUtilClock_Source *) nil_chk(_clock_)) updateWithInt:delta];
  if (iface_ != nil) {
    [iface_ updateWithInt:delta];
  }
}

- (void)paintWithFloat:(float)alpha {
  [((PlaynCoreUtilClock_Source *) nil_chk(_clock_)) paintWithFloat:alpha];
  if (iface_ != nil) {
    [iface_ paintWithPlaynCoreUtilClock:_clock_];
  }
}

- (id<PlaynCoreKeyboard_Listener>)keyboardListener {
  return keyListener_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreMenu *typedCopy = (PlaynShowcaseCoreMenu *) copy;
  typedCopy.keyListener = keyListener_;
  typedCopy.showcase = showcase_;
  typedCopy.iface = iface_;
  typedCopy.layer = layer_;
  typedCopy._clock = _clock_;
}

@end
@implementation PlaynShowcaseCoreMenu_$1

@synthesize this$0 = this$0_;

- (void)onKeyDownWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
  int demoIndex = [((PlaynCoreKeyEnum *) nil_chk([((id<PlaynCoreKeyboard_Event>) nil_chk(event)) key])) ordinal] - [((PlaynCoreKeyEnum *) nil_chk([PlaynCoreKeyEnum K1])) ordinal];
  if (demoIndex >= 0 && demoIndex < [((id<JavaUtilList>) nil_chk(((PlaynShowcaseCoreShowcase *) nil_chk(this$0_.showcase)).demos)) size]) {
    [((PlaynShowcaseCoreShowcase *) nil_chk(this$0_.showcase)) activateDemoWithPlaynShowcaseCoreDemo:[((id<JavaUtilList>) nil_chk(((PlaynShowcaseCoreShowcase *) nil_chk(this$0_.showcase)).demos)) getWithInt:demoIndex]];
  }
}

- (id)initWithPlaynShowcaseCoreMenu:(PlaynShowcaseCoreMenu *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreMenu_$1 *typedCopy = (PlaynShowcaseCoreMenu_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation PlaynShowcaseCoreMenu_$2

@synthesize this$0 = this$0_;
@synthesize val$demo = val$demo_;

- (void)onEmit {
  [((PlaynShowcaseCoreShowcase *) nil_chk(this$0_.showcase)) activateDemoWithPlaynShowcaseCoreDemo:val$demo_];
}

- (id)initWithPlaynShowcaseCoreMenu:(PlaynShowcaseCoreMenu *)outer$
          withPlaynShowcaseCoreDemo:(PlaynShowcaseCoreDemo *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$demo_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreMenu_$2 *typedCopy = (PlaynShowcaseCoreMenu_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$demo = val$demo_;
}

@end

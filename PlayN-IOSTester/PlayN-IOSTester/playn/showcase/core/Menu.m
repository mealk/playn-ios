//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/Menu.java
//
//  Created by Thomas on 7/15/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Boolean.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Key.h"
#import "playn/core/Keyboard.h"
#import "playn/core/PlayN.h"
#import "playn/core/Pointer.h"
#import "playn/core/util/Clock.h"
#import "playn/showcase/core/Demo.h"
#import "playn/showcase/core/Menu.h"
#import "playn/showcase/core/Showcase.h"
#import "react/Connection.h"
#import "react/SignalView.h"
#import "tripleplay/ui/Background.h"
#import "tripleplay/ui/Button.h"
#import "tripleplay/ui/Group.h"
#import "tripleplay/ui/Interface.h"
#import "tripleplay/ui/Label.h"
#import "tripleplay/ui/Root.h"
#import "tripleplay/ui/SimpleStyles.h"
#import "tripleplay/ui/Style.h"
#import "tripleplay/ui/Stylesheet.h"
#import "tripleplay/ui/layout/AxisLayout.h"

@implementation PlaynShowcaseCoreMenu

@synthesize keyListener = keyListener_;
@synthesize showcase = showcase_;
@synthesize iface = iface_;
@synthesize layer = layer_;
@synthesize _clock = _clock_;

- (id)initWithPlaynShowcaseCoreShowcase:(PlaynShowcaseCoreShowcase *)showcase {
  if ((self = [super init])) {
    keyListener_ = [[PlaynShowcaseCoreMenu_$1 alloc] initWithPlaynShowcaseCoreMenu:self];
    _clock_ = [[PlaynCoreUtilClock_Source alloc] initWithInt:PlaynShowcaseCoreDemo_UPDATE_RATE];
    self.showcase = showcase;
  }
  return self;
}

- (NSString *)name {
  return @"Menu";
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  layer_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) rootLayer]) addWithPlaynCoreLayer:layer_];
  iface_ = [[TripleplayUiInterface alloc] init];
  TripleplayUiRoot *root = [((TripleplayUiInterface *) NIL_CHK(iface_)) createRootWithTripleplayUiLayout:[[TripleplayUiLayoutAxisLayout vertical] gapWithInt:15] withTripleplayUiStylesheet:[TripleplayUiSimpleStyles newSheet]];
  (void) [((TripleplayUiRoot *) NIL_CHK(root)) setSizeWithFloat:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) width] withFloat:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) height]];
  (void) [((TripleplayUiRoot *) NIL_CHK(root)) addStylesWithTripleplayUiStyle_BindingArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiStyle_Binding class]] count:1, ((TripleplayUiStyle_Binding *) [((TripleplayUiStyle *) NIL_CHK([TripleplayUiStyle BACKGROUND])) isWithId:[[TripleplayUiBackground solidWithInt:(int) 0xFF99CCFF] insetWithFloat:5]]) ]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:((TripleplayUiRoot *) NIL_CHK(root)).layer];
  TripleplayUiGroup *buttons;
  (void) [((TripleplayUiRoot *) NIL_CHK(root)) addWithTripleplayUiElementArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiElement class]] count:5, [[TripleplayUiLabel alloc] initWithNSString:@"PlayN Demos:"], buttons = [[TripleplayUiGroup alloc] initWithTripleplayUiLayout:[[TripleplayUiLayoutAxisLayout vertical] offStretch]], [[TripleplayUiLabel alloc] initWithNSString:@"ESC/BACK key or two-finger tap returns to menu from demo"], [[TripleplayUiLabel alloc] initWithNSString:[NSString stringWithFormat:@"(renderer: %@)", [[(id<JavaObject>) [PlaynCorePlayN graphics] getClass] getName]]], ((TripleplayUiLabel *) [[[TripleplayUiLabel alloc] initWithNSString:[NSString stringWithFormat:@"(device: %@)", @"iOS"]] addStylesWithTripleplayUiStyle_BindingArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiStyle_Binding class]] count:1, ((TripleplayUiStyle_Binding *) [((TripleplayUiStyle_Flag *) NIL_CHK([TripleplayUiStyle TEXT_WRAP])) isWithId:[JavaLangBoolean valueOfWithBOOL:YES]]) ]]) ]];
  int key = 1;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(showcase_.demos)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      PlaynShowcaseCoreDemo *demo = ((PlaynShowcaseCoreDemo *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      TripleplayUiButton *button = [[TripleplayUiButton alloc] initWithNSString:[NSString stringWithFormat:@"%d - %@", key++, [((PlaynShowcaseCoreDemo *) NIL_CHK(demo)) name]]];
      (void) [((TripleplayUiGroup *) NIL_CHK(buttons)) addWithTripleplayUiElementArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiElement class]] count:1, button ]];
      (void) [((id<ReactSignalView>) [((TripleplayUiButton *) NIL_CHK(button)) clicked]) connectWithReactSlot:[[PlaynShowcaseCoreMenu_$2 alloc] initWithPlaynShowcaseCoreMenu:self withPlaynShowcaseCoreDemo:demo]];
    }
  }
}

- (void)shutdown {
  if (iface_ != nil) {
    [((id<PlaynCorePointer>) [PlaynCorePlayN pointer]) setListenerWithPlaynCorePointer_Listener:nil];
    iface_ = nil;
  }
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) destroy];
  layer_ = nil;
}

- (void)updateWithInt:(int)delta {
  [((PlaynCoreUtilClock_Source *) NIL_CHK(_clock_)) updateWithInt:delta];
  if (iface_ != nil) {
    [iface_ updateWithInt:delta];
  }
}

- (void)paintWithFloat:(float)alpha {
  [((PlaynCoreUtilClock_Source *) NIL_CHK(_clock_)) paintWithFloat:alpha];
  if (iface_ != nil) {
    [iface_ paintWithPlaynCoreUtilClock:_clock_];
  }
}

- (id<PlaynCoreKeyboard_Listener>)keyboardListener {
  return keyListener_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreMenu *typedCopy = (PlaynShowcaseCoreMenu *) copy;
  typedCopy.keyListener = keyListener_;
  typedCopy.showcase = showcase_;
  typedCopy.iface = iface_;
  typedCopy.layer = layer_;
  typedCopy._clock = _clock_;
}

@end
@implementation PlaynShowcaseCoreMenu_$1

@synthesize this$0 = this$0_;

- (void)onKeyDownWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
  int demoIndex = [[((id<PlaynCoreKeyboard_Event>) NIL_CHK(event)) key] ordinal] - [((PlaynCoreKeyEnum *) NIL_CHK([PlaynCoreKeyEnum K1])) ordinal];
  if (demoIndex >= 0 && demoIndex < [((id<JavaUtilList>) NIL_CHK(this$0_.showcase.demos)) size]) {
    [((PlaynShowcaseCoreShowcase *) NIL_CHK(this$0_.showcase)) activateDemoWithPlaynShowcaseCoreDemo:((PlaynShowcaseCoreDemo *) [((id<JavaUtilList>) NIL_CHK(this$0_.showcase.demos)) getWithInt:demoIndex])];
  }
}

- (id)initWithPlaynShowcaseCoreMenu:(PlaynShowcaseCoreMenu *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreMenu_$1 *typedCopy = (PlaynShowcaseCoreMenu_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation PlaynShowcaseCoreMenu_$2

@synthesize this$0 = this$0_;
@synthesize val$demo = val$demo_;

- (void)onEmit {
  [((PlaynShowcaseCoreShowcase *) NIL_CHK(this$0_.showcase)) activateDemoWithPlaynShowcaseCoreDemo:val$demo_];
}

- (id)initWithPlaynShowcaseCoreMenu:(PlaynShowcaseCoreMenu *)outer$
          withPlaynShowcaseCoreDemo:(PlaynShowcaseCoreDemo *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$demo_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreMenu_$2 *typedCopy = (PlaynShowcaseCoreMenu_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$demo = val$demo_;
}

@end

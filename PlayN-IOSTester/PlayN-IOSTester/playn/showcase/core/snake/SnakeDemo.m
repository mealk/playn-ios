//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/snake/SnakeDemo.java
//
//  Created by Thomas on 7/15/13.
//

#import "IOSObjectArray.h"
#import "playn/core/Assets.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/showcase/core/snake/SnakeDemo.h"
#import "pythagoras/f/Transform.h"

@implementation PlaynShowcaseCoreSnakeSnakeDemo

@synthesize layer = layer_;
@synthesize segments = segments_;
@synthesize dx = dx_;
@synthesize dy = dy_;
@synthesize dd = dd_;

- (NSString *)name {
  return @"Snake";
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  layer_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) rootLayer]) addWithPlaynCoreLayer:layer_];
  id<PlaynCoreImage> bgImage = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:@"sprites/bg.png"];
  id<PlaynCoreImageLayer> bgLayer = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:bgImage];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(bgLayer)) setDepthWithFloat:-1];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:bgLayer];
  id<PlaynCoreImage> segImage = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:@"sprites/pea.png"];
  segments_ = [[IOSObjectArray alloc] initWithLength:25 type:[IOSClass classWithProtocol:@protocol(PlaynCoreImageLayer)]];
  for (int ii = 0; ii < (int) [((IOSObjectArray *) NIL_CHK(segments_)) count]; ii++) {
    [((IOSObjectArray *) NIL_CHK(segments_)) replaceObjectAtIndex:ii withObject:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:segImage]];
    (void) [((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(segments_)) objectAtIndex:ii]) setDepthWithFloat:50];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(segments_)) objectAtIndex:ii])];
  }
}

- (void)shutdown {
  segments_ = nil;
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) destroy];
  layer_ = nil;
}

- (void)updateWithInt:(int)delta {
  for (int ii = (int) [((IOSObjectArray *) NIL_CHK(segments_)) count] - 1; ii > 0; ii--) {
    id<PlaynCoreImageLayer> cur = ((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(segments_)) objectAtIndex:ii]), prev = ((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(segments_)) objectAtIndex:ii - 1]);
    id<PythagorasFTransform> t1 = [((id<PlaynCoreImageLayer>) NIL_CHK(cur)) transform], t2 = [((id<PlaynCoreImageLayer>) NIL_CHK(prev)) transform];
    (void) [((id<PythagorasFTransform>) NIL_CHK(t1)) setTxWithFloat:[((id<PythagorasFTransform>) NIL_CHK(t2)) tx]];
    (void) [((id<PythagorasFTransform>) NIL_CHK(t1)) setTyWithFloat:[((id<PythagorasFTransform>) NIL_CHK(t2)) ty]];
    (void) [((id<PythagorasFTransform>) NIL_CHK(t1)) setUniformScaleWithFloat:[((id<PythagorasFTransform>) NIL_CHK(t2)) uniformScale]];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(cur)) setDepthWithFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(prev)) depth]];
  }
  id<PlaynCoreImageLayer> first = ((id<PlaynCoreImageLayer>) [((IOSObjectArray *) NIL_CHK(segments_)) objectAtIndex:0]);
  id<PythagorasFTransform> t = [((id<PlaynCoreImageLayer>) NIL_CHK(first)) transform];
  float nx = [((id<PythagorasFTransform>) NIL_CHK(t)) tx] + dx_, ny = [((id<PythagorasFTransform>) NIL_CHK(t)) ty] + dy_, nd = [((id<PlaynCoreImageLayer>) NIL_CHK(first)) depth] + dd_;
  if (nx < 0 || nx > [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) width]) {
    dx_ *= -1;
    nx += dx_;
  }
  if (ny < 0 || ny > [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) height]) {
    dy_ *= -1;
    ny += dy_;
  }
  if (nd < 25 || nd > 125) {
    dd_ *= -1;
    nd += dd_;
  }
  (void) [((id<PythagorasFTransform>) NIL_CHK(t)) setTxWithFloat:nx];
  (void) [((id<PythagorasFTransform>) NIL_CHK(t)) setTyWithFloat:ny];
  (void) [((id<PythagorasFTransform>) NIL_CHK(t)) setUniformScaleWithFloat:nd / 50.0f];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(first)) setDepthWithFloat:nd];
}

- (id)init {
  if ((self = [super init])) {
    dx_ = 10;
    dy_ = 5;
    dd_ = 1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSnakeSnakeDemo *typedCopy = (PlaynShowcaseCoreSnakeSnakeDemo *) copy;
  typedCopy.layer = layer_;
  typedCopy.segments = segments_;
  typedCopy.dx = dx_;
  typedCopy.dy = dy_;
  typedCopy.dd = dd_;
}

@end

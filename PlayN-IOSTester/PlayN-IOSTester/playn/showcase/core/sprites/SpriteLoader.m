//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/sprites/SpriteLoader.java
//
//  Created by Thomas on 7/15/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Throwable.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Asserts.h"
#import "playn/core/AssetWatcher.h"
#import "playn/core/Assets.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Json.h"
#import "playn/core/PlayN.h"
#import "playn/showcase/core/sprites/Sprite.h"
#import "playn/showcase/core/sprites/SpriteImage.h"
#import "playn/showcase/core/sprites/SpriteLoader.h"

@implementation PlaynShowcaseCoreSpritesSpriteLoader

- (id)init {
  return [super init];
}

+ (PlaynShowcaseCoreSpritesSprite *)getSpriteWithNSString:(NSString *)imagePath
                                             withNSString:(NSString *)jsonPath {
  id<PlaynCoreImage> image = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:imagePath];
  IOSObjectArray *images = [IOSObjectArray arrayWithObjects:(id[]){ image } count:1 type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
  id<PlaynCoreImage> tempImage = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:1 withFloat:1];
  PlaynShowcaseCoreSpritesSprite *sprite = [[PlaynShowcaseCoreSpritesSprite alloc] initWithPlaynCoreImageLayer:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:tempImage]];
  [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getTextWithNSString:jsonPath withPlaynCoreUtilCallback:[[PlaynShowcaseCoreSpritesSpriteLoader_$1 alloc] initWithPlaynCoreImageArray:images withPlaynShowcaseCoreSpritesSprite:sprite]];
  [((id<PlaynCoreImage>) NIL_CHK(image)) addCallbackWithPlaynCoreUtilCallback:[[PlaynShowcaseCoreSpritesSpriteLoader_$2 alloc] initWithPlaynShowcaseCoreSpritesSprite:sprite]];
  return sprite;
}

+ (PlaynShowcaseCoreSpritesSprite *)getSpriteWithNSString:(NSString *)jsonPath {
  id<PlaynCoreImage> tempImage = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:1 withFloat:1];
  PlaynShowcaseCoreSpritesSprite *sprite = [[PlaynShowcaseCoreSpritesSprite alloc] initWithPlaynCoreImageLayer:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:tempImage]];
  PlaynCoreAssetWatcher *watcher = [[PlaynCoreAssetWatcher alloc] initWithPlaynCoreAssetWatcher_Listener:[[PlaynShowcaseCoreSpritesSpriteLoader_$3 alloc] initWithPlaynShowcaseCoreSpritesSprite:sprite]];
  [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getTextWithNSString:jsonPath withPlaynCoreUtilCallback:[[PlaynShowcaseCoreSpritesSpriteLoader_$4 alloc] initWithPlaynShowcaseCoreSpritesSprite:sprite withPlaynCoreAssetWatcher:watcher]];
  return sprite;
}

+ (void)parseJsonWithPlaynCoreImageArray:(IOSObjectArray *)images
      withPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)sprite
                            withNSString:(NSString *)json {
  id<PlaynCoreJson_Object> document = [((id<PlaynCoreJson>) [PlaynCorePlayN json]) parseWithNSString:json];
  if (images == nil || (int) [((IOSObjectArray *) NIL_CHK(images)) count] == 0) {
    id<PlaynCoreJson_Array> urls = [((id<PlaynCoreJson_Object>) NIL_CHK(document)) getArrayWithNSString:@"urls"];
    (void) [PlaynCoreAsserts checkNotNullWithId:urls withId:@"No urls provided for sprite images"];
    images = [[IOSObjectArray alloc] initWithLength:[((id<PlaynCoreJson_Array>) NIL_CHK(urls)) length] type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
    for (int i = 0; i < [((id<PlaynCoreJson_Array>) NIL_CHK(urls)) length]; i++) {
      [((IOSObjectArray *) NIL_CHK(images)) replaceObjectAtIndex:i withObject:[((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[((id<PlaynCoreJson_Array>) NIL_CHK(urls)) getStringWithInt:i]]];
    }
  }
  id<PlaynCoreJson_Array> spriteImages = [((id<PlaynCoreJson_Object>) NIL_CHK(document)) getArrayWithNSString:@"sprites"];
  for (int i = 0; i < [((id<PlaynCoreJson_Array>) NIL_CHK(spriteImages)) length]; i++) {
    id<PlaynCoreJson_Object> jsonSpriteImage = [((id<PlaynCoreJson_Array>) NIL_CHK(spriteImages)) getObjectWithInt:i];
    NSString *id_ = [((id<PlaynCoreJson_Object>) NIL_CHK(jsonSpriteImage)) getStringWithNSString:@"id"];
    int imageId = [((id<PlaynCoreJson_Object>) NIL_CHK(jsonSpriteImage)) getIntWithNSString:@"url"];
    [PlaynCoreAsserts checkElementIndexWithInt:imageId withInt:(int) [((IOSObjectArray *) NIL_CHK(images)) count] withNSString:@"URL must be an index into the URLs array"];
    int x = [((id<PlaynCoreJson_Object>) NIL_CHK(jsonSpriteImage)) getIntWithNSString:@"x"];
    int y = [((id<PlaynCoreJson_Object>) NIL_CHK(jsonSpriteImage)) getIntWithNSString:@"y"];
    int width = [((id<PlaynCoreJson_Object>) NIL_CHK(jsonSpriteImage)) getIntWithNSString:@"w"];
    int height = [((id<PlaynCoreJson_Object>) NIL_CHK(jsonSpriteImage)) getIntWithNSString:@"h"];
    PlaynShowcaseCoreSpritesSpriteImage *spriteImage = [[PlaynShowcaseCoreSpritesSpriteImage alloc] initWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(images)) objectAtIndex:imageId]) withInt:x withInt:y withInt:width withInt:height];
    [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(sprite)) addSpriteImageWithNSString:id_ withPlaynShowcaseCoreSpritesSpriteImage:spriteImage];
  }
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$1

@synthesize val$images = val$images_;
@synthesize val$sprite = val$sprite_;

- (void)onSuccessWithId:(NSString *)json {
  @try {
    [PlaynShowcaseCoreSpritesSpriteLoader parseJsonWithPlaynCoreImageArray:val$images_ withPlaynShowcaseCoreSpritesSprite:val$sprite_ withNSString:json];
  }
  @catch (JavaLangThrowable *err) {
    [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) errorWithJavaLangThrowable:err];
    return;
  }
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) doneLoadingData];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)err {
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) errorWithJavaLangThrowable:err];
}

- (id)initWithPlaynCoreImageArray:(IOSObjectArray *)capture$0
withPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$1 {
  if ((self = [super init])) {
    val$images_ = capture$0;
    val$sprite_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$1 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$1 *) copy;
  typedCopy.val$images = val$images_;
  typedCopy.val$sprite = val$sprite_;
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$2

@synthesize val$sprite = val$sprite_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)resource {
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) doneLoadingImages];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)err {
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) errorWithJavaLangThrowable:err];
}

- (id)initWithPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$0 {
  if ((self = [super init])) {
    val$sprite_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$2 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$2 *) copy;
  typedCopy.val$sprite = val$sprite_;
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$3

@synthesize val$sprite = val$sprite_;

- (void)done {
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) doneLoadingImages];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) errorWithJavaLangThrowable:e];
}

- (id)initWithPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$0 {
  if ((self = [super init])) {
    val$sprite_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$3 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$3 *) copy;
  typedCopy.val$sprite = val$sprite_;
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$4

@synthesize val$sprite = val$sprite_;
@synthesize val$watcher = val$watcher_;

- (void)onSuccessWithId:(NSString *)json {
  @try {
    [PlaynShowcaseCoreSpritesSpriteLoader parseJsonWithPlaynCoreImageArray:nil withPlaynShowcaseCoreSpritesSprite:val$sprite_ withNSString:json];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [[((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) spriteImages] iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        PlaynShowcaseCoreSpritesSpriteImage *spriteImage = ((PlaynShowcaseCoreSpritesSpriteImage *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((PlaynCoreAssetWatcher *) NIL_CHK(val$watcher_)) addWithPlaynCoreImage:[((PlaynShowcaseCoreSpritesSpriteImage *) NIL_CHK(spriteImage)) image]];
      }
    }
    [((PlaynCoreAssetWatcher *) NIL_CHK(val$watcher_)) start];
  }
  @catch (JavaLangThrowable *err) {
    [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) errorWithJavaLangThrowable:err];
    return;
  }
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) doneLoadingData];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)err {
  [((PlaynShowcaseCoreSpritesSprite *) NIL_CHK(val$sprite_)) errorWithJavaLangThrowable:err];
}

- (id)initWithPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$0
                   withPlaynCoreAssetWatcher:(PlaynCoreAssetWatcher *)capture$1 {
  if ((self = [super init])) {
    val$sprite_ = capture$0;
    val$watcher_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$4 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$4 *) copy;
  typedCopy.val$sprite = val$sprite_;
  typedCopy.val$watcher = val$watcher_;
}

@end

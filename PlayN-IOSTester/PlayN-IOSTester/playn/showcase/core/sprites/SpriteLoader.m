//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/sprites/SpriteLoader.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/Asserts.h"
#include "playn/core/AssetWatcher.h"
#include "playn/core/Assets.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Graphics.h"
#include "playn/core/Image.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Json.h"
#include "playn/core/PlayN.h"
#include "playn/showcase/core/sprites/Sprite.h"
#include "playn/showcase/core/sprites/SpriteImage.h"
#include "playn/showcase/core/sprites/SpriteLoader.h"

@implementation PlaynShowcaseCoreSpritesSpriteLoader

- (id)init {
  return [super init];
}

+ (PlaynShowcaseCoreSpritesSprite *)getSpriteWithNSString:(NSString *)imagePath
                                             withNSString:(NSString *)jsonPath {
  id<PlaynCoreImage> image = [((id<PlaynCoreAssets>) nil_chk([PlaynCorePlayN assets])) getImageWithNSString:imagePath];
  IOSObjectArray *images = [IOSObjectArray arrayWithObjects:(id[]){ image } count:1 type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
  id<PlaynCoreImage> tempImage = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageWithFloat:1 withFloat:1];
  PlaynShowcaseCoreSpritesSprite *sprite = [[PlaynShowcaseCoreSpritesSprite alloc] initWithPlaynCoreImageLayer:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageLayerWithPlaynCoreImage:tempImage]];
  [((id<PlaynCoreAssets>) nil_chk([PlaynCorePlayN assets])) getTextWithNSString:jsonPath withPlaynCoreUtilCallback:[[PlaynShowcaseCoreSpritesSpriteLoader_$1 alloc] initWithPlaynCoreImageArray:images withPlaynShowcaseCoreSpritesSprite:sprite]];
  [((id<PlaynCoreImage>) nil_chk(image)) addCallbackWithPlaynCoreUtilCallback:[[PlaynShowcaseCoreSpritesSpriteLoader_$2 alloc] initWithPlaynShowcaseCoreSpritesSprite:sprite]];
  return sprite;
}

+ (PlaynShowcaseCoreSpritesSprite *)getSpriteWithNSString:(NSString *)jsonPath {
  id<PlaynCoreImage> tempImage = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageWithFloat:1 withFloat:1];
  PlaynShowcaseCoreSpritesSprite *sprite = [[PlaynShowcaseCoreSpritesSprite alloc] initWithPlaynCoreImageLayer:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageLayerWithPlaynCoreImage:tempImage]];
  PlaynCoreAssetWatcher *watcher = [[PlaynCoreAssetWatcher alloc] initWithPlaynCoreAssetWatcher_Listener:[[PlaynShowcaseCoreSpritesSpriteLoader_$3 alloc] initWithPlaynShowcaseCoreSpritesSprite:sprite]];
  [((id<PlaynCoreAssets>) nil_chk([PlaynCorePlayN assets])) getTextWithNSString:jsonPath withPlaynCoreUtilCallback:[[PlaynShowcaseCoreSpritesSpriteLoader_$4 alloc] initWithPlaynShowcaseCoreSpritesSprite:sprite withPlaynCoreAssetWatcher:watcher]];
  return sprite;
}

+ (void)parseJsonWithPlaynCoreImageArray:(IOSObjectArray *)images
      withPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)sprite
                            withNSString:(NSString *)json {
  id<PlaynCoreJson_Object> document = [((id<PlaynCoreJson>) nil_chk([PlaynCorePlayN json])) parseWithNSString:json];
  if (images == nil || (int) [((IOSObjectArray *) nil_chk(images)) count] == 0) {
    id<PlaynCoreJson_Array> urls = [((id<PlaynCoreJson_Object>) nil_chk(document)) getArrayWithNSString:@"urls"];
    (void) [PlaynCoreAsserts checkNotNullWithId:urls withId:@"No urls provided for sprite images"];
    images = [IOSObjectArray arrayWithLength:[((id<PlaynCoreJson_Array>) nil_chk(urls)) length] type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
    for (int i = 0; i < [((id<PlaynCoreJson_Array>) nil_chk(urls)) length]; i++) {
      (void) [((IOSObjectArray *) nil_chk(images)) replaceObjectAtIndex:i withObject:[((id<PlaynCoreAssets>) nil_chk([PlaynCorePlayN assets])) getImageWithNSString:[((id<PlaynCoreJson_Array>) nil_chk(urls)) getStringWithInt:i]]];
    }
  }
  id<PlaynCoreJson_Array> spriteImages = [((id<PlaynCoreJson_Object>) nil_chk(document)) getArrayWithNSString:@"sprites"];
  for (int i = 0; i < [((id<PlaynCoreJson_Array>) nil_chk(spriteImages)) length]; i++) {
    id<PlaynCoreJson_Object> jsonSpriteImage = [((id<PlaynCoreJson_Array>) nil_chk(spriteImages)) getObjectWithInt:i];
    NSString *id_ = [((id<PlaynCoreJson_Object>) nil_chk(jsonSpriteImage)) getStringWithNSString:@"id"];
    int imageId = [((id<PlaynCoreJson_Object>) nil_chk(jsonSpriteImage)) getIntWithNSString:@"url"];
    [PlaynCoreAsserts checkElementIndexWithInt:imageId withInt:(int) [((IOSObjectArray *) nil_chk(images)) count] withNSString:@"URL must be an index into the URLs array"];
    int x = [((id<PlaynCoreJson_Object>) nil_chk(jsonSpriteImage)) getIntWithNSString:@"x"];
    int y = [((id<PlaynCoreJson_Object>) nil_chk(jsonSpriteImage)) getIntWithNSString:@"y"];
    int width = [((id<PlaynCoreJson_Object>) nil_chk(jsonSpriteImage)) getIntWithNSString:@"w"];
    int height = [((id<PlaynCoreJson_Object>) nil_chk(jsonSpriteImage)) getIntWithNSString:@"h"];
    PlaynShowcaseCoreSpritesSpriteImage *spriteImage = [[PlaynShowcaseCoreSpritesSpriteImage alloc] initWithPlaynCoreImage:[((IOSObjectArray *) nil_chk(images)) objectAtIndex:imageId] withInt:x withInt:y withInt:width withInt:height];
    [((PlaynShowcaseCoreSpritesSprite *) nil_chk(sprite)) addSpriteImageWithNSString:id_ withPlaynShowcaseCoreSpritesSpriteImage:spriteImage];
  }
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$1

@synthesize val$images = val$images_;
@synthesize val$sprite = val$sprite_;

- (void)onSuccessWithId:(NSString *)json {
  @try {
    [PlaynShowcaseCoreSpritesSpriteLoader parseJsonWithPlaynCoreImageArray:val$images_ withPlaynShowcaseCoreSpritesSprite:val$sprite_ withNSString:json];
  }
  @catch (JavaLangThrowable *err) {
    [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) errorWithJavaLangThrowable:err];
    return;
  }
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) doneLoadingData];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)err {
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) errorWithJavaLangThrowable:err];
}

- (id)initWithPlaynCoreImageArray:(IOSObjectArray *)capture$0
withPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$1 {
  if ((self = [super init])) {
    val$images_ = capture$0;
    val$sprite_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$1 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$1 *) copy;
  typedCopy.val$images = val$images_;
  typedCopy.val$sprite = val$sprite_;
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$2

@synthesize val$sprite = val$sprite_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)resource {
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) doneLoadingImages];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)err {
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) errorWithJavaLangThrowable:err];
}

- (id)initWithPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$0 {
  if ((self = [super init])) {
    val$sprite_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$2 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$2 *) copy;
  typedCopy.val$sprite = val$sprite_;
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$3

@synthesize val$sprite = val$sprite_;

- (void)done {
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) doneLoadingImages];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) errorWithJavaLangThrowable:e];
}

- (id)initWithPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$0 {
  if ((self = [super init])) {
    val$sprite_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$3 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$3 *) copy;
  typedCopy.val$sprite = val$sprite_;
}

@end
@implementation PlaynShowcaseCoreSpritesSpriteLoader_$4

@synthesize val$sprite = val$sprite_;
@synthesize val$watcher = val$watcher_;

- (void)onSuccessWithId:(NSString *)json {
  @try {
    [PlaynShowcaseCoreSpritesSpriteLoader parseJsonWithPlaynCoreImageArray:nil withPlaynShowcaseCoreSpritesSprite:val$sprite_ withNSString:json];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) spriteImages])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        PlaynShowcaseCoreSpritesSpriteImage *spriteImage = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((PlaynCoreAssetWatcher *) nil_chk(val$watcher_)) addWithPlaynCoreImage:[((PlaynShowcaseCoreSpritesSpriteImage *) nil_chk(spriteImage)) image]];
      }
    }
    [((PlaynCoreAssetWatcher *) nil_chk(val$watcher_)) start];
  }
  @catch (JavaLangThrowable *err) {
    [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) errorWithJavaLangThrowable:err];
    return;
  }
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) doneLoadingData];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)err {
  [((PlaynShowcaseCoreSpritesSprite *) nil_chk(val$sprite_)) errorWithJavaLangThrowable:err];
}

- (id)initWithPlaynShowcaseCoreSpritesSprite:(PlaynShowcaseCoreSpritesSprite *)capture$0
                   withPlaynCoreAssetWatcher:(PlaynCoreAssetWatcher *)capture$1 {
  if ((self = [super init])) {
    val$sprite_ = capture$0;
    val$watcher_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSpriteLoader_$4 *typedCopy = (PlaynShowcaseCoreSpritesSpriteLoader_$4 *) copy;
  typedCopy.val$sprite = val$sprite_;
  typedCopy.val$watcher = val$watcher_;
}

@end

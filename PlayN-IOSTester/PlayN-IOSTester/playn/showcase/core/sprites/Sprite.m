//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/sprites/Sprite.java
//
//  Created by Thomas on 7/15/13.
//

#import "java/lang/Integer.h"
#import "java/lang/Throwable.h"
#import "java/util/ArrayList.h"
#import "java/util/HashMap.h"
#import "java/util/List.h"
#import "playn/core/Asserts.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Log.h"
#import "playn/core/PlayN.h"
#import "playn/core/util/Callback.h"
#import "playn/showcase/core/sprites/Sprite.h"
#import "playn/showcase/core/sprites/SpriteImage.h"

@implementation PlaynShowcaseCoreSpritesSprite

@synthesize layer_ = layer__;
@synthesize spriteImages_ = spriteImages__;
@synthesize spriteIdMap = spriteIdMap_;
@synthesize callback = callback_;
@synthesize current = current_;
@synthesize currentId = currentId_;
@synthesize imagesDone = imagesDone_;
@synthesize dataDone = dataDone_;

- (id)initWithPlaynCoreImageLayer:(id<PlaynCoreImageLayer>)imageLayer {
  if ((self = [super init])) {
    currentId_ = -1;
    imagesDone_ = NO;
    dataDone_ = NO;
    self.layer_ = imageLayer;
    spriteImages__ = [[JavaUtilArrayList alloc] initWithInt:0];
    spriteIdMap_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)addCallbackWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  self.callback = callback;
  if ([self isReady]) {
    [((id<PlaynCoreUtilCallback>) NIL_CHK(callback)) onSuccessWithId:self];
  }
}

- (id<PlaynCoreImageLayer>)layer {
  return layer__;
}

- (int)numSprites {
  return (spriteImages__ == nil ? 0 : [((id<JavaUtilList>) NIL_CHK(spriteImages__)) size]);
}

- (float)height {
  if (current_ != nil) {
    return [current_ height];
  }
  else {
    return 1;
  }
}

- (BOOL)isReady {
  return imagesDone_ && dataDone_;
}

- (void)setSpriteWithInt:(int)index {
  [PlaynCoreAsserts checkElementIndexWithInt:index withInt:[((id<JavaUtilList>) NIL_CHK(spriteImages__)) size] withNSString:@"Invalid sprite index"];
  if (index != currentId_) {
    current_ = ((PlaynShowcaseCoreSpritesSpriteImage *) [((id<JavaUtilList>) NIL_CHK(spriteImages__)) getWithInt:index]);
    currentId_ = index;
    [self updateLayer];
  }
}

- (void)setSpriteWithNSString:(NSString *)id_ {
  [self setSpriteWithInt:[((JavaLangInteger *) [PlaynCoreAsserts checkNotNullWithId:((JavaLangInteger *) [((JavaUtilHashMap *) NIL_CHK(spriteIdMap_)) getWithId:id_]) withId:@"Invalid sprite id"]) intValue]];
}

- (float)width {
  if (current_ != nil) {
    return [current_ width];
  }
  else {
    return 1;
  }
}

- (void)addSpriteImageWithNSString:(NSString *)key
withPlaynShowcaseCoreSpritesSpriteImage:(PlaynShowcaseCoreSpritesSpriteImage *)spriteImage {
  (void) [((JavaUtilHashMap *) NIL_CHK(spriteIdMap_)) putWithId:key withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) NIL_CHK(spriteImages__)) size]]];
  [((id<JavaUtilList>) NIL_CHK(spriteImages__)) addWithId:spriteImage];
}

- (void)done {
  if (callback_ != nil) {
    [callback_ onSuccessWithId:self];
  }
}

- (void)doneLoadingImages {
  imagesDone_ = YES;
  if ([self isReady]) {
    [self done];
  }
}

- (void)doneLoadingData {
  dataDone_ = YES;
  if ([self isReady]) {
    [self done];
  }
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)err {
  if (callback_ != nil) {
    [callback_ onFailureWithJavaLangThrowable:err];
  }
  else {
    [((id<PlaynCoreLog>) [PlaynCorePlayN log]) errorWithNSString:@"Error loading sprite" withJavaLangThrowable:err];
  }
}

- (id<JavaUtilList>)spriteImages {
  return spriteImages__;
}

- (void)updateLayer {
  if (current_ != nil) {
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setImageWithPlaynCoreImage:[((id<PlaynCoreImage>) [current_ image]) subImageWithFloat:[current_ x] withFloat:[current_ y] withFloat:[current_ width] withFloat:[current_ height]]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreSpritesSprite *typedCopy = (PlaynShowcaseCoreSpritesSprite *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.spriteImages_ = spriteImages__;
  typedCopy.spriteIdMap = spriteIdMap_;
  typedCopy.callback = callback_;
  typedCopy.current = current_;
  typedCopy.currentId = currentId_;
  typedCopy.imagesDone = imagesDone_;
  typedCopy.dataDone = dataDone_;
}

@end

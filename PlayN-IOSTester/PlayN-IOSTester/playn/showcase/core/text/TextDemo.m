//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/text/TextDemo.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Math.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "playn/showcase/core/text/TextDemo.h"

@implementation PlaynShowcaseCoreTextTextDemo

@synthesize base = base_;

- (NSString *)name {
  return @"Text";
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  base_ = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createGroupLayer];
  [((id<PlaynCoreGroupLayer>) nil_chk([((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer])) addWithPlaynCoreLayer:base_];
  id<PlaynCoreCanvasImage> bgtile = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageWithFloat:64 withFloat:64];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(bgtile)) canvas])) setFillColorWithInt:(int) 0xFFCCCCCC];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(bgtile)) canvas])) fillRectWithFloat:0 withFloat:0 withFloat:64 withFloat:64];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(bgtile)) canvas])) setStrokeColorWithInt:(int) 0xFFFFFFFF];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(bgtile)) canvas])) strokeRectWithFloat:0 withFloat:0 withFloat:64 withFloat:64];
  [((id<PlaynCoreCanvasImage>) nil_chk(bgtile)) setRepeatWithBOOL:YES withBOOL:YES];
  id<PlaynCoreImageLayer> bg = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageLayerWithPlaynCoreImage:bgtile];
  [((id<PlaynCoreImageLayer>) nil_chk(bg)) setWidthWithFloat:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) width]];
  [((id<PlaynCoreImageLayer>) nil_chk(bg)) setHeightWithFloat:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) height]];
  [((id<PlaynCoreGroupLayer>) nil_chk(base_)) addWithPlaynCoreLayer:bg];
  float MARGIN = 10;
  float xpos = MARGIN, maxYPos = 0;
  {
    IOSObjectArray *a__ = [IOSObjectArray arrayWithObjects:(id[]){ @"Helvetica", @"Museo-300" } count:2 type:[IOSClass classWithClass:[NSString class]]];
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      NSString *name = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      float ypos = MARGIN, maxWidth = 0;
      {
        IOSObjectArray *a__ = [PlaynCoreFont_StyleEnum values];
        int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
        for (int i__ = 0; i__ < n__; i__++) {
          PlaynCoreFont_StyleEnum *style = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
          {
            IOSFloatArray *a__ = [IOSFloatArray arrayWithFloats:(float[]){ 12.0f, 24.0f, 32.0f } count:3];
            int n__ = (int) [((IOSFloatArray *) nil_chk(a__)) count];
            for (int i__ = 0; i__ < n__; i__++) {
              float size = [((IOSFloatArray *) nil_chk(a__)) floatAtIndex:i__];
              id<PlaynCoreFont> font = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createFontWithNSString:name withPlaynCoreFont_StyleEnum:style withFloat:size];
              PlaynCoreTextFormat *format = [((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:font];
              id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:@"Hello PlayN World" withPlaynCoreTextFormat:format];
              id<PlaynCoreLayer> layer = [self createTextLayerWithPlaynCoreTextLayout:layout withInt:(int) 0xFF000000];
              (void) [((id<PlaynCoreLayer>) nil_chk(layer)) setTranslationWithFloat:xpos withFloat:ypos];
              [((id<PlaynCoreGroupLayer>) nil_chk(base_)) addWithPlaynCoreLayer:layer];
              ypos += [((id<PlaynCoreTextLayout>) nil_chk(layout)) height];
              maxWidth = [JavaLangMath maxWithFloat:maxWidth withFloat:[((id<PlaynCoreTextLayout>) nil_chk(layout)) width]];
              maxYPos = [JavaLangMath maxWithFloat:ypos withFloat:maxYPos];
            }
          }
        }
      }
      xpos += (maxWidth + MARGIN);
    }
  }
  xpos = MARGIN;
  float ypos = maxYPos + MARGIN;
  id<PlaynCoreFont> font = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createFontWithNSString:@"Courier" withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:16];
  NSString *text = @"Text can also be wrapped at a specified width.\n\nAnd wrapped manually at newlines.\nLike this.";
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:text withPlaynCoreTextFormat:[((PlaynCoreTextFormat *) nil_chk([((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:font])) withWrapWidthWithFloat:200]];
  id<PlaynCoreLayer> layer = [self createTextLayerWithPlaynCoreTextLayout:layout withInt:(int) 0xFF660000];
  (void) [((id<PlaynCoreLayer>) nil_chk(layer)) setTranslationWithFloat:xpos withFloat:ypos];
  [((id<PlaynCoreGroupLayer>) nil_chk(base_)) addWithPlaynCoreLayer:layer];
  xpos += [((id<PlaynCoreTextLayout>) nil_chk(layout)) width] + MARGIN;
  ypos += MARGIN;
  text = @"Wrapped text can be center-justified, if so desired.";
  layout = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:text withPlaynCoreTextFormat:[((PlaynCoreTextFormat *) nil_chk([((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:font])) withWrappingWithFloat:200 withPlaynCoreTextFormat_AlignmentEnum:[PlaynCoreTextFormat_AlignmentEnum CENTER]]];
  layer = [self createTextLayerWithPlaynCoreTextLayout:layout withInt:(int) 0xFF006600];
  (void) [((id<PlaynCoreLayer>) nil_chk(layer)) setTranslationWithFloat:xpos withFloat:ypos];
  [((id<PlaynCoreGroupLayer>) nil_chk(base_)) addWithPlaynCoreLayer:layer];
  xpos += [((id<PlaynCoreTextLayout>) nil_chk(layout)) width] + MARGIN;
  ypos += MARGIN;
  text = @"Or it can be flush to the right, if that's how you like to justify yourself.";
  layout = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:text withPlaynCoreTextFormat:[((PlaynCoreTextFormat *) nil_chk([((PlaynCoreTextFormat *) [[PlaynCoreTextFormat alloc] init]) withFontWithPlaynCoreFont:font])) withWrappingWithFloat:200 withPlaynCoreTextFormat_AlignmentEnum:[PlaynCoreTextFormat_AlignmentEnum RIGHT]]];
  layer = [self createTextLayerWithPlaynCoreTextLayout:layout withInt:(int) 0xFF000066];
  (void) [((id<PlaynCoreLayer>) nil_chk(layer)) setTranslationWithFloat:xpos withFloat:ypos];
  [((id<PlaynCoreGroupLayer>) nil_chk(base_)) addWithPlaynCoreLayer:layer];
  xpos += [((id<PlaynCoreTextLayout>) nil_chk(layout)) width] + MARGIN;
  ypos += MARGIN;
}

- (void)shutdown {
  [((id<PlaynCoreGroupLayer>) nil_chk(base_)) destroy];
  base_ = nil;
}

- (id<PlaynCoreLayer>)createTextLayerWithPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout
                                                     withInt:(int)color {
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageWithFloat:(int) [JavaLangMath ceilWithDouble:[((id<PlaynCoreTextLayout>) nil_chk(layout)) width]] withFloat:(int) [JavaLangMath ceilWithDouble:[((id<PlaynCoreTextLayout>) nil_chk(layout)) height]]];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) setFillColorWithInt:color];
  (void) [((id<PlaynCoreCanvas>) nil_chk([((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas])) fillTextWithPlaynCoreTextLayout:layout withFloat:0 withFloat:0];
  return [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageLayerWithPlaynCoreImage:image];
}

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreTextTextDemo *typedCopy = (PlaynShowcaseCoreTextTextDemo *) copy;
  typedCopy.base = base_;
}

@end

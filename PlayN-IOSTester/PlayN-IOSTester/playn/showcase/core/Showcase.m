//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/showcase/core/Showcase.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSObjectArray.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/EnumSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "playn/core/Game.h"
#include "playn/core/Key.h"
#include "playn/core/Keyboard.h"
#include "playn/core/PlayN.h"
#include "playn/core/Touch.h"
#include "playn/showcase/core/Demo.h"
#include "playn/showcase/core/Menu.h"
#include "playn/showcase/core/Showcase.h"
//#include "playn/showcase/core/peas/PeasDemo.h"
#include "playn/showcase/core/snake/SnakeDemo.h"
#include "playn/showcase/core/sprites/SpritesDemo.h"
#include "playn/showcase/core/swirl/SwirlDemo.h"
#include "playn/showcase/core/text/TextDemo.h"

@implementation PlaynShowcaseCoreShowcase

@synthesize backKeys = backKeys_;
@synthesize menuDemo = menuDemo_;
@synthesize activeDemo = activeDemo_;
@synthesize activeStamp = activeStamp_;
@synthesize deviceService = deviceService_;
@synthesize demos = demos_;

- (id)initWithPlaynShowcaseCoreShowcase_DeviceService:(id<PlaynShowcaseCoreShowcase_DeviceService>)deviceService {
  if ((self = [super initWithInt:PlaynShowcaseCoreDemo_UPDATE_RATE])) {
    backKeys_ = [JavaUtilEnumSet ofWithId:[PlaynCoreKeyEnum ESCAPE] withId:[PlaynCoreKeyEnum BACK]];
    menuDemo_ = [[PlaynShowcaseCoreMenu alloc] initWithPlaynShowcaseCoreShowcase:self];
    demos_ = [[JavaUtilArrayList alloc] init];
    {
      [((id<JavaUtilList>) nil_chk(demos_)) addWithId:[[PlaynShowcaseCoreSpritesSpritesDemo alloc] init]];
//      [((id<JavaUtilList>) nil_chk(demos_)) addWithId:[[PlaynShowcaseCorePeasPeasDemo alloc] init]];
      [((id<JavaUtilList>) nil_chk(demos_)) addWithId:[[PlaynShowcaseCoreSwirlSwirlDemo alloc] init]];
      [((id<JavaUtilList>) nil_chk(demos_)) addWithId:[[PlaynShowcaseCoreSnakeSnakeDemo alloc] init]];
      [((id<JavaUtilList>) nil_chk(demos_)) addWithId:[[PlaynShowcaseCoreTextTextDemo alloc] init]];
    }
    self.deviceService = deviceService;
  }
  return self;
}

- (BOOL)shouldExitOnBack {
  return (activeDemo_ == menuDemo_) && ([JavaLangSystem currentTimeMillis] - activeStamp_) > 500LL;
}

- (void)activateDemoWithPlaynShowcaseCoreDemo:(PlaynShowcaseCoreDemo *)demo {
  if (activeDemo_ != nil) {
    [activeDemo_ shutdown];
  }
  if (activeDemo_ != demo) {
    activeDemo_ = demo;
    [((PlaynShowcaseCoreDemo *) nil_chk(activeDemo_)) init__];
    activeStamp_ = [JavaLangSystem currentTimeMillis];
  }
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  [((id<PlaynCoreKeyboard>) nil_chk([PlaynCorePlayN keyboard])) setListenerWithPlaynCoreKeyboard_Listener:[[PlaynShowcaseCoreShowcase_$1 alloc] initWithPlaynShowcaseCoreShowcase:self]];
  @try {
    [((id<PlaynCoreTouch>) nil_chk([PlaynCorePlayN touch])) setListenerWithPlaynCoreTouch_Listener:[[PlaynShowcaseCoreShowcase_$2 alloc] initWithPlaynShowcaseCoreShowcase:self]];
  }
  @catch (JavaLangUnsupportedOperationException *e) {
  }
  [self activateDemoWithPlaynShowcaseCoreDemo:menuDemo_];
}

- (void)updateWithInt:(int)delta {
  [((PlaynShowcaseCoreDemo *) nil_chk(activeDemo_)) updateWithInt:delta];
}

- (void)paintWithFloat:(float)alpha {
  [((PlaynShowcaseCoreDemo *) nil_chk(activeDemo_)) paintWithFloat:alpha];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreShowcase *typedCopy = (PlaynShowcaseCoreShowcase *) copy;
  typedCopy.backKeys = backKeys_;
  typedCopy.menuDemo = menuDemo_;
  typedCopy.activeDemo = activeDemo_;
  typedCopy.activeStamp = activeStamp_;
  typedCopy.deviceService = deviceService_;
  typedCopy.demos = demos_;
}

@end
@implementation PlaynShowcaseCoreShowcase_$1

@synthesize this$0 = this$0_;

- (void)onKeyDownWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
  if ([((id<JavaUtilSet>) nil_chk(this$0_.backKeys)) containsWithId:[((id<PlaynCoreKeyboard_Event>) nil_chk(event)) key]]) {
    [this$0_ activateDemoWithPlaynShowcaseCoreDemo:this$0_.menuDemo];
  }
  else {
    id<PlaynCoreKeyboard_Listener> delegate = [((PlaynShowcaseCoreDemo *) nil_chk(this$0_.activeDemo)) keyboardListener];
    if (delegate != nil) {
      [delegate onKeyDownWithPlaynCoreKeyboard_Event:event];
    }
  }
}

- (void)onKeyUpWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
  id<PlaynCoreKeyboard_Listener> delegate = [((PlaynShowcaseCoreDemo *) nil_chk(this$0_.activeDemo)) keyboardListener];
  if (delegate != nil) {
    [delegate onKeyUpWithPlaynCoreKeyboard_Event:event];
  }
}

- (id)initWithPlaynShowcaseCoreShowcase:(PlaynShowcaseCoreShowcase *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreShowcase_$1 *typedCopy = (PlaynShowcaseCoreShowcase_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation PlaynShowcaseCoreShowcase_$2

@synthesize this$0 = this$0_;

- (void)onTouchStartWithPlaynCoreTouch_EventArray:(IOSObjectArray *)touches {
  if ((int) [((IOSObjectArray *) nil_chk(touches)) count] > 1) [this$0_ activateDemoWithPlaynShowcaseCoreDemo:this$0_.menuDemo];
}

- (id)initWithPlaynShowcaseCoreShowcase:(PlaynShowcaseCoreShowcase *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynShowcaseCoreShowcase_$2 *typedCopy = (PlaynShowcaseCoreShowcase_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

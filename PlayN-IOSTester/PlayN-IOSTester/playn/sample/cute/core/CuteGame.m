//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/sample/cute/core/CuteGame.java
//
//  Created by Thomas on 7/15/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/lang/Throwable.h"
#import "java/util/HashMap.h"
#import "java/util/Map.h"
#import "playn/core/Assets.h"
#import "playn/core/Game.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImmediateLayer.h"
#import "playn/core/Json.h"
#import "playn/core/Key.h"
#import "playn/core/Keyboard.h"
#import "playn/core/Net.h"
#import "playn/core/PlayN.h"
#import "playn/core/Pointer.h"
#import "playn/core/Surface.h"
#import "playn/sample/cute/core/CuteGame.h"
#import "playn/sample/cute/core/CuteObject.h"
#import "playn/sample/cute/core/CuteWorld.h"

@implementation PlaynSampleCuteCoreCuteGame

static id<JavaUtilMap> PlaynSampleCuteCoreCuteGame_ADD_TILE_KEYS_;

@synthesize gameLayer = gameLayer_;
@synthesize frameAlpha = frameAlpha_;
@synthesize world = world_;
@synthesize catGirl = catGirl_;
@synthesize stars = stars_;
@synthesize controlLeft = controlLeft_;
@synthesize controlRight = controlRight_;
@synthesize controlUp = controlUp_;
@synthesize controlDown = controlDown_;
@synthesize controlJump = controlJump_;
@synthesize touchVectorX = touchVectorX_;
@synthesize touchVectorY = touchVectorY_;

+ (id<JavaUtilMap>)ADD_TILE_KEYS {
  return PlaynSampleCuteCoreCuteGame_ADD_TILE_KEYS_;
}

+ (void)setADD_TILE_KEYS:(id<JavaUtilMap>)ADD_TILE_KEYS {
  PlaynSampleCuteCoreCuteGame_ADD_TILE_KEYS_ = ADD_TILE_KEYS;
}

- (id)init {
  return [super initWithInt:33];
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  [((id<PlaynCoreKeyboard>) [PlaynCorePlayN keyboard]) setListenerWithPlaynCoreKeyboard_Listener:self];
  [((id<PlaynCorePointer>) [PlaynCorePlayN pointer]) setListenerWithPlaynCorePointer_Listener:[[PlaynSampleCuteCoreCuteGame_$1 alloc] initWithPlaynSampleCuteCoreCuteGame:self]];
  world_ = [[PlaynSampleCuteCoreCuteWorld alloc] initWithInt:16 withInt:16];
  for (int y = 0; y < 16; ++y) {
    for (int x = 0; x < 16; ++x) {
      [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:x withInt:y withInt:2];
    }
  }
  for (int i = 0; i < 2; ++i) {
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:4 withInt:4 withInt:7];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:5 withInt:4 withInt:7];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:6 withInt:4 withInt:7];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:4 withInt:5 withInt:7];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:5 withInt:5 withInt:7];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:6 withInt:5 withInt:7];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:4 withInt:6 withInt:7];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:5 withInt:6 withInt:3];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:6 withInt:6 withInt:7];
  }
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:4 withInt:4 withInt:19];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:5 withInt:4 withInt:12];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:6 withInt:4 withInt:13];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:4 withInt:5 withInt:18];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:5 withInt:5 withInt:5];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:6 withInt:5 withInt:14];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:4 withInt:6 withInt:17];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:5 withInt:6 withInt:16];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:6 withInt:6 withInt:15];
  gameLayer_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:[[PlaynSampleCuteCoreCuteGame_$2 alloc] initWithPlaynSampleCuteCoreCuteGame:self]];
  [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) rootLayer]) addWithPlaynCoreLayer:gameLayer_];
  [self initStuff];
}

- (void)initStuff OBJC_METHOD_FAMILY_NONE {
  catGirl_ = [[PlaynSampleCuteCoreCuteObject alloc] initWithPlaynCoreImage:[((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:@"images/character_cat_girl.png"]];
  [((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)) setPosWithDouble:2 withDouble:2 withDouble:1];
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).r = 0.3;
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addObjectWithPlaynSampleCuteCoreCuteObject:catGirl_];
  stars_ = [[IOSObjectArray alloc] initWithLength:PlaynSampleCuteCoreCuteGame_NUM_STARS type:[IOSClass classWithClass:[PlaynSampleCuteCoreCuteObject class]]];
  for (int i = 0; i < PlaynSampleCuteCoreCuteGame_NUM_STARS; ++i) {
    [((IOSObjectArray *) NIL_CHK(stars_)) replaceObjectAtIndex:i withObject:[[PlaynSampleCuteCoreCuteObject alloc] initWithPlaynCoreImage:[((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:@"images/star.png"]]];
    [((PlaynSampleCuteCoreCuteObject *) [((IOSObjectArray *) NIL_CHK(stars_)) objectAtIndex:i]) setPosWithDouble:[JavaLangMath random] * [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) worldWidth] withDouble:[JavaLangMath random] * [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) worldHeight] withDouble:10];
    [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addObjectWithPlaynSampleCuteCoreCuteObject:((PlaynSampleCuteCoreCuteObject *) [((IOSObjectArray *) NIL_CHK(stars_)) objectAtIndex:i])];
  }
}

- (void)onKeyDownWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
  JavaLangInteger *tileIdx = ((JavaLangInteger *) [((id<JavaUtilMap>) NIL_CHK(PlaynSampleCuteCoreCuteGame_ADD_TILE_KEYS_)) getWithId:[((id<PlaynCoreKeyboard_Event>) NIL_CHK(event)) key]]);
  if (tileIdx != nil) {
    [self addTileWithInt:(int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).x_ withInt:(int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).y_ withInt:[tileIdx intValue]];
    return;
  }
  switch ([[((id<PlaynCoreKeyboard_Event>) NIL_CHK(event)) key] ordinal]) {
    case PlaynCoreKey_SPACE:
    controlJump_ = YES;
    break;
    case PlaynCoreKey_ESCAPE:
    [self removeTopTileWithInt:(int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).x_ withInt:(int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).y_];
    break;
    case PlaynCoreKey_LEFT:
    controlLeft_ = YES;
    break;
    case PlaynCoreKey_UP:
    controlUp_ = YES;
    break;
    case PlaynCoreKey_RIGHT:
    controlRight_ = YES;
    break;
    case PlaynCoreKey_DOWN:
    controlDown_ = YES;
    break;
  }
}

- (void)onKeyTypedWithPlaynCoreKeyboard_TypedEvent:(id<PlaynCoreKeyboard_TypedEvent>)event {
}

- (void)onKeyUpWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
  switch ([[((id<PlaynCoreKeyboard_Event>) NIL_CHK(event)) key] ordinal]) {
    case PlaynCoreKey_LEFT:
    controlLeft_ = NO;
    break;
    case PlaynCoreKey_UP:
    controlUp_ = NO;
    break;
    case PlaynCoreKey_RIGHT:
    controlRight_ = NO;
    break;
    case PlaynCoreKey_DOWN:
    controlDown_ = NO;
    break;
  }
}

- (void)updateWithInt:(int)delta {
  if (world_ == nil) {
    return;
  }
  [((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)) setAccelerationWithDouble:0 withDouble:0 withDouble:0];
  if ([((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)) isResting]) {
    if (controlLeft_) {
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).ax = -1.0;
    }
    if (controlRight_) {
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).ax = 1.0;
    }
    if (controlUp_) {
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).ay = -1.0;
    }
    if (controlDown_) {
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).ay = 1.0;
    }
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).ax += touchVectorX_;
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).ay += touchVectorY_;
    if (controlJump_) {
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(catGirl_)).vz = 0.2;
      controlJump_ = NO;
    }
  }
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) updatePhysicsWithDouble:delta / 1000.0f];
}

- (void)paintWithFloat:(float)alpha {
  frameAlpha_ = alpha;
}

- (void)touchMoveWithFloat:(float)x
                 withFloat:(float)y {
  float cx = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) width] / 2;
  float cy = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) height] / 2;
  touchVectorX_ = (x - cx) * 1.0f / cx;
  touchVectorY_ = (y - cy) * 1.0f / cy;
}

- (void)addTileWithInt:(int)x
               withInt:(int)y
               withInt:(int)type {
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) addTileWithInt:x withInt:y withInt:type];
  id<PlaynCoreJson_Writer> w = [((id<PlaynCoreJson>) [PlaynCorePlayN json]) newWriter];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) object];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"op" withNSString:@"addTop"];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"x" withNSNumber:[JavaLangInteger valueOfWithInt:x]];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"y" withNSNumber:[JavaLangInteger valueOfWithInt:y]];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"type" withNSNumber:[JavaLangInteger valueOfWithInt:type]];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) end];
  [self postWithNSString:[((id<PlaynCoreJson_Writer>) NIL_CHK(w)) write]];
}

- (void)removeTopTileWithInt:(int)x
                     withInt:(int)y {
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(world_)) removeTopTileWithInt:x withInt:y];
  id<PlaynCoreJson_Writer> w = [((id<PlaynCoreJson>) [PlaynCorePlayN json]) newWriter];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) object];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"op" withNSString:@"removeTop"];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"x" withNSNumber:[JavaLangInteger valueOfWithInt:x]];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"y" withNSNumber:[JavaLangInteger valueOfWithInt:y]];
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) end];
  [self postWithNSString:[((id<PlaynCoreJson_Writer>) NIL_CHK(w)) write]];
}

- (void)postWithNSString:(NSString *)payload {
  [((id<PlaynCoreNet>) [PlaynCorePlayN net]) postWithNSString:@"/rpc" withNSString:payload withPlaynCoreUtilCallback:[[PlaynSampleCuteCoreCuteGame_$3 alloc] init]];
}

+ (void)initialize {
  if (self == [PlaynSampleCuteCoreCuteGame class]) {
    PlaynSampleCuteCoreCuteGame_ADD_TILE_KEYS_ = [[JavaUtilHashMap alloc] init];
    {
      int idx = 0;
      {
        IOSObjectArray *a__ = [IOSObjectArray arrayWithObjects:(id[]){ [PlaynCoreKeyEnum K1], [PlaynCoreKeyEnum K2], [PlaynCoreKeyEnum K3], [PlaynCoreKeyEnum K4], [PlaynCoreKeyEnum K5], [PlaynCoreKeyEnum K6], [PlaynCoreKeyEnum K7], [PlaynCoreKeyEnum K8], [PlaynCoreKeyEnum W], [PlaynCoreKeyEnum D], [PlaynCoreKeyEnum S], [PlaynCoreKeyEnum A], [PlaynCoreKeyEnum T], [PlaynCoreKeyEnum Y], [PlaynCoreKeyEnum H], [PlaynCoreKeyEnum N], [PlaynCoreKeyEnum B], [PlaynCoreKeyEnum V], [PlaynCoreKeyEnum F], [PlaynCoreKeyEnum R] } count:20 type:[IOSClass classWithClass:[PlaynCoreKeyEnum class]]];
        int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
        for (int i__ = 0; i__ < n__; i__++) {
          PlaynCoreKeyEnum *key = ((NSObject *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
          (void) [((id<JavaUtilMap>) NIL_CHK(PlaynSampleCuteCoreCuteGame_ADD_TILE_KEYS_)) putWithId:key withId:[JavaLangInteger valueOfWithInt:idx++]];
        }
      }
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynSampleCuteCoreCuteGame *typedCopy = (PlaynSampleCuteCoreCuteGame *) copy;
  typedCopy.gameLayer = gameLayer_;
  typedCopy.frameAlpha = frameAlpha_;
  typedCopy.world = world_;
  typedCopy.catGirl = catGirl_;
  typedCopy.stars = stars_;
  typedCopy.controlLeft = controlLeft_;
  typedCopy.controlRight = controlRight_;
  typedCopy.controlUp = controlUp_;
  typedCopy.controlDown = controlDown_;
  typedCopy.controlJump = controlJump_;
  typedCopy.touchVectorX = touchVectorX_;
  typedCopy.touchVectorY = touchVectorY_;
}

@end
@implementation PlaynSampleCuteCoreCuteGame_$1

@synthesize this$0 = this$0_;

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  this$0_.touchVectorX = this$0_.touchVectorY = 0;
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  this$0_.touchVectorX = this$0_.touchVectorY = 0;
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  [this$0_ touchMoveWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]];
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  [this$0_ touchMoveWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]];
}

- (id)initWithPlaynSampleCuteCoreCuteGame:(PlaynSampleCuteCoreCuteGame *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynSampleCuteCoreCuteGame_$1 *typedCopy = (PlaynSampleCuteCoreCuteGame_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation PlaynSampleCuteCoreCuteGame_$2

@synthesize this$0 = this$0_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface {
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(this$0_.world)) setViewOriginWithDouble:[((PlaynSampleCuteCoreCuteObject *) NIL_CHK(this$0_.catGirl)) xWithDouble:this$0_.frameAlpha] withDouble:[((PlaynSampleCuteCoreCuteObject *) NIL_CHK(this$0_.catGirl)) yWithDouble:this$0_.frameAlpha] withDouble:[((PlaynSampleCuteCoreCuteObject *) NIL_CHK(this$0_.catGirl)) zWithDouble:this$0_.frameAlpha]];
  (void) [((id<PlaynCoreSurface>) NIL_CHK(surface)) clear];
  [((PlaynSampleCuteCoreCuteWorld *) NIL_CHK(this$0_.world)) paintWithPlaynCoreSurface:surface withFloat:this$0_.frameAlpha];
}

- (id)initWithPlaynSampleCuteCoreCuteGame:(PlaynSampleCuteCoreCuteGame *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynSampleCuteCoreCuteGame_$2 *typedCopy = (PlaynSampleCuteCoreCuteGame_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation PlaynSampleCuteCoreCuteGame_$3

- (void)onSuccessWithId:(NSString *)response {
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)error {
}

- (id)init {
  return [super init];
}

@end

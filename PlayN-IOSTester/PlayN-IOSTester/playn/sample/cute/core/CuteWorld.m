//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java/playn/sample/cute/core/CuteWorld.java
//
//  Created by Thomas on 7/15/13.
//

#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/lang/System.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Assets.h"
#import "playn/core/Image.h"
#import "playn/core/Json.h"
#import "playn/core/PlayN.h"
#import "playn/core/Surface.h"
#import "playn/sample/cute/core/CuteObject.h"
#import "playn/sample/cute/core/CuteWorld.h"

@implementation PlaynSampleCuteCoreCuteWorld

static IOSObjectArray * PlaynSampleCuteCoreCuteWorld_tileNames_;
static IOSObjectArray * PlaynSampleCuteCoreCuteWorld_shadowNames_;
static PlaynSampleCuteCoreCuteWorld_Stack * PlaynSampleCuteCoreCuteWorld_EMPTY_STACK_;

@synthesize tiles = tiles_;
@synthesize shadows = shadows_;
@synthesize world = world_;
@synthesize worldWidth_ = worldWidth__;
@synthesize worldHeight_ = worldHeight__;
@synthesize viewOriginX = viewOriginX_;
@synthesize viewOriginY = viewOriginY_;
@synthesize viewOriginZ = viewOriginZ_;
@synthesize updateCounter = updateCounter_;

+ (IOSObjectArray *)tileNames {
  return PlaynSampleCuteCoreCuteWorld_tileNames_;
}

+ (IOSObjectArray *)shadowNames {
  return PlaynSampleCuteCoreCuteWorld_shadowNames_;
}

+ (PlaynSampleCuteCoreCuteWorld_Stack *)EMPTY_STACK {
  return PlaynSampleCuteCoreCuteWorld_EMPTY_STACK_;
}

- (id)initWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)data {
  if ((self = [super init])) {
    tiles_ = [[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(PlaynSampleCuteCoreCuteWorld_tileNames_)) count] type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
    shadows_ = [[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(PlaynSampleCuteCoreCuteWorld_shadowNames_)) count] type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
    updateCounter_ = -1;
    [self loadImages];
    [self initWorldWithPlaynCoreJson_Object:data];
  }
  return self;
}

- (id)initWithInt:(int)width
          withInt:(int)height {
  if ((self = [super init])) {
    tiles_ = [[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(PlaynSampleCuteCoreCuteWorld_tileNames_)) count] type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
    shadows_ = [[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(PlaynSampleCuteCoreCuteWorld_shadowNames_)) count] type:[IOSClass classWithProtocol:@protocol(PlaynCoreImage)]];
    updateCounter_ = -1;
    worldWidth__ = width;
    worldHeight__ = height;
    [self loadImages];
    self.world = [[IOSObjectArray alloc] initWithLength:worldWidth__ * worldHeight__ type:[IOSClass classWithClass:[PlaynSampleCuteCoreCuteWorld_Stack class]]];
    int i = 0;
    for (int ty = 0; ty < worldHeight__; ++ty) {
      for (int tx = 0; tx < worldWidth__; ++tx) {
        [((IOSObjectArray *) NIL_CHK(self.world)) replaceObjectAtIndex:i withObject:[[PlaynSampleCuteCoreCuteWorld_Stack alloc] init]];
        ((PlaynSampleCuteCoreCuteWorld_Stack *) ((PlaynSampleCuteCoreCuteWorld_Stack *) [((IOSObjectArray *) NIL_CHK(world_)) objectAtIndex:i])).tiles = [[IOSIntArray alloc] initWithLength:0];
        ++i;
      }
    }
  }
  return self;
}

- (void)addObjectWithPlaynSampleCuteCoreCuteObject:(PlaynSampleCuteCoreCuteObject *)o {
  PlaynSampleCuteCoreCuteWorld_Stack *stack = [self stackForObjectWithPlaynSampleCuteCoreCuteObject:o];
  [((id<JavaUtilList>) NIL_CHK(stack.objects)) addWithId:o];
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).stack = stack;
}

- (void)addTileWithInt:(int)tx
               withInt:(int)ty
               withInt:(int)type {
  PlaynSampleCuteCoreCuteWorld_Stack *stack = [self stackWithInt:tx withInt:ty];
  int len = (int) [((IOSIntArray *) NIL_CHK(stack.tiles)) count];
  if (len == PlaynSampleCuteCoreCuteWorld_MAX_STACK_HEIGHT) {
    return;
  }
  IOSIntArray *newTiles = [[IOSIntArray alloc] initWithLength:len + 1];
  [JavaLangSystem arraycopyWithId:((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)).tiles withInt:0 withId:newTiles withInt:0 withInt:len];
  ((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)).tiles = newTiles;
  [((IOSIntArray *) NIL_CHK(stack.tiles)) replaceIntAtIndex:len withInt:type];
}

- (void)removeTopTileWithInt:(int)tx
                     withInt:(int)ty {
  PlaynSampleCuteCoreCuteWorld_Stack *stack = [self stackWithInt:tx withInt:ty];
  int len = (int) [((IOSIntArray *) NIL_CHK(stack.tiles)) count];
  if (len == 0) {
    return;
  }
  IOSIntArray *newTiles = [[IOSIntArray alloc] initWithLength:len - 1];
  [JavaLangSystem arraycopyWithId:((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)).tiles withInt:0 withId:newTiles withInt:0 withInt:len - 1];
  ((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)).tiles = newTiles;
}

- (void)paintWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
                        withFloat:(float)alpha {
  int startX = (int) [self pixelToWorldXWithPlaynCoreSurface:surf withFloat:0];
  int endX = (int) [self pixelToWorldXWithPlaynCoreSurface:surf withFloat:[((id<PlaynCoreSurface>) NIL_CHK(surf)) width]];
  if (startX < 0) startX = 0;
  if (endX < 0) endX = 0;
  if (startX >= worldWidth__) startX = worldWidth__ - 1;
  if (endX >= worldWidth__) endX = worldWidth__ - 1;
  int startY = (int) [self pixelToWorldYWithPlaynCoreSurface:surf withFloat:0 withDouble:0];
  int endY = (int) [self pixelToWorldYWithPlaynCoreSurface:surf withFloat:[((id<PlaynCoreSurface>) NIL_CHK(surf)) height] withDouble:PlaynSampleCuteCoreCuteWorld_MAX_STACK_HEIGHT];
  if (startY < 0) startY = 0;
  if (endY < 0) endY = 0;
  if (startY >= worldHeight__) startY = worldHeight__ - 1;
  if (endY >= worldHeight__) endY = worldHeight__ - 1;
  for (int tz = 0; tz < PlaynSampleCuteCoreCuteWorld_MAX_STACK_HEIGHT; ++tz) {
    for (int ty = startY; ty <= endY; ++ty) {
      for (int tx = startX; tx <= endX; ++tx) {
        PlaynSampleCuteCoreCuteWorld_Stack *stack = ((PlaynSampleCuteCoreCuteWorld_Stack *) [((IOSObjectArray *) NIL_CHK(world_)) objectAtIndex:ty * worldWidth__ + tx]);
        if (tz < [((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)) height]) {
          if ((tz < [((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)) height] - 1) && ([self heightWithInt:tx withInt:ty + 1] > tz)) {
            continue;
          }
          int px = [self worldToPixelXWithPlaynCoreSurface:surf withDouble:tx];
          int py = [self worldToPixelYWithPlaynCoreSurface:surf withDouble:ty withDouble:tz] - PlaynSampleCuteCoreCuteWorld_TILE_BASE;
          if ((px > [((id<PlaynCoreSurface>) NIL_CHK(surf)) width]) || (py > [((id<PlaynCoreSurface>) NIL_CHK(surf)) height]) || (px + PlaynSampleCuteCoreCuteWorld_TILE_WIDTH < 0) || (py + PlaynSampleCuteCoreCuteWorld_TILE_IMAGE_HEIGHT < 0)) {
            continue;
          }
          (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(tiles_)) objectAtIndex:[((IOSIntArray *) NIL_CHK(stack.tiles)) intAtIndex:tz]]) withFloat:px withFloat:py];
          [self paintShadowWithPlaynCoreSurface:surf withInt:tx withInt:ty withInt:px withInt:py];
        }
        else if (tz >= [((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)) height]) {
          [self paintObjectsWithPlaynCoreSurface:surf withPlaynSampleCuteCoreCuteWorld_Stack:stack withInt:tz withFloat:alpha];
        }
      }
    }
  }
}

- (void)setViewOriginWithDouble:(double)x
                     withDouble:(double)y
                     withDouble:(double)z {
  viewOriginX_ = x;
  viewOriginY_ = y;
  viewOriginZ_ = z;
}

- (void)updatePhysicsWithDouble:(double)delta {
  for (int ty = 0; ty < worldHeight__; ++ty) {
    for (int tx = 0; tx < worldWidth__; ++tx) {
      [self updatePhysicsWithPlaynSampleCuteCoreCuteWorld_Stack:[self stackWithInt:tx withInt:ty] withDouble:delta];
    }
  }
  [self updatePhysicsWithPlaynSampleCuteCoreCuteWorld_Stack:PlaynSampleCuteCoreCuteWorld_EMPTY_STACK_ withDouble:delta];
  ++updateCounter_;
}

- (void)writeWithPlaynCoreJson_Writer:(id<PlaynCoreJson_Writer>)w {
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) object];
  {
    (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"width" withNSNumber:[JavaLangInteger valueOfWithInt:worldWidth__]];
    (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSString:@"height" withNSNumber:[JavaLangInteger valueOfWithInt:worldHeight__]];
    (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) arrayWithNSString:@"stacks"];
    for (int y = 0; y < worldHeight__; ++y) {
      for (int x = 0; x < worldWidth__; ++x) {
        PlaynSampleCuteCoreCuteWorld_Stack *stack = [self stackWithInt:x withInt:y];
        (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) array];
        for (int z = 0; z < [((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(stack)) height]; ++z) {
          (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) valueWithNSNumber:[JavaLangInteger valueOfWithInt:[((IOSIntArray *) NIL_CHK(stack.tiles)) intAtIndex:z]]];
        }
        (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) end];
      }
    }
    (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) end];
  }
  (void) [((id<PlaynCoreJson_Writer>) NIL_CHK(w)) end];
}

- (int)heightWithInt:(int)tx
             withInt:(int)ty {
  return [[self stackWithInt:tx withInt:ty] height];
}

- (NSString *)imageResWithNSString:(NSString *)name {
  return [NSString stringWithFormat:@"images/%@.png", name];
}

- (void)initWorldWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)data OBJC_METHOD_FAMILY_NONE {
  worldWidth__ = [((id<PlaynCoreJson_Object>) NIL_CHK(data)) getIntWithNSString:@"width"];
  worldHeight__ = [((id<PlaynCoreJson_Object>) NIL_CHK(data)) getIntWithNSString:@"height"];
  self.world = [[IOSObjectArray alloc] initWithLength:worldWidth__ * worldHeight__ type:[IOSClass classWithClass:[PlaynSampleCuteCoreCuteWorld_Stack class]]];
  id<PlaynCoreJson_Array> stacksData = [((id<PlaynCoreJson_Object>) NIL_CHK(data)) getArrayWithNSString:@"stacks"];
  int i = 0;
  for (int ty = 0; ty < worldHeight__; ++ty) {
    for (int tx = 0; tx < worldWidth__; ++tx) {
      id<PlaynCoreJson_Array> stackData = [((id<PlaynCoreJson_Array>) NIL_CHK(stacksData)) getArrayWithInt:i];
      [((IOSObjectArray *) NIL_CHK(world_)) replaceObjectAtIndex:i withObject:[[PlaynSampleCuteCoreCuteWorld_Stack alloc] init]];
      ((PlaynSampleCuteCoreCuteWorld_Stack *) ((PlaynSampleCuteCoreCuteWorld_Stack *) [((IOSObjectArray *) NIL_CHK(world_)) objectAtIndex:i])).tiles = [[IOSIntArray alloc] initWithLength:[((id<PlaynCoreJson_Array>) NIL_CHK(stackData)) length]];
      for (int tz = 0; tz < [((id<PlaynCoreJson_Array>) NIL_CHK(stackData)) length]; ++tz) {
        [((IOSIntArray *) NIL_CHK(((PlaynSampleCuteCoreCuteWorld_Stack *) ((PlaynSampleCuteCoreCuteWorld_Stack *) [world_ objectAtIndex:i])).tiles)) replaceIntAtIndex:tz withInt:[((id<PlaynCoreJson_Array>) NIL_CHK(stackData)) getIntWithInt:tz]];
      }
      ++i;
    }
  }
  viewOriginX_ = 0;
  viewOriginY_ = 2.5;
}

- (void)loadImages {
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(tiles_)) count]; ++i) {
    [((IOSObjectArray *) NIL_CHK(tiles_)) replaceObjectAtIndex:i withObject:[((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[self imageResWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(PlaynSampleCuteCoreCuteWorld_tileNames_)) objectAtIndex:i])]]];
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(shadows_)) count]; ++i) {
    [((IOSObjectArray *) NIL_CHK(shadows_)) replaceObjectAtIndex:i withObject:[((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[self imageResWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(PlaynSampleCuteCoreCuteWorld_shadowNames_)) objectAtIndex:i])]]];
  }
}

- (void)moveByWithPlaynSampleCuteCoreCuteObject:(PlaynSampleCuteCoreCuteObject *)o
                                     withDouble:(double)dx
                                     withDouble:(double)dy
                                     withDouble:(double)dz {
  int tx = (int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_, ty = (int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_;
  int hc = (int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_;
  int hn = [self heightWithInt:tx withInt:ty - 1];
  int hs = [self heightWithInt:tx withInt:ty + 1];
  int hw = [self heightWithInt:tx - 1 withInt:ty];
  int he = [self heightWithInt:tx + 1 withInt:ty];
  int hse = [self heightWithInt:tx + 1 withInt:ty + 1];
  int hne = [self heightWithInt:tx + 1 withInt:ty - 1];
  int hsw = [self heightWithInt:tx - 1 withInt:ty + 1];
  int hnw = [self heightWithInt:tx - 1 withInt:ty - 1];
  double left = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ + dx - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r, right = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ + dx + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  double top = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ + dy - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r, bottom = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ + dy + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  BOOL pastLeft = left < tx, pastTop = top < ty;
  BOOL pastRight = right > tx + 1, pastBottom = bottom > ty + 1;
  if (pastLeft) {
    if (hw > hc) {
      dx = tx + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_;
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
    }
  }
  else if (pastRight) {
    if (he > hc) {
      dx = tx + 1 - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_;
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
    }
  }
  if (pastTop) {
    if (hn > hc) {
      dy = ty + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_;
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
    }
  }
  else if (pastBottom) {
    if (hs > hc) {
      dy = ty + 1 - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_;
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
    }
  }
  if (pastLeft && pastTop) {
    if (hnw > hc) {
      if (tx - left > ty - top) {
        dy = ty - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
      else {
        dx = tx - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
    }
  }
  if (pastRight && pastTop) {
    if (hne > hc) {
      if (right - (tx + 1) > ty - top) {
        dy = ty - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
      else {
        dx = (tx + 1) - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
    }
  }
  if (pastRight && pastBottom) {
    if (hse > hc) {
      if (right - (tx + 1) > bottom - (ty + 1)) {
        dy = (ty + 1) - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
      else {
        dx = (tx + 1) - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
    }
  }
  if (pastLeft && pastBottom) {
    if (hsw > hc) {
      if (tx - left > bottom - (ty + 1)) {
        dy = (ty + 1) - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
      else {
        dx = tx - (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r);
        ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
      }
    }
  }
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ + dx;
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ + dy;
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ < ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  }
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ < ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  }
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ > worldWidth__ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ = worldWidth__ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  }
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ > worldHeight__ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ = worldHeight__ - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  }
  left = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ + dx - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  right = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ + dx + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  top = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ + dy - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  bottom = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ + dy + ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).r;
  pastLeft = left < tx - 0.01;
  pastTop = top < ty - 0.01;
  pastRight = right > tx + 1.01;
  pastBottom = bottom > ty + 1.01;
  double floor = [self heightWithInt:tx withInt:ty];
  if (pastLeft && hw - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ < 0.5) {
    floor = [JavaLangMath maxWithDouble:floor withDouble:hw];
  }
  if (pastTop && hn - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ < 0.5) {
    floor = [JavaLangMath maxWithDouble:floor withDouble:hn];
  }
  if (pastRight && he - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ < 0.5) {
    floor = [JavaLangMath maxWithDouble:floor withDouble:he];
  }
  if (pastBottom && hs - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ < 0.5) {
    floor = [JavaLangMath maxWithDouble:floor withDouble:hs];
  }
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ + dz < floor) {
    dz = floor - ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_;
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz = -((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz * PlaynSampleCuteCoreCuteWorld_RESTITUTION;
    if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz < 0.01) {
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz = 0;
    }
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).resting = YES;
  }
  else {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).resting = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz == 0;
  }
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ = ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ + dz;
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ < 0) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ = 0;
  }
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ > PlaynSampleCuteCoreCuteWorld_MAX_STACK_HEIGHT - 0.01) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ = PlaynSampleCuteCoreCuteWorld_MAX_STACK_HEIGHT - 0.01;
  }
}

- (void)paintObjectsWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
  withPlaynSampleCuteCoreCuteWorld_Stack:(PlaynSampleCuteCoreCuteWorld_Stack *)stack
                                 withInt:(int)tz
                               withFloat:(float)alpha {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(stack.objects)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      PlaynSampleCuteCoreCuteObject *o = ((PlaynSampleCuteCoreCuteObject *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ((int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ == tz) {
        int px = [self worldToPixelXWithPlaynCoreSurface:surf withDouble:[((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)) xWithDouble:alpha]];
        int py = [self worldToPixelYWithPlaynCoreSurface:surf withDouble:[((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)) yWithDouble:alpha] withDouble:[((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)) zWithDouble:alpha]];
        float baseX = [((id<PlaynCoreImage>) NIL_CHK(o.img)) width] / 2;
        float baseY = [((id<PlaynCoreImage>) NIL_CHK(o.img)) height] - PlaynSampleCuteCoreCuteWorld_OBJECT_BASE;
        (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).img withFloat:px - baseX withFloat:py - baseY];
      }
    }
  }
}

- (void)paintShadowWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
                                withInt:(int)tx
                                withInt:(int)ty
                                withInt:(int)px
                                withInt:(int)py {
  int hc = [self heightWithInt:tx withInt:ty];
  int hn = [self heightWithInt:tx withInt:ty - 1];
  int hs = [self heightWithInt:tx withInt:ty + 1];
  int hw = [self heightWithInt:tx - 1 withInt:ty];
  int he = [self heightWithInt:tx + 1 withInt:ty];
  int hse = [self heightWithInt:tx + 1 withInt:ty + 1];
  int hne = [self heightWithInt:tx + 1 withInt:ty - 1];
  int hsw = [self heightWithInt:tx - 1 withInt:ty + 1];
  int hnw = [self heightWithInt:tx - 1 withInt:ty - 1];
  if (hn > hc) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_NORTH]) withFloat:px withFloat:py];
  }
  if (hs > hc) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_SOUTH]) withFloat:px withFloat:py];
  }
  if (he > hc) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_EAST]) withFloat:px withFloat:py];
  }
  if (hw > hc) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_WEST]) withFloat:px withFloat:py];
  }
  if ((hse > hc) && (he <= hc)) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_SOUTHEAST]) withFloat:px withFloat:py];
  }
  if ((hsw > hc) && (hw <= hc)) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_SOUTHWEST]) withFloat:px withFloat:py];
  }
  if ((hne > hc) && (he <= hc) && (hn <= hc)) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_NORTHEAST]) withFloat:px withFloat:py];
  }
  if ((hnw > hc) && (hw <= hc) && (hn <= hc)) {
    (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_NORTHWEST]) withFloat:px withFloat:py];
  }
  while (hc > 0) {
    if ((hsw >= hc) && (hs < hc)) {
      (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:((id<PlaynCoreImage>) [((IOSObjectArray *) NIL_CHK(shadows_)) objectAtIndex:PlaynSampleCuteCoreCuteWorld_SHADOW_SIDE_WEST]) withFloat:px withFloat:py];
    }
    py += PlaynSampleCuteCoreCuteWorld_TILE_DEPTH;
    if (hs >= hc) {
      break;
    }
    --hc;
  }
}

- (double)pixelToWorldXWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
                                  withFloat:(float)x {
  double center = [((id<PlaynCoreSurface>) NIL_CHK(surf)) width] * 0.5;
  return (int) (((viewOriginX_ * PlaynSampleCuteCoreCuteWorld_TILE_WIDTH) + x - center) / PlaynSampleCuteCoreCuteWorld_TILE_WIDTH);
}

- (double)pixelToWorldYWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
                                  withFloat:(float)y
                                 withDouble:(double)z {
  double center = [((id<PlaynCoreSurface>) NIL_CHK(surf)) height] * 0.5;
  return (y + (viewOriginY_ * PlaynSampleCuteCoreCuteWorld_TILE_HEIGHT - viewOriginZ_ * PlaynSampleCuteCoreCuteWorld_TILE_DEPTH) + (z * PlaynSampleCuteCoreCuteWorld_TILE_DEPTH) - center) / PlaynSampleCuteCoreCuteWorld_TILE_HEIGHT;
}

- (PlaynSampleCuteCoreCuteWorld_Stack *)stackWithInt:(int)tx
                                             withInt:(int)ty {
  if ((tx < 0) || (tx >= worldWidth__) || (ty < 0) || (ty >= worldHeight__)) {
    return PlaynSampleCuteCoreCuteWorld_EMPTY_STACK_;
  }
  return ((PlaynSampleCuteCoreCuteWorld_Stack *) [((IOSObjectArray *) NIL_CHK(world_)) objectAtIndex:ty * worldWidth__ + tx]);
}

- (PlaynSampleCuteCoreCuteWorld_Stack *)stackForObjectWithPlaynSampleCuteCoreCuteObject:(PlaynSampleCuteCoreCuteObject *)o {
  if ((((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ < 0) || (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ < 0) || (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ >= worldWidth__) || (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_ >= worldHeight__)) {
    return PlaynSampleCuteCoreCuteWorld_EMPTY_STACK_;
  }
  return [self stackWithInt:(int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).x_ withInt:(int) ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).y_];
}

- (void)updatePhysicsWithPlaynSampleCuteCoreCuteObject:(PlaynSampleCuteCoreCuteObject *)o
                                            withDouble:(double)delta {
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).lastUpdated == updateCounter_) {
    return;
  }
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).lastUpdated = updateCounter_;
  [((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)) saveOldPos];
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).z_ > [((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(o.stack)) height]) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).az += delta * PlaynSampleCuteCoreCuteWorld_GRAVITY;
  }
  if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).resting) {
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx -= ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx * PlaynSampleCuteCoreCuteWorld_FRICTION * delta;
    ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy -= ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy * PlaynSampleCuteCoreCuteWorld_FRICTION * delta;
    if (((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz < 0) {
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz = 0;
    }
  }
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx += ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).ax * delta;
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy += ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).ay * delta;
  ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz += ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).az * delta;
  [self moveByWithPlaynSampleCuteCoreCuteObject:o withDouble:((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vx withDouble:((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vy withDouble:((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).vz];
}

- (void)updatePhysicsWithPlaynSampleCuteCoreCuteWorld_Stack:(PlaynSampleCuteCoreCuteWorld_Stack *)stack
                                                 withDouble:(double)delta {
  for (int i = 0; i < [((id<JavaUtilList>) NIL_CHK(stack.objects)) size]; ++i) {
    PlaynSampleCuteCoreCuteObject *o = ((PlaynSampleCuteCoreCuteObject *) [((id<JavaUtilList>) NIL_CHK(stack.objects)) getWithInt:i]);
    [self updatePhysicsWithPlaynSampleCuteCoreCuteObject:o withDouble:delta];
    PlaynSampleCuteCoreCuteWorld_Stack *newStack = [self stackForObjectWithPlaynSampleCuteCoreCuteObject:o];
    if (stack != newStack) {
      (void) [((id<JavaUtilList>) NIL_CHK(stack.objects)) removeWithInt:i--];
      [((id<JavaUtilList>) NIL_CHK(newStack.objects)) addWithId:o];
      ((PlaynSampleCuteCoreCuteObject *) NIL_CHK(o)).stack = newStack;
    }
  }
}

- (int)worldToPixelXWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
                              withDouble:(double)x {
  double center = [((id<PlaynCoreSurface>) NIL_CHK(surf)) width] * 0.5;
  return (int) (center - (viewOriginX_ * PlaynSampleCuteCoreCuteWorld_TILE_WIDTH) + x * PlaynSampleCuteCoreCuteWorld_TILE_WIDTH);
}

- (int)worldToPixelYWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
                              withDouble:(double)y
                              withDouble:(double)z {
  double center = [((id<PlaynCoreSurface>) NIL_CHK(surf)) height] * 0.5;
  return (int) (center - (viewOriginY_ * PlaynSampleCuteCoreCuteWorld_TILE_HEIGHT - viewOriginZ_ * PlaynSampleCuteCoreCuteWorld_TILE_DEPTH) + y * PlaynSampleCuteCoreCuteWorld_TILE_HEIGHT - z * PlaynSampleCuteCoreCuteWorld_TILE_DEPTH);
}

- (double)worldWidth {
  return worldWidth__;
}

- (double)worldHeight {
  return worldHeight__;
}

+ (void)initialize {
  if (self == [PlaynSampleCuteCoreCuteWorld class]) {
    PlaynSampleCuteCoreCuteWorld_tileNames_ = [IOSObjectArray arrayWithObjects:(id[]){ @"block_brown", @"block_dirt", @"block_grass", @"block_plain", @"block_stone", @"block_wall", @"block_water", @"block_wood", @"ramp_north", @"ramp_east", @"ramp_south", @"ramp_west", @"roof_north", @"roof_northeast", @"roof_east", @"roof_southeast", @"roof_south", @"roof_southwest", @"roof_west", @"roof_northwest" } count:20 type:[IOSClass classWithClass:[NSString class]]];
    PlaynSampleCuteCoreCuteWorld_shadowNames_ = [IOSObjectArray arrayWithObjects:(id[]){ @"shadow_east", @"shadow_northeast", @"shadow_north", @"shadow_northwest", @"shadow_west", @"shadow_southwest", @"shadow_south", @"shadow_southeast", @"shadow_side_west" } count:9 type:[IOSClass classWithClass:[NSString class]]];
    {
      PlaynSampleCuteCoreCuteWorld_EMPTY_STACK_ = [[PlaynSampleCuteCoreCuteWorld_Stack alloc] init];
      ((PlaynSampleCuteCoreCuteWorld_Stack *) NIL_CHK(PlaynSampleCuteCoreCuteWorld_EMPTY_STACK_)).tiles = [[IOSIntArray alloc] initWithLength:0];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynSampleCuteCoreCuteWorld *typedCopy = (PlaynSampleCuteCoreCuteWorld *) copy;
  typedCopy.tiles = tiles_;
  typedCopy.shadows = shadows_;
  typedCopy.world = world_;
  typedCopy.worldWidth_ = worldWidth__;
  typedCopy.worldHeight_ = worldHeight__;
  typedCopy.viewOriginX = viewOriginX_;
  typedCopy.viewOriginY = viewOriginY_;
  typedCopy.viewOriginZ = viewOriginZ_;
  typedCopy.updateCounter = updateCounter_;
}

@end
@implementation PlaynSampleCuteCoreCuteWorld_Stack

@synthesize tiles = tiles_;
@synthesize objects = objects_;

- (int)height {
  return (int) [((IOSIntArray *) NIL_CHK(tiles_)) count];
}

- (id)init {
  if ((self = [super init])) {
    objects_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynSampleCuteCoreCuteWorld_Stack *typedCopy = (PlaynSampleCuteCoreCuteWorld_Stack *) copy;
  typedCopy.tiles = tiles_;
  typedCopy.objects = objects_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/DestroyableList.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSObjectArray.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/System.h"
#import "java/util/ConcurrentModificationException.h"
#import "java/util/Iterator.h"
#import "java/util/NoSuchElementException.h"
#import "tripleplay/util/Destroyable.h"
#import "tripleplay/util/DestroyableList.h"

@implementation TripleplayUtilDestroyableList

@synthesize _data = _data_;
@synthesize _size = _size_;
@synthesize _modCount = _modCount_;

+ (TripleplayUtilDestroyableList *)create {
  return [[TripleplayUtilDestroyableList alloc] initWithInt:8];
}

+ (TripleplayUtilDestroyableList *)createWithCapacityWithInt:(int)initCap {
  return [[TripleplayUtilDestroyableList alloc] initWithInt:initCap];
}

- (id)initWithInt:(int)initCap {
  if ((self = [super init])) {
    if (initCap < 0) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal Capacity: %d", initCap]];
    _data_ = [[IOSObjectArray alloc] initWithLength:initCap type:[IOSClass classWithClass:[NSObject class]]];
  }
  return self;
}

- (int)size {
  return _size_;
}

- (BOOL)isEmpty {
  return _size_ == 0;
}

- (id)getWithInt:(int)index {
  if (index >= _size_) @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[self outOfBoundsMsgWithInt:index]];
  id<TripleplayUtilDestroyable> elem = (id<TripleplayUtilDestroyable>) [((IOSObjectArray *) NIL_CHK(_data_)) objectAtIndex:index];
  return elem;
}

- (id)addWithId:(id<TripleplayUtilDestroyable>)elem {
  if (elem == nil) @throw [[JavaLangNullPointerException alloc] init];
  [self ensureCapacityWithInt:_size_ + 1];
  [((IOSObjectArray *) NIL_CHK(_data_)) replaceObjectAtIndex:_size_++ withObject:elem];
  return elem;
}

- (id)addWithInt:(int)index
          withId:(id<TripleplayUtilDestroyable>)elem {
  if (index > _size_ || index < 0) @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[self outOfBoundsMsgWithInt:index]];
  if (elem == nil) @throw [[JavaLangNullPointerException alloc] init];
  [self ensureCapacityWithInt:_size_ + 1];
  [JavaLangSystem arraycopyWithId:_data_ withInt:index withId:_data_ withInt:index + 1 withInt:_size_ - index];
  [((IOSObjectArray *) NIL_CHK(_data_)) replaceObjectAtIndex:index withObject:elem];
  _size_++;
  return elem;
}

- (id)removeWithInt:(int)index {
  id<TripleplayUtilDestroyable> oldValue = [self getWithInt:index];
  _modCount_++;
  int numMoved = _size_ - index - 1;
  if (numMoved > 0) [JavaLangSystem arraycopyWithId:_data_ withInt:index + 1 withId:_data_ withInt:index withInt:numMoved];
  [((IOSObjectArray *) NIL_CHK(_data_)) replaceObjectAtIndex:--_size_ withObject:nil];
  [((id<TripleplayUtilDestroyable>) NIL_CHK(oldValue)) destroy];
  return oldValue;
}

- (BOOL)removeWithId:(id<TripleplayUtilDestroyable>)elem {
  if (elem == nil) @throw [[JavaLangNullPointerException alloc] init];
  IOSObjectArray *data = _data_;
  for (int ii = 0, ll = _size_; ii < ll; ii++) {
    if ([((id<TripleplayUtilDestroyable>) NIL_CHK(elem)) isEqual:[((IOSObjectArray *) NIL_CHK(data)) objectAtIndex:ii]]) {
      (void) [self removeWithInt:ii];
      return YES;
    }
  }
  return NO;
}

- (void)clear {
  _modCount_++;
  IOSObjectArray *data = _data_;
  for (int ii = 0, ll = _size_; ii < ll; ii++) {
    id<TripleplayUtilDestroyable> elem = (id<TripleplayUtilDestroyable>) [((IOSObjectArray *) NIL_CHK(data)) objectAtIndex:ii];
    [((id<TripleplayUtilDestroyable>) NIL_CHK(elem)) destroy];
    [((IOSObjectArray *) NIL_CHK(data)) replaceObjectAtIndex:ii withObject:nil];
  }
  _size_ = 0;
}

- (id<JavaUtilIterator>)iterator {
  return [[TripleplayUtilDestroyableList_$1 alloc] initWithTripleplayUtilDestroyableList:self];
}

- (void)ensureCapacityWithInt:(int)minCapacity {
  _modCount_++;
  int oldCapacity = (int) [((IOSObjectArray *) NIL_CHK(_data_)) count];
  if (minCapacity > oldCapacity) {
    int newCapacity = (oldCapacity * 3) / 2 + 1;
    if (newCapacity < minCapacity) newCapacity = minCapacity;
    IOSObjectArray *newData = [[IOSObjectArray alloc] initWithLength:newCapacity type:[IOSClass classWithClass:[NSObject class]]];
    [JavaLangSystem arraycopyWithId:_data_ withInt:0 withId:newData withInt:0 withInt:oldCapacity];
    _data_ = newData;
  }
}

- (NSString *)outOfBoundsMsgWithInt:(int)index {
  return [NSString stringWithFormat:@"Index: %d, Size: %d", index, _size_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilDestroyableList *typedCopy = (TripleplayUtilDestroyableList *) copy;
  typedCopy._data = _data_;
  typedCopy._size = _size_;
  typedCopy._modCount = _modCount_;
}

@end
@implementation TripleplayUtilDestroyableList_$1

@synthesize this$0 = this$0_;
@synthesize _cursor = _cursor_;
@synthesize _lastRet = _lastRet_;
@synthesize _exModCount = _exModCount_;

- (BOOL)hasNext {
  return _cursor_ != this$0_._size;
}

- (id)next {
  [self checkForComodification];
  int ii = _cursor_;
  if (ii >= this$0_._size) @throw [[JavaUtilNoSuchElementException alloc] init];
  IOSObjectArray *data = this$0_._data;
  if (ii >= (int) [((IOSObjectArray *) NIL_CHK(data)) count]) @throw [[JavaUtilConcurrentModificationException alloc] init];
  _cursor_ = ii + 1;
  id<TripleplayUtilDestroyable> elem = (id<TripleplayUtilDestroyable>) [((IOSObjectArray *) NIL_CHK(data)) objectAtIndex:_lastRet_ = ii];
  return elem;
}

- (void)remove {
  if (_lastRet_ < 0) @throw [[JavaLangIllegalStateException alloc] init];
  [self checkForComodification];
  @try {
    (void) [this$0_ removeWithInt:_lastRet_];
    _cursor_ = _lastRet_;
    _lastRet_ = -1;
    _exModCount_ = this$0_._modCount;
  }
  @catch (JavaLangIndexOutOfBoundsException *ex) {
    @throw [[JavaUtilConcurrentModificationException alloc] init];
  }
}

- (void)checkForComodification {
  if (this$0_._modCount != _exModCount_) @throw [[JavaUtilConcurrentModificationException alloc] init];
}

- (id)initWithTripleplayUtilDestroyableList:(TripleplayUtilDestroyableList *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    _lastRet_ = -1;
    _exModCount_ = outer$._modCount;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilDestroyableList_$1 *typedCopy = (TripleplayUtilDestroyableList_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._cursor = _cursor_;
  typedCopy._lastRet = _lastRet_;
  typedCopy._exModCount = _exModCount_;
}

@end

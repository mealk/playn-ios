//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Interpolator.java
//
//  Created by Thomas on 7/10/13.
//

#import "tripleplay/util/Interpolator.h"

@implementation TripleplayUtilInterpolator

static TripleplayUtilInterpolator * TripleplayUtilInterpolator_NOOP_;
static TripleplayUtilInterpolator * TripleplayUtilInterpolator_LINEAR_;
static TripleplayUtilInterpolator * TripleplayUtilInterpolator_EASE_IN_;
static TripleplayUtilInterpolator * TripleplayUtilInterpolator_EASE_OUT_;
static TripleplayUtilInterpolator * TripleplayUtilInterpolator_EASE_INOUT_;

+ (TripleplayUtilInterpolator *)NOOP {
  return TripleplayUtilInterpolator_NOOP_;
}

+ (void)setNOOP:(TripleplayUtilInterpolator *)NOOP {
  TripleplayUtilInterpolator_NOOP_ = NOOP;
}

+ (TripleplayUtilInterpolator *)LINEAR {
  return TripleplayUtilInterpolator_LINEAR_;
}

+ (void)setLINEAR:(TripleplayUtilInterpolator *)LINEAR {
  TripleplayUtilInterpolator_LINEAR_ = LINEAR;
}

+ (TripleplayUtilInterpolator *)EASE_IN {
  return TripleplayUtilInterpolator_EASE_IN_;
}

+ (void)setEASE_IN:(TripleplayUtilInterpolator *)EASE_IN {
  TripleplayUtilInterpolator_EASE_IN_ = EASE_IN;
}

+ (TripleplayUtilInterpolator *)EASE_OUT {
  return TripleplayUtilInterpolator_EASE_OUT_;
}

+ (void)setEASE_OUT:(TripleplayUtilInterpolator *)EASE_OUT {
  TripleplayUtilInterpolator_EASE_OUT_ = EASE_OUT;
}

+ (TripleplayUtilInterpolator *)EASE_INOUT {
  return TripleplayUtilInterpolator_EASE_INOUT_;
}

+ (void)setEASE_INOUT:(TripleplayUtilInterpolator *)EASE_INOUT {
  TripleplayUtilInterpolator_EASE_INOUT_ = EASE_INOUT;
}

- (float)applyWithFloat:(float)start
              withFloat:(float)range
              withFloat:(float)dt
              withFloat:(float)t {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TripleplayUtilInterpolator class]) {
    TripleplayUtilInterpolator_NOOP_ = [[TripleplayUtilInterpolator_$1 alloc] init];
    TripleplayUtilInterpolator_LINEAR_ = [[TripleplayUtilInterpolator_$2 alloc] init];
    TripleplayUtilInterpolator_EASE_IN_ = [[TripleplayUtilInterpolator_$3 alloc] init];
    TripleplayUtilInterpolator_EASE_OUT_ = [[TripleplayUtilInterpolator_$4 alloc] init];
    TripleplayUtilInterpolator_EASE_INOUT_ = [[TripleplayUtilInterpolator_$5 alloc] init];
  }
}

@end
@implementation TripleplayUtilInterpolator_$1

- (float)applyWithFloat:(float)start
              withFloat:(float)range
              withFloat:(float)dt
              withFloat:(float)t {
  return start;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilInterpolator_$2

- (float)applyWithFloat:(float)start
              withFloat:(float)range
              withFloat:(float)dt
              withFloat:(float)t {
  if (t == 0) return start + range;
  return start + range * dt / t;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilInterpolator_$3

- (float)applyWithFloat:(float)start
              withFloat:(float)range
              withFloat:(float)dt
              withFloat:(float)t {
  if (t == 0) return start + range;
  float dtt = dt / t;
  return start + range * dtt * dtt * dtt;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilInterpolator_$4

- (float)applyWithFloat:(float)start
              withFloat:(float)range
              withFloat:(float)dt
              withFloat:(float)t {
  if (t == 0) return start + range;
  float dtt = dt / t - 1;
  return start + range * (1 + dtt * dtt * dtt);
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilInterpolator_$5

- (float)applyWithFloat:(float)start
              withFloat:(float)range
              withFloat:(float)dt
              withFloat:(float)t {
  if (t == 0) return start + range;
  float hdtt = dt / (t / 2);
  if (hdtt < 1) {
    return start + range / 2 * hdtt * hdtt * hdtt;
  }
  else {
    float nhdtt = hdtt - 2;
    return start + range / 2 * (2 + nhdtt * nhdtt * nhdtt);
  }
}

- (id)init {
  return [super init];
}

@end

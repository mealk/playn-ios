//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Timer.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "java/lang/Exception.h"
#import "java/lang/Runnable.h"
#import "java/lang/System.h"
#import "playn/core/Log.h"
#import "playn/core/PlayN.h"
#import "tripleplay/util/Timer.h"

@implementation TripleplayUtilTimer

@synthesize _root = _root_;
@synthesize _currentTime = _currentTime_;

- (id)init {
  return [self initTripleplayUtilTimerWithLongInt:[JavaLangSystem currentTimeMillis]];
}

- (id<TripleplayUtilTimer_Handle>)afterWithInt:(int)millis
                          withJavaLangRunnable:(id<JavaLangRunnable>)action {
  return [self addWithInt:millis withInt:0 withJavaLangRunnable:action];
}

- (id<TripleplayUtilTimer_Handle>)everyWithInt:(int)millis
                          withJavaLangRunnable:(id<JavaLangRunnable>)action {
  return [self atThenEveryWithInt:millis withInt:millis withJavaLangRunnable:action];
}

- (id<TripleplayUtilTimer_Handle>)atThenEveryWithInt:(int)initialMillis
                                             withInt:(int)repeatMillis
                                withJavaLangRunnable:(id<JavaLangRunnable>)action {
  return [self addWithInt:initialMillis withInt:repeatMillis withJavaLangRunnable:action];
}

- (void)update {
  [self updateWithLongInt:[JavaLangSystem currentTimeMillis]];
}

- (id)initTripleplayUtilTimerWithLongInt:(long long int)now {
  if ((self = [super init])) {
    _root_ = [[TripleplayUtilTimer_Action alloc] initWithTripleplayUtilTimer:self withInt:0 withInt:0 withJavaLangRunnable:nil];
    _currentTime_ = now;
  }
  return self;
}

- (id)initWithLongInt:(long long int)now {
  return [self initTripleplayUtilTimerWithLongInt:now];
}

- (void)updateWithLongInt:(long long int)now {
  _currentTime_ = now;
  TripleplayUtilTimer_Action *root = _root_;
  while (((TripleplayUtilTimer_Action *) NIL_CHK(root)).next != nil && ((TripleplayUtilTimer_Action *) NIL_CHK(root.next)).nextExpire <= now) {
    TripleplayUtilTimer_Action *act = ((TripleplayUtilTimer_Action *) NIL_CHK(root)).next;
    if (![((TripleplayUtilTimer_Action *) NIL_CHK(act)) cancelled]) {
      [self executeWithJavaLangRunnable:((TripleplayUtilTimer_Action *) NIL_CHK(act)).action];
      if (((TripleplayUtilTimer_Action *) NIL_CHK(act)).repeatMillis == 0) {
        [((TripleplayUtilTimer_Action *) NIL_CHK(act)) cancel];
      }
      else if (![((TripleplayUtilTimer_Action *) NIL_CHK(act)) cancelled]) {
        ((TripleplayUtilTimer_Action *) NIL_CHK(act)).nextExpire += ((TripleplayUtilTimer_Action *) NIL_CHK(act)).repeatMillis;
        ((TripleplayUtilTimer_Action *) NIL_CHK(root)).next = [self insertWithTripleplayUtilTimer_Action:act withTripleplayUtilTimer_Action:((TripleplayUtilTimer_Action *) NIL_CHK(act)).next];
      }
    }
  }
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  @try {
    [((id<JavaLangRunnable>) NIL_CHK(runnable)) run];
  }
  @catch (JavaLangException *e) {
    [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:@"Action failed" withJavaLangThrowable:e];
  }
}

- (id<TripleplayUtilTimer_Handle>)addWithInt:(int)initialMillis
                                     withInt:(int)repeatMillis
                        withJavaLangRunnable:(id<JavaLangRunnable>)action {
  TripleplayUtilTimer_Action *act = [[TripleplayUtilTimer_Action alloc] initWithTripleplayUtilTimer:self withInt:initialMillis withInt:repeatMillis withJavaLangRunnable:action];
  ((TripleplayUtilTimer_Action *) NIL_CHK(_root_)).next = [self insertWithTripleplayUtilTimer_Action:act withTripleplayUtilTimer_Action:((TripleplayUtilTimer_Action *) NIL_CHK(_root_)).next];
  return act;
}

- (TripleplayUtilTimer_Action *)insertWithTripleplayUtilTimer_Action:(TripleplayUtilTimer_Action *)target
                                      withTripleplayUtilTimer_Action:(TripleplayUtilTimer_Action *)tail {
  if (tail == nil || ((TripleplayUtilTimer_Action *) NIL_CHK(tail)).nextExpire > ((TripleplayUtilTimer_Action *) NIL_CHK(target)).nextExpire) {
    ((TripleplayUtilTimer_Action *) NIL_CHK(target)).next = tail;
    return target;
  }
  else {
    ((TripleplayUtilTimer_Action *) NIL_CHK(tail)).next = [self insertWithTripleplayUtilTimer_Action:target withTripleplayUtilTimer_Action:((TripleplayUtilTimer_Action *) NIL_CHK(tail)).next];
    return tail;
  }
}

- (TripleplayUtilTimer_Action *)removeWithTripleplayUtilTimer_Action:(TripleplayUtilTimer_Action *)target
                                      withTripleplayUtilTimer_Action:(TripleplayUtilTimer_Action *)tail {
  if (target == tail) return ((TripleplayUtilTimer_Action *) NIL_CHK(tail)).next;
  else if (tail == nil) return nil;
  else {
    tail.next = [self removeWithTripleplayUtilTimer_Action:target withTripleplayUtilTimer_Action:tail.next];
    return tail;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTimer *typedCopy = (TripleplayUtilTimer *) copy;
  typedCopy._root = _root_;
  typedCopy._currentTime = _currentTime_;
}

@end
@implementation TripleplayUtilTimer_Action

@synthesize this$0 = this$0_;
@synthesize repeatMillis = repeatMillis_;
@synthesize action = action_;
@synthesize nextExpire = nextExpire_;
@synthesize next = next_;

- (id)initWithTripleplayUtilTimer:(TripleplayUtilTimer *)outer$
                          withInt:(int)initialMillis
                          withInt:(int)repeatMillis
             withJavaLangRunnable:(id<JavaLangRunnable>)action {
  if ((self = [super init])) {
    this$0_ = outer$;
    self.nextExpire = outer$._currentTime + initialMillis;
    self.repeatMillis = repeatMillis;
    self.action = action;
  }
  return self;
}

- (BOOL)cancelled {
  return nextExpire_ == -1;
}

- (void)cancel {
  if (![self cancelled]) {
    ((TripleplayUtilTimer_Action *) NIL_CHK(this$0_._root)).next = [this$0_ removeWithTripleplayUtilTimer_Action:self withTripleplayUtilTimer_Action:((TripleplayUtilTimer_Action *) NIL_CHK(this$0_._root)).next];
    nextExpire_ = -1;
    next_ = nil;
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%qi/%d/%@ -> %@", nextExpire_, repeatMillis_, action_, next_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTimer_Action *typedCopy = (TripleplayUtilTimer_Action *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.repeatMillis = repeatMillis_;
  typedCopy.action = action_;
  typedCopy.nextExpire = nextExpire_;
  typedCopy.next = next_;
}

@end

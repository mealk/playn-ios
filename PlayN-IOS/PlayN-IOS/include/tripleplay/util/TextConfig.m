//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/TextConfig.java
//
//  Created by Thomas on 7/25/13.
//

#include "playn/core/Asserts.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/Font.h"
#include "playn/core/Graphics.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/PlayN.h"
#include "playn/core/TextFormat.h"
#include "playn/core/TextLayout.h"
#include "tripleplay/util/EffectRenderer.h"
#include "tripleplay/util/TextConfig.h"

@implementation TripleplayUtilTextConfig

@synthesize format = format_;
@synthesize textColor = textColor_;
@synthesize effect = effect_;
@synthesize underlined = underlined_;

- (id)initWithInt:(int)textColor {
  return [self initTripleplayUtilTextConfigWithPlaynCoreTextFormat:[[PlaynCoreTextFormat alloc] init] withInt:textColor withTripleplayUtilEffectRenderer:[TripleplayUtilEffectRenderer NONE]];
}

- (id)initWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)format
                          withInt:(int)textColor {
  return [self initTripleplayUtilTextConfigWithPlaynCoreTextFormat:format withInt:textColor withTripleplayUtilEffectRenderer:[TripleplayUtilEffectRenderer NONE]];
}

- (id)initTripleplayUtilTextConfigWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)format
                                                  withInt:(int)textColor
                         withTripleplayUtilEffectRenderer:(TripleplayUtilEffectRenderer *)effect {
  return [self initTripleplayUtilTextConfigWithPlaynCoreTextFormat:format withInt:textColor withTripleplayUtilEffectRenderer:effect withBOOL:NO];
}

- (id)initWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)format
                          withInt:(int)textColor
 withTripleplayUtilEffectRenderer:(TripleplayUtilEffectRenderer *)effect {
  return [self initTripleplayUtilTextConfigWithPlaynCoreTextFormat:format withInt:textColor withTripleplayUtilEffectRenderer:effect];
}

- (id)initTripleplayUtilTextConfigWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)format
                                                  withInt:(int)textColor
                         withTripleplayUtilEffectRenderer:(TripleplayUtilEffectRenderer *)effect
                                                 withBOOL:(BOOL)underlined {
  if ((self = [super init])) {
    self.format = [PlaynCoreAsserts checkNotNullWithId:format];
    self.textColor = textColor;
    self.effect = [PlaynCoreAsserts checkNotNullWithId:effect];
    self.underlined = underlined;
  }
  return self;
}

- (id)initWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)format
                          withInt:(int)textColor
 withTripleplayUtilEffectRenderer:(TripleplayUtilEffectRenderer *)effect
                         withBOOL:(BOOL)underlined {
  return [self initTripleplayUtilTextConfigWithPlaynCoreTextFormat:format withInt:textColor withTripleplayUtilEffectRenderer:effect withBOOL:underlined];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[TripleplayUtilTextConfig class]])) return NO;
  TripleplayUtilTextConfig *that = (TripleplayUtilTextConfig *) other;
  return [((PlaynCoreTextFormat *) nil_chk(format_)) isEqual:((TripleplayUtilTextConfig *) nil_chk(that)).format] && effect_ == ((TripleplayUtilTextConfig *) nil_chk(that)).effect && underlined_ == ((TripleplayUtilTextConfig *) nil_chk(that)).underlined && textColor_ == ((TripleplayUtilTextConfig *) nil_chk(that)).textColor;
}

- (NSUInteger)hash {
  return [((PlaynCoreTextFormat *) nil_chk(format_)) hash] ^ [((TripleplayUtilEffectRenderer *) nil_chk(effect_)) hash] ^ (underlined_ ? 1 : 0) ^ textColor_;
}

- (TripleplayUtilTextConfig *)withFormatWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)format {
  return [[TripleplayUtilTextConfig alloc] initWithPlaynCoreTextFormat:format withInt:textColor_ withTripleplayUtilEffectRenderer:effect_ withBOOL:underlined_];
}

- (TripleplayUtilTextConfig *)withFontWithPlaynCoreFont:(id<PlaynCoreFont>)font {
  return [[TripleplayUtilTextConfig alloc] initWithPlaynCoreTextFormat:[((PlaynCoreTextFormat *) nil_chk(format_)) withFontWithPlaynCoreFont:font] withInt:textColor_ withTripleplayUtilEffectRenderer:effect_ withBOOL:underlined_];
}

- (TripleplayUtilTextConfig *)withColorWithInt:(int)textColor {
  return [[TripleplayUtilTextConfig alloc] initWithPlaynCoreTextFormat:format_ withInt:textColor withTripleplayUtilEffectRenderer:effect_ withBOOL:underlined_];
}

- (TripleplayUtilTextConfig *)withShadowWithInt:(int)shadowColor
                                      withFloat:(float)shadowX
                                      withFloat:(float)shadowY {
  return [[TripleplayUtilTextConfig alloc] initWithPlaynCoreTextFormat:format_ withInt:textColor_ withTripleplayUtilEffectRenderer:[[TripleplayUtilEffectRenderer_Shadow alloc] initWithInt:shadowColor withFloat:shadowX withFloat:shadowY] withBOOL:underlined_];
}

- (TripleplayUtilTextConfig *)withOutlineWithInt:(int)outlineColor {
  return [[TripleplayUtilTextConfig alloc] initWithPlaynCoreTextFormat:format_ withInt:textColor_ withTripleplayUtilEffectRenderer:[[TripleplayUtilEffectRenderer_PixelOutline alloc] initWithInt:outlineColor] withBOOL:underlined_];
}

- (TripleplayUtilTextConfig *)withOutlineWithInt:(int)outlineColor
                                       withFloat:(float)outlineWidth {
  return [[TripleplayUtilTextConfig alloc] initWithPlaynCoreTextFormat:format_ withInt:textColor_ withTripleplayUtilEffectRenderer:[[TripleplayUtilEffectRenderer_VectorOutline alloc] initWithInt:outlineColor withFloat:outlineWidth] withBOOL:underlined_];
}

- (TripleplayUtilTextConfig *)withUnderlineWithBOOL:(BOOL)underlined {
  return [[TripleplayUtilTextConfig alloc] initWithPlaynCoreTextFormat:format_ withInt:textColor_ withTripleplayUtilEffectRenderer:effect_ withBOOL:underlined];
}

- (id<PlaynCoreTextLayout>)layoutWithNSString:(NSString *)text {
  return [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) layoutTextWithNSString:text withPlaynCoreTextFormat:format_];
}

- (id<PlaynCoreCanvasImage>)createImageWithPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout {
  return [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageWithFloat:[((TripleplayUtilEffectRenderer *) nil_chk(effect_)) adjustWidthWithFloat:[((id<PlaynCoreTextLayout>) nil_chk(layout)) width]] withFloat:[((TripleplayUtilEffectRenderer *) nil_chk(effect_)) adjustHeightWithFloat:[((id<PlaynCoreTextLayout>) nil_chk(layout)) height]]];
}

- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
          withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout
                        withFloat:(float)x
                        withFloat:(float)y {
  [((TripleplayUtilEffectRenderer *) nil_chk(effect_)) renderWithPlaynCoreCanvas:canvas withPlaynCoreTextLayout:layout withInt:textColor_ withBOOL:underlined_ withFloat:x withFloat:y];
}

- (id<PlaynCoreCanvasImage>)toImageWithNSString:(NSString *)text {
  return [self toImageWithPlaynCoreTextLayout:[self layoutWithNSString:text]];
}

- (id<PlaynCoreCanvasImage>)toImageWithPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout {
  id<PlaynCoreCanvasImage> image = [self createImageWithPlaynCoreTextLayout:layout];
  [self renderWithPlaynCoreCanvas:[((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas] withPlaynCoreTextLayout:layout withFloat:0 withFloat:0];
  return image;
}

- (id<PlaynCoreImageLayer>)toLayerWithNSString:(NSString *)text {
  return [self toLayerWithPlaynCoreTextLayout:[self layoutWithNSString:text]];
}

- (id<PlaynCoreImageLayer>)toLayerWithPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout {
  return [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createImageLayerWithPlaynCoreImage:[self toImageWithPlaynCoreTextLayout:layout]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTextConfig *typedCopy = (TripleplayUtilTextConfig *) copy;
  typedCopy.format = format_;
  typedCopy.textColor = textColor_;
  typedCopy.effect = effect_;
  typedCopy.underlined = underlined_;
}

@end

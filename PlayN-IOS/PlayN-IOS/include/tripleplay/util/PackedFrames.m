//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/PackedFrames.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Float.h"
#include "playn/core/Image.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Json.h"
#include "playn/core/Layer.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Rectangle.h"
#include "tripleplay/util/PackedFrames.h"

@implementation TripleplayUtilPackedFrames

@synthesize _source = _source_;
@synthesize _width = _width_;
@synthesize _height = _height_;
@synthesize _frames = _frames_;

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)source
    withPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)meta {
  return [self initTripleplayUtilPackedFramesWithPlaynCoreImage:source withFloat:[((id<PlaynCoreJson_Object>) nil_chk(meta)) getNumberWithNSString:@"width"] withFloat:[((id<PlaynCoreJson_Object>) nil_chk(meta)) getNumberWithNSString:@"height"] withTripleplayUtilPackedFrames_FrameArray:[TripleplayUtilPackedFrames parseFramesWithPlaynCoreJson_Object:meta]];
}

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)source
             withFloatArray2:(IOSObjectArray *)meta {
  return [self initTripleplayUtilPackedFramesWithPlaynCoreImage:source withFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:0])) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:0])) floatAtIndex:1] withTripleplayUtilPackedFrames_FrameArray:[TripleplayUtilPackedFrames parseFramesWithFloatArray2:meta]];
}

- (id)initTripleplayUtilPackedFramesWithPlaynCoreImage:(id<PlaynCoreImage>)source
                                             withFloat:(float)width
                                             withFloat:(float)height
             withTripleplayUtilPackedFrames_FrameArray:(IOSObjectArray *)frames {
  if ((self = [super init])) {
    _source_ = source;
    _width_ = width;
    _height_ = height;
    _frames_ = frames;
  }
  return self;
}

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)source
                   withFloat:(float)width
                   withFloat:(float)height
withTripleplayUtilPackedFrames_FrameArray:(IOSObjectArray *)frames {
  return [self initTripleplayUtilPackedFramesWithPlaynCoreImage:source withFloat:width withFloat:height withTripleplayUtilPackedFrames_FrameArray:frames];
}

- (float)width {
  return _width_;
}

- (float)height {
  return _height_;
}

- (int)count {
  return (int) [((IOSObjectArray *) nil_chk(_frames_)) count];
}

- (id<PlaynCoreImage>)frameWithInt:(int)index {
  PythagorasFRectangle *b = ((TripleplayUtilPackedFrames_Frame *) nil_chk([((IOSObjectArray *) nil_chk(_frames_)) objectAtIndex:index])).bounds;
  return [((id<PlaynCoreImage>) nil_chk(_source_)) subImageWithFloat:((PythagorasFRectangle *) nil_chk(b)).x_ withFloat:((PythagorasFRectangle *) nil_chk(b)).y_ withFloat:((PythagorasFRectangle *) nil_chk(b)).width_ withFloat:((PythagorasFRectangle *) nil_chk(b)).height_];
}

- (PythagorasFPoint *)offsetWithInt:(int)index {
  return ((TripleplayUtilPackedFrames_Frame *) nil_chk([((IOSObjectArray *) nil_chk(_frames_)) objectAtIndex:index])).offset;
}

- (void)applyWithInt:(int)index
withPlaynCoreImageLayer:(id<PlaynCoreImageLayer>)layer {
  TripleplayUtilPackedFrames_Frame *f = [((IOSObjectArray *) nil_chk(_frames_)) objectAtIndex:index];
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setTranslationWithFloat:((PythagorasFPoint *) nil_chk(((TripleplayUtilPackedFrames_Frame *) nil_chk(f)).offset)).x_ withFloat:((PythagorasFPoint *) nil_chk(((TripleplayUtilPackedFrames_Frame *) nil_chk(f)).offset)).y_];
  id<PlaynCoreImage> cur = [((id<PlaynCoreImageLayer>) nil_chk(layer)) image];
  if ([(id) cur conformsToProtocol: @protocol(PlaynCoreImage_Region)]) {
    id<PlaynCoreImage_Region> curr = (id<PlaynCoreImage_Region>) cur;
    if ([((id<PlaynCoreImage_Region>) nil_chk(curr)) parent] == _source_) {
      [((id<PlaynCoreImage_Region>) nil_chk(curr)) setBoundsWithFloat:((PythagorasFRectangle *) nil_chk(((TripleplayUtilPackedFrames_Frame *) nil_chk(f)).bounds)).x_ withFloat:((PythagorasFRectangle *) nil_chk(((TripleplayUtilPackedFrames_Frame *) nil_chk(f)).bounds)).y_ withFloat:((PythagorasFRectangle *) nil_chk(((TripleplayUtilPackedFrames_Frame *) nil_chk(f)).bounds)).width_ withFloat:((PythagorasFRectangle *) nil_chk(((TripleplayUtilPackedFrames_Frame *) nil_chk(f)).bounds)).height_];
      return;
    }
  }
  (void) [((id<PlaynCoreImageLayer>) nil_chk(layer)) setImageWithPlaynCoreImage:[self frameWithInt:index]];
}

+ (IOSObjectArray *)parseFramesWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)meta {
  id<PlaynCoreJson_Array> jframes = [((id<PlaynCoreJson_Object>) nil_chk(meta)) getArrayWithNSString:@"frames"];
  IOSObjectArray *frames = [IOSObjectArray arrayWithLength:[((id<PlaynCoreJson_Array>) nil_chk(jframes)) length] type:[IOSClass classWithClass:[TripleplayUtilPackedFrames_Frame class]]];
  for (int ii = 0; ii < (int) [((IOSObjectArray *) nil_chk(frames)) count]; ii++) {
    id<PlaynCoreJson_Object> frame = [((id<PlaynCoreJson_Array>) nil_chk(jframes)) getObjectWithInt:ii];
    id<PlaynCoreJson_TypedArray> off = [((id<PlaynCoreJson_Object>) nil_chk(frame)) getArrayWithNSString:@"off" withIOSClass:[IOSClass classWithClass:[JavaLangFloat class]]];
    id<PlaynCoreJson_TypedArray> src = [((id<PlaynCoreJson_Object>) nil_chk(frame)) getArrayWithNSString:@"src" withIOSClass:[IOSClass classWithClass:[JavaLangFloat class]]];
    (void) [((IOSObjectArray *) nil_chk(frames)) replaceObjectAtIndex:[((id<PlaynCoreJson_Object>) nil_chk(frame)) getIntWithNSString:@"idx"] withObject:[[TripleplayUtilPackedFrames_Frame alloc] initWithPythagorasFPoint:[[PythagorasFPoint alloc] initWithFloat:[((JavaLangFloat *) nil_chk([((id<PlaynCoreJson_TypedArray>) nil_chk(off)) getWithInt:0])) floatValue] withFloat:[((JavaLangFloat *) nil_chk([((id<PlaynCoreJson_TypedArray>) nil_chk(off)) getWithInt:1])) floatValue]] withPythagorasFRectangle:[[PythagorasFRectangle alloc] initWithFloat:[((JavaLangFloat *) nil_chk([((id<PlaynCoreJson_TypedArray>) nil_chk(src)) getWithInt:0])) floatValue] withFloat:[((JavaLangFloat *) nil_chk([((id<PlaynCoreJson_TypedArray>) nil_chk(src)) getWithInt:1])) floatValue] withFloat:[((JavaLangFloat *) nil_chk([((id<PlaynCoreJson_TypedArray>) nil_chk(src)) getWithInt:2])) floatValue] withFloat:[((JavaLangFloat *) nil_chk([((id<PlaynCoreJson_TypedArray>) nil_chk(src)) getWithInt:3])) floatValue]]]];
  }
  return frames;
}

+ (IOSObjectArray *)parseFramesWithFloatArray2:(IOSObjectArray *)meta {
  IOSObjectArray *frames = [IOSObjectArray arrayWithLength:((int) [((IOSObjectArray *) nil_chk(meta)) count] - 1) / 2 type:[IOSClass classWithClass:[TripleplayUtilPackedFrames_Frame class]]];
  for (int ii = 0, mm = 1; ii < (int) [((IOSObjectArray *) nil_chk(frames)) count]; ii++) {
    (void) [((IOSObjectArray *) nil_chk(frames)) replaceObjectAtIndex:ii withObject:[[TripleplayUtilPackedFrames_Frame alloc] initWithPythagorasFPoint:[[PythagorasFPoint alloc] initWithFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:mm])) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:mm++])) floatAtIndex:1]] withPythagorasFRectangle:[[PythagorasFRectangle alloc] initWithFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:mm])) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:mm])) floatAtIndex:1] withFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:mm])) floatAtIndex:2] withFloat:[((IOSFloatArray *) nil_chk([((IOSObjectArray *) nil_chk(meta)) objectAtIndex:mm++])) floatAtIndex:3]]]];
  }
  return frames;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilPackedFrames *typedCopy = (TripleplayUtilPackedFrames *) copy;
  typedCopy._source = _source_;
  typedCopy._width = _width_;
  typedCopy._height = _height_;
  typedCopy._frames = _frames_;
}

@end
@implementation TripleplayUtilPackedFrames_Frame

@synthesize offset = offset_;
@synthesize bounds = bounds_;

- (id)initWithPythagorasFPoint:(PythagorasFPoint *)offset
      withPythagorasFRectangle:(PythagorasFRectangle *)bounds {
  if ((self = [super init])) {
    self.offset = offset;
    self.bounds = bounds;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilPackedFrames_Frame *typedCopy = (TripleplayUtilPackedFrames_Frame *) copy;
  typedCopy.offset = offset_;
  typedCopy.bounds = bounds_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Glyph.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "java/lang/Float.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/TextLayout.h"
#import "pythagoras/f/IDimension.h"
#import "tripleplay/util/EffectRenderer.h"
#import "tripleplay/util/Glyph.h"
#import "tripleplay/util/Ref.h"
#import "tripleplay/util/TextConfig.h"

@implementation TripleplayUtilGlyph

@synthesize _parent = _parent_;
@synthesize _depth = _depth_;
@synthesize _image = _image_;
@synthesize _layer = _layer_;
@synthesize _preparedWidth = _preparedWidth_;
@synthesize _preparedHeight = _preparedHeight_;

- (id)initWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)parent {
  if ((self = [super init])) {
    _layer_ = ((TripleplayUtilRef *) [TripleplayUtilRef createWithId:nil]);
    _parent_ = parent;
    _depth_ = nil;
  }
  return self;
}

- (id)initWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)parent
                        withFloat:(float)depth {
  if ((self = [super init])) {
    _layer_ = ((TripleplayUtilRef *) [TripleplayUtilRef createWithId:nil]);
    _parent_ = parent;
    _depth_ = [JavaLangFloat valueOfWithFloat:depth];
  }
  return self;
}

- (void)prepareWithPythagorasFIDimension:(id<PythagorasFIDimension>)dim {
  [self prepareWithFloat:[((id<PythagorasFIDimension>) NIL_CHK(dim)) width] withFloat:[((id<PythagorasFIDimension>) NIL_CHK(dim)) height]];
}

- (void)prepareWithFloat:(float)width
               withFloat:(float)height {
  id<PlaynCoreImageLayer> layer = ((id<PlaynCoreImageLayer>) [((TripleplayUtilRef *) NIL_CHK(_layer_)) get]);
  if (_image_ == nil || [((id<PlaynCoreCanvasImage>) NIL_CHK(_image_)) width] < width || [((id<PlaynCoreCanvasImage>) NIL_CHK(_image_)) height] < height) {
    _image_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:width withFloat:height];
    if (layer != nil) (void) [layer setImageWithPlaynCoreImage:_image_];
  }
  else {
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(_image_)) canvas]) clear];
  }
  if (layer == nil) {
    layer = ((id<PlaynCoreImageLayer>) [((TripleplayUtilRef *) NIL_CHK(_layer_)) setWithId:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:_image_]]);
    if (_depth_ != nil) (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setDepthWithFloat:[_depth_ floatValue]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(_parent_)) addWithPlaynCoreLayer:layer];
  }
  _preparedWidth_ = width;
  _preparedHeight_ = height;
}

- (id<PlaynCoreImageLayer>)layer {
  return ((id<PlaynCoreImageLayer>) [((TripleplayUtilRef *) NIL_CHK(_layer_)) get]);
}

- (id<PlaynCoreCanvas>)canvas {
  return [((id<PlaynCoreCanvasImage>) NIL_CHK(_image_)) canvas];
}

- (void)destroy {
  [((TripleplayUtilRef *) NIL_CHK(_layer_)) clear];
  _image_ = nil;
}

- (float)preparedWidth {
  return _preparedWidth_;
}

- (float)preparedHeight {
  return _preparedHeight_;
}

- (void)renderTextWithTripleplayUtilTextConfig:(TripleplayUtilTextConfig *)config
                                  withNSString:(NSString *)text {
  [self renderTextWithTripleplayUtilTextConfig:config withPlaynCoreTextLayout:[((TripleplayUtilTextConfig *) NIL_CHK(config)) layoutWithNSString:text]];
}

- (void)renderTextWithTripleplayUtilTextConfig:(TripleplayUtilTextConfig *)config
                       withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout {
  [self prepareWithFloat:[((TripleplayUtilEffectRenderer *) NIL_CHK(config.effect)) adjustWidthWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) width]] withFloat:[((TripleplayUtilEffectRenderer *) NIL_CHK(config.effect)) adjustHeightWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout)) height]]];
  [((TripleplayUtilTextConfig *) NIL_CHK(config)) renderWithPlaynCoreCanvas:[self canvas] withPlaynCoreTextLayout:layout withFloat:0 withFloat:0];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilGlyph *typedCopy = (TripleplayUtilGlyph *) copy;
  typedCopy._parent = _parent_;
  typedCopy._depth = _depth_;
  typedCopy._image = _image_;
  typedCopy._layer = _layer_;
  typedCopy._preparedWidth = _preparedWidth_;
  typedCopy._preparedHeight = _preparedHeight_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Input.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "playn/core/Events.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Layer.h"
#include "pythagoras/f/IPoint.h"
#include "pythagoras/f/IRectangle.h"
#include "pythagoras/f/Point.h"
#include "tripleplay/util/Input.h"

@implementation TripleplayUtilInput

- (id<TripleplayUtilInput_Registration>)register__WithTripleplayUtilInput_Region:(TripleplayUtilInput_Region *)region
                                                                          withId:(id)listener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<TripleplayUtilInput_Registration>)register__WithId:(id)listener {
  return [self register__WithTripleplayUtilInput_Region:[[TripleplayUtilInput_ScreenRegion alloc] init] withId:listener];
}

- (id<TripleplayUtilInput_Registration>)register__WithPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds
                                                                     withId:(id)listener {
  return [self register__WithTripleplayUtilInput_Region:[[TripleplayUtilInput_BoundsRegion alloc] initWithPythagorasFIRectangle:bounds] withId:listener];
}

- (id<TripleplayUtilInput_Registration>)register__WithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                                           withPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds
                                                              withId:(id)listener {
  return [self register__WithTripleplayUtilInput_Region:[[TripleplayUtilInput_LayerRegion alloc] initWithPlaynCoreLayer:layer withPythagorasFIRectangle:bounds] withId:listener];
}

- (id<TripleplayUtilInput_Registration>)register__WithPlaynCoreLayer_HasSize:(id<PlaynCoreLayer_HasSize>)layer
                                                                      withId:(id)listener {
  return [self register__WithTripleplayUtilInput_Region:[[TripleplayUtilInput_SizedLayerRegion alloc] initWithPlaynCoreLayer_HasSize:layer] withId:listener];
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilInput_Region

- (BOOL)canTrigger {
  return YES;
}

- (BOOL)hasExpired {
  return NO;
}

- (BOOL)hitTestWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilInput_ScreenRegion

- (BOOL)hitTestWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  return YES;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilInput_BoundsRegion

@synthesize _bounds = _bounds_;

- (id)initWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds {
  if ((self = [super init])) {
    _bounds_ = bounds;
  }
  return self;
}

- (BOOL)hitTestWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  return [((id<PythagorasFIRectangle>) nil_chk(_bounds_)) containsWithPythagorasFIPoint:p];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilInput_BoundsRegion *typedCopy = (TripleplayUtilInput_BoundsRegion *) copy;
  typedCopy._bounds = _bounds_;
}

@end
@implementation TripleplayUtilInput_LayerRegion

@synthesize _layer = _layer_;
@synthesize _bounds = _bounds_;

- (id)initWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
   withPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds {
  if ((self = [super init])) {
    _layer_ = layer;
    _bounds_ = bounds;
  }
  return self;
}

- (BOOL)canTrigger {
  return [((id<PlaynCoreLayer>) nil_chk(_layer_)) visible];
}

- (BOOL)hasExpired {
  return [((id<PlaynCoreLayer>) nil_chk(_layer_)) parent] == nil;
}

- (BOOL)hitTestWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  return [((id<PythagorasFIRectangle>) nil_chk(_bounds_)) containsWithPythagorasFIPoint:[PlaynCoreLayer_Util screenToLayerWithPlaynCoreLayer:_layer_ withPythagorasFIPoint:p withPythagorasFPoint:[[PythagorasFPoint alloc] init]]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilInput_LayerRegion *typedCopy = (TripleplayUtilInput_LayerRegion *) copy;
  typedCopy._layer = _layer_;
  typedCopy._bounds = _bounds_;
}

@end
@implementation TripleplayUtilInput_SizedLayerRegion

@synthesize _layer = _layer_;

- (id)initWithPlaynCoreLayer_HasSize:(id<PlaynCoreLayer_HasSize>)layer {
  if ((self = [super init])) {
    _layer_ = layer;
  }
  return self;
}

- (BOOL)canTrigger {
  return [((id<PlaynCoreLayer_HasSize>) nil_chk(_layer_)) visible];
}

- (BOOL)hasExpired {
  return [((id<PlaynCoreLayer_HasSize>) nil_chk(_layer_)) parent] == nil;
}

- (BOOL)hitTestWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  PythagorasFPoint *lp = [PlaynCoreLayer_Util screenToLayerWithPlaynCoreLayer:_layer_ withPythagorasFIPoint:p withPythagorasFPoint:[[PythagorasFPoint alloc] init]];
  float x = ((PythagorasFPoint *) nil_chk(lp)).x_, y = ((PythagorasFPoint *) nil_chk(lp)).y_;
  return (x > 0 && y > 0 && x < [((id<PlaynCoreLayer_HasSize>) nil_chk(_layer_)) scaledWidth] && y < [((id<PlaynCoreLayer_HasSize>) nil_chk(_layer_)) scaledHeight]);
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilInput_SizedLayerRegion *typedCopy = (TripleplayUtilInput_SizedLayerRegion *) copy;
  typedCopy._layer = _layer_;
}

@end
@implementation TripleplayUtilInput_Reactor

@synthesize _reactions = _reactions_;

- (id)hitTestWithPlaynCoreEvents_Position:(id<PlaynCoreEvents_Position>)event {
  id<JavaUtilList> snapshot = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:_reactions_];
  PythagorasFPoint *p = [[PythagorasFPoint alloc] initWithFloat:[((id<PlaynCoreEvents_Position>) nil_chk(event)) x] withFloat:[((id<PlaynCoreEvents_Position>) nil_chk(event)) y]];
  for (int ii = [((id<JavaUtilList>) nil_chk(snapshot)) size] - 1; ii >= 0; ii--) {
    TripleplayUtilInput_Reaction *r = [((id<JavaUtilList>) nil_chk(snapshot)) getWithInt:ii];
    if ([((TripleplayUtilInput_Region *) nil_chk(((TripleplayUtilInput_Reaction *) nil_chk(r)).region)) hasExpired]) {
      [((id<JavaUtilList>) nil_chk(_reactions_)) removeWithId:r];
    }
    else if ([((TripleplayUtilInput_Region *) nil_chk(((TripleplayUtilInput_Reaction *) nil_chk(r)).region)) canTrigger] && [((TripleplayUtilInput_Region *) nil_chk(((TripleplayUtilInput_Reaction *) nil_chk(r)).region)) hitTestWithPythagorasFIPoint:p]) {
      return ((TripleplayUtilInput_Reaction *) nil_chk(r)).listener;
    }
  }
  return nil;
}

- (id<TripleplayUtilInput_Registration>)register__WithTripleplayUtilInput_Region:(TripleplayUtilInput_Region *)region
                                                                          withId:(id)listener {
  TripleplayUtilInput_Reaction *reaction = [[TripleplayUtilInput_Reaction alloc] initWithTripleplayUtilInput_Region:region withId:listener];
  [((id<JavaUtilList>) nil_chk(_reactions_)) addWithId:reaction];
  return [[TripleplayUtilInput_Reactor_$1 alloc] initWithTripleplayUtilInput_Reactor:self withTripleplayUtilInput_Reaction:reaction];
}

- (id)init {
  if ((self = [super init])) {
    _reactions_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilInput_Reactor *typedCopy = (TripleplayUtilInput_Reactor *) copy;
  typedCopy._reactions = _reactions_;
}

@end
@implementation TripleplayUtilInput_Reactor_$1

@synthesize this$0 = this$0_;
@synthesize val$reaction = val$reaction_;

- (void)cancel {
  [((id<JavaUtilList>) nil_chk(this$0_._reactions)) removeWithId:val$reaction_];
}

- (id)initWithTripleplayUtilInput_Reactor:(TripleplayUtilInput_Reactor *)outer$
         withTripleplayUtilInput_Reaction:(TripleplayUtilInput_Reaction *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$reaction_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilInput_Reactor_$1 *typedCopy = (TripleplayUtilInput_Reactor_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$reaction = val$reaction_;
}

@end
@implementation TripleplayUtilInput_Reaction

@synthesize region = region_;
@synthesize listener = listener_;

- (id)initWithTripleplayUtilInput_Region:(TripleplayUtilInput_Region *)region
                                  withId:(id)listener {
  if ((self = [super init])) {
    self.region = region;
    self.listener = listener;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilInput_Reaction *typedCopy = (TripleplayUtilInput_Reaction *) copy;
  typedCopy.region = region_;
  typedCopy.listener = listener_;
}

@end

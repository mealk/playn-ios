//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Logger.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSObjectArray.h"
#import "java/io/PrintStream.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/System.h"
#import "java/lang/Throwable.h"
#import "java/util/HashMap.h"
#import "java/util/Map.h"
#import "playn/core/Log.h"
#import "playn/core/PlayN.h"
#import "tripleplay/util/Logger.h"

@implementation TripleplayUtilLogger

static TripleplayUtilLogger_Levels * TripleplayUtilLogger_levels_;
static id<TripleplayUtilLogger_Impl> TripleplayUtilLogger_DEFAULT_;
static id<TripleplayUtilLogger_Impl> TripleplayUtilLogger__impl_;

@synthesize _ident = _ident_;

+ (TripleplayUtilLogger_Levels *)levels {
  return TripleplayUtilLogger_levels_;
}

+ (void)setLevels:(TripleplayUtilLogger_Levels *)levels {
  TripleplayUtilLogger_levels_ = levels;
}

+ (id<TripleplayUtilLogger_Impl>)DEFAULT {
  return TripleplayUtilLogger_DEFAULT_;
}

+ (id<TripleplayUtilLogger_Impl>)_impl {
  return TripleplayUtilLogger__impl_;
}

+ (void)set_impl:(id<TripleplayUtilLogger_Impl>)_impl {
  TripleplayUtilLogger__impl_ = _impl;
}

+ (void)setImplWithTripleplayUtilLogger_Impl:(id<TripleplayUtilLogger_Impl>)impl {
  TripleplayUtilLogger__impl_ = (impl == nil) ? TripleplayUtilLogger_DEFAULT_ : impl;
}

+ (NSString *)formatWithNSObjectArray:(IOSObjectArray *)args {
  return [[[TripleplayUtilLogger formatWithJavaLangStringBuilder:[[JavaLangStringBuilder alloc] initWithNSString:@"["] withNSObjectArray:args] appendWithNSString:@"]"] description];
}

+ (JavaLangStringBuilder *)formatWithJavaLangStringBuilder:(JavaLangStringBuilder *)into
                                         withNSObjectArray:(IOSObjectArray *)args {
  for (int ii = 0, ll = (int) [((IOSObjectArray *) NIL_CHK(args)) count] / 2; ii < ll; ii++) {
    if (ii > 0) {
      (void) [((JavaLangStringBuilder *) NIL_CHK(into)) appendWithNSString:@", "];
    }
    (void) [[[((JavaLangStringBuilder *) NIL_CHK(into)) appendWithId:[((IOSObjectArray *) NIL_CHK(args)) objectAtIndex:2 * ii]] appendWithNSString:@"="] appendWithId:[((IOSObjectArray *) NIL_CHK(args)) objectAtIndex:2 * ii + 1]];
  }
  return into;
}

- (id)initWithNSString:(NSString *)ident {
  if ((self = [super init])) {
    _ident_ = ident;
  }
  return self;
}

- (BOOL)shouldLogWithTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level {
  return [((TripleplayUtilLogger_Levels *) NIL_CHK(TripleplayUtilLogger_levels_)) shouldLogWithTripleplayUtilLogger_LevelEnum:level withNSString:_ident_];
}

- (void)debugWithNSString:(NSString *)message
        withNSObjectArray:(IOSObjectArray *)args {
  if ([((TripleplayUtilLogger_Levels *) NIL_CHK(TripleplayUtilLogger_levels_)) shouldLogWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum DEBUG_] withNSString:_ident_]) {
    [self logWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum DEBUG_] withNSString:_ident_ withNSString:message withNSObjectArray:args];
  }
}

- (void)infoWithNSString:(NSString *)message
       withNSObjectArray:(IOSObjectArray *)args {
  if ([((TripleplayUtilLogger_Levels *) NIL_CHK(TripleplayUtilLogger_levels_)) shouldLogWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum INFO] withNSString:_ident_]) {
    [self logWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum INFO] withNSString:_ident_ withNSString:message withNSObjectArray:args];
  }
}

- (void)warningWithNSString:(NSString *)message
          withNSObjectArray:(IOSObjectArray *)args {
  if ([((TripleplayUtilLogger_Levels *) NIL_CHK(TripleplayUtilLogger_levels_)) shouldLogWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum WARNING] withNSString:_ident_]) {
    [self logWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum WARNING] withNSString:_ident_ withNSString:message withNSObjectArray:args];
  }
}

- (void)errorWithNSString:(NSString *)message
        withNSObjectArray:(IOSObjectArray *)args {
  if ([((TripleplayUtilLogger_Levels *) NIL_CHK(TripleplayUtilLogger_levels_)) shouldLogWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum ERROR] withNSString:_ident_]) {
    [self logWithTripleplayUtilLogger_LevelEnum:[TripleplayUtilLogger_LevelEnum ERROR] withNSString:_ident_ withNSString:message withNSObjectArray:args];
  }
}

- (void)logWithTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level
                                 withNSString:(NSString *)ident
                                 withNSString:(NSString *)message
                            withNSObjectArray:(IOSObjectArray *)args {
  JavaLangStringBuilder *sb = [((JavaLangStringBuilder *) [[JavaLangStringBuilder alloc] init]) appendWithNSString:message];
  if ((int) [((IOSObjectArray *) NIL_CHK(args)) count] > 1) {
    (void) [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@" ["];
    (void) [TripleplayUtilLogger formatWithJavaLangStringBuilder:sb withNSObjectArray:args];
    (void) [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"]"];
  }
  id error = ((int) [((IOSObjectArray *) NIL_CHK(args)) count] % 2 == 1) ? [((IOSObjectArray *) NIL_CHK(args)) objectAtIndex:(int) [((IOSObjectArray *) NIL_CHK(args)) count] - 1] : nil;
  [((id<TripleplayUtilLogger_Impl>) NIL_CHK(TripleplayUtilLogger__impl_)) logWithTripleplayUtilLogger_LevelEnum:level withNSString:ident withNSString:[((JavaLangStringBuilder *) NIL_CHK(sb)) description] withJavaLangThrowable:(JavaLangThrowable *) error];
}

+ (void)initialize {
  if (self == [TripleplayUtilLogger class]) {
    TripleplayUtilLogger_levels_ = [[TripleplayUtilLogger_Levels alloc] init];
    TripleplayUtilLogger_DEFAULT_ = [[TripleplayUtilLogger_$1 alloc] init];
    TripleplayUtilLogger__impl_ = TripleplayUtilLogger_DEFAULT_;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilLogger *typedCopy = (TripleplayUtilLogger *) copy;
  typedCopy._ident = _ident_;
}

@end

static TripleplayUtilLogger_LevelEnum *TripleplayUtilLogger_LevelEnum_DEBUG_;
static TripleplayUtilLogger_LevelEnum *TripleplayUtilLogger_LevelEnum_INFO;
static TripleplayUtilLogger_LevelEnum *TripleplayUtilLogger_LevelEnum_WARNING;
static TripleplayUtilLogger_LevelEnum *TripleplayUtilLogger_LevelEnum_ERROR;
static TripleplayUtilLogger_LevelEnum *TripleplayUtilLogger_LevelEnum_OFF;
IOSObjectArray *TripleplayUtilLogger_LevelEnum_values;

@implementation TripleplayUtilLogger_LevelEnum

+ (TripleplayUtilLogger_LevelEnum *)DEBUG_ {
  return TripleplayUtilLogger_LevelEnum_DEBUG_;
}
+ (TripleplayUtilLogger_LevelEnum *)INFO {
  return TripleplayUtilLogger_LevelEnum_INFO;
}
+ (TripleplayUtilLogger_LevelEnum *)WARNING {
  return TripleplayUtilLogger_LevelEnum_WARNING;
}
+ (TripleplayUtilLogger_LevelEnum *)ERROR {
  return TripleplayUtilLogger_LevelEnum_ERROR;
}
+ (TripleplayUtilLogger_LevelEnum *)OFF {
  return TripleplayUtilLogger_LevelEnum_OFF;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TripleplayUtilLogger_LevelEnum class]) {
    TripleplayUtilLogger_LevelEnum_DEBUG_ = [[TripleplayUtilLogger_LevelEnum alloc] initWithNSString:@"DEBUG_" withInt:0];
    TripleplayUtilLogger_LevelEnum_INFO = [[TripleplayUtilLogger_LevelEnum alloc] initWithNSString:@"INFO" withInt:1];
    TripleplayUtilLogger_LevelEnum_WARNING = [[TripleplayUtilLogger_LevelEnum alloc] initWithNSString:@"WARNING" withInt:2];
    TripleplayUtilLogger_LevelEnum_ERROR = [[TripleplayUtilLogger_LevelEnum alloc] initWithNSString:@"ERROR" withInt:3];
    TripleplayUtilLogger_LevelEnum_OFF = [[TripleplayUtilLogger_LevelEnum alloc] initWithNSString:@"OFF" withInt:4];
    TripleplayUtilLogger_LevelEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TripleplayUtilLogger_LevelEnum_DEBUG_, TripleplayUtilLogger_LevelEnum_INFO, TripleplayUtilLogger_LevelEnum_WARNING, TripleplayUtilLogger_LevelEnum_ERROR, TripleplayUtilLogger_LevelEnum_OFF, nil } count:5 type:[IOSClass classWithClass:[TripleplayUtilLogger_LevelEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TripleplayUtilLogger_LevelEnum_values];
}

+ (TripleplayUtilLogger_LevelEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TripleplayUtilLogger_LevelEnum_values count]; i++) {
    TripleplayUtilLogger_LevelEnum *e = [TripleplayUtilLogger_LevelEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
@implementation TripleplayUtilLogger_Levels

@synthesize _defaultLevel = _defaultLevel_;
@synthesize _levels = _levels_;

- (TripleplayUtilLogger_Levels *)setDefaultWithTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level {
  _defaultLevel_ = level;
  return self;
}

- (TripleplayUtilLogger_Levels *)setWithNSString:(NSString *)ident
              withTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level {
  (void) [((id<JavaUtilMap>) NIL_CHK(_levels_)) putWithId:ident withId:level];
  return self;
}

- (TripleplayUtilLogger_Levels *)setWithTripleplayUtilLogger:(TripleplayUtilLogger *)logger
                          withTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level {
  (void) [((id<JavaUtilMap>) NIL_CHK(_levels_)) putWithId:((TripleplayUtilLogger *) NIL_CHK(logger))._ident withId:level];
  return self;
}

- (TripleplayUtilLogger_LevelEnum *)defaultLevel {
  return _defaultLevel_;
}

- (TripleplayUtilLogger_LevelEnum *)levelWithNSString:(NSString *)ident {
  return ((TripleplayUtilLogger_LevelEnum *) [((id<JavaUtilMap>) NIL_CHK(_levels_)) getWithId:ident]);
}

- (BOOL)shouldLogWithTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level
                                       withNSString:(NSString *)ident {
  TripleplayUtilLogger_LevelEnum *ilevel = ((TripleplayUtilLogger_LevelEnum *) [((id<JavaUtilMap>) NIL_CHK(_levels_)) getWithId:ident]);
  if (ilevel != nil) return [((TripleplayUtilLogger_LevelEnum *) NIL_CHK(level)) ordinal] >= [ilevel ordinal];
  return [((TripleplayUtilLogger_LevelEnum *) NIL_CHK(level)) ordinal] >= [((TripleplayUtilLogger_LevelEnum *) NIL_CHK(_defaultLevel_)) ordinal];
}

- (id)init {
  if ((self = [super init])) {
    _defaultLevel_ = [TripleplayUtilLogger_LevelEnum DEBUG_];
    _levels_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilLogger_Levels *typedCopy = (TripleplayUtilLogger_Levels *) copy;
  typedCopy._defaultLevel = _defaultLevel_;
  typedCopy._levels = _levels_;
}

@end
@implementation TripleplayUtilLogger_PlayNImpl

- (void)logWithTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level
                                 withNSString:(NSString *)ident
                                 withNSString:(NSString *)message
                        withJavaLangThrowable:(JavaLangThrowable *)t {
  NSString *msg = [NSString stringWithFormat:@"%@: %@", ident, message];
  switch ([level ordinal]) {
    case TripleplayUtilLogger_Level_DEBUG:
    if (t != nil) [((id<PlaynCoreLog>) [PlaynCorePlayN log]) debugWithNSString:msg withJavaLangThrowable:t];
    else [((id<PlaynCoreLog>) [PlaynCorePlayN log]) debugWithNSString:msg];
    break;
    default:
    case TripleplayUtilLogger_Level_INFO:
    if (t != nil) [((id<PlaynCoreLog>) [PlaynCorePlayN log]) infoWithNSString:msg withJavaLangThrowable:t];
    else [((id<PlaynCoreLog>) [PlaynCorePlayN log]) infoWithNSString:msg];
    break;
    case TripleplayUtilLogger_Level_WARNING:
    if (t != nil) [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:msg withJavaLangThrowable:t];
    else [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:msg];
    break;
    case TripleplayUtilLogger_Level_ERROR:
    if (t != nil) [((id<PlaynCoreLog>) [PlaynCorePlayN log]) errorWithNSString:msg withJavaLangThrowable:t];
    else [((id<PlaynCoreLog>) [PlaynCorePlayN log]) errorWithNSString:msg];
    break;
  }
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilLogger_$1

- (void)logWithTripleplayUtilLogger_LevelEnum:(TripleplayUtilLogger_LevelEnum *)level
                                 withNSString:(NSString *)ident
                                 withNSString:(NSString *)message
                        withJavaLangThrowable:(JavaLangThrowable *)t {
  [((JavaIoPrintStream *) NIL_CHK([JavaLangSystem out])) printlnWithNSString:[NSString stringWithFormat:@"%@: %@", ident, message]];
  if (t != nil) {
    [t printStackTraceWithJavaIoPrintStream:[JavaLangSystem out]];
  }
}

- (id)init {
  return [super init];
}

@end

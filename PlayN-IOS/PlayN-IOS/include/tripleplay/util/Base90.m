//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Base90.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Integer.h"
#import "java/lang/Long.h"
#import "java/lang/StringBuilder.h"
#import "tripleplay/util/Base90.h"

@implementation TripleplayUtilBase90

static NSString * TripleplayUtilBase90_CHARS_ = @"\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
static int TripleplayUtilBase90_BASE_;
static unichar TripleplayUtilBase90_FIRST_;

+ (NSString *)CHARS {
  return TripleplayUtilBase90_CHARS_;
}

+ (int)BASE {
  return TripleplayUtilBase90_BASE_;
}

+ (unichar)FIRST {
  return TripleplayUtilBase90_FIRST_;
}

+ (unichar)NEG_MARKER {
  return TripleplayUtilBase90_NEG_MARKER;
}

+ (NSString *)encodeIntWithInt:(int)value {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  if (value < 0) {
    (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:TripleplayUtilBase90_NEG_MARKER];
    value -= JavaLangInteger_MIN_VALUE;
  }
  do {
    (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:[NIL_CHK(TripleplayUtilBase90_CHARS_) charAtWithInt:value % TripleplayUtilBase90_BASE_]];
    value /= TripleplayUtilBase90_BASE_;
  }
  while (value > 0);
  return [((JavaLangStringBuilder *) NIL_CHK(buf)) description];
}

+ (int)decodeIntWithNSString:(NSString *)data {
  BOOL neg = NO;
  if ([NIL_CHK(data) length] > 0 && [NIL_CHK(data) charAtWithInt:0] == TripleplayUtilBase90_NEG_MARKER) {
    neg = YES;
    data = [NIL_CHK(data) substring:1];
  }
  int value = 0;
  for (int ii = [NIL_CHK(data) length] - 1; ii >= 0; ii--) {
    value *= TripleplayUtilBase90_BASE_;
    value += [NIL_CHK(data) charAtWithInt:ii] - TripleplayUtilBase90_FIRST_;
  }
  if (neg) value += JavaLangInteger_MIN_VALUE;
  return value;
}

+ (NSString *)encodeLongWithLongInt:(long long int)value {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  if (value < 0) {
    (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:TripleplayUtilBase90_NEG_MARKER];
    value -= JavaLangLong_MIN_VALUE;
  }
  while (value > 0) {
    (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:[NIL_CHK(TripleplayUtilBase90_CHARS_) charAtWithInt:(int) (value % TripleplayUtilBase90_BASE_)]];
    value /= TripleplayUtilBase90_BASE_;
  }
  return [((JavaLangStringBuilder *) NIL_CHK(buf)) description];
}

+ (long long int)decodeLongWithNSString:(NSString *)data {
  BOOL neg = NO;
  if ([NIL_CHK(data) length] > 0 && [NIL_CHK(data) charAtWithInt:0] == TripleplayUtilBase90_NEG_MARKER) {
    neg = YES;
    data = [NIL_CHK(data) substring:1];
  }
  long long int value = 0;
  for (int ii = [NIL_CHK(data) length] - 1; ii >= 0; ii--) {
    value *= TripleplayUtilBase90_BASE_;
    value += [NIL_CHK(data) charAtWithInt:ii] - TripleplayUtilBase90_FIRST_;
  }
  if (neg) value += JavaLangLong_MIN_VALUE;
  return value;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TripleplayUtilBase90 class]) {
    TripleplayUtilBase90_BASE_ = [NIL_CHK(TripleplayUtilBase90_CHARS_) length];
    TripleplayUtilBase90_FIRST_ = [NIL_CHK(TripleplayUtilBase90_CHARS_) charAtWithInt:0];
  }
}

@end

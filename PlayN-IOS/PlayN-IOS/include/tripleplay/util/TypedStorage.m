//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/TypedStorage.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Boolean.h"
#import "java/lang/Double.h"
#import "java/lang/Enum.h"
#import "java/lang/Exception.h"
#import "java/lang/Integer.h"
#import "java/lang/Long.h"
#import "java/lang/StringBuilder.h"
#import "java/util/Iterator.h"
#import "playn/core/Log.h"
#import "playn/core/PlayN.h"
#import "playn/core/Storage.h"
#import "react/Connection.h"
#import "react/Function.h"
#import "react/RSet.h"
#import "react/Value.h"
#import "tripleplay/util/TypedStorage.h"

@implementation TripleplayUtilTypedStorage

@synthesize _storage = _storage_;

- (id)initWithPlaynCoreStorage:(id<PlaynCoreStorage>)storage {
  if ((self = [super init])) {
    _storage_ = storage;
  }
  return self;
}

- (BOOL)containsWithNSString:(NSString *)key {
  return [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key] != nil;
}

- (NSString *)getWithNSString:(NSString *)key {
  return [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key];
}

- (NSString *)getWithNSString:(NSString *)key
                 withNSString:(NSString *)defval {
  NSString *value = [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key];
  return (value == nil) ? defval : value;
}

- (void)setWithNSString:(NSString *)key
           withNSString:(NSString *)value {
  [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) setItemWithNSString:key withNSString:value];
}

- (int)getWithNSString:(NSString *)key
               withInt:(int)defval {
  NSString *value = nil;
  @try {
    value = [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key];
    return (value == nil) ? defval : [JavaLangInteger parseIntWithNSString:value];
  }
  @catch (JavaLangException *e) {
    [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:[NSString stringWithFormat:@"Failed to parse int prop [key=%@, value=%@]", key, value] withJavaLangThrowable:e];
    return defval;
  }
}

- (void)setWithNSString:(NSString *)key
                withInt:(int)value {
  [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) setItemWithNSString:key withNSString:[NSString valueOfInt:value]];
}

- (long long int)getWithNSString:(NSString *)key
                     withLongInt:(long long int)defval {
  NSString *value = nil;
  @try {
    value = [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key];
    return (value == nil) ? defval : [JavaLangLong parseLongWithNSString:value];
  }
  @catch (JavaLangException *e) {
    [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:[NSString stringWithFormat:@"Failed to parse long prop [key=%@, value=%@]", key, value] withJavaLangThrowable:e];
    return defval;
  }
}

- (void)setWithNSString:(NSString *)key
            withLongInt:(long long int)value {
  [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) setItemWithNSString:key withNSString:[NSString valueOfLong:value]];
}

- (double)getWithNSString:(NSString *)key
               withDouble:(double)defval {
  NSString *value = nil;
  @try {
    value = [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key];
    return (value == nil) ? defval : [JavaLangDouble parseDoubleWithNSString:value];
  }
  @catch (JavaLangException *e) {
    [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:[NSString stringWithFormat:@"Failed to parse double prop [key=%@, value=%@]", key, value] withJavaLangThrowable:e];
    return defval;
  }
}

- (void)setWithNSString:(NSString *)key
             withDouble:(double)value {
  [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) setItemWithNSString:key withNSString:[NSString valueOfDouble:value]];
}

- (BOOL)getWithNSString:(NSString *)key
               withBOOL:(BOOL)defval {
  NSString *value = [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key];
  return (value == nil) ? defval : [NIL_CHK(value) equalsIgnoreCase:@"t"];
}

- (void)setWithNSString:(NSString *)key
               withBOOL:(BOOL)value {
  [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) setItemWithNSString:key withNSString:value ? @"t" : @"f"];
}

- (id)getWithNSString:(NSString *)key
               withId:(JavaLangEnum *)defval {
  IOSClass *eclass = (IOSClass *) [((JavaLangEnum *) NIL_CHK(defval)) getClass];
  NSString *value = nil;
  @try {
    value = [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) getItemWithNSString:key];
    return (value == nil) ? defval : ((JavaLangEnum *) [JavaLangEnum valueOfWithIOSClass:eclass withNSString:value]);
  }
  @catch (JavaLangException *e) {
    [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:[NSString stringWithFormat:@"Failed to parse enum prop [key=%@, value=%@]", key, value] withJavaLangThrowable:e];
    return defval;
  }
}

- (void)setWithNSString:(NSString *)key
       withJavaLangEnum:(JavaLangEnum *)value {
  [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) setItemWithNSString:key withNSString:[((JavaLangEnum *) NIL_CHK(value)) name]];
}

- (void)removeWithNSString:(NSString *)key {
  [((id<PlaynCoreStorage>) NIL_CHK(_storage_)) removeItemWithNSString:key];
}

- (ReactValue *)valueForWithNSString:(NSString *)key
                        withNSString:(NSString *)defval {
  ReactValue *value = ((ReactValue *) [ReactValue createWithId:[self getWithNSString:key withNSString:defval]]);
  (void) [((ReactValue *) NIL_CHK(value)) connectWithReactValueView_Listener:[[TripleplayUtilTypedStorage_$1 alloc] initWithTripleplayUtilTypedStorage:self withNSString:key]];
  return value;
}

- (ReactValue *)valueForWithNSString:(NSString *)key
                             withInt:(int)defval {
  ReactValue *value = ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:[self getWithNSString:key withInt:defval]]]);
  (void) [((ReactValue *) NIL_CHK(value)) connectWithReactValueView_Listener:[[TripleplayUtilTypedStorage_$2 alloc] initWithTripleplayUtilTypedStorage:self withNSString:key]];
  return value;
}

- (ReactValue *)valueForWithNSString:(NSString *)key
                         withLongInt:(long long int)defval {
  ReactValue *value = ((ReactValue *) [ReactValue createWithId:[JavaLangLong valueOfWithLongInt:[self getWithNSString:key withLongInt:defval]]]);
  (void) [((ReactValue *) NIL_CHK(value)) connectWithReactValueView_Listener:[[TripleplayUtilTypedStorage_$3 alloc] initWithTripleplayUtilTypedStorage:self withNSString:key]];
  return value;
}

- (ReactValue *)valueForWithNSString:(NSString *)key
                          withDouble:(double)defval {
  ReactValue *value = ((ReactValue *) [ReactValue createWithId:[JavaLangDouble valueOfWithDouble:[self getWithNSString:key withDouble:defval]]]);
  (void) [((ReactValue *) NIL_CHK(value)) connectWithReactValueView_Listener:[[TripleplayUtilTypedStorage_$4 alloc] initWithTripleplayUtilTypedStorage:self withNSString:key]];
  return value;
}

- (ReactValue *)valueForWithNSString:(NSString *)key
                            withBOOL:(BOOL)defval {
  ReactValue *value = ((ReactValue *) [ReactValue createWithId:[JavaLangBoolean valueOfWithBOOL:[self getWithNSString:key withBOOL:defval]]]);
  (void) [((ReactValue *) NIL_CHK(value)) connectWithReactValueView_Listener:[[TripleplayUtilTypedStorage_$5 alloc] initWithTripleplayUtilTypedStorage:self withNSString:key]];
  return value;
}

- (ReactValue *)valueForWithNSString:(NSString *)key
                              withId:(JavaLangEnum *)defval {
  ReactValue *value = ((ReactValue *) [ReactValue createWithId:((JavaLangEnum *) [self getWithNSString:key withId:defval])]);
  (void) [((ReactValue *) NIL_CHK(value)) connectWithReactValueView_Listener:[[TripleplayUtilTypedStorage_$6 alloc] initWithTripleplayUtilTypedStorage:self withNSString:key]];
  return value;
}

- (ReactRSet *)setForWithNSString:(NSString *)key
                withReactFunction:(id<ReactFunction>)toFunc
                withReactFunction:(id<ReactFunction>)fromFunc {
  ReactRSet *rset = ((ReactRSet *) [ReactRSet create]);
  NSString *data = [self getWithNSString:key withNSString:(NSString *) nil];
  if (data != nil) {
    {
      IOSObjectArray *a__ = [data split:@","];
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        NSString *value = ((NSString *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
        @try {
          [((ReactRSet *) NIL_CHK(rset)) addWithId:[((id<ReactFunction>) NIL_CHK(toFunc)) applyWithId:value]];
        }
        @catch (JavaLangException *e) {
          [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:[NSString stringWithFormat:@"Invalid value (key=%@): %@", key, value] withJavaLangThrowable:e];
        }
      }
    }
  }
  (void) [((ReactRSet *) NIL_CHK(rset)) connectWithReactRSet_Listener:[[TripleplayUtilTypedStorage_$7 alloc] initWithTripleplayUtilTypedStorage:self withReactRSet:rset withReactFunction:fromFunc withNSString:key]];
  return rset;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage *typedCopy = (TripleplayUtilTypedStorage *) copy;
  typedCopy._storage = _storage_;
}

@end
@implementation TripleplayUtilTypedStorage_$1

@synthesize this$0 = this$0_;
@synthesize val$key = val$key_;

- (void)onEmitWithId:(NSString *)value {
  [this$0_ setWithNSString:val$key_ withNSString:value];
}

- (id)initWithTripleplayUtilTypedStorage:(TripleplayUtilTypedStorage *)outer$
                            withNSString:(NSString *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$key_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage_$1 *typedCopy = (TripleplayUtilTypedStorage_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$key = val$key_;
}

@end
@implementation TripleplayUtilTypedStorage_$2

@synthesize this$0 = this$0_;
@synthesize val$key = val$key_;

- (void)onEmitWithId:(JavaLangInteger *)value {
  [this$0_ setWithNSString:val$key_ withInt:[((JavaLangInteger *) NIL_CHK(value)) intValue]];
}

- (id)initWithTripleplayUtilTypedStorage:(TripleplayUtilTypedStorage *)outer$
                            withNSString:(NSString *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$key_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage_$2 *typedCopy = (TripleplayUtilTypedStorage_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$key = val$key_;
}

@end
@implementation TripleplayUtilTypedStorage_$3

@synthesize this$0 = this$0_;
@synthesize val$key = val$key_;

- (void)onEmitWithId:(JavaLangLong *)value {
  [this$0_ setWithNSString:val$key_ withLongInt:[((JavaLangLong *) NIL_CHK(value)) longLongValue]];
}

- (id)initWithTripleplayUtilTypedStorage:(TripleplayUtilTypedStorage *)outer$
                            withNSString:(NSString *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$key_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage_$3 *typedCopy = (TripleplayUtilTypedStorage_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$key = val$key_;
}

@end
@implementation TripleplayUtilTypedStorage_$4

@synthesize this$0 = this$0_;
@synthesize val$key = val$key_;

- (void)onEmitWithId:(JavaLangDouble *)value {
  [this$0_ setWithNSString:val$key_ withDouble:[((JavaLangDouble *) NIL_CHK(value)) doubleValue]];
}

- (id)initWithTripleplayUtilTypedStorage:(TripleplayUtilTypedStorage *)outer$
                            withNSString:(NSString *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$key_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage_$4 *typedCopy = (TripleplayUtilTypedStorage_$4 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$key = val$key_;
}

@end
@implementation TripleplayUtilTypedStorage_$5

@synthesize this$0 = this$0_;
@synthesize val$key = val$key_;

- (void)onEmitWithId:(JavaLangBoolean *)value {
  [this$0_ setWithNSString:val$key_ withBOOL:[((JavaLangBoolean *) NIL_CHK(value)) booleanValue]];
}

- (id)initWithTripleplayUtilTypedStorage:(TripleplayUtilTypedStorage *)outer$
                            withNSString:(NSString *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$key_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage_$5 *typedCopy = (TripleplayUtilTypedStorage_$5 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$key = val$key_;
}

@end
@implementation TripleplayUtilTypedStorage_$6

@synthesize this$0 = this$0_;
@synthesize val$key = val$key_;

- (void)onEmitWithId:(JavaLangEnum *)value {
  [this$0_ setWithNSString:val$key_ withJavaLangEnum:value];
}

- (id)initWithTripleplayUtilTypedStorage:(TripleplayUtilTypedStorage *)outer$
                            withNSString:(NSString *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$key_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage_$6 *typedCopy = (TripleplayUtilTypedStorage_$6 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$key = val$key_;
}

@end
@implementation TripleplayUtilTypedStorage_$7

@synthesize this$0 = this$0_;
@synthesize val$rset = val$rset_;
@synthesize val$fromFunc = val$fromFunc_;
@synthesize val$key = val$key_;

- (void)onAddWithId:(id)unused {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((ReactRSet *) NIL_CHK(val$rset_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id value = [((id<JavaUtilIterator>) NIL_CHK(iter__)) next];
      if ([((JavaLangStringBuilder *) NIL_CHK(buf)) sequenceLength] > 0) (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:@","];
      (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:((NSString *) [((id<ReactFunction>) NIL_CHK(val$fromFunc_)) applyWithId:value])];
    }
  }
  [this$0_ setWithNSString:val$key_ withNSString:[((JavaLangStringBuilder *) NIL_CHK(buf)) description]];
}

- (id)initWithTripleplayUtilTypedStorage:(TripleplayUtilTypedStorage *)outer$
                           withReactRSet:(ReactRSet *)capture$0
                       withReactFunction:(id<ReactFunction>)capture$1
                            withNSString:(NSString *)capture$2 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$rset_ = capture$0;
    val$fromFunc_ = capture$1;
    val$key_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilTypedStorage_$7 *typedCopy = (TripleplayUtilTypedStorage_$7 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$rset = val$rset_;
  typedCopy.val$fromFunc = val$fromFunc_;
  typedCopy.val$key = val$key_;
}

@end

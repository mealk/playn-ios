//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/EffectRenderer.java
//
//  Created by Thomas on 7/10/13.
//

@class PlaynCoreCanvas_LineCapEnum;
@class PlaynCoreCanvas_LineJoinEnum;
@protocol PlaynCoreCanvas;
@protocol PlaynCoreTextLayout;

#import "JreEmulation.h"

@interface TripleplayUtilEffectRenderer : NSObject {
}

+ (TripleplayUtilEffectRenderer *)NONE;
- (float)adjustWidthWithFloat:(float)width;
- (float)adjustHeightWithFloat:(float)height;
- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
          withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout
                          withInt:(int)textColor
                         withBOOL:(BOOL)underlined
                        withFloat:(float)x
                        withFloat:(float)y;
- (id)init;
@end

@interface TripleplayUtilEffectRenderer_PixelOutline : TripleplayUtilEffectRenderer {
 @public
  int outlineColor_;
}

@property (nonatomic, assign) int outlineColor;

- (id)initWithInt:(int)outlineColor;
- (float)adjustWidthWithFloat:(float)width;
- (float)adjustHeightWithFloat:(float)height;
- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
          withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)text
                          withInt:(int)textColor
                         withBOOL:(BOOL)underlined
                        withFloat:(float)x
                        withFloat:(float)y;
@end

@interface TripleplayUtilEffectRenderer_VectorOutline : TripleplayUtilEffectRenderer {
 @public
  int outlineColor_;
  float outlineWidth_;
  PlaynCoreCanvas_LineCapEnum *outlineCap_;
  PlaynCoreCanvas_LineJoinEnum *outlineJoin_;
}

@property (nonatomic, assign) int outlineColor;
@property (nonatomic, assign) float outlineWidth;
@property (nonatomic, strong) PlaynCoreCanvas_LineCapEnum *outlineCap;
@property (nonatomic, strong) PlaynCoreCanvas_LineJoinEnum *outlineJoin;

- (id)initWithInt:(int)outlineColor
        withFloat:(float)outlineWidth;
- (id)initWithInt:(int)outlineColor
        withFloat:(float)outlineWidth
withPlaynCoreCanvas_LineCapEnum:(PlaynCoreCanvas_LineCapEnum *)cap
withPlaynCoreCanvas_LineJoinEnum:(PlaynCoreCanvas_LineJoinEnum *)join;
- (float)adjustWidthWithFloat:(float)width;
- (float)adjustHeightWithFloat:(float)height;
- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
          withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)text
                          withInt:(int)textColor
                         withBOOL:(BOOL)underlined
                        withFloat:(float)x
                        withFloat:(float)y;
@end

@interface TripleplayUtilEffectRenderer_Shadow : TripleplayUtilEffectRenderer {
 @public
  int shadowColor_;
  float shadowX_, shadowY_;
}

@property (nonatomic, assign) int shadowColor;
@property (nonatomic, assign) float shadowX;
@property (nonatomic, assign) float shadowY;

- (id)initWithInt:(int)shadowColor
        withFloat:(float)shadowX
        withFloat:(float)shadowY;
- (float)adjustWidthWithFloat:(float)width;
- (float)adjustHeightWithFloat:(float)height;
- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
          withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)text
                          withInt:(int)textColor
                         withBOOL:(BOOL)underlined
                        withFloat:(float)x
                        withFloat:(float)y;
@end

@interface TripleplayUtilEffectRenderer_$1 : TripleplayUtilEffectRenderer {
}

- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
          withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)layout
                          withInt:(int)textColor
                         withBOOL:(BOOL)underlined
                        withFloat:(float)x
                        withFloat:(float)y;
- (id)init;
@end

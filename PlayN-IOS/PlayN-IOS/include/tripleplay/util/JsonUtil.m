//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/JsonUtil.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/lang/Enum.h"
#include "java/lang/RuntimeException.h"
#include "playn/core/Json.h"
#include "tripleplay/util/JsonUtil.h"

@implementation TripleplayUtilJsonUtil

+ (id)getEnumWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                         withNSString:(NSString *)key
                         withIOSClass:(IOSClass *)enumType
                               withId:(JavaLangEnum *)defaultVal {
  return [JavaLangEnum valueOfWithIOSClass:enumType withNSString:[TripleplayUtilJsonUtil getStringWithPlaynCoreJson_Object:json withNSString:key withNSString:[((JavaLangEnum *) nil_chk(defaultVal)) description]]];
}

+ (id)requireEnumWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                             withNSString:(NSString *)key
                             withIOSClass:(IOSClass *)enumType {
  return [JavaLangEnum valueOfWithIOSClass:enumType withNSString:[TripleplayUtilJsonUtil requireStringWithPlaynCoreJson_Object:json withNSString:key]];
}

+ (BOOL)getBooleanWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                              withNSString:(NSString *)key
                                  withBOOL:(BOOL)defaultVal {
  return ([((id<PlaynCoreJson_Object>) nil_chk(json)) containsKeyWithNSString:key] ? [((id<PlaynCoreJson_Object>) nil_chk(json)) getBooleanWithNSString:key] : defaultVal);
}

+ (BOOL)requireBooleanWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                  withNSString:(NSString *)key {
  [TripleplayUtilJsonUtil requireKeyWithPlaynCoreJson_Object:json withNSString:key];
  return [((id<PlaynCoreJson_Object>) nil_chk(json)) getBooleanWithNSString:key];
}

+ (double)getNumberWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                               withNSString:(NSString *)key
                                 withDouble:(double)defaultVal {
  return ([((id<PlaynCoreJson_Object>) nil_chk(json)) containsKeyWithNSString:key] ? [((id<PlaynCoreJson_Object>) nil_chk(json)) getNumberWithNSString:key] : defaultVal);
}

+ (double)requireNumberWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                   withNSString:(NSString *)key {
  [TripleplayUtilJsonUtil requireKeyWithPlaynCoreJson_Object:json withNSString:key];
  return [((id<PlaynCoreJson_Object>) nil_chk(json)) getNumberWithNSString:key];
}

+ (float)getFloatWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                             withNSString:(NSString *)key
                                withFloat:(float)defaultVal {
  return (float) [TripleplayUtilJsonUtil getNumberWithPlaynCoreJson_Object:json withNSString:key withDouble:defaultVal];
}

+ (float)requireFloatWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                 withNSString:(NSString *)key {
  return (float) [TripleplayUtilJsonUtil requireNumberWithPlaynCoreJson_Object:json withNSString:key];
}

+ (int)getIntWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                         withNSString:(NSString *)key
                              withInt:(int)defaultVal {
  return ([((id<PlaynCoreJson_Object>) nil_chk(json)) containsKeyWithNSString:key] ? [((id<PlaynCoreJson_Object>) nil_chk(json)) getIntWithNSString:key] : defaultVal);
}

+ (int)requireIntWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                             withNSString:(NSString *)key {
  [TripleplayUtilJsonUtil requireKeyWithPlaynCoreJson_Object:json withNSString:key];
  return [((id<PlaynCoreJson_Object>) nil_chk(json)) getIntWithNSString:key];
}

+ (NSString *)getStringWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                   withNSString:(NSString *)key
                                   withNSString:(NSString *)defaultVal {
  return ([((id<PlaynCoreJson_Object>) nil_chk(json)) containsKeyWithNSString:key] ? [((id<PlaynCoreJson_Object>) nil_chk(json)) getStringWithNSString:key] : defaultVal);
}

+ (NSString *)requireStringWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                       withNSString:(NSString *)key {
  [TripleplayUtilJsonUtil requireKeyWithPlaynCoreJson_Object:json withNSString:key];
  return [((id<PlaynCoreJson_Object>) nil_chk(json)) getStringWithNSString:key];
}

+ (id<PlaynCoreJson_Object>)getObjectWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                                 withNSString:(NSString *)key
                                     withPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)defaultVal {
  return ([((id<PlaynCoreJson_Object>) nil_chk(json)) containsKeyWithNSString:key] ? [((id<PlaynCoreJson_Object>) nil_chk(json)) getObjectWithNSString:key] : defaultVal);
}

+ (id<PlaynCoreJson_Object>)requireObjectWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                                     withNSString:(NSString *)key {
  [TripleplayUtilJsonUtil requireKeyWithPlaynCoreJson_Object:json withNSString:key];
  return [((id<PlaynCoreJson_Object>) nil_chk(json)) getObjectWithNSString:key];
}

+ (id<PlaynCoreJson_Array>)getArrayWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                               withNSString:(NSString *)key
                                    withPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)defaultVal {
  return ([((id<PlaynCoreJson_Object>) nil_chk(json)) containsKeyWithNSString:key] ? [((id<PlaynCoreJson_Object>) nil_chk(json)) getArrayWithNSString:key] : defaultVal);
}

+ (id<PlaynCoreJson_Array>)requireArrayWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                                                   withNSString:(NSString *)key {
  [TripleplayUtilJsonUtil requireKeyWithPlaynCoreJson_Object:json withNSString:key];
  return [((id<PlaynCoreJson_Object>) nil_chk(json)) getArrayWithNSString:key];
}

+ (void)requireKeyWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                              withNSString:(NSString *)key {
  if (![((id<PlaynCoreJson_Object>) nil_chk(json)) containsKeyWithNSString:key]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Missing required key [name=%@]", key]];
  }
}

- (id)init {
  return [super init];
}

@end

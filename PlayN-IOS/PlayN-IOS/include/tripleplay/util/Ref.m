//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Ref.java
//
//  Created by Thomas on 7/25/13.
//

#include "playn/core/Layer.h"
#include "tripleplay/util/Destroyable.h"
#include "tripleplay/util/Ref.h"

@implementation TripleplayUtilRef

@synthesize _target = _target_;

+ (TripleplayUtilRef *)createWithId:(id<TripleplayUtilDestroyable>)target {
  TripleplayUtilRef *ref = [[TripleplayUtilRef_$1 alloc] init];
  (void) [((TripleplayUtilRef *) nil_chk(ref)) setWithId:target];
  return ref;
}

//+ (TripleplayUtilRef *)createWithId:(id<PlaynCoreLayer>)target {
//  TripleplayUtilRef *ref = [[TripleplayUtilRef_$2 alloc] init];
//  (void) [((TripleplayUtilRef *) nil_chk(ref)) setWithId:target];
//  return ref;
//}

- (id)get {
  return _target_;
}

- (id)setWithId:(id)target {
  [self clear];
  _target_ = target;
  return target;
}

- (void)clear {
  if (_target_ != nil) {
    id toBeCleared = _target_;
    _target_ = nil;
    [self onClearWithId:toBeCleared];
  }
}

- (void)onClearWithId:(id)target {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilRef *typedCopy = (TripleplayUtilRef *) copy;
  typedCopy._target = _target_;
}

@end
@implementation TripleplayUtilRef_$1

- (void)onClearWithId:(id<TripleplayUtilDestroyable>)target {
  [((id<TripleplayUtilDestroyable>) nil_chk(target)) destroy];
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayUtilRef_$2

- (void)onClearWithId:(id<PlaynCoreLayer>)target {
  [((id<PlaynCoreLayer>) nil_chk(target)) destroy];
}

- (id)init {
  return [super init];
}

@end

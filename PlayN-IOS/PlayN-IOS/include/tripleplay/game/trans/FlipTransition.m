//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/game/trans/FlipTransition.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/gl/GLContext.h"
#import "pythagoras/f/FloatMath.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/trans/FlipTransition.h"
#import "tripleplay/shaders/RotateYShader.h"
#import "tripleplay/util/Interpolator.h"

@implementation TripleplayGameTransFlipTransition

@synthesize _flipped = _flipped_;
@synthesize _unflip = _unflip_;
@synthesize _oshader = _oshader_;
@synthesize _nshader = _nshader_;

- (TripleplayGameTransFlipTransition *)unflip {
  _unflip_ = YES;
  return self;
}

- (void)init__WithTripleplayGameScreen:(TripleplayGameScreen *)oscreen
              withTripleplayGameScreen:(TripleplayGameScreen *)nscreen OBJC_METHOD_FAMILY_NONE {
  [super init__WithTripleplayGameScreen:oscreen withTripleplayGameScreen:nscreen];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(nscreen.layer)) setDepthWithFloat:-1];
  _oshader_ = [[TripleplayShadersRotateYShader alloc] initWithPlaynCoreGlGLContext:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] withFloat:0.5f withFloat:0.5f withFloat:1];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(oscreen.layer)) setShaderWithPlaynCoreGlGLShader:_oshader_];
  _nshader_ = [[TripleplayShadersRotateYShader alloc] initWithPlaynCoreGlGLContext:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] withFloat:0.5f withFloat:0.5f withFloat:1];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(nscreen.layer)) setShaderWithPlaynCoreGlGLShader:_nshader_];
}

- (BOOL)updateWithTripleplayGameScreen:(TripleplayGameScreen *)oscreen
              withTripleplayGameScreen:(TripleplayGameScreen *)nscreen
                             withFloat:(float)elapsed {
  float pct = [((TripleplayUtilInterpolator *) NIL_CHK(_interp_)) applyWithFloat:0 withFloat:1 withFloat:elapsed withFloat:_duration_];
  if (pct >= 0.5f && !_flipped_) {
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(nscreen.layer)) setDepthWithFloat:0];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(oscreen.layer)) setDepthWithFloat:-1];
  }
  if (_unflip_) pct = -pct;
  ((TripleplayShadersRotateYShader *) NIL_CHK(_oshader_)).angle = PythagorasFFloatMath_PI * pct;
  ((TripleplayShadersRotateYShader *) NIL_CHK(_nshader_)).angle = PythagorasFFloatMath_PI * (pct - 1);
  return elapsed >= _duration_;
}

- (void)completeWithTripleplayGameScreen:(TripleplayGameScreen *)oscreen
                withTripleplayGameScreen:(TripleplayGameScreen *)nscreen {
  [super completeWithTripleplayGameScreen:oscreen withTripleplayGameScreen:nscreen];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(oscreen.layer)) setDepthWithFloat:0];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(oscreen.layer)) setShaderWithPlaynCoreGlGLShader:nil];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(nscreen.layer)) setDepthWithFloat:0];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(nscreen.layer)) setShaderWithPlaynCoreGlGLShader:nil];
}

- (TripleplayUtilInterpolator *)defaultInterpolator {
  return [TripleplayUtilInterpolator LINEAR];
}

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGameTransFlipTransition *typedCopy = (TripleplayGameTransFlipTransition *) copy;
  typedCopy._flipped = _flipped_;
  typedCopy._unflip = _unflip_;
  typedCopy._oshader = _oshader_;
  typedCopy._nshader = _nshader_;
}

@end

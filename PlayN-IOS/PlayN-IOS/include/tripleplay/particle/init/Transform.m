//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/init/Transform.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSFloatArray.h"
#include "java/lang/System.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/InternalTransform.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/gl/GLContext.h"
#include "pythagoras/f/FloatMath.h"
#include "pythagoras/f/Transform.h"
#include "tripleplay/particle/Initializer.h"
#include "tripleplay/particle/ParticleBuffer.h"
#include "tripleplay/particle/init/Transform.h"
#include "tripleplay/util/Randoms.h"

@implementation TripleplayParticleInitTransform

+ (TripleplayParticleInitializer *)identity {
  return [TripleplayParticleInitTransform constantWithFloat:0 withFloat:0];
}

+ (TripleplayParticleInitializer *)constantWithFloat:(float)tx
                                           withFloat:(float)ty {
  return [TripleplayParticleInitTransform constantWithFloat:1 withFloat:0 withFloat:tx withFloat:ty];
}

+ (TripleplayParticleInitializer *)constantWithFloat:(float)scale_
                                           withFloat:(float)rot
                                           withFloat:(float)tx
                                           withFloat:(float)ty {
  float sina = [PythagorasFFloatMath sinWithFloat:rot], cosa = [PythagorasFFloatMath cosWithFloat:rot];
  float m00 = cosa * scale_, m01 = sina * scale_, m10 = -sina * scale_, m11 = cosa * scale_;
  return [[TripleplayParticleInitTransform_$1 alloc] initWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty];
}

+ (TripleplayParticleInitializer *)scale__WithFloat:(float)scale_ {
  return [[TripleplayParticleInitTransform_$2 alloc] initWithFloat:scale_];
}

+ (TripleplayParticleInitializer *)randomScaleWithTripleplayUtilRandoms:(TripleplayUtilRandoms *)rando
                                                              withFloat:(float)minScale
                                                              withFloat:(float)maxScale {
  return [[TripleplayParticleInitTransform_$3 alloc] initWithTripleplayUtilRandoms:rando withFloat:minScale withFloat:maxScale];
}

+ (TripleplayParticleInitializer *)layerWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  return [[TripleplayParticleInitTransform_$4 alloc] initWithPlaynCoreLayer:layer];
}

+ (TripleplayParticleInitializer *)randomPosWithTripleplayUtilRandoms:(TripleplayUtilRandoms *)rando
                                                            withFloat:(float)x
                                                            withFloat:(float)y
                                                            withFloat:(float)width
                                                            withFloat:(float)height {
  return [[TripleplayParticleInitTransform_$5 alloc] initWithFloat:x withTripleplayUtilRandoms:rando withFloat:width withFloat:y withFloat:height];
}

+ (TripleplayParticleInitializer *)randomOffsetWithTripleplayUtilRandoms:(TripleplayUtilRandoms *)rando
                                                               withFloat:(float)noise {
  return [[TripleplayParticleInitTransform_$6 alloc] initWithTripleplayUtilRandoms:rando withFloat:noise];
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayParticleInitTransform_$1

@synthesize val$m00 = val$m00_;
@synthesize val$m01 = val$m01_;
@synthesize val$m10 = val$m10_;
@synthesize val$m11 = val$m11_;
@synthesize val$tx = val$tx_;
@synthesize val$ty = val$ty_;

- (void)init__WithInt:(int)index
       withFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M00]) = val$m00_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M01]) = val$m01_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M10]) = val$m10_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M11]) = val$m11_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_TX]) = val$tx_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_TY]) = val$ty_;
}

- (id)initWithFloat:(float)capture$0
          withFloat:(float)capture$1
          withFloat:(float)capture$2
          withFloat:(float)capture$3
          withFloat:(float)capture$4
          withFloat:(float)capture$5 {
  if ((self = [super init])) {
    val$m00_ = capture$0;
    val$m01_ = capture$1;
    val$m10_ = capture$2;
    val$m11_ = capture$3;
    val$tx_ = capture$4;
    val$ty_ = capture$5;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitTransform_$1 *typedCopy = (TripleplayParticleInitTransform_$1 *) copy;
  typedCopy.val$m00 = val$m00_;
  typedCopy.val$m01 = val$m01_;
  typedCopy.val$m10 = val$m10_;
  typedCopy.val$m11 = val$m11_;
  typedCopy.val$tx = val$tx_;
  typedCopy.val$ty = val$ty_;
}

@end
@implementation TripleplayParticleInitTransform_$2

@synthesize val$scale = val$scale_;

- (void)init__WithInt:(int)index
       withFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M00]) *= val$scale_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M01]) *= val$scale_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M10]) *= val$scale_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M11]) *= val$scale_;
}

- (id)initWithFloat:(float)capture$0 {
  if ((self = [super init])) {
    val$scale_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitTransform_$2 *typedCopy = (TripleplayParticleInitTransform_$2 *) copy;
  typedCopy.val$scale = val$scale_;
}

@end
@implementation TripleplayParticleInitTransform_$3

@synthesize val$rando = val$rando_;
@synthesize val$minScale = val$minScale_;
@synthesize val$maxScale = val$maxScale_;

- (void)init__WithInt:(int)index
       withFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  float scale_ = [((TripleplayUtilRandoms *) nil_chk(val$rando_)) getInRangeWithFloat:val$minScale_ withFloat:val$maxScale_];
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M00]) *= scale_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M01]) *= scale_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M10]) *= scale_;
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_M11]) *= scale_;
}

- (id)initWithTripleplayUtilRandoms:(TripleplayUtilRandoms *)capture$0
                          withFloat:(float)capture$1
                          withFloat:(float)capture$2 {
  if ((self = [super init])) {
    val$rando_ = capture$0;
    val$minScale_ = capture$1;
    val$maxScale_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitTransform_$3 *typedCopy = (TripleplayParticleInitTransform_$3 *) copy;
  typedCopy.val$rando = val$rando_;
  typedCopy.val$minScale = val$minScale_;
  typedCopy.val$maxScale = val$maxScale_;
}

@end
@implementation TripleplayParticleInitTransform_$4

@synthesize xform = xform_;
@synthesize _matrix = _matrix_;
@synthesize val$layer = val$layer_;

- (void)willInitWithInt:(int)count {
  (void) [((id<PlaynCoreInternalTransform>) nil_chk(xform_)) setTransformWithFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:0 withFloat:0];
  id<PlaynCoreLayer> xlayer = val$layer_;
  while (xlayer != nil) {
    (void) [((id<PlaynCoreInternalTransform>) nil_chk(xform_)) preConcatenateWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>) [((id<PlaynCoreLayer>) nil_chk(xlayer)) transform]];
    xlayer = [((id<PlaynCoreLayer>) nil_chk(xlayer)) parent];
  }
  (void) [((id<PlaynCoreInternalTransform>) nil_chk(xform_)) preConcatenateWithPlaynCoreInternalTransform:[((PlaynCoreGlGLContext *) nil_chk([((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) ctx])) rootTransform]];
  [((id<PlaynCoreInternalTransform>) nil_chk(xform_)) getWithFloatArray:_matrix_];
}

- (void)init__WithInt:(int)index
       withFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  [JavaLangSystem arraycopyWithId:_matrix_ withInt:0 withId:data withInt:start + TripleplayParticleParticleBuffer_M00 withInt:6];
}

- (id)initWithPlaynCoreLayer:(id<PlaynCoreLayer>)capture$0 {
  if ((self = [super init])) {
    val$layer_ = capture$0;
    xform_ = [((PlaynCoreGlGLContext *) nil_chk([((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) ctx])) createTransform];
    _matrix_ = [IOSFloatArray arrayWithLength:6];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitTransform_$4 *typedCopy = (TripleplayParticleInitTransform_$4 *) copy;
  typedCopy.xform = xform_;
  typedCopy._matrix = _matrix_;
  typedCopy.val$layer = val$layer_;
}

@end
@implementation TripleplayParticleInitTransform_$5

@synthesize val$x = val$x_;
@synthesize val$rando = val$rando_;
@synthesize val$width = val$width_;
@synthesize val$y = val$y_;
@synthesize val$height = val$height_;

- (void)init__WithInt:(int)index
       withFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_TX]) = val$x_ + [((TripleplayUtilRandoms *) nil_chk(val$rando_)) getFloatWithFloat:val$width_];
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_TY]) = val$y_ + [((TripleplayUtilRandoms *) nil_chk(val$rando_)) getFloatWithFloat:val$height_];
}

- (id)initWithFloat:(float)capture$0
withTripleplayUtilRandoms:(TripleplayUtilRandoms *)capture$1
          withFloat:(float)capture$2
          withFloat:(float)capture$3
          withFloat:(float)capture$4 {
  if ((self = [super init])) {
    val$x_ = capture$0;
    val$rando_ = capture$1;
    val$width_ = capture$2;
    val$y_ = capture$3;
    val$height_ = capture$4;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitTransform_$5 *typedCopy = (TripleplayParticleInitTransform_$5 *) copy;
  typedCopy.val$x = val$x_;
  typedCopy.val$rando = val$rando_;
  typedCopy.val$width = val$width_;
  typedCopy.val$y = val$y_;
  typedCopy.val$height = val$height_;
}

@end
@implementation TripleplayParticleInitTransform_$6

@synthesize val$rando = val$rando_;
@synthesize val$noise = val$noise_;

- (void)init__WithInt:(int)index
       withFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_TX]) += [((TripleplayUtilRandoms *) nil_chk(val$rando_)) getInRangeWithFloat:-val$noise_ withFloat:val$noise_];
  (*[((IOSFloatArray *) nil_chk(data)) floatRefAtIndex:start + TripleplayParticleParticleBuffer_TY]) += [((TripleplayUtilRandoms *) nil_chk(val$rando_)) getInRangeWithFloat:-val$noise_ withFloat:val$noise_];
}

- (id)initWithTripleplayUtilRandoms:(TripleplayUtilRandoms *)capture$0
                          withFloat:(float)capture$1 {
  if ((self = [super init])) {
    val$rando_ = capture$0;
    val$noise_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitTransform_$6 *typedCopy = (TripleplayParticleInitTransform_$6 *) copy;
  typedCopy.val$rando = val$rando_;
  typedCopy.val$noise = val$noise_;
}

@end

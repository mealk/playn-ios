//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/init/Color.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSFloatArray.h"
#import "tripleplay/particle/Initializer.h"
#import "tripleplay/particle/ParticleBuffer.h"
#import "tripleplay/particle/init/Color.h"

@implementation TripleplayParticleInitColor

+ (TripleplayParticleInitializer *)constantWithInt:(int)argb {
  return [TripleplayParticleInitColor constantWithFloat:((argb >> 16) & (int) 0xFF) / 255.0f withFloat:((argb >> 8) & (int) 0xFF) / 255.0f withFloat:((argb >> 0) & (int) 0xFF) / 255.0f withFloat:((argb >> 24) & (int) 0xFF) / 255.0f];
}

+ (TripleplayParticleInitializer *)constantWithFloat:(float)r
                                           withFloat:(float)g
                                           withFloat:(float)b
                                           withFloat:(float)a {
  return [[TripleplayParticleInitColor_$1 alloc] initWithFloat:r withFloat:g withFloat:b withFloat:a];
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayParticleInitColor_$1

@synthesize val$r = val$r_;
@synthesize val$g = val$g_;
@synthesize val$b = val$b_;
@synthesize val$a = val$a_;

- (void)init__WithInt:(int)index
withJavaLangFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  [((IOSFloatArray *) NIL_CHK(data)) replaceFloatAtIndex:start + TripleplayParticleParticleBuffer_RED withFloat:val$r_];
  [((IOSFloatArray *) NIL_CHK(data)) replaceFloatAtIndex:start + TripleplayParticleParticleBuffer_GREEN withFloat:val$g_];
  [((IOSFloatArray *) NIL_CHK(data)) replaceFloatAtIndex:start + TripleplayParticleParticleBuffer_BLUE withFloat:val$b_];
  [((IOSFloatArray *) NIL_CHK(data)) replaceFloatAtIndex:start + TripleplayParticleParticleBuffer_ALPHA withFloat:val$a_];
}

- (id)initWithFloat:(float)capture$0
          withFloat:(float)capture$1
          withFloat:(float)capture$2
          withFloat:(float)capture$3 {
  if ((self = [super init])) {
    val$r_ = capture$0;
    val$g_ = capture$1;
    val$b_ = capture$2;
    val$a_ = capture$3;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitColor_$1 *typedCopy = (TripleplayParticleInitColor_$1 *) copy;
  typedCopy.val$r = val$r_;
  typedCopy.val$g = val$g_;
  typedCopy.val$b = val$b_;
  typedCopy.val$a = val$a_;
}

@end

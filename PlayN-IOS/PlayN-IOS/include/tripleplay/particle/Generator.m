//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/Generator.java
//
//  Created by Thomas on 7/25/13.
//

#include "tripleplay/particle/Emitter.h"
#include "tripleplay/particle/Generator.h"

@implementation TripleplayParticleGenerator

static TripleplayParticleGenerator * TripleplayParticleGenerator_NOOP_;

+ (TripleplayParticleGenerator *)NOOP {
  return TripleplayParticleGenerator_NOOP_;
}

+ (void)setNOOP:(TripleplayParticleGenerator *)NOOP {
  TripleplayParticleGenerator_NOOP_ = NOOP;
}

+ (TripleplayParticleGenerator *)impulseWithInt:(int)particles {
  return [[TripleplayParticleGenerator_$2 alloc] initWithInt:particles];
}

+ (TripleplayParticleGenerator *)constantWithFloat:(float)particlesPerSecond {
  return [[TripleplayParticleGenerator_$3 alloc] initWithFloat:particlesPerSecond];
}

- (BOOL)generateWithTripleplayParticleEmitter:(TripleplayParticleEmitter *)emitter
                                    withFloat:(float)now
                                    withFloat:(float)dt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TripleplayParticleGenerator class]) {
    TripleplayParticleGenerator_NOOP_ = [[TripleplayParticleGenerator_$1 alloc] init];
  }
}

@end
@implementation TripleplayParticleGenerator_$1

- (BOOL)generateWithTripleplayParticleEmitter:(TripleplayParticleEmitter *)emitter
                                    withFloat:(float)now
                                    withFloat:(float)dt {
  return NO;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplayParticleGenerator_$2

@synthesize val$particles = val$particles_;

- (BOOL)generateWithTripleplayParticleEmitter:(TripleplayParticleEmitter *)emitter
                                    withFloat:(float)now
                                    withFloat:(float)dt {
  [((TripleplayParticleEmitter *) nil_chk(emitter)) addParticlesWithInt:val$particles_];
  return YES;
}

- (id)initWithInt:(int)capture$0 {
  if ((self = [super init])) {
    val$particles_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleGenerator_$2 *typedCopy = (TripleplayParticleGenerator_$2 *) copy;
  typedCopy.val$particles = val$particles_;
}

@end
@implementation TripleplayParticleGenerator_$3

@synthesize _secondsPerParticle = _secondsPerParticle_;
@synthesize _accum = _accum_;
@synthesize val$particlesPerSecond = val$particlesPerSecond_;

- (BOOL)generateWithTripleplayParticleEmitter:(TripleplayParticleEmitter *)emitter
                                    withFloat:(float)now
                                    withFloat:(float)dt {
  _accum_ += dt;
  int particles = (int) (_accum_ / _secondsPerParticle_);
  _accum_ -= particles * _secondsPerParticle_;
  [((TripleplayParticleEmitter *) nil_chk(emitter)) addParticlesWithInt:particles];
  return NO;
}

- (id)initWithFloat:(float)capture$0 {
  if ((self = [super init])) {
    val$particlesPerSecond_ = capture$0;
    _secondsPerParticle_ = 1 / val$particlesPerSecond_;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleGenerator_$3 *typedCopy = (TripleplayParticleGenerator_$3 *) copy;
  typedCopy._secondsPerParticle = _secondsPerParticle_;
  typedCopy._accum = _accum_;
  typedCopy.val$particlesPerSecond = val$particlesPerSecond_;
}

@end

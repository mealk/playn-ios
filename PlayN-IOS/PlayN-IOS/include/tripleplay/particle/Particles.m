//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/Particles.java
//
//  Created by Thomas on 7/25/13.
//

#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Image.h"
#include "playn/core/ImmediateLayer.h"
#include "playn/core/PlayN.h"
#include "playn/core/gl/GLContext.h"
#include "playn/core/util/Clock.h"
#include "react/Connection.h"
#include "react/Signal.h"
#include "tripleplay/particle/Emitter.h"
#include "tripleplay/particle/ParticleShader.h"
#include "tripleplay/particle/Particles.h"

@implementation TripleplayParticleParticles

@synthesize _now = _now_;
@synthesize _onPaint = _onPaint_;
@synthesize _shader = _shader_;

- (TripleplayParticleEmitter *)createEmitterWithInt:(int)maxParticles
                                 withPlaynCoreImage:(id<PlaynCoreImage>)image {
  return [self createEmitterWithInt:maxParticles withPlaynCoreImage:image withPlaynCoreGroupLayer:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer]];
}

- (TripleplayParticleEmitter *)createEmitterWithInt:(int)maxParticles
                                 withPlaynCoreImage:(id<PlaynCoreImage>)image
                            withPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)onLayer {
  TripleplayParticleEmitter *emitter = [[TripleplayParticleEmitter alloc] initWithTripleplayParticleParticles:self withInt:maxParticles withPlaynCoreImage:image];
  ((TripleplayParticleEmitter *) nil_chk(emitter))._conn = [((ReactSignal *) nil_chk(_onPaint_)) connectWithReactSlot:[[TripleplayParticleParticles_$1 alloc] initWithTripleplayParticleEmitter:emitter]];
  [((id<PlaynCoreGroupLayer>) nil_chk(onLayer)) addWithPlaynCoreLayer:((TripleplayParticleEmitter *) nil_chk(emitter)).layer];
  return emitter;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [((ReactSignal *) nil_chk(_onPaint_)) emitWithId:[((TripleplayParticleParticles_Now *) nil_chk(_now_)) updateWithFloat:[((id<PlaynCoreUtilClock>) nil_chk(clock)) dt]]];
}

- (void)clear {
  [((TripleplayParticleParticleShader *) nil_chk(_shader_)) clearProgram];
}

- (float)now {
  return ((TripleplayParticleParticles_Now *) nil_chk(_now_)).time;
}

- (id)init {
  if ((self = [super init])) {
    _now_ = [[TripleplayParticleParticles_Now alloc] init];
    _onPaint_ = [ReactSignal create];
    _shader_ = [[TripleplayParticleParticleShader alloc] initWithPlaynCoreGlGLContext:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) ctx]];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleParticles *typedCopy = (TripleplayParticleParticles *) copy;
  typedCopy._now = _now_;
  typedCopy._onPaint = _onPaint_;
  typedCopy._shader = _shader_;
}

@end
@implementation TripleplayParticleParticles_Now

@synthesize time = time_;
@synthesize dt = dt_;

- (TripleplayParticleParticles_Now *)updateWithFloat:(float)delta {
  dt_ = delta / 1000.0f;
  time_ += dt_;
  return self;
}

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleParticles_Now *typedCopy = (TripleplayParticleParticles_Now *) copy;
  typedCopy.time = time_;
  typedCopy.dt = dt_;
}

@end
@implementation TripleplayParticleParticles_$1

@synthesize val$emitter = val$emitter_;

- (void)onEmitWithId:(TripleplayParticleParticles_Now *)now {
  [((TripleplayParticleEmitter *) nil_chk(val$emitter_)) updateWithFloat:((TripleplayParticleParticles_Now *) nil_chk(now)).time withFloat:((TripleplayParticleParticles_Now *) nil_chk(now)).dt];
}

- (id)initWithTripleplayParticleEmitter:(TripleplayParticleEmitter *)capture$0 {
  if ((self = [super init])) {
    val$emitter_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleParticles_$1 *typedCopy = (TripleplayParticleParticles_$1 *) copy;
  typedCopy.val$emitter = val$emitter_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/ParticleShader.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSFloatArray.h"
#import "java/lang/RuntimeException.h"
#import "java/lang/UnsupportedOperationException.h"
#import "playn/core/gl/GL20.h"
#import "playn/core/gl/GLBuffer.h"
#import "playn/core/gl/GLContext.h"
#import "playn/core/gl/GLProgram.h"
#import "playn/core/gl/GLShader.h"
#import "tripleplay/particle/ParticleBuffer.h"
#import "tripleplay/particle/ParticleShader.h"

@implementation TripleplayParticleParticleShader

static NSString * TripleplayParticleParticleShader_VERTEX_SHADER_ = @"uniform vec2 u_ScreenSize;\nattribute vec4 a_Matrix;\nattribute vec2 a_Translation;\nattribute vec4 a_Color;\nattribute vec2 a_Position;\nattribute vec2 a_TexCoord;\nvarying vec2 v_TexCoord;\nvarying vec4 v_Color;\nvoid main(void) {\n  mat3 transform = mat3(\n    a_Matrix[0], a_Matrix[1], 0,\n    a_Matrix[2], a_Matrix[3], 0,\n    a_Translation[0], a_Translation[1], 1);\n  gl_Position = vec4(transform * vec3(a_Position, 1.0), 1);\n  gl_Position.x /= (u_ScreenSize.x / 2.0);\n  gl_Position.y /= (u_ScreenSize.y / 2.0);\n  gl_Position.x -= 1.0;\n  gl_Position.y = 1.0 - gl_Position.y;\n  v_TexCoord = a_TexCoord;\n  v_Color = a_Color;\n}";
static NSString * TripleplayParticleParticleShader_TEXTURE_FRAG_SHADER_ = @"#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D u_Texture;\nvarying vec2 v_TexCoord;\nvarying vec4 v_Color;\nvoid main(void) {\n  vec4 texcol = texture2D(u_Texture, v_TexCoord);\n  vec4 tinted = vec4(texcol.rgb * (v_Color.rgb * texcol.a + (1.0 - texcol.a)), texcol.a);\n  gl_FragColor = tinted * v_Color.a;\n}";

@synthesize core = core_;

+ (NSString *)VERTEX_SHADER {
  return TripleplayParticleParticleShader_VERTEX_SHADER_;
}

+ (NSString *)TEXTURE_FRAG_SHADER {
  return TripleplayParticleParticleShader_TEXTURE_FRAG_SHADER_;
}

+ (int)VERTEX_SIZE {
  return TripleplayParticleParticleShader_VERTEX_SIZE;
}

+ (int)START_VERTS {
  return TripleplayParticleParticleShader_START_VERTS;
}

+ (int)EXPAND_VERTS {
  return TripleplayParticleParticleShader_EXPAND_VERTS;
}

+ (int)START_ELEMS {
  return TripleplayParticleParticleShader_START_ELEMS;
}

+ (int)EXPAND_ELEMS {
  return TripleplayParticleParticleShader_EXPAND_ELEMS;
}

+ (int)FLOAT_SIZE_BYTES {
  return TripleplayParticleParticleShader_FLOAT_SIZE_BYTES;
}

+ (int)VERTEX_STRIDE {
  return TripleplayParticleParticleShader_VERTEX_STRIDE;
}

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  return [super initWithPlaynCoreGlGLContext:ctx];
}

- (TripleplayParticleParticleShader *)prepareWithInt:(int)tex
                                             withInt:(int)maxQuads {
  (void) [self prepareTextureWithInt:tex withInt:1];
  [((TripleplayParticleParticleShader_ParticleCore *) texCore_) ensureCapacityWithInt:maxQuads];
  return self;
}

- (PlaynCoreGlGLShader_Core *)createTextureCore {
  return core_ = [[TripleplayParticleParticleShader_ParticleCore alloc] initWithTripleplayParticleParticleShader:self withNSString:TripleplayParticleParticleShader_VERTEX_SHADER_ withNSString:TripleplayParticleParticleShader_TEXTURE_FRAG_SHADER_];
}

- (PlaynCoreGlGLShader_Core *)createColorCore {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Color core should not be used."];
}

- (PlaynCoreGlGLShader_Extras *)createTextureExtrasWithPlaynCoreGlGLProgram:(id<PlaynCoreGlGLProgram>)prog {
  return [[TripleplayParticleParticleShader_ParticleExtras alloc] initWithTripleplayParticleParticleShader:self withPlaynCoreGlGLProgram:prog];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleParticleShader *typedCopy = (TripleplayParticleParticleShader *) copy;
  typedCopy.core = core_;
}

@end
@implementation TripleplayParticleParticleShader_ParticleCore

@synthesize this$1 = this$1_;
@synthesize uScreenSize = uScreenSize_;
@synthesize aMatrix = aMatrix_;
@synthesize aTranslation = aTranslation_;
@synthesize aColor = aColor_;
@synthesize aPosition = aPosition_;
@synthesize aTexCoord = aTexCoord_;
@synthesize vertices = vertices_;
@synthesize elements = elements_;

- (id)initWithTripleplayParticleParticleShader:(TripleplayParticleParticleShader *)outer$
                                  withNSString:(NSString *)vertShader
                                  withNSString:(NSString *)fragShader {
  if ((self = [super initWithPlaynCoreGlGLShader:outer$ withNSString:vertShader withNSString:fragShader])) {
    this$1_ = outer$;
    uScreenSize_ = [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getUniform2fWithNSString:@"u_ScreenSize"];
    aMatrix_ = [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getAttribWithNSString:@"a_Matrix" withInt:4 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aTranslation_ = [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getAttribWithNSString:@"a_Translation" withInt:2 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aColor_ = [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getAttribWithNSString:@"a_Color" withInt:4 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aPosition_ = [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getAttribWithNSString:@"a_Position" withInt:2 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aTexCoord_ = [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) getAttribWithNSString:@"a_TexCoord" withInt:2 withInt:PlaynCoreGlGL20_GL_FLOAT];
    vertices_ = [((PlaynCoreGlGLContext *) NIL_CHK(outer$.ctx)) createFloatBufferWithInt:TripleplayParticleParticleShader_START_VERTS * TripleplayParticleParticleShader_VERTEX_SIZE];
    elements_ = [((PlaynCoreGlGLContext *) NIL_CHK(outer$.ctx)) createShortBufferWithInt:TripleplayParticleParticleShader_START_ELEMS];
  }
  return self;
}

- (void)ensureCapacityWithInt:(int)maxQuads {
  [self beginPrimitiveWithInt:maxQuads * 4 withInt:maxQuads * 6];
}

- (void)activateWithInt:(int)fbufWidth
                withInt:(int)fbufHeight {
  [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog_)) bind];
  [((id<PlaynCoreGlGLShader_Uniform2f>) NIL_CHK(uScreenSize_)) bindWithFloat:fbufWidth withFloat:fbufHeight];
  [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) bindWithInt:PlaynCoreGlGL20_GL_ARRAY_BUFFER];
  [((id<PlaynCoreGlGLShader_Attrib>) NIL_CHK(aMatrix_)) bindWithInt:TripleplayParticleParticleShader_VERTEX_STRIDE withInt:0];
  [((id<PlaynCoreGlGLShader_Attrib>) NIL_CHK(aTranslation_)) bindWithInt:TripleplayParticleParticleShader_VERTEX_STRIDE withInt:16];
  [((id<PlaynCoreGlGLShader_Attrib>) NIL_CHK(aColor_)) bindWithInt:TripleplayParticleParticleShader_VERTEX_STRIDE withInt:24];
  [((id<PlaynCoreGlGLShader_Attrib>) NIL_CHK(aPosition_)) bindWithInt:TripleplayParticleParticleShader_VERTEX_STRIDE withInt:40];
  [((id<PlaynCoreGlGLShader_Attrib>) NIL_CHK(aTexCoord_)) bindWithInt:TripleplayParticleParticleShader_VERTEX_STRIDE withInt:48];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) bindWithInt:PlaynCoreGlGL20_GL_ELEMENT_ARRAY_BUFFER];
}

- (void)prepareWithInt:(int)tint
              withBOOL:(BOOL)justActivated {
}

- (void)flush {
  if ([((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) position] == 0) return;
  [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) sendWithInt:PlaynCoreGlGL20_GL_ARRAY_BUFFER withInt:PlaynCoreGlGL20_GL_STREAM_DRAW];
  int elems = [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) sendWithInt:PlaynCoreGlGL20_GL_ELEMENT_ARRAY_BUFFER withInt:PlaynCoreGlGL20_GL_STREAM_DRAW];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) drawElementsWithInt:PlaynCoreGlGL20_GL_TRIANGLES withInt:elems];
}

- (void)destroy {
  [super destroy];
  [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) destroy];
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) destroy];
}

- (void)addQuadWithFloat:(float)left
               withFloat:(float)top
               withFloat:(float)right
               withFloat:(float)bottom
  withJavaLangFloatArray:(IOSFloatArray *)data
                 withInt:(int)ppos {
  int vertIdx = [self beginPrimitiveWithInt:4 withInt:6];
  int pstart = ppos + TripleplayParticleParticleBuffer_M00;
  (void) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) addWithJavaLangFloatArray:data withInt:pstart withInt:10]) addWithFloat:left withFloat:top]) addWithFloat:0 withFloat:0];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) addWithJavaLangFloatArray:data withInt:pstart withInt:10]) addWithFloat:right withFloat:top]) addWithFloat:1 withFloat:0];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) addWithJavaLangFloatArray:data withInt:pstart withInt:10]) addWithFloat:left withFloat:bottom]) addWithFloat:0 withFloat:1];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) addWithJavaLangFloatArray:data withInt:pstart withInt:10]) addWithFloat:right withFloat:bottom]) addWithFloat:1 withFloat:1];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:vertIdx + 0];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:vertIdx + 1];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:vertIdx + 2];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:vertIdx + 1];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:vertIdx + 3];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) addWithInt:vertIdx + 2];
}

- (void)addQuadWithFloat:(float)m00
               withFloat:(float)m01
               withFloat:(float)m10
               withFloat:(float)m11
               withFloat:(float)tx
               withFloat:(float)ty
               withFloat:(float)x1
               withFloat:(float)y1
               withFloat:(float)sx1
               withFloat:(float)sy1
               withFloat:(float)x2
               withFloat:(float)y2
               withFloat:(float)sx2
               withFloat:(float)sy2
               withFloat:(float)x3
               withFloat:(float)y3
               withFloat:(float)sx3
               withFloat:(float)sy3
               withFloat:(float)x4
               withFloat:(float)y4
               withFloat:(float)sx4
               withFloat:(float)sy4 {
  @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not used."];
}

- (int)beginPrimitiveWithInt:(int)vertexCount
                     withInt:(int)elemCount {
  int vertIdx = [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) position] / TripleplayParticleParticleShader_VERTEX_SIZE;
  int verts = vertIdx + vertexCount, elems = [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) position] + elemCount;
  int availVerts = [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) capacity] / TripleplayParticleParticleShader_VERTEX_SIZE, availElems = [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) capacity];
  if ((verts > availVerts) || (elems > availElems)) {
    [this$1_ flush];
    if (vertexCount > availVerts) [self expandVertsWithInt:vertexCount];
    if (elemCount > availElems) [self expandElemsWithInt:elemCount];
    return 0;
  }
  return vertIdx;
}

- (void)expandVertsWithInt:(int)vertCount {
  int newVerts = [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) capacity] / TripleplayParticleParticleShader_VERTEX_SIZE;
  while (newVerts < vertCount) newVerts += TripleplayParticleParticleShader_EXPAND_VERTS;
  [((id<PlaynCoreGlGLBuffer_Float>) NIL_CHK(vertices_)) expandWithInt:newVerts * TripleplayParticleParticleShader_VERTEX_SIZE];
}

- (void)expandElemsWithInt:(int)elemCount {
  int newElems = [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) capacity];
  while (newElems < elemCount) newElems += TripleplayParticleParticleShader_EXPAND_ELEMS;
  [((id<PlaynCoreGlGLBuffer_Short>) NIL_CHK(elements_)) expandWithInt:newElems];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleParticleShader_ParticleCore *typedCopy = (TripleplayParticleParticleShader_ParticleCore *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.uScreenSize = uScreenSize_;
  typedCopy.aMatrix = aMatrix_;
  typedCopy.aTranslation = aTranslation_;
  typedCopy.aColor = aColor_;
  typedCopy.aPosition = aPosition_;
  typedCopy.aTexCoord = aTexCoord_;
  typedCopy.vertices = vertices_;
  typedCopy.elements = elements_;
}

@end
@implementation TripleplayParticleParticleShader_ParticleExtras

@synthesize this$0 = this$0_;
@synthesize uTexture = uTexture_;
@synthesize lastTex = lastTex_;

- (id)initWithTripleplayParticleParticleShader:(TripleplayParticleParticleShader *)outer$
                      withPlaynCoreGlGLProgram:(id<PlaynCoreGlGLProgram>)prog {
  if ((self = [super init])) {
    this$0_ = outer$;
    uTexture_ = [((id<PlaynCoreGlGLProgram>) NIL_CHK(prog)) getUniform1iWithNSString:@"u_Texture"];
  }
  return self;
}

- (void)prepareWithInt:(int)tex
              withBOOL:(BOOL)justActivated {
  [((PlaynCoreGlGLContext *) NIL_CHK(this$0_.ctx)) checkGLErrorWithNSString:@"textureShader.prepare start"];
  BOOL stateChanged = (tex != lastTex_);
  if (!justActivated && stateChanged) [this$0_ flush];
  if (stateChanged) {
    lastTex_ = tex;
    [((PlaynCoreGlGLContext *) NIL_CHK(this$0_.ctx)) checkGLErrorWithNSString:@"textureShader.prepare end"];
  }
  if (justActivated) {
    [((PlaynCoreGlGLContext *) NIL_CHK(this$0_.ctx)) activeTextureWithInt:PlaynCoreGlGL20_GL_TEXTURE0];
    [((id<PlaynCoreGlGLShader_Uniform1i>) NIL_CHK(uTexture_)) bindWithInt:0];
  }
}

- (void)willFlush {
  [((PlaynCoreGlGLContext *) NIL_CHK(this$0_.ctx)) bindTextureWithInt:lastTex_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleParticleShader_ParticleExtras *typedCopy = (TripleplayParticleParticleShader_ParticleExtras *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.uTexture = uTexture_;
  typedCopy.lastTex = lastTex_;
}

@end

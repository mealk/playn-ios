//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/ParticleShader.java
//
//  Created by Thomas on 7/25/13.
//

#import "JreEmulation.h"

#if !TripleplayParticleParticleShader_RESTRICT
#define TripleplayParticleParticleShader_INCLUDE_ALL 1
#endif
#undef TripleplayParticleParticleShader_RESTRICT

#if !defined (_TripleplayParticleParticleShader_) && (TripleplayParticleParticleShader_INCLUDE_ALL || TripleplayParticleParticleShader_INCLUDE)
#define _TripleplayParticleParticleShader_

@class PlaynCoreGlGLContext;
@class PlaynCoreGlGLShader_Core;
@class PlaynCoreGlGLShader_Extras;
@class TripleplayParticleParticleShader_ParticleCore;
@protocol PlaynCoreGlGLProgram;

#define PlaynCoreGlGLShader_RESTRICT 1
#define PlaynCoreGlGLShader_INCLUDE 1
#include "playn/core/gl/GLShader.h"

#define TripleplayParticleParticleShader_EXPAND_ELEMS 96
#define TripleplayParticleParticleShader_EXPAND_VERTS 64
#define TripleplayParticleParticleShader_FLOAT_SIZE_BYTES 4
#define TripleplayParticleParticleShader_START_ELEMS 96
#define TripleplayParticleParticleShader_START_VERTS 64
#define TripleplayParticleParticleShader_VERTEX_SIZE 14
#define TripleplayParticleParticleShader_VERTEX_STRIDE 56

@interface TripleplayParticleParticleShader : PlaynCoreGlGLShader {
 @public
  TripleplayParticleParticleShader_ParticleCore *core_;
}

@property (nonatomic, strong) TripleplayParticleParticleShader_ParticleCore *core;

+ (NSString *)VERTEX_SHADER;
+ (NSString *)TEXTURE_FRAG_SHADER;
+ (int)VERTEX_SIZE;
+ (int)START_VERTS;
+ (int)EXPAND_VERTS;
+ (int)START_ELEMS;
+ (int)EXPAND_ELEMS;
+ (int)FLOAT_SIZE_BYTES;
+ (int)VERTEX_STRIDE;
- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx;
- (TripleplayParticleParticleShader *)prepareWithInt:(int)tex
                                             withInt:(int)maxQuads;
- (PlaynCoreGlGLShader_Core *)createTextureCore;
- (PlaynCoreGlGLShader_Core *)createColorCore;
- (PlaynCoreGlGLShader_Extras *)createTextureExtrasWithPlaynCoreGlGLProgram:(id<PlaynCoreGlGLProgram>)prog;
@end
#endif

#if !defined (_TripleplayParticleParticleShader_ParticleCore_) && (TripleplayParticleParticleShader_INCLUDE_ALL || TripleplayParticleParticleShader_ParticleCore_INCLUDE)
#define _TripleplayParticleParticleShader_ParticleCore_

@class IOSFloatArray;
@class TripleplayParticleParticleShader;
@protocol PlaynCoreGlGLBuffer_Float;
@protocol PlaynCoreGlGLBuffer_Short;
@protocol PlaynCoreGlGLShader_Attrib;
@protocol PlaynCoreGlGLShader_Uniform2f;

#define PlaynCoreGlGLShader_RESTRICT 1
#define PlaynCoreGlGLShader_Core_INCLUDE 1
#include "playn/core/gl/GLShader.h"

@interface TripleplayParticleParticleShader_ParticleCore : PlaynCoreGlGLShader_Core {
 @public
  TripleplayParticleParticleShader *this$1_;
  id<PlaynCoreGlGLShader_Uniform2f> uScreenSize_;
  id<PlaynCoreGlGLShader_Attrib> aMatrix_, aTranslation_, aColor_, aPosition_, aTexCoord_;
  id<PlaynCoreGlGLBuffer_Float> vertices_;
  id<PlaynCoreGlGLBuffer_Short> elements_;
}

@property (nonatomic, strong) TripleplayParticleParticleShader *this$1;
@property (nonatomic, strong) id<PlaynCoreGlGLShader_Uniform2f> uScreenSize;
@property (nonatomic, strong) id<PlaynCoreGlGLShader_Attrib> aMatrix;
@property (nonatomic, strong) id<PlaynCoreGlGLShader_Attrib> aTranslation;
@property (nonatomic, strong) id<PlaynCoreGlGLShader_Attrib> aColor;
@property (nonatomic, strong) id<PlaynCoreGlGLShader_Attrib> aPosition;
@property (nonatomic, strong) id<PlaynCoreGlGLShader_Attrib> aTexCoord;
@property (nonatomic, strong) id<PlaynCoreGlGLBuffer_Float> vertices;
@property (nonatomic, strong) id<PlaynCoreGlGLBuffer_Short> elements;

- (id)initWithTripleplayParticleParticleShader:(TripleplayParticleParticleShader *)outer$
                                  withNSString:(NSString *)vertShader
                                  withNSString:(NSString *)fragShader;
- (void)ensureCapacityWithInt:(int)maxQuads;
- (void)activateWithInt:(int)fbufWidth
                withInt:(int)fbufHeight;
- (void)prepareWithInt:(int)tint
              withBOOL:(BOOL)justActivated;
- (void)flush;
- (void)destroy;
- (void)addQuadWithFloat:(float)left
               withFloat:(float)top
               withFloat:(float)right
               withFloat:(float)bottom
          withFloatArray:(IOSFloatArray *)data
                 withInt:(int)ppos;
- (void)addQuadWithFloat:(float)m00
               withFloat:(float)m01
               withFloat:(float)m10
               withFloat:(float)m11
               withFloat:(float)tx
               withFloat:(float)ty
               withFloat:(float)x1
               withFloat:(float)y1
               withFloat:(float)sx1
               withFloat:(float)sy1
               withFloat:(float)x2
               withFloat:(float)y2
               withFloat:(float)sx2
               withFloat:(float)sy2
               withFloat:(float)x3
               withFloat:(float)y3
               withFloat:(float)sx3
               withFloat:(float)sy3
               withFloat:(float)x4
               withFloat:(float)y4
               withFloat:(float)sx4
               withFloat:(float)sy4;
- (int)beginPrimitiveWithInt:(int)vertexCount
                     withInt:(int)elemCount;
- (void)expandVertsWithInt:(int)vertCount;
- (void)expandElemsWithInt:(int)elemCount;
@end
#endif

#if !defined (_TripleplayParticleParticleShader_ParticleExtras_) && (TripleplayParticleParticleShader_INCLUDE_ALL || TripleplayParticleParticleShader_ParticleExtras_INCLUDE)
#define _TripleplayParticleParticleShader_ParticleExtras_

@class TripleplayParticleParticleShader;
@protocol PlaynCoreGlGLProgram;
@protocol PlaynCoreGlGLShader_Uniform1i;

#define PlaynCoreGlGLShader_RESTRICT 1
#define PlaynCoreGlGLShader_Extras_INCLUDE 1
#include "playn/core/gl/GLShader.h"

@interface TripleplayParticleParticleShader_ParticleExtras : PlaynCoreGlGLShader_Extras {
 @public
  TripleplayParticleParticleShader *this$0_;
  id<PlaynCoreGlGLShader_Uniform1i> uTexture_;
  int lastTex_;
}

@property (nonatomic, strong) TripleplayParticleParticleShader *this$0;
@property (nonatomic, strong) id<PlaynCoreGlGLShader_Uniform1i> uTexture;
@property (nonatomic, assign) int lastTex;

- (id)initWithTripleplayParticleParticleShader:(TripleplayParticleParticleShader *)outer$
                      withPlaynCoreGlGLProgram:(id<PlaynCoreGlGLProgram>)prog;
- (void)prepareWithInt:(int)tex
              withBOOL:(BOOL)justActivated;
- (void)willFlush;
@end
#endif

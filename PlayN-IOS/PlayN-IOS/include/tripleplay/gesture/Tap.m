//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/gesture/Tap.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/util/HashMap.h"
#import "java/util/Map.h"
#import "playn/core/Touch.h"
#import "pythagoras/f/Point.h"
#import "tripleplay/gesture/Gesture.h"
#import "tripleplay/gesture/GestureBase.h"
#import "tripleplay/gesture/GestureNode.h"
#import "tripleplay/gesture/Log.h"
#import "tripleplay/gesture/Tap.h"
#import "tripleplay/util/Logger.h"

@implementation TripleplayGestureTap

@synthesize _touches = _touches_;
@synthesize _startPoints = _startPoints_;

+ (int)MOVE_THRESHOLD {
  return TripleplayGestureTap_MOVE_THRESHOLD;
}

- (id)init {
  return [self initTripleplayGestureTapWithInt:1];
}

- (id)initTripleplayGestureTapWithInt:(int)touches {
  if ((self = [super init])) {
    _startPoints_ = [[JavaUtilHashMap alloc] init];
    if (touches < 1 || touches > 4) {
      [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"How many fingers do you think people have?" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"tapTouches", [JavaLangInteger valueOfWithInt:4] ]];
      touches = [JavaLangMath maxWithInt:1 withInt:[JavaLangMath minWithInt:4 withInt:touches]];
    }
    _touches_ = touches;
  }
  return self;
}

- (id)initWithInt:(int)touches {
  return [self initTripleplayGestureTapWithInt:touches];
}

- (void)clearMemory {
  [((id<JavaUtilMap>) NIL_CHK(_startPoints_)) clear];
}

- (void)updateStateWithTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)node {
  {
    PythagorasFPoint *start;
    int size;
    switch ([((TripleplayGestureGestureNode *) NIL_CHK(node)).type ordinal]) {
      case TripleplayGestureGestureNode_Type_PAUSE:
      [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
      break;
      case TripleplayGestureGestureNode_Type_MOVE:
      start = ((PythagorasFPoint *) [((id<JavaUtilMap>) NIL_CHK(_startPoints_)) getWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]]]);
      if (start == nil) [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"No start for a moved touch" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"id", [JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]] ]];
      else if ([start distanceWithPythagorasFIPoint:[((TripleplayGestureGestureNode *) NIL_CHK(node)) location]] > TripleplayGestureTap_MOVE_THRESHOLD) [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
      break;
      case TripleplayGestureGestureNode_Type_CANCEL:
      [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
      break;
      case TripleplayGestureGestureNode_Type_START:
      (void) [((id<JavaUtilMap>) NIL_CHK(_startPoints_)) putWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]] withId:[((TripleplayGestureGestureNode *) NIL_CHK(node)) location]];
      size = [((id<JavaUtilMap>) NIL_CHK(_startPoints_)) size];
      if (size > _touches_) [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
      else if (size == _touches_ && _greedy_) [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum GREEDY]];
      break;
      case TripleplayGestureGestureNode_Type_END:
      [self setStateWithTripleplayGestureGesture_StateEnum:[((id<JavaUtilMap>) NIL_CHK(_startPoints_)) size] == _touches_ ? [TripleplayGestureGesture_StateEnum COMPLETE] : [TripleplayGestureGesture_StateEnum UNQUALIFIED]];
      break;
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureTap *typedCopy = (TripleplayGestureTap *) copy;
  typedCopy._touches = _touches_;
  typedCopy._startPoints = _startPoints_;
}

@end

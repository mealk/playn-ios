//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/gesture/Gesture.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/lang/IllegalArgumentException.h"
#include "react/SignalView.h"
#include "tripleplay/gesture/Gesture.h"
#include "tripleplay/gesture/GestureNode.h"


static TripleplayGestureGesture_DirectionEnum *TripleplayGestureGesture_DirectionEnum_UP;
static TripleplayGestureGesture_DirectionEnum *TripleplayGestureGesture_DirectionEnum_DOWN;
static TripleplayGestureGesture_DirectionEnum *TripleplayGestureGesture_DirectionEnum_LEFT;
static TripleplayGestureGesture_DirectionEnum *TripleplayGestureGesture_DirectionEnum_RIGHT;
IOSObjectArray *TripleplayGestureGesture_DirectionEnum_values;

@implementation TripleplayGestureGesture_DirectionEnum

+ (TripleplayGestureGesture_DirectionEnum *)UP {
  return TripleplayGestureGesture_DirectionEnum_UP;
}
+ (TripleplayGestureGesture_DirectionEnum *)DOWN {
  return TripleplayGestureGesture_DirectionEnum_DOWN;
}
+ (TripleplayGestureGesture_DirectionEnum *)LEFT {
  return TripleplayGestureGesture_DirectionEnum_LEFT;
}
+ (TripleplayGestureGesture_DirectionEnum *)RIGHT {
  return TripleplayGestureGesture_DirectionEnum_RIGHT;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TripleplayGestureGesture_DirectionEnum class]) {
    TripleplayGestureGesture_DirectionEnum_UP = [[TripleplayGestureGesture_DirectionEnum alloc] initWithNSString:@"UP" withInt:0];
    TripleplayGestureGesture_DirectionEnum_DOWN = [[TripleplayGestureGesture_DirectionEnum alloc] initWithNSString:@"DOWN" withInt:1];
    TripleplayGestureGesture_DirectionEnum_LEFT = [[TripleplayGestureGesture_DirectionEnum alloc] initWithNSString:@"LEFT" withInt:2];
    TripleplayGestureGesture_DirectionEnum_RIGHT = [[TripleplayGestureGesture_DirectionEnum alloc] initWithNSString:@"RIGHT" withInt:3];
    TripleplayGestureGesture_DirectionEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TripleplayGestureGesture_DirectionEnum_UP, TripleplayGestureGesture_DirectionEnum_DOWN, TripleplayGestureGesture_DirectionEnum_LEFT, TripleplayGestureGesture_DirectionEnum_RIGHT, nil } count:4 type:[IOSClass classWithClass:[TripleplayGestureGesture_DirectionEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TripleplayGestureGesture_DirectionEnum_values];
}

+ (TripleplayGestureGesture_DirectionEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TripleplayGestureGesture_DirectionEnum_values count]; i++) {
    TripleplayGestureGesture_DirectionEnum *e = [TripleplayGestureGesture_DirectionEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end

static TripleplayGestureGesture_StateEnum *TripleplayGestureGesture_StateEnum_PASSIVE;
static TripleplayGestureGesture_StateEnum *TripleplayGestureGesture_StateEnum_GREEDY;
static TripleplayGestureGesture_StateEnum *TripleplayGestureGesture_StateEnum_COMPLETE;
static TripleplayGestureGesture_StateEnum *TripleplayGestureGesture_StateEnum_UNQUALIFIED;
IOSObjectArray *TripleplayGestureGesture_StateEnum_values;

@implementation TripleplayGestureGesture_StateEnum

+ (TripleplayGestureGesture_StateEnum *)PASSIVE {
  return TripleplayGestureGesture_StateEnum_PASSIVE;
}
+ (TripleplayGestureGesture_StateEnum *)GREEDY {
  return TripleplayGestureGesture_StateEnum_GREEDY;
}
+ (TripleplayGestureGesture_StateEnum *)COMPLETE {
  return TripleplayGestureGesture_StateEnum_COMPLETE;
}
+ (TripleplayGestureGesture_StateEnum *)UNQUALIFIED {
  return TripleplayGestureGesture_StateEnum_UNQUALIFIED;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TripleplayGestureGesture_StateEnum class]) {
    TripleplayGestureGesture_StateEnum_PASSIVE = [[TripleplayGestureGesture_StateEnum alloc] initWithNSString:@"PASSIVE" withInt:0];
    TripleplayGestureGesture_StateEnum_GREEDY = [[TripleplayGestureGesture_StateEnum alloc] initWithNSString:@"GREEDY" withInt:1];
    TripleplayGestureGesture_StateEnum_COMPLETE = [[TripleplayGestureGesture_StateEnum alloc] initWithNSString:@"COMPLETE" withInt:2];
    TripleplayGestureGesture_StateEnum_UNQUALIFIED = [[TripleplayGestureGesture_StateEnum alloc] initWithNSString:@"UNQUALIFIED" withInt:3];
    TripleplayGestureGesture_StateEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TripleplayGestureGesture_StateEnum_PASSIVE, TripleplayGestureGesture_StateEnum_GREEDY, TripleplayGestureGesture_StateEnum_COMPLETE, TripleplayGestureGesture_StateEnum_UNQUALIFIED, nil } count:4 type:[IOSClass classWithClass:[TripleplayGestureGesture_StateEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TripleplayGestureGesture_StateEnum_values];
}

+ (TripleplayGestureGesture_StateEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TripleplayGestureGesture_StateEnum_values count]; i++) {
    TripleplayGestureGesture_StateEnum *e = [TripleplayGestureGesture_StateEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end

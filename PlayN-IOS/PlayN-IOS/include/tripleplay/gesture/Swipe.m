//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/gesture/Swipe.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/Map.h"
#import "java/util/Set.h"
#import "playn/core/Touch.h"
#import "pythagoras/f/Point.h"
#import "tripleplay/gesture/Gesture.h"
#import "tripleplay/gesture/GestureBase.h"
#import "tripleplay/gesture/GestureNode.h"
#import "tripleplay/gesture/Log.h"
#import "tripleplay/gesture/Swipe.h"
#import "tripleplay/util/Logger.h"

@implementation TripleplayGestureSwipe

@synthesize _touches = _touches_;
@synthesize _direction = _direction_;
@synthesize _directionModifier = _directionModifier_;
@synthesize _movedEnough = _movedEnough_;
@synthesize _startNodes = _startNodes_;
@synthesize _lastNodes = _lastNodes_;
@synthesize _cancelOnPause = _cancelOnPause_;
@synthesize _offAxisTolerance = _offAxisTolerance_;
@synthesize _onAxisThreshold = _onAxisThreshold_;
@synthesize _axisSwipe = _axisSwipe_;

- (id)initWithTripleplayGestureGesture_DirectionEnum:(TripleplayGestureGesture_DirectionEnum *)direction {
  return [self initTripleplayGestureSwipeWithInt:1 withTripleplayGestureGesture_DirectionEnum:direction];
}

- (id)initTripleplayGestureSwipeWithInt:(int)touches
withTripleplayGestureGesture_DirectionEnum:(TripleplayGestureGesture_DirectionEnum *)direction {
  if ((self = [super init])) {
    _movedEnough_ = NO;
    _startNodes_ = [[JavaUtilHashMap alloc] init];
    _lastNodes_ = [[JavaUtilHashMap alloc] init];
    _cancelOnPause_ = YES;
    _offAxisTolerance_ = 10;
    _onAxisThreshold_ = 10;
    _axisSwipe_ = NO;
    if (touches < 1 || touches > 4) {
      [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"How many fingers do you think people have?" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"tapTouches", [JavaLangInteger valueOfWithInt:4] ]];
      touches = [JavaLangMath maxWithInt:1 withInt:[JavaLangMath minWithInt:4 withInt:touches]];
    }
    if (direction == nil) {
      [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"Swipe cannot operate with a null direction, assuming RIGHT" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:0 ]];
      direction = [TripleplayGestureGesture_DirectionEnum RIGHT];
    }
    _touches_ = touches;
    [self setDirectionWithTripleplayGestureGesture_DirectionEnum:direction];
  }
  return self;
}

- (id)initWithInt:(int)touches
withTripleplayGestureGesture_DirectionEnum:(TripleplayGestureGesture_DirectionEnum *)direction {
  return [self initTripleplayGestureSwipeWithInt:touches withTripleplayGestureGesture_DirectionEnum:direction];
}

- (TripleplayGestureSwipe *)cancelOnPauseWithBOOL:(BOOL)value {
  _cancelOnPause_ = value;
  return self;
}

- (TripleplayGestureSwipe *)offAxisToleranceWithInt:(int)pixels {
  _offAxisTolerance_ = pixels;
  return self;
}

- (TripleplayGestureSwipe *)onAxisThresholdWithInt:(int)pixels {
  _onAxisThreshold_ = pixels;
  return self;
}

- (TripleplayGestureSwipe *)axisSwipeWithBOOL:(BOOL)value {
  _axisSwipe_ = value;
  return self;
}

- (void)clearMemory {
  _movedEnough_ = NO;
  [((id<JavaUtilMap>) NIL_CHK(_startNodes_)) clear];
  [((id<JavaUtilMap>) NIL_CHK(_lastNodes_)) clear];
}

- (void)updateStateWithTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)node {
  switch ([((TripleplayGestureGestureNode *) NIL_CHK(node)).type ordinal]) {
    case TripleplayGestureGestureNode_Type_START:
    (void) [((id<JavaUtilMap>) NIL_CHK(_startNodes_)) putWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]] withId:node];
    break;
    case TripleplayGestureGestureNode_Type_MOVE:
    if ([((id<JavaUtilMap>) NIL_CHK(_startNodes_)) size] != _touches_) [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
    [self evaluateMoveWithTripleplayGestureGestureNode:node];
    break;
    case TripleplayGestureGestureNode_Type_PAUSE:
    if (_cancelOnPause_) [self setStateWithTripleplayGestureGesture_StateEnum:[self getEndState]];
    break;
    case TripleplayGestureGestureNode_Type_END:
    [self setStateWithTripleplayGestureGesture_StateEnum:[self getEndState]];
    break;
    case TripleplayGestureGestureNode_Type_CANCEL:
    [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
    break;
  }
}

- (TripleplayGestureGesture_StateEnum *)getEndState {
  return _movedEnough_ && [((id<JavaUtilMap>) NIL_CHK(_startNodes_)) size] == _touches_ ? [TripleplayGestureGesture_StateEnum COMPLETE] : [TripleplayGestureGesture_StateEnum UNQUALIFIED];
}

- (void)evaluateMoveWithTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)node {
  TripleplayGestureGestureNode *start = ((TripleplayGestureGestureNode *) [((id<JavaUtilMap>) NIL_CHK(_startNodes_)) getWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]]]);
  if (start == nil) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"No start point for a path check, invalid state" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"touchId", [JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]] ]];
    return;
  }
  TripleplayGestureGestureNode *lastNode = ((TripleplayGestureGestureNode *) [((id<JavaUtilMap>) NIL_CHK(_lastNodes_)) getWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]]]);
  PythagorasFPoint *current = [((TripleplayGestureGestureNode *) NIL_CHK(node)) location];
  (void) [((id<JavaUtilMap>) NIL_CHK(_lastNodes_)) putWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]] withId:node];
  PythagorasFPoint *startLoc = [((TripleplayGestureGestureNode *) NIL_CHK(start)) location];
  if ([((PythagorasFPoint *) NIL_CHK(current)) distanceWithPythagorasFIPoint:startLoc] < _onAxisThreshold_) return;
  float offAxisDistance;
  float lastAxisDistance = [self axisDistanceWithPythagorasFPoint:lastNode == nil ? nil : [((TripleplayGestureGestureNode *) NIL_CHK(lastNode)) location] withPythagorasFPoint:current];
  if (_direction_ == [TripleplayGestureGesture_DirectionEnum UP] || _direction_ == [TripleplayGestureGesture_DirectionEnum DOWN]) offAxisDistance = [JavaLangMath absWithFloat:[((PythagorasFPoint *) NIL_CHK(current)) x] - [((PythagorasFPoint *) NIL_CHK(startLoc)) x]];
  else offAxisDistance = [JavaLangMath absWithFloat:[((PythagorasFPoint *) NIL_CHK(current)) y] - [((PythagorasFPoint *) NIL_CHK(startLoc)) y]];
  if (offAxisDistance > _offAxisTolerance_) [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
  else if (lastAxisDistance < 0) [self backtrackedWithTripleplayGestureGestureNode:node withFloat:-lastAxisDistance];
  if (!_movedEnough_) {
    BOOL allMovedEnough = YES;
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(_startNodes_)) entrySet]) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<JavaUtilMap_Entry> touchStart = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        TripleplayGestureGestureNode *touchLast = ((TripleplayGestureGestureNode *) [((id<JavaUtilMap>) NIL_CHK(_lastNodes_)) getWithId:((JavaLangInteger *) [((id<JavaUtilMap_Entry>) NIL_CHK(touchStart)) getKey])]);
        if ([self axisDistanceWithPythagorasFPoint:[((TripleplayGestureGestureNode *) [((id<JavaUtilMap_Entry>) NIL_CHK(touchStart)) getValue]) location] withPythagorasFPoint:touchLast == nil ? nil : [((TripleplayGestureGestureNode *) NIL_CHK(touchLast)) location]] <= _onAxisThreshold_) {
          allMovedEnough = NO;
          break;
        }
      }
    }
    if (allMovedEnough) {
      _movedEnough_ = YES;
      if (_greedy_) [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum GREEDY]];
    }
  }
}

- (float)axisDistanceWithPythagorasFPoint:(PythagorasFPoint *)start
                     withPythagorasFPoint:(PythagorasFPoint *)end {
  if (start == nil || end == nil) return 0;
  float value;
  if (_direction_ == [TripleplayGestureGesture_DirectionEnum UP] || _direction_ == [TripleplayGestureGesture_DirectionEnum DOWN]) value = [((PythagorasFPoint *) NIL_CHK(end)) y] - [((PythagorasFPoint *) NIL_CHK(start)) y];
  else value = [((PythagorasFPoint *) NIL_CHK(end)) x] - [((PythagorasFPoint *) NIL_CHK(start)) x];
  return _axisSwipe_ ? [JavaLangMath absWithFloat:value] : value * _directionModifier_;
}

- (void)backtrackedWithTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)node
                                          withFloat:(float)distance {
  if (!_axisSwipe_) {
    [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
  }
}

- (void)setDirectionWithTripleplayGestureGesture_DirectionEnum:(TripleplayGestureGesture_DirectionEnum *)direction {
  _direction_ = direction;
  _directionModifier_ = _direction_ == [TripleplayGestureGesture_DirectionEnum UP] || _direction_ == [TripleplayGestureGesture_DirectionEnum LEFT] ? -1 : 1;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureSwipe *typedCopy = (TripleplayGestureSwipe *) copy;
  typedCopy._touches = _touches_;
  typedCopy._direction = _direction_;
  typedCopy._directionModifier = _directionModifier_;
  typedCopy._movedEnough = _movedEnough_;
  typedCopy._startNodes = _startNodes_;
  typedCopy._lastNodes = _lastNodes_;
  typedCopy._cancelOnPause = _cancelOnPause_;
  typedCopy._offAxisTolerance = _offAxisTolerance_;
  typedCopy._onAxisThreshold = _onAxisThreshold_;
  typedCopy._axisSwipe = _axisSwipe_;
}

@end

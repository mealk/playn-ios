//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/bgs/RoundRectBackground.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Float.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Graphics.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "pythagoras/f/IDimension.h"
#import "tripleplay/ui/Background.h"
#import "tripleplay/ui/bgs/RoundRectBackground.h"

@implementation TripleplayUiBgsRoundRectBackground

@synthesize _bgColor = _bgColor_;
@synthesize _borderColor = _borderColor_;
@synthesize _radius = _radius_;
@synthesize _borderWidth = _borderWidth_;
@synthesize _borderRadius = _borderRadius_;

- (id)initWithInt:(int)bgColor
        withFloat:(float)radius {
  return [self initTripleplayUiBgsRoundRectBackgroundWithInt:bgColor withFloat:radius withInt:0 withFloat:0];
}

- (id)initTripleplayUiBgsRoundRectBackgroundWithInt:(int)bgColor
                                          withFloat:(float)radius
                                            withInt:(int)borderColor
                                          withFloat:(float)borderWidth {
  return [self initTripleplayUiBgsRoundRectBackgroundWithInt:bgColor withFloat:radius withInt:borderColor withFloat:borderWidth withFloat:radius];
}

- (id)initWithInt:(int)bgColor
        withFloat:(float)radius
          withInt:(int)borderColor
        withFloat:(float)borderWidth {
  return [self initTripleplayUiBgsRoundRectBackgroundWithInt:bgColor withFloat:radius withInt:borderColor withFloat:borderWidth];
}

- (id)initTripleplayUiBgsRoundRectBackgroundWithInt:(int)bgColor
                                          withFloat:(float)radius
                                            withInt:(int)borderColor
                                          withFloat:(float)borderWidth
                                          withFloat:(float)borderRadius {
  if ((self = [super init])) {
    _bgColor_ = bgColor;
    _radius_ = radius;
    _borderColor_ = borderColor;
    _borderWidth_ = borderWidth;
    _borderRadius_ = borderRadius;
  }
  return self;
}

- (id)initWithInt:(int)bgColor
        withFloat:(float)radius
          withInt:(int)borderColor
        withFloat:(float)borderWidth
        withFloat:(float)borderRadius {
  return [self initTripleplayUiBgsRoundRectBackgroundWithInt:bgColor withFloat:radius withInt:borderColor withFloat:borderWidth withFloat:borderRadius];
}

- (TripleplayUiBackground_Instance *)instantiateWithPythagorasFIDimension:(id<PythagorasFIDimension>)size {
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) width] withFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) height]];
  if (_borderWidth_ > 0) {
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:_borderColor_];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRoundRectWithFloat:0 withFloat:0 withFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) width] withFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) height] withFloat:_radius_];
    float iwidth = [((id<PythagorasFIDimension>) NIL_CHK(size)) width] - 2 * _borderWidth_, iheight = [((id<PythagorasFIDimension>) NIL_CHK(size)) height] - 2 * _borderWidth_;
    float iradius = _borderRadius_ * (iheight / [((id<PythagorasFIDimension>) NIL_CHK(size)) height]);
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:_bgColor_];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRoundRectWithFloat:_borderWidth_ withFloat:_borderWidth_ withFloat:iwidth withFloat:iheight withFloat:iradius];
  }
  else {
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:_bgColor_];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRoundRectWithFloat:0 withFloat:0 withFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) width] withFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) height] withFloat:_radius_];
  }
  id<PlaynCoreImageLayer> layer = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:image];
  if (alpha__ != nil) (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setAlphaWithFloat:[alpha__ floatValue]];
  return [[TripleplayUiBackground_LayerInstance alloc] initWithTripleplayUiBackground:self withPythagorasFIDimension:size withPlaynCoreLayerArray:[IOSObjectArray arrayWithType:[IOSClass classWithProtocol:@protocol(PlaynCoreLayer)] count:1, layer ]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBgsRoundRectBackground *typedCopy = (TripleplayUiBgsRoundRectBackground *) copy;
  typedCopy._bgColor = _bgColor_;
  typedCopy._borderColor = _borderColor_;
  typedCopy._radius = _radius_;
  typedCopy._borderWidth = _borderWidth_;
  typedCopy._borderRadius = _borderRadius_;
}

@end

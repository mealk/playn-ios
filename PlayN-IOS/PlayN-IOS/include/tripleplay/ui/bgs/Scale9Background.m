//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/bgs/Scale9Background.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSFloatArray.h"
#import "java/lang/Float.h"
#import "playn/core/Image.h"
#import "playn/core/Log.h"
#import "playn/core/PlayN.h"
#import "playn/core/Surface.h"
#import "pythagoras/f/IDimension.h"
#import "tripleplay/ui/Background.h"
#import "tripleplay/ui/bgs/Scale9Background.h"

@implementation TripleplayUiBgsScale9Background

@synthesize xaxis = xaxis_;
@synthesize yaxis = yaxis_;
@synthesize _image = _image_;

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  if ((self = [super init])) {
    if (![((id<PlaynCoreImage>) NIL_CHK(image)) isReady]) {
      [((id<PlaynCoreLog>) [PlaynCorePlayN log]) warnWithNSString:[NSString stringWithFormat:@"Scale9 image not preloaded: %@", image]];
    }
    _image_ = image;
    xaxis_ = [[TripleplayUiBgsScale9Background_Axis3 alloc] initWithFloat:[((id<PlaynCoreImage>) NIL_CHK(image)) width]];
    yaxis_ = [[TripleplayUiBgsScale9Background_Axis3 alloc] initWithFloat:[((id<PlaynCoreImage>) NIL_CHK(image)) height]];
  }
  return self;
}

- (TripleplayUiBackground_Instance *)instantiateWithPythagorasFIDimension:(id<PythagorasFIDimension>)size {
  return [[TripleplayUiBackground_LayerInstance alloc] initWithTripleplayUiBackground:self withPythagorasFIDimension:size withPlaynCoreImmediateLayer_Renderer:[[TripleplayUiBgsScale9Background_$1 alloc] initWithTripleplayUiBgsScale9Background:self withPythagorasFIDimension:size]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBgsScale9Background *typedCopy = (TripleplayUiBgsScale9Background *) copy;
  typedCopy.xaxis = xaxis_;
  typedCopy.yaxis = yaxis_;
  typedCopy._image = _image_;
}

@end
@implementation TripleplayUiBgsScale9Background_Axis3

@synthesize _offsets = _offsets_;
@synthesize _lengths = _lengths_;

- (id)initWithFloat:(float)length {
  if ((self = [super init])) {
    float d = length / 3;
    _lengths_ = [IOSFloatArray arrayWithFloats:(float[]){ d, length - 2 * d, d } count:3];
    _offsets_ = [IOSFloatArray arrayWithFloats:(float[]){ 0, [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:0], [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:1] } count:3];
  }
  return self;
}

- (id)initWithFloat:(float)length
withTripleplayUiBgsScale9Background_Axis3:(TripleplayUiBgsScale9Background_Axis3 *)src {
  if ((self = [super init])) {
    _lengths_ = [IOSFloatArray arrayWithFloats:(float[]){ [((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(src)) sizeWithInt:0], length - [((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(src)) sizeWithInt:0] - [((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(src)) sizeWithInt:2], [((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(src)) sizeWithInt:2] } count:3];
    _offsets_ = [IOSFloatArray arrayWithFloats:(float[]){ 0, [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:0], [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:0] + [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:1] } count:3];
  }
  return self;
}

- (float)coordWithInt:(int)idx {
  return [((IOSFloatArray *) NIL_CHK(_offsets_)) floatAtIndex:idx];
}

- (float)sizeWithInt:(int)idx {
  return [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:idx];
}

- (TripleplayUiBgsScale9Background_Axis3 *)setWithInt:(int)idx
                                            withFloat:(float)coord
                                            withFloat:(float)size {
  [((IOSFloatArray *) NIL_CHK(_offsets_)) replaceFloatAtIndex:idx withFloat:coord];
  [((IOSFloatArray *) NIL_CHK(_lengths_)) replaceFloatAtIndex:idx withFloat:size];
  return self;
}

- (TripleplayUiBgsScale9Background_Axis3 *)resizeWithInt:(int)idx
                                               withFloat:(float)size {
  float excess = [((IOSFloatArray *) NIL_CHK(_lengths_)) floatAtIndex:idx] - size;
  [((IOSFloatArray *) NIL_CHK(_lengths_)) replaceFloatAtIndex:idx withFloat:size];
  {
    float half;
    switch (idx) {
      case 0:
      [((IOSFloatArray *) NIL_CHK(_offsets_)) replaceFloatAtIndex:1 withFloat:[_offsets_ floatAtIndex:1] - excess];
      [((IOSFloatArray *) NIL_CHK(_lengths_)) replaceFloatAtIndex:1 withFloat:[_lengths_ floatAtIndex:1] + excess];
      break;
      case 1:
      half = excess * .5f;
      [((IOSFloatArray *) NIL_CHK(_lengths_)) replaceFloatAtIndex:0 withFloat:[_lengths_ floatAtIndex:0] + half];
      [((IOSFloatArray *) NIL_CHK(_lengths_)) replaceFloatAtIndex:2 withFloat:[_lengths_ floatAtIndex:2] + half];
      [((IOSFloatArray *) NIL_CHK(_offsets_)) replaceFloatAtIndex:1 withFloat:[_offsets_ floatAtIndex:1] + half];
      [((IOSFloatArray *) NIL_CHK(_offsets_)) replaceFloatAtIndex:2 withFloat:[_offsets_ floatAtIndex:2] - half];
      break;
      case 2:
      [((IOSFloatArray *) NIL_CHK(_offsets_)) replaceFloatAtIndex:2 withFloat:[_offsets_ floatAtIndex:2] - excess];
      [((IOSFloatArray *) NIL_CHK(_lengths_)) replaceFloatAtIndex:1 withFloat:[_lengths_ floatAtIndex:1] + excess];
      break;
    }
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBgsScale9Background_Axis3 *typedCopy = (TripleplayUiBgsScale9Background_Axis3 *) copy;
  typedCopy._offsets = _offsets_;
  typedCopy._lengths = _lengths_;
}

@end
@implementation TripleplayUiBgsScale9Background_$1

@synthesize this$0 = this$0_;
@synthesize dx = dx_;
@synthesize dy = dy_;
@synthesize val$size = val$size_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf {
  (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) save];
  if (this$0_.alpha_ != nil) (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setAlphaWithFloat:[this$0_.alpha_ floatValue]];
  for (int yy = 0; yy < 3; ++yy) for (int xx = 0; xx < 3; ++xx) {
    [self drawPartWithPlaynCoreSurface:surf withInt:xx withInt:yy];
  }
  if (this$0_.alpha_ != nil) (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setAlphaWithFloat:1];
  (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) restore];
}

- (void)drawPartWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf
                             withInt:(int)x
                             withInt:(int)y {
  if ([((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(dx_)) sizeWithInt:x] == 0 || [((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(dy_)) sizeWithInt:y] == 0) return;
  (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) drawImageWithPlaynCoreImage:this$0_._image withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(dx_)) coordWithInt:x] withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(dy_)) coordWithInt:y] withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(dx_)) sizeWithInt:x] withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(dy_)) sizeWithInt:y] withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(this$0_.xaxis)) coordWithInt:x] withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(this$0_.yaxis)) coordWithInt:y] withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(this$0_.xaxis)) sizeWithInt:x] withFloat:[((TripleplayUiBgsScale9Background_Axis3 *) NIL_CHK(this$0_.yaxis)) sizeWithInt:y]];
}

- (id)initWithTripleplayUiBgsScale9Background:(TripleplayUiBgsScale9Background *)outer$
                    withPythagorasFIDimension:(id<PythagorasFIDimension>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$size_ = capture$0;
    dx_ = [[TripleplayUiBgsScale9Background_Axis3 alloc] initWithFloat:[((id<PythagorasFIDimension>) NIL_CHK(val$size_)) width] withTripleplayUiBgsScale9Background_Axis3:outer$.xaxis];
    dy_ = [[TripleplayUiBgsScale9Background_Axis3 alloc] initWithFloat:[((id<PythagorasFIDimension>) NIL_CHK(val$size_)) height] withTripleplayUiBgsScale9Background_Axis3:outer$.yaxis];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBgsScale9Background_$1 *typedCopy = (TripleplayUiBgsScale9Background_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.dx = dx_;
  typedCopy.dy = dy_;
  typedCopy.val$size = val$size_;
}

@end

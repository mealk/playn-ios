//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/bgs/BorderedBackground.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Float.h"
#import "playn/core/Surface.h"
#import "pythagoras/f/IDimension.h"
#import "tripleplay/ui/Background.h"
#import "tripleplay/ui/bgs/BorderedBackground.h"

@implementation TripleplayUiBgsBorderedBackground

@synthesize _bgColor = _bgColor_;
@synthesize _borderColor = _borderColor_;
@synthesize _thickness = _thickness_;

- (id)initWithInt:(int)bgColor
          withInt:(int)borderColor
        withFloat:(float)thickness {
  if ((self = [super init])) {
    _bgColor_ = bgColor;
    _borderColor_ = borderColor;
    _thickness_ = thickness;
  }
  return self;
}

- (TripleplayUiBackground_Instance *)instantiateWithPythagorasFIDimension:(id<PythagorasFIDimension>)size {
  return [[TripleplayUiBackground_LayerInstance alloc] initWithTripleplayUiBackground:self withPythagorasFIDimension:size withPlaynCoreImmediateLayer_Renderer:[[TripleplayUiBgsBorderedBackground_$1 alloc] initWithTripleplayUiBgsBorderedBackground:self withPythagorasFIDimension:size]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBgsBorderedBackground *typedCopy = (TripleplayUiBgsBorderedBackground *) copy;
  typedCopy._bgColor = _bgColor_;
  typedCopy._borderColor = _borderColor_;
  typedCopy._thickness = _thickness_;
}

@end
@implementation TripleplayUiBgsBorderedBackground_$1

@synthesize this$0 = this$0_;
@synthesize val$size = val$size_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf {
  float width = [((id<PythagorasFIDimension>) NIL_CHK(val$size_)) width], height = [((id<PythagorasFIDimension>) NIL_CHK(val$size_)) height];
  if (this$0_.alpha_ != nil) (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setAlphaWithFloat:[this$0_.alpha_ floatValue]];
  (void) [((id<PlaynCoreSurface>) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setFillColorWithInt:this$0_._bgColor]) fillRectWithFloat:0 withFloat:0 withFloat:width withFloat:height];
  (void) [((id<PlaynCoreSurface>) [((id<PlaynCoreSurface>) [((id<PlaynCoreSurface>) [((id<PlaynCoreSurface>) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setFillColorWithInt:this$0_._borderColor]) fillRectWithFloat:0 withFloat:0 withFloat:width withFloat:this$0_._thickness]) fillRectWithFloat:0 withFloat:0 withFloat:this$0_._thickness withFloat:height]) fillRectWithFloat:width - this$0_._thickness withFloat:0 withFloat:this$0_._thickness withFloat:height]) fillRectWithFloat:0 withFloat:height - this$0_._thickness withFloat:width withFloat:this$0_._thickness];
  if (this$0_.alpha_ != nil) (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setAlphaWithFloat:1];
}

- (id)initWithTripleplayUiBgsBorderedBackground:(TripleplayUiBgsBorderedBackground *)outer$
                      withPythagorasFIDimension:(id<PythagorasFIDimension>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$size_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBgsBorderedBackground_$1 *typedCopy = (TripleplayUiBgsBorderedBackground_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$size = val$size_;
}

@end

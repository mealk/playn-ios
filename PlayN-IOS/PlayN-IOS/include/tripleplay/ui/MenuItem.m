//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/MenuItem.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "java/lang/Boolean.h"
#import "java/lang/IllegalArgumentException.h"
#import "playn/core/Connection.h"
#import "playn/core/Image.h"
#import "playn/core/Pointer.h"
#import "pythagoras/f/Dimension.h"
#import "react/Connection.h"
#import "react/Signal.h"
#import "react/SignalView.h"
#import "react/Slot.h"
#import "react/UnitSlot.h"
#import "react/Value.h"
#import "tripleplay/ui/Element.h"
#import "tripleplay/ui/Icon.h"
#import "tripleplay/ui/Icons.h"
#import "tripleplay/ui/MenuItem.h"
#import "tripleplay/ui/TextWidget.h"

@implementation TripleplayUiMenuItem

@synthesize text_ = text__;
@synthesize icon_ = icon__;
@synthesize _triggered = _triggered_;
@synthesize _clicked = _clicked_;
@synthesize _relay = _relay_;
@synthesize _preferredSize_MenuItem = _preferredSize_MenuItem_;
@synthesize _showText = _showText_;

- (id)initWithNSString:(NSString *)label {
  return [self initTripleplayUiMenuItemWithNSString:label withTripleplayUiIcon:(id<TripleplayUiIcon>) nil];
}

- (id)initWithNSString:(NSString *)label
    withPlaynCoreImage:(id<PlaynCoreImage>)icon {
  return [self initTripleplayUiMenuItemWithNSString:label withTripleplayUiIcon:[TripleplayUiIcons imageWithPlaynCoreImage:icon]];
}

- (id)initTripleplayUiMenuItemWithNSString:(NSString *)label
                      withTripleplayUiIcon:(id<TripleplayUiIcon>)icon {
  if ((self = [super init])) {
    text__ = ((ReactValue *) [ReactValue createWithId:nil]);
    icon__ = ((ReactValue *) [ReactValue createWithId:nil]);
    _clicked_ = ((ReactSignal *) [ReactSignal create]);
    _preferredSize_MenuItem_ = [[PythagorasFDimension alloc] initWithFloat:0 withFloat:0];
    _showText_ = [TripleplayUiMenuItem_ShowTextEnum ALWAYS];
    (void) [((ReactValue *) NIL_CHK(text__)) updateWithId:label];
    (void) [((ReactValue *) NIL_CHK(self.icon_)) updateWithId:icon];
    (void) [((ReactValue *) NIL_CHK(text__)) connectWithReactValueView_Listener:[self textDidChange]];
    (void) [((ReactValue *) NIL_CHK(self.icon_)) connectWithReactValueView_Listener:[self iconDidChange]];
  }
  return self;
}

- (id)initWithNSString:(NSString *)label
  withTripleplayUiIcon:(id<TripleplayUiIcon>)icon {
  return [self initTripleplayUiMenuItemWithNSString:label withTripleplayUiIcon:icon];
}

- (TripleplayUiMenuItem *)showTextWithTripleplayUiMenuItem_ShowTextEnum:(TripleplayUiMenuItem_ShowTextEnum *)value {
  _showText_ = value;
  [self invalidate];
  return self;
}

- (TripleplayUiMenuItem *)hideTextWhenInactive {
  return [self showTextWithTripleplayUiMenuItem_ShowTextEnum:[TripleplayUiMenuItem_ShowTextEnum WHEN_ACTIVE]];
}

- (TripleplayUiMenuItem *)hideText {
  return [self showTextWithTripleplayUiMenuItem_ShowTextEnum:[TripleplayUiMenuItem_ShowTextEnum NEVER]];
}

- (TripleplayUiMenuItem *)setPreferredSizeWithFloat:(float)wid
                                          withFloat:(float)hei {
  [((PythagorasFDimension *) NIL_CHK(_preferredSize_MenuItem_)) setSizeWithFloat:wid withFloat:hei];
  [self invalidate];
  return self;
}

- (void)setRelayWithPlaynCoreConnection:(id<PlaynCoreConnection>)relay {
  if (_relay_ != nil) [_relay_ disconnect];
  _relay_ = relay;
}

- (id<ReactSignalView>)triggered {
  if (_triggered_ == nil) _triggered_ = ((ReactSignal *) [ReactSignal create]);
  return _triggered_;
}

- (id<ReactSignalView>)clicked {
  return _clicked_;
}

- (IOSClass *)getStyleClass {
  return [IOSClass classWithClass:[TripleplayUiMenuItem class]];
}

- (void)onClickWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  [((ReactSignal *) NIL_CHK(_clicked_)) emitWithId:self];
}

- (id<TripleplayUiIcon>)icon {
  return ((id<TripleplayUiIcon>) [((ReactValue *) NIL_CHK(icon__)) get]);
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                       withFloat:(float)x
                                       withFloat:(float)y {
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                      withFloat:(float)x
                                      withFloat:(float)y {
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                     withFloat:(float)x
                                     withFloat:(float)y {
}

- (void)trigger {
  if (_triggered_ != nil) [_triggered_ emitWithId:self];
}

- (NSString *)text {
  switch ([_showText_ ordinal]) {
    case TripleplayUiMenuItem_ShowText_NEVER:
    return @"";
    case TripleplayUiMenuItem_ShowText_WHEN_ACTIVE:
    return ((JavaLangBoolean *) [((ReactValue *) NIL_CHK(selected__)) get]) ? ((NSString *) [((ReactValue *) NIL_CHK(text__)) get]) : @"";
    case TripleplayUiMenuItem_ShowText_ALWAYS:
    default:
    return ((NSString *) [((ReactValue *) NIL_CHK(text__)) get]);
  }
}

- (TripleplayUiElement_LayoutData *)createLayoutDataWithFloat:(float)hintX
                                                    withFloat:(float)hintY {
  return [[TripleplayUiElement_SizableLayoutData alloc] initWithTripleplayUiElement:self withTripleplayUiElement_LayoutData:[super createLayoutDataWithFloat:hintX withFloat:hintY] withPythagorasFIDimension:_preferredSize_MenuItem_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiMenuItem *typedCopy = (TripleplayUiMenuItem *) copy;
  typedCopy.text_ = text__;
  typedCopy.icon_ = icon__;
  typedCopy._triggered = _triggered_;
  typedCopy._clicked = _clicked_;
  typedCopy._relay = _relay_;
  typedCopy._preferredSize_MenuItem = _preferredSize_MenuItem_;
  typedCopy._showText = _showText_;
}

@end

static TripleplayUiMenuItem_ShowTextEnum *TripleplayUiMenuItem_ShowTextEnum_ALWAYS;
static TripleplayUiMenuItem_ShowTextEnum *TripleplayUiMenuItem_ShowTextEnum_NEVER;
static TripleplayUiMenuItem_ShowTextEnum *TripleplayUiMenuItem_ShowTextEnum_WHEN_ACTIVE;
IOSObjectArray *TripleplayUiMenuItem_ShowTextEnum_values;

@implementation TripleplayUiMenuItem_ShowTextEnum

+ (TripleplayUiMenuItem_ShowTextEnum *)ALWAYS {
  return TripleplayUiMenuItem_ShowTextEnum_ALWAYS;
}
+ (TripleplayUiMenuItem_ShowTextEnum *)NEVER {
  return TripleplayUiMenuItem_ShowTextEnum_NEVER;
}
+ (TripleplayUiMenuItem_ShowTextEnum *)WHEN_ACTIVE {
  return TripleplayUiMenuItem_ShowTextEnum_WHEN_ACTIVE;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TripleplayUiMenuItem_ShowTextEnum class]) {
    TripleplayUiMenuItem_ShowTextEnum_ALWAYS = [[TripleplayUiMenuItem_ShowTextEnum alloc] initWithNSString:@"ALWAYS" withInt:0];
    TripleplayUiMenuItem_ShowTextEnum_NEVER = [[TripleplayUiMenuItem_ShowTextEnum alloc] initWithNSString:@"NEVER" withInt:1];
    TripleplayUiMenuItem_ShowTextEnum_WHEN_ACTIVE = [[TripleplayUiMenuItem_ShowTextEnum alloc] initWithNSString:@"WHEN_ACTIVE" withInt:2];
    TripleplayUiMenuItem_ShowTextEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TripleplayUiMenuItem_ShowTextEnum_ALWAYS, TripleplayUiMenuItem_ShowTextEnum_NEVER, TripleplayUiMenuItem_ShowTextEnum_WHEN_ACTIVE, nil } count:3 type:[IOSClass classWithClass:[TripleplayUiMenuItem_ShowTextEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TripleplayUiMenuItem_ShowTextEnum_values];
}

+ (TripleplayUiMenuItem_ShowTextEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TripleplayUiMenuItem_ShowTextEnum_values count]; i++) {
    TripleplayUiMenuItem_ShowTextEnum *e = [TripleplayUiMenuItem_ShowTextEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end

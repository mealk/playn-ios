//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Elements.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSObjectArray.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/GroupLayer.h"
#include "pythagoras/f/Dimension.h"
#include "react/Signal.h"
#include "react/SignalView.h"
#include "tripleplay/ui/Element.h"
#include "tripleplay/ui/Elements.h"
#include "tripleplay/ui/Layout.h"
#include "tripleplay/ui/Stylesheet.h"

@implementation TripleplayUiElements

@synthesize _layout = _layout_;
@synthesize _children = _children_;
@synthesize _childAdded = _childAdded_;
@synthesize _childRemoved = _childRemoved_;
@synthesize _sheet = _sheet_;

- (id)initWithTripleplayUiLayout:(TripleplayUiLayout *)layout {
  if ((self = [super init])) {
    _children_ = [[JavaUtilArrayList alloc] init];
    _childAdded_ = [ReactSignal create];
    _childRemoved_ = [ReactSignal create];
    _layout_ = layout;
    [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum HIT_DESCEND] withBOOL:YES];
  }
  return self;
}

- (id<ReactSignalView>)childAdded {
  return _childAdded_;
}

- (id<ReactSignalView>)childRemoved {
  return _childRemoved_;
}

- (TripleplayUiStylesheet *)stylesheet {
  return _sheet_;
}

- (id)setStylesheetWithTripleplayUiStylesheet:(TripleplayUiStylesheet *)sheet {
  _sheet_ = sheet;
  return [self asT];
}

- (int)childCount {
  return [((id<JavaUtilList>) nil_chk(_children_)) size];
}

- (TripleplayUiElement *)childAtWithInt:(int)index {
  return [((id<JavaUtilList>) nil_chk(_children_)) getWithInt:index];
}

- (id)addWithTripleplayUiElementArray:(IOSObjectArray *)children {
  {
    IOSObjectArray *a__ = children;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayUiElement *child = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      TripleplayUiElements *parent = [((TripleplayUiElement *) nil_chk(child)) parent];
      if (parent != nil) {
        [parent removeWithTripleplayUiElement:child];
      }
    }
  }
  [((id<JavaUtilList>) nil_chk(_children_)) addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:children]];
  {
    IOSObjectArray *a__ = children;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayUiElement *child = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      [self didAddWithTripleplayUiElement:child];
    }
  }
  [self invalidate];
  return [self asT];
}

- (id)addWithInt:(int)index
withTripleplayUiElement:(TripleplayUiElement *)child {
  TripleplayUiElements *parent = [((TripleplayUiElement *) nil_chk(child)) parent];
  if (parent != nil) {
    [parent removeWithTripleplayUiElement:child];
  }
  [((id<JavaUtilList>) nil_chk(_children_)) addWithInt:index withId:child];
  [self didAddWithTripleplayUiElement:child];
  [self invalidate];
  return [self asT];
}

- (void)removeWithTripleplayUiElement:(TripleplayUiElement *)child {
  if ([((id<JavaUtilList>) nil_chk(_children_)) removeWithId:child]) {
    [self didRemoveWithTripleplayUiElement:child withBOOL:NO];
    [self invalidate];
  }
}

- (void)destroyWithTripleplayUiElement:(TripleplayUiElement *)child {
  if ([((id<JavaUtilList>) nil_chk(_children_)) removeWithId:child]) {
    [self didRemoveWithTripleplayUiElement:child withBOOL:YES];
    [self invalidate];
  }
  else {
    [((id<PlaynCoreGroupLayer>) nil_chk(((TripleplayUiElement *) nil_chk(child)).layer)) destroy];
  }
}

- (void)removeAtWithInt:(int)index {
  [self didRemoveWithTripleplayUiElement:[((id<JavaUtilList>) nil_chk(_children_)) removeWithInt:index] withBOOL:NO];
  [self invalidate];
}

- (void)destroyAtWithInt:(int)index {
  [self didRemoveWithTripleplayUiElement:[((id<JavaUtilList>) nil_chk(_children_)) removeWithInt:index] withBOOL:YES];
  [self invalidate];
}

- (void)removeAll {
  while (![((id<JavaUtilList>) nil_chk(_children_)) isEmpty]) {
    [self removeAtWithInt:[((id<JavaUtilList>) nil_chk(_children_)) size] - 1];
  }
  [self invalidate];
}

- (void)destroyAll {
  while (![((id<JavaUtilList>) nil_chk(_children_)) isEmpty]) {
    [self destroyAtWithInt:[((id<JavaUtilList>) nil_chk(_children_)) size] - 1];
  }
  [self invalidate];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk([JavaUtilCollections unmodifiableListWithJavaUtilList:_children_])) iterator];
}

- (void)didAddWithTripleplayUiElement:(TripleplayUiElement *)child {
  [((id<PlaynCoreGroupLayer>) nil_chk(layer_)) addWithPlaynCoreLayer:((TripleplayUiElement *) nil_chk(child)).layer];
  [((TripleplayUiElement *) nil_chk(child)) wasParentedWithTripleplayUiElements:self];
  if ([self isAdded] && ![((TripleplayUiElement *) nil_chk(child)) willAdd]) {
    [((TripleplayUiElement *) nil_chk(child)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_ADDING] withBOOL:YES];
    [((TripleplayUiElement *) nil_chk(child)) wasAdded];
  }
  [((ReactSignal *) nil_chk(_childAdded_)) emitWithId:child];
}

- (void)didRemoveWithTripleplayUiElement:(TripleplayUiElement *)child
                                withBOOL:(BOOL)destroy {
  if (destroy) [((TripleplayUiElement *) nil_chk(child)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum WILL_DESTROY] withBOOL:YES];
  [((id<PlaynCoreGroupLayer>) nil_chk(layer_)) removeWithPlaynCoreLayer:((TripleplayUiElement *) nil_chk(child)).layer];
  BOOL needsRemove = [((TripleplayUiElement *) nil_chk(child)) willRemove];
  [((TripleplayUiElement *) nil_chk(child)) wasUnparented];
  if ([self isAdded] || needsRemove) {
    [((TripleplayUiElement *) nil_chk(child)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_REMOVING] withBOOL:YES];
    [((TripleplayUiElement *) nil_chk(child)) wasRemoved];
  }
  if (destroy) [((id<PlaynCoreGroupLayer>) nil_chk(((TripleplayUiElement *) nil_chk(child)).layer)) destroy];
  [((ReactSignal *) nil_chk(_childRemoved_)) emitWithId:child];
}

- (void)wasAdded {
  [super wasAdded];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(_children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TripleplayUiElement *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TripleplayUiElement *) nil_chk(child)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_ADDING] withBOOL:YES];
      [((TripleplayUiElement *) nil_chk(child)) wasAdded];
    }
  }
}

- (void)wasRemoved {
  [super wasRemoved];
  BOOL willDestroy = [self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum WILL_DESTROY]];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(_children_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TripleplayUiElement *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if (willDestroy) [((TripleplayUiElement *) nil_chk(child)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum WILL_DESTROY] withBOOL:YES];
      [((TripleplayUiElement *) nil_chk(child)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_REMOVING] withBOOL:YES];
      [((TripleplayUiElement *) nil_chk(child)) wasRemoved];
    }
  }
}

- (TripleplayUiElement_LayoutData *)createLayoutDataWithFloat:(float)hintX
                                                    withFloat:(float)hintY {
  return [[TripleplayUiElements_ElementsLayoutData alloc] initWithTripleplayUiElements:self];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElements *typedCopy = (TripleplayUiElements *) copy;
  typedCopy._layout = _layout_;
  typedCopy._children = _children_;
  typedCopy._childAdded = _childAdded_;
  typedCopy._childRemoved = _childRemoved_;
  typedCopy._sheet = _sheet_;
}

@end
@implementation TripleplayUiElements_ElementsLayoutData

@synthesize this$2 = this$2_;

- (PythagorasFDimension *)computeSizeWithFloat:(float)hintX
                                     withFloat:(float)hintY {
  return [((TripleplayUiLayout *) nil_chk(this$2_._layout)) computeSizeWithTripleplayUiElements:this$2_ withFloat:hintX withFloat:hintY];
}

- (void)layoutWithFloat:(float)left
              withFloat:(float)top
              withFloat:(float)width
              withFloat:(float)height {
  [((TripleplayUiLayout *) nil_chk(this$2_._layout)) layoutWithTripleplayUiElements:this$2_ withFloat:left withFloat:top withFloat:width withFloat:height];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(this$2_._children)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TripleplayUiElement *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((TripleplayUiElement *) nil_chk(child)) validate];
    }
  }
}

- (id)initWithTripleplayUiElements:(TripleplayUiElements *)outer$ {
  if ((self = [super initWithTripleplayUiElement:outer$])) {
    this$2_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElements_ElementsLayoutData *typedCopy = (TripleplayUiElements_ElementsLayoutData *) copy;
  typedCopy.this$2 = this$2_;
}

@end

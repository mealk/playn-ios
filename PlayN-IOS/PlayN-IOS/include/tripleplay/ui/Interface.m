//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Interface.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Exception.h"
#include "java/lang/Iterable.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/util/Clock.h"
#include "tripleplay/anim/Animator.h"
#include "tripleplay/ui/Element.h"
#include "tripleplay/ui/Interface.h"
#include "tripleplay/ui/Layout.h"
#include "tripleplay/ui/Log.h"
#include "tripleplay/ui/Root.h"
#include "tripleplay/ui/Stylesheet.h"
#include "tripleplay/util/Logger.h"

@implementation TripleplayUiInterface

@synthesize _roots = _roots_;
@synthesize _actions = _actions_;
@synthesize _animator = _animator_;
@synthesize _tasks = _tasks_;
@synthesize _currentTask = _currentTask_;
@synthesize _currentTaskCount = _currentTaskCount_;

- (void)deferActionWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  [((id<JavaUtilList>) nil_chk(_actions_)) addWithId:action];
}

- (id<TripleplayUiInterface_TaskHandle>)addTaskWithTripleplayUiInterface_Task:(id<TripleplayUiInterface_Task>)task {
  [((id<JavaUtilList>) nil_chk(_tasks_)) addWithId:task];
  return [[TripleplayUiInterface_$1 alloc] initWithTripleplayUiInterface:self withTripleplayUiInterface_Task:task];
}

- (void)updateWithInt:(int)delta {
  for (_currentTask_ = 0, _currentTaskCount_ = [((id<JavaUtilList>) nil_chk(_tasks_)) size]; _currentTask_ < _currentTaskCount_; _currentTask_++) {
    id<TripleplayUiInterface_Task> task = [((id<JavaUtilList>) nil_chk(_tasks_)) getWithInt:_currentTask_];
    @try {
      [((id<TripleplayUiInterface_Task>) nil_chk(task)) updateWithInt:delta];
    }
    @catch (JavaLangException *e) {
      [((TripleplayUtilLogger *) nil_chk([TripleplayUiLog log])) warningWithNSString:[NSString stringWithFormat:@"Interface task failed: %@", task] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ e } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
  }
  _currentTask_ = -1;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [((TripleplayAnimAnimator *) nil_chk(_animator_)) paintWithPlaynCoreUtilClock:clock];
  for (int ii = 0, ll = [((id<JavaUtilList>) nil_chk(_roots_)) size]; ii < ll; ii++) {
    [((TripleplayUiRoot *) nil_chk([((id<JavaUtilList>) nil_chk(_roots_)) getWithInt:ii])) validate];
  }
  if (![((id<JavaUtilList>) nil_chk(_actions_)) isEmpty]) {
    id<JavaUtilList> actions = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:_actions_];
    [((id<JavaUtilList>) nil_chk(_actions_)) clear];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(actions)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<JavaLangRunnable> action = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        @try {
          [((id<JavaLangRunnable>) nil_chk(action)) run];
        }
        @catch (JavaLangException *e) {
          [((TripleplayUtilLogger *) nil_chk([TripleplayUiLog log])) warningWithNSString:[NSString stringWithFormat:@"Interface action failed: %@", action] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ e } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
        }
      }
    }
  }
}

- (id<JavaLangIterable>)roots {
  return _roots_;
}

- (TripleplayAnimAnimator *)animator {
  return _animator_;
}

- (TripleplayUiRoot *)createRootWithTripleplayUiLayout:(TripleplayUiLayout *)layout
                            withTripleplayUiStylesheet:(TripleplayUiStylesheet *)sheet {
  return [self addRootWithTripleplayUiRoot:[[TripleplayUiRoot alloc] initWithTripleplayUiInterface:self withTripleplayUiLayout:layout withTripleplayUiStylesheet:sheet]];
}

- (TripleplayUiRoot *)createRootWithTripleplayUiLayout:(TripleplayUiLayout *)layout
                            withTripleplayUiStylesheet:(TripleplayUiStylesheet *)sheet
                               withPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)parent {
  TripleplayUiRoot *root = [self createRootWithTripleplayUiLayout:layout withTripleplayUiStylesheet:sheet];
  [((id<PlaynCoreGroupLayer>) nil_chk(parent)) addWithPlaynCoreLayer:((TripleplayUiRoot *) nil_chk(root)).layer];
  return root;
}

- (TripleplayUiRoot *)addRootWithTripleplayUiRoot:(TripleplayUiRoot *)root {
  [((id<JavaUtilList>) nil_chk(_roots_)) addWithId:root];
  return root;
}

- (void)removeRootWithTripleplayUiRoot:(TripleplayUiRoot *)root {
  [((id<JavaUtilList>) nil_chk(_roots_)) removeWithId:root];
  [((TripleplayUiRoot *) nil_chk(root)) wasRemoved];
  if ([((id<PlaynCoreGroupLayer>) nil_chk(((TripleplayUiRoot *) nil_chk(root)).layer)) parent] != nil) [((id<PlaynCoreGroupLayer>) nil_chk([((id<PlaynCoreGroupLayer>) nil_chk(((TripleplayUiRoot *) nil_chk(root)).layer)) parent])) removeWithPlaynCoreLayer:((TripleplayUiRoot *) nil_chk(root)).layer];
}

- (void)destroyRootWithTripleplayUiRoot:(TripleplayUiRoot *)root {
  [((id<JavaUtilList>) nil_chk(_roots_)) removeWithId:root];
  [((TripleplayUiRoot *) nil_chk(root)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum WILL_DESTROY] withBOOL:YES];
  [((TripleplayUiRoot *) nil_chk(root)) wasRemoved];
  [((id<PlaynCoreGroupLayer>) nil_chk(((TripleplayUiRoot *) nil_chk(root)).layer)) destroy];
}

- (id)init {
  if ((self = [super init])) {
    _roots_ = [[JavaUtilArrayList alloc] init];
    _actions_ = [[JavaUtilArrayList alloc] init];
    _animator_ = [[TripleplayAnimAnimator alloc] init];
    _tasks_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiInterface *typedCopy = (TripleplayUiInterface *) copy;
  typedCopy._roots = _roots_;
  typedCopy._actions = _actions_;
  typedCopy._animator = _animator_;
  typedCopy._tasks = _tasks_;
  typedCopy._currentTask = _currentTask_;
  typedCopy._currentTaskCount = _currentTaskCount_;
}

@end
@implementation TripleplayUiInterface_$1

@synthesize this$0 = this$0_;
@synthesize target = target_;
@synthesize val$task = val$task_;

- (void)remove {
  if (target_ == nil) return;
  int idx = [((id<JavaUtilList>) nil_chk(this$0_._tasks)) indexOfWithId:target_];
  if (idx == -1) return;
  (void) [((id<JavaUtilList>) nil_chk(this$0_._tasks)) removeWithInt:idx];
  if (this$0_._currentTask >= idx) this$0_._currentTask--;
  this$0_._currentTaskCount--;
  target_ = nil;
}

- (id)initWithTripleplayUiInterface:(TripleplayUiInterface *)outer$
     withTripleplayUiInterface_Task:(id<TripleplayUiInterface_Task>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$task_ = capture$0;
    target_ = val$task_;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiInterface_$1 *typedCopy = (TripleplayUiInterface_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.target = target_;
  typedCopy.val$task = val$task_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/SizableWidget.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "pythagoras/f/IDimension.h"
#import "react/Connection.h"
#import "react/UnitSlot.h"
#import "tripleplay/ui/Element.h"
#import "tripleplay/ui/Log.h"
#import "tripleplay/ui/SizableWidget.h"
#import "tripleplay/ui/Widget.h"
#import "tripleplay/util/DimensionValue.h"
#import "tripleplay/util/Logger.h"

@implementation TripleplayUiSizableWidget

@synthesize preferredSize = preferredSize_;

- (id)init {
  return [self initTripleplayUiSizableWidgetWithFloat:0 withFloat:0];
}

- (id)initWithPythagorasFIDimension:(id<PythagorasFIDimension>)size {
  return [self initTripleplayUiSizableWidgetWithFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) width] withFloat:[((id<PythagorasFIDimension>) NIL_CHK(size)) height]];
}

- (id)initTripleplayUiSizableWidgetWithFloat:(float)width
                                   withFloat:(float)height {
  if ((self = [super init])) {
    preferredSize_ = [[TripleplayUtilDimensionValue alloc] initWithFloat:0 withFloat:0];
    [((TripleplayUtilDimensionValue *) NIL_CHK(preferredSize_)) updateWithFloat:width withFloat:height];
    (void) [((TripleplayUtilDimensionValue *) NIL_CHK(preferredSize_)) connectWithReactValueView_Listener:[self invalidateSlot]];
  }
  return self;
}

- (id)initWithFloat:(float)width
          withFloat:(float)height {
  return [self initTripleplayUiSizableWidgetWithFloat:width withFloat:height];
}

- (TripleplayUiElement_BaseLayoutData *)createBaseLayoutDataWithFloat:(float)hintX
                                                            withFloat:(float)hintY {
  return nil;
}

- (TripleplayUiElement_LayoutData *)createLayoutDataWithFloat:(float)hintX
                                                    withFloat:(float)hintY {
  return [[TripleplayUiElement_SizableLayoutData alloc] initWithTripleplayUiElement:self withTripleplayUiElement_BaseLayoutData:[self createBaseLayoutDataWithFloat:hintX withFloat:hintY] withTripleplayUiElement_LayoutData:nil withPythagorasFIDimension:((id<PythagorasFIDimension>) [((TripleplayUtilDimensionValue *) NIL_CHK(preferredSize_)) get])];
}

- (TripleplayUiWidget_Glyph *)prepareGlyph {
  return [self prepareGlyphWithTripleplayUiWidget_Glyph:nil];
}

- (TripleplayUiWidget_Glyph *)prepareGlyphWithTripleplayUiWidget_Glyph:(TripleplayUiWidget_Glyph *)glyph {
  id<PythagorasFIDimension> size = ((id<PythagorasFIDimension>) [((TripleplayUtilDimensionValue *) NIL_CHK(preferredSize_)) get]);
  if ([((id<PythagorasFIDimension>) NIL_CHK(size)) width] == 0 || [((id<PythagorasFIDimension>) NIL_CHK(size)) height] == 0) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayUiLog log])) warningWithNSString:@"SizableWidget cannot prepare a glyph with a 0 dimension" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"size", size ]];
    return nil;
  }
  glyph = glyph == nil ? [[TripleplayUiWidget_Glyph alloc] initWithTripleplayUiWidget:self] : glyph;
  [((TripleplayUiWidget_Glyph *) NIL_CHK(glyph)) prepareWithPythagorasFIDimension:size];
  return glyph;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSizableWidget *typedCopy = (TripleplayUiSizableWidget *) copy;
  typedCopy.preferredSize = preferredSize_;
}

@end

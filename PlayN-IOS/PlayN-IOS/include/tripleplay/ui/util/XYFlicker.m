//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/util/XYFlicker.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Math.h"
#import "playn/core/Pointer.h"
#import "pythagoras/f/IPoint.h"
#import "pythagoras/f/MathUtil.h"
#import "pythagoras/f/Point.h"
#import "react/Signal.h"
#import "tripleplay/ui/util/XYFlicker.h"

@implementation TripleplayUiUtilXYFlicker

@synthesize clicked = clicked_;
@synthesize _maxDeltaSq = _maxDeltaSq_;
@synthesize _position = _position_;
@synthesize _vel = _vel_;
@synthesize _accel = _accel_;
@synthesize _origPos = _origPos_;
@synthesize _start = _start_;
@synthesize _cur = _cur_;
@synthesize _prev = _prev_;
@synthesize _max = _max_;
@synthesize _min = _min_;
@synthesize _prevStamp = _prevStamp_;
@synthesize _curStamp = _curStamp_;

- (id<PythagorasFIPoint>)position {
  return _position_;
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  (void) [((PythagorasFPoint *) NIL_CHK(_vel_)) setWithFloat:0 withFloat:0];
  _maxDeltaSq_ = 0;
  (void) [((PythagorasFPoint *) NIL_CHK(_origPos_)) setWithPythagorasFIPoint:_position_];
  [self getPositionWithPlaynCorePointer_Event:event withPythagorasFPoint:_start_];
  (void) [((PythagorasFPoint *) NIL_CHK(_prev_)) setWithPythagorasFIPoint:_start_];
  (void) [((PythagorasFPoint *) NIL_CHK(_cur_)) setWithPythagorasFIPoint:_start_];
  _prevStamp_ = 0;
  _curStamp_ = [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time];
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  (void) [((PythagorasFPoint *) NIL_CHK(_prev_)) setWithPythagorasFIPoint:_cur_];
  _prevStamp_ = _curStamp_;
  [self getPositionWithPlaynCorePointer_Event:event withPythagorasFPoint:_cur_];
  _curStamp_ = [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time];
  float dx = ((PythagorasFPoint *) NIL_CHK(_cur_)).x_ - ((PythagorasFPoint *) NIL_CHK(_start_)).x_, dy = ((PythagorasFPoint *) NIL_CHK(_cur_)).y_ - ((PythagorasFPoint *) NIL_CHK(_start_)).y_;
  [self setPositionWithFloat:((PythagorasFPoint *) NIL_CHK(_origPos_)).x_ + dx withFloat:((PythagorasFPoint *) NIL_CHK(_origPos_)).y_ + dy];
  _maxDeltaSq_ = [JavaLangMath maxWithFloat:dx * dx + dy * dy withFloat:_maxDeltaSq_];
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (_maxDeltaSq_ < [self maxClickDeltaSq]) {
    [((ReactSignal *) NIL_CHK(clicked_)) emitWithId:event];
    return;
  }
  float dragTime = (float) (_curStamp_ - _prevStamp_);
  PythagorasFPoint *delta = [[PythagorasFPoint alloc] initWithFloat:((PythagorasFPoint *) NIL_CHK(_cur_)).x_ - ((PythagorasFPoint *) NIL_CHK(_prev_)).x_ withFloat:((PythagorasFPoint *) NIL_CHK(_cur_)).y_ - ((PythagorasFPoint *) NIL_CHK(_prev_)).y_];
  PythagorasFPoint *dragVel = [((PythagorasFPoint *) NIL_CHK(delta)) multWithFloat:1 / dragTime];
  float dragSpeed = [((PythagorasFPoint *) NIL_CHK(dragVel)) distanceWithFloat:0 withFloat:0];
  if (dragSpeed > [self flickSpeedThresh] && [((PythagorasFPoint *) NIL_CHK(delta)) distanceWithFloat:0 withFloat:0] > [self minFlickDelta]) {
    if (dragSpeed > [self maxFlickSpeed]) {
      (void) [((PythagorasFPoint *) NIL_CHK(dragVel)) multLocalWithFloat:[self maxFlickSpeed] / dragSpeed];
      dragSpeed = [self maxFlickSpeed];
    }
    (void) [((PythagorasFPoint *) NIL_CHK(_vel_)) setWithPythagorasFIPoint:dragVel];
    (void) [((PythagorasFPoint *) NIL_CHK(_vel_)) multLocalWithFloat:[self flickXfer]];
    float sx = [JavaLangMath signumWithFloat:((PythagorasFPoint *) NIL_CHK(_vel_)).x_], sy = [JavaLangMath signumWithFloat:((PythagorasFPoint *) NIL_CHK(_vel_)).y_];
    ((PythagorasFPoint *) NIL_CHK(_accel_)).x_ = -sx * [self friction];
    ((PythagorasFPoint *) NIL_CHK(_accel_)).y_ = -sy * [self friction];
  }
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  (void) [((PythagorasFPoint *) NIL_CHK(_vel_)) setWithFloat:0 withFloat:0];
  (void) [((PythagorasFPoint *) NIL_CHK(_accel_)) setWithFloat:0 withFloat:0];
}

- (void)updateWithInt:(int)delta {
  if (((PythagorasFPoint *) NIL_CHK(_vel_)).x_ == 0 && ((PythagorasFPoint *) NIL_CHK(_vel_)).y_ == 0) return;
  (void) [((PythagorasFPoint *) NIL_CHK(_prev_)) setWithPythagorasFIPoint:_position_];
  float x = [PythagorasFMathUtil clampWithFloat:((PythagorasFPoint *) NIL_CHK(_position_)).x_ + ((PythagorasFPoint *) NIL_CHK(_vel_)).x_ * delta withFloat:((PythagorasFPoint *) NIL_CHK(_min_)).x_ withFloat:((PythagorasFPoint *) NIL_CHK(_max_)).x_];
  float y = [PythagorasFMathUtil clampWithFloat:((PythagorasFPoint *) NIL_CHK(_position_)).y_ + ((PythagorasFPoint *) NIL_CHK(_vel_)).y_ * delta withFloat:((PythagorasFPoint *) NIL_CHK(_min_)).y_ withFloat:((PythagorasFPoint *) NIL_CHK(_max_)).y_];
  if (x == ((PythagorasFPoint *) NIL_CHK(_position_)).x_) ((PythagorasFPoint *) NIL_CHK(_vel_)).x_ = 0;
  if (y == ((PythagorasFPoint *) NIL_CHK(_position_)).y_) ((PythagorasFPoint *) NIL_CHK(_vel_)).y_ = 0;
  (void) [((PythagorasFPoint *) NIL_CHK(_position_)) setWithFloat:x withFloat:y];
  ((PythagorasFPoint *) NIL_CHK(_vel_)).x_ = [TripleplayUiUtilXYFlicker applyAccelertionWithFloat:((PythagorasFPoint *) NIL_CHK(_vel_)).x_ withFloat:((PythagorasFPoint *) NIL_CHK(_accel_)).x_ withFloat:delta];
  ((PythagorasFPoint *) NIL_CHK(_vel_)).y_ = [TripleplayUiUtilXYFlicker applyAccelertionWithFloat:((PythagorasFPoint *) NIL_CHK(_vel_)).y_ withFloat:((PythagorasFPoint *) NIL_CHK(_accel_)).y_ withFloat:delta];
}

- (void)resetWithFloat:(float)maxX
             withFloat:(float)maxY {
  (void) [((PythagorasFPoint *) NIL_CHK(_max_)) setWithFloat:maxX withFloat:maxY];
  [self setPositionWithFloat:((PythagorasFPoint *) NIL_CHK(_position_)).x_ withFloat:((PythagorasFPoint *) NIL_CHK(_position_)).y_];
}

- (void)positionChangedWithFloat:(float)x
                       withFloat:(float)y {
  [self setPositionWithFloat:x withFloat:y];
}

- (void)getPositionWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                         withPythagorasFPoint:(PythagorasFPoint *)dest {
  (void) [((PythagorasFPoint *) NIL_CHK(dest)) setWithFloat:-[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:-[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]];
}

- (void)setPositionWithFloat:(float)x
                   withFloat:(float)y {
  (void) [((PythagorasFPoint *) NIL_CHK(_position_)) setWithFloat:[PythagorasFMathUtil clampWithFloat:x withFloat:((PythagorasFPoint *) NIL_CHK(_min_)).x_ withFloat:((PythagorasFPoint *) NIL_CHK(_max_)).x_] withFloat:[PythagorasFMathUtil clampWithFloat:y withFloat:((PythagorasFPoint *) NIL_CHK(_min_)).y_ withFloat:((PythagorasFPoint *) NIL_CHK(_max_)).y_]];
}

- (float)minFlickDelta {
  return 10;
}

- (float)friction {
  return 0.0015f;
}

- (float)flickSpeedThresh {
  return 0.5f;
}

- (float)flickXfer {
  return 0.95f;
}

- (float)maxFlickSpeed {
  return 1.4f;
}

- (float)maxClickDeltaSq {
  return 25;
}

+ (float)applyAccelertionWithFloat:(float)v
                         withFloat:(float)a
                         withFloat:(float)dt {
  float prev = v;
  v += a * dt;
  return [JavaLangMath signumWithFloat:prev] == [JavaLangMath signumWithFloat:v] ? v : 0;
}

- (id)init {
  if ((self = [super init])) {
    clicked_ = ((ReactSignal *) [ReactSignal create]);
    _position_ = [[PythagorasFPoint alloc] init];
    _vel_ = [[PythagorasFPoint alloc] init];
    _accel_ = [[PythagorasFPoint alloc] init];
    _origPos_ = [[PythagorasFPoint alloc] init];
    _start_ = [[PythagorasFPoint alloc] init];
    _cur_ = [[PythagorasFPoint alloc] init];
    _prev_ = [[PythagorasFPoint alloc] init];
    _max_ = [[PythagorasFPoint alloc] init];
    _min_ = [[PythagorasFPoint alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiUtilXYFlicker *typedCopy = (TripleplayUiUtilXYFlicker *) copy;
  typedCopy.clicked = clicked_;
  typedCopy._maxDeltaSq = _maxDeltaSq_;
  typedCopy._position = _position_;
  typedCopy._vel = _vel_;
  typedCopy._accel = _accel_;
  typedCopy._origPos = _origPos_;
  typedCopy._start = _start_;
  typedCopy._cur = _cur_;
  typedCopy._prev = _prev_;
  typedCopy._max = _max_;
  typedCopy._min = _min_;
  typedCopy._prevStamp = _prevStamp_;
  typedCopy._curStamp = _curStamp_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/util/Hierarchy.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Iterable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "tripleplay/ui/Element.h"
#include "tripleplay/ui/Elements.h"
#include "tripleplay/ui/util/ElementOp.h"
#include "tripleplay/ui/util/Hierarchy.h"

@implementation TripleplayUiUtilHierarchy

@synthesize elem = elem_;

+ (TripleplayUiUtilHierarchy *)ofWithTripleplayUiElement:(TripleplayUiElement *)elem {
  return [[TripleplayUiUtilHierarchy alloc] initWithTripleplayUiElement:elem];
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)elem {
  if ((self = [super init])) {
    self.elem = elem;
  }
  return self;
}

- (BOOL)hasDescendantWithTripleplayUiElement:(TripleplayUiElement *)descendant {
  if (descendant == elem_) return YES;
  if (descendant == nil) return NO;
  return [self hasDescendantWithTripleplayUiElement:[((TripleplayUiElement *) nil_chk(descendant)) parent]];
}

- (id<JavaLangIterable>)ancestors {
  return [[TripleplayUiUtilHierarchy_$1 alloc] initWithTripleplayUiUtilHierarchy:self];
}

- (TripleplayUiUtilHierarchy *)applyWithTripleplayUiUtilElementOp:(TripleplayUiUtilElementOp *)op {
  [TripleplayUiUtilHierarchy forEachDescendantWithTripleplayUiElement:elem_ withTripleplayUiUtilElementOp:op];
  return self;
}

+ (void)forEachDescendantWithTripleplayUiElement:(TripleplayUiElement *)root
                   withTripleplayUiUtilElementOp:(TripleplayUiUtilElementOp *)op {
  [((TripleplayUiUtilElementOp *) nil_chk(op)) applyWithId:root];
  if ([root isKindOfClass:[TripleplayUiElements class]]) {
    TripleplayUiElements *es = (TripleplayUiElements *) root;
    for (int ii = 0, ll = [((TripleplayUiElements *) nil_chk(es)) childCount]; ii < ll; ++ii) {
      [TripleplayUiUtilHierarchy forEachDescendantWithTripleplayUiElement:[((TripleplayUiElements *) nil_chk(es)) childAtWithInt:ii] withTripleplayUiUtilElementOp:op];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiUtilHierarchy *typedCopy = (TripleplayUiUtilHierarchy *) copy;
  typedCopy.elem = elem_;
}

@end
@implementation TripleplayUiUtilHierarchy_Ancestors

@synthesize current = current_;

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)elem {
  if ((self = [super init])) {
    if (elem == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] init];
    }
    current_ = elem;
  }
  return self;
}

- (BOOL)hasNext {
  return current_ != nil;
}

- (TripleplayUiElement *)next {
  TripleplayUiElement *next = current_;
  if (![self hasNext]) {
    @throw [[JavaLangIllegalStateException alloc] init];
  }
  current_ = [((TripleplayUiElement *) nil_chk(current_)) parent];
  return next;
}

- (void)remove {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiUtilHierarchy_Ancestors *typedCopy = (TripleplayUiUtilHierarchy_Ancestors *) copy;
  typedCopy.current = current_;
}

@end
@implementation TripleplayUiUtilHierarchy_$1

@synthesize this$0 = this$0_;

- (id<JavaUtilIterator>)iterator {
  return [[TripleplayUiUtilHierarchy_Ancestors alloc] initWithTripleplayUiElement:this$0_.elem];
}

- (id)initWithTripleplayUiUtilHierarchy:(TripleplayUiUtilHierarchy *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiUtilHierarchy_$1 *typedCopy = (TripleplayUiUtilHierarchy_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/PagedMenu.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "react/Slot.h"
#include "react/UnitSlot.h"
#include "react/Value.h"
#include "react/ValueView.h"
#include "tripleplay/ui/Layout.h"
#include "tripleplay/ui/MenuItem.h"
#include "tripleplay/ui/PagedMenu.h"

@implementation TripleplayUiPagedMenu

@synthesize itemsPerPage = itemsPerPage_;
@synthesize _page = _page_;
@synthesize _numPages = _numPages_;

- (id)initWithTripleplayUiLayout:(TripleplayUiLayout *)layout
                         withInt:(int)itemsPerPage {
  if ((self = [super initWithTripleplayUiLayout:layout])) {
    _page_ = [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]];
    _numPages_ = [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]];
    self.itemsPerPage = itemsPerPage;
  }
  return self;
}

- (id<ReactValueView>)page {
  return _page_;
}

- (id<ReactValueView>)numPages {
  return _numPages_;
}

- (ReactSlot *)pageSlot {
  return [[TripleplayUiPagedMenu_$1 alloc] initWithTripleplayUiPagedMenu:self];
}

- (ReactUnitSlot *)incrementPageWithInt:(int)delta {
  return [[TripleplayUiPagedMenu_$2 alloc] initWithTripleplayUiPagedMenu:self withInt:delta];
}

- (int)getPage {
  return [((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue];
}

- (TripleplayUiPagedMenu *)setPageWithInt:(int)page {
  int oldPage = [((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue];
  if (page != oldPage) {
    (void) [((ReactValue *) nil_chk(_page_)) updateWithId:[JavaLangInteger valueOfWithInt:page]];
    [self updateVisibilityWithInt:oldPage withInt:oldPage];
    [self updateVisibilityWithInt:page withInt:page];
  }
  return self;
}

- (int)pageOfItemWithInt:(int)itemIdx {
  return itemIdx / itemsPerPage_;
}

- (void)updateNumPages {
  int numItems = [((id<JavaUtilList>) nil_chk(_items_)) size];
  (void) [((ReactValue *) nil_chk(_numPages_)) updateWithId:[JavaLangInteger valueOfWithInt:numItems == 0 ? 0 : (numItems - 1) / itemsPerPage_ + 1]];
}

- (void)updateVisibilityWithInt:(int)fromPage
                        withInt:(int)toPage {
  int itemIdx = fromPage * itemsPerPage_, size = [((id<JavaUtilList>) nil_chk(_items_)) size];
  for (int pp = fromPage; pp <= toPage; ++pp) {
    BOOL vis = pp == [((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue];
    for (int ii = 0; ii < itemsPerPage_; ii++) {
      if (itemIdx >= size) break;
      (void) [((TripleplayUiMenuItem *) nil_chk([((id<JavaUtilList>) nil_chk(_items_)) getWithInt:itemIdx++])) setVisibleWithBOOL:vis];
    }
  }
}

- (void)connectItemWithTripleplayUiMenuItem:(TripleplayUiMenuItem *)item {
  int itemIdx = [((id<JavaUtilList>) nil_chk(_items_)) size];
  [super connectItemWithTripleplayUiMenuItem:item];
  [self updateNumPages];
  int page = [self pageOfItemWithInt:itemIdx];
  if (page != [((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue]) (void) [((TripleplayUiMenuItem *) nil_chk(item)) setVisibleWithBOOL:NO];
  if (page <= [((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue]) [self updateVisibilityWithInt:[((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue] withInt:[((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue] + 1];
}

- (void)didDisconnectItemWithTripleplayUiMenuItem:(TripleplayUiMenuItem *)item
                                          withInt:(int)itemIdx {
  [self updateNumPages];
  if ([((ReactValue *) nil_chk(_page_)) get] == [((ReactValue *) nil_chk(_numPages_)) get]) (void) [self incrementPageWithInt:-1];
  else {
    int page = [self pageOfItemWithInt:itemIdx];
    if (page < [((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue]) [self updateVisibilityWithInt:[((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue] - 1 withInt:[((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue]];
    else if (page == [((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue]) [self updateVisibilityWithInt:[((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue] withInt:[((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(_page_)) get])) intValue]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiPagedMenu *typedCopy = (TripleplayUiPagedMenu *) copy;
  typedCopy.itemsPerPage = itemsPerPage_;
  typedCopy._page = _page_;
  typedCopy._numPages = _numPages_;
}

@end
@implementation TripleplayUiPagedMenu_$1

@synthesize this$0 = this$0_;

- (void)onEmitWithId:(JavaLangInteger *)page {
  (void) [this$0_ setPageWithInt:[((JavaLangInteger *) nil_chk(page)) intValue]];
}

- (id)initWithTripleplayUiPagedMenu:(TripleplayUiPagedMenu *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiPagedMenu_$1 *typedCopy = (TripleplayUiPagedMenu_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiPagedMenu_$2

@synthesize this$0 = this$0_;
@synthesize val$delta = val$delta_;

- (void)onEmit {
  (void) [this$0_ setPageWithInt:[((JavaLangInteger *) nil_chk([((ReactValue *) nil_chk(this$0_._page)) get])) intValue] + val$delta_];
}

- (id)initWithTripleplayUiPagedMenu:(TripleplayUiPagedMenu *)outer$
                            withInt:(int)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$delta_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiPagedMenu_$2 *typedCopy = (TripleplayUiPagedMenu_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$delta = val$delta_;
}

@end

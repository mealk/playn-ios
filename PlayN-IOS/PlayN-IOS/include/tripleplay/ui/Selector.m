//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Selector.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/util/Iterator.h"
#include "react/Connection.h"
#include "react/SignalView.h"
#include "react/Slot.h"
#include "react/Value.h"
#include "tripleplay/ui/Element.h"
#include "tripleplay/ui/Elements.h"
#include "tripleplay/ui/Selector.h"
#include "tripleplay/ui/Togglable.h"

@implementation TripleplayUiSelector

@synthesize selected = selected_;
@synthesize _addSlot = _addSlot_;
@synthesize _removeSlot = _removeSlot_;
@synthesize _clickSlot = _clickSlot_;

- (id)initTripleplayUiSelector {
  if ((self = [super init])) {
    selected_ = [ReactValue createWithId:nil];
    _addSlot_ = [[TripleplayUiSelector_$2 alloc] initWithTripleplayUiSelector:self];
    _removeSlot_ = [[TripleplayUiSelector_$3 alloc] initWithTripleplayUiSelector:self];
    _clickSlot_ = [[TripleplayUiSelector_$4 alloc] initWithTripleplayUiSelector:self];
    (void) [((ReactValue *) nil_chk(selected_)) connectWithReactValueView_Listener:[[TripleplayUiSelector_$1 alloc] initWithTripleplayUiSelector:self]];
  }
  return self;
}

- (id)init {
  return [self initTripleplayUiSelector];
}

- (id)initWithTripleplayUiElements:(TripleplayUiElements *)elements
           withTripleplayUiElement:(TripleplayUiElement *)initialSelection {
  if ((self = [self initTripleplayUiSelector])) {
    (void) [self addWithTripleplayUiElements:elements];
    if ([initialSelection conformsToProtocol: @protocol(TripleplayUiTogglable)]) {
      (void) [((ReactValue *) nil_chk(selected_)) updateWithId:initialSelection];
    }
  }
  return self;
}

- (TripleplayUiSelector *)addWithTripleplayUiElements:(TripleplayUiElements *)elements {
  {
    id<JavaUtilIterator> iter__ = [((TripleplayUiElements *) nil_chk(elements)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TripleplayUiElement *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((ReactSlot *) nil_chk(_addSlot_)) onEmitWithId:child];
    }
  }
  (void) [((id<ReactSignalView>) nil_chk([((TripleplayUiElements *) nil_chk(elements)) childAdded])) connectWithReactSlot:_addSlot_];
  (void) [((id<ReactSignalView>) nil_chk([((TripleplayUiElements *) nil_chk(elements)) childRemoved])) connectWithReactSlot:_removeSlot_];
  return self;
}

- (TripleplayUiSelector *)removeWithTripleplayUiElements:(TripleplayUiElements *)elements {
  {
    id<JavaUtilIterator> iter__ = [((TripleplayUiElements *) nil_chk(elements)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TripleplayUiElement *child = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((ReactSlot *) nil_chk(_removeSlot_)) onEmitWithId:child];
    }
  }
  [((id<ReactSignalView>) nil_chk([((TripleplayUiElements *) nil_chk(elements)) childAdded])) disconnectWithReactSlot:_addSlot_];
  [((id<ReactSignalView>) nil_chk([((TripleplayUiElements *) nil_chk(elements)) childRemoved])) disconnectWithReactSlot:_removeSlot_];
  return self;
}

- (TripleplayUiSelector *)addWithTripleplayUiElement:(TripleplayUiElement *)elem
                        withTripleplayUiElementArray:(IOSObjectArray *)more {
  [((ReactSlot *) nil_chk(_addSlot_)) onEmitWithId:elem];
  {
    IOSObjectArray *a__ = more;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayUiElement *e = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      [((ReactSlot *) nil_chk(_addSlot_)) onEmitWithId:e];
    }
  }
  return self;
}

- (TripleplayUiSelector *)removeWithTripleplayUiElement:(TripleplayUiElement *)elem
                           withTripleplayUiElementArray:(IOSObjectArray *)more {
  [((ReactSlot *) nil_chk(_removeSlot_)) onEmitWithId:elem];
  {
    IOSObjectArray *a__ = more;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayUiElement *e = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      [((ReactSlot *) nil_chk(_removeSlot_)) onEmitWithId:e];
    }
  }
  return self;
}

- (ReactValue *)getWithTripleplayUiElement:(TripleplayUiElement *)elem {
  return [((id<TripleplayUiTogglable>) elem) selected];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector *typedCopy = (TripleplayUiSelector *) copy;
  typedCopy.selected = selected_;
  typedCopy._addSlot = _addSlot_;
  typedCopy._removeSlot = _removeSlot_;
  typedCopy._clickSlot = _clickSlot_;
}

@end
@implementation TripleplayUiSelector_$1

@synthesize this$0 = this$0_;

- (void)onChangeWithId:(TripleplayUiElement *)selected
                withId:(TripleplayUiElement *)deselected {
  if (deselected != nil) (void) [((ReactValue *) nil_chk([this$0_ getWithTripleplayUiElement:deselected])) updateWithId:[JavaLangBoolean valueOfWithBOOL:NO]];
  if (selected != nil) (void) [((ReactValue *) nil_chk([this$0_ getWithTripleplayUiElement:selected])) updateWithId:[JavaLangBoolean valueOfWithBOOL:YES]];
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$1 *typedCopy = (TripleplayUiSelector_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiSelector_$2

@synthesize this$0 = this$0_;

- (void)onEmitWithId:(TripleplayUiElement *)child {
  if ([child conformsToProtocol: @protocol(TripleplayUiTogglable)]) {
    (void) [((id<ReactSignalView>) nil_chk([((id<TripleplayUiTogglable>) child) clicked])) connectWithReactSlot:this$0_._clickSlot];
  }
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$2 *typedCopy = (TripleplayUiSelector_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiSelector_$3

@synthesize this$0 = this$0_;

- (void)onEmitWithId:(TripleplayUiElement *)removed {
  if ([removed conformsToProtocol: @protocol(TripleplayUiTogglable)]) {
    [((id<ReactSignalView>) nil_chk([((id<TripleplayUiTogglable>) removed) clicked])) disconnectWithReactSlot:this$0_._clickSlot];
  }
  if ([((ReactValue *) nil_chk(this$0_.selected)) get] == removed) (void) [((ReactValue *) nil_chk(this$0_.selected)) updateWithId:nil];
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$3 *typedCopy = (TripleplayUiSelector_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiSelector_$4

@synthesize this$0 = this$0_;

- (void)onEmitWithId:(TripleplayUiElement *)clicked {
  (void) [((ReactValue *) nil_chk(this$0_.selected)) updateWithId:[((ReactValue *) nil_chk([this$0_ getWithTripleplayUiElement:clicked])) get] ? clicked : nil];
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$4 *typedCopy = (TripleplayUiSelector_$4 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

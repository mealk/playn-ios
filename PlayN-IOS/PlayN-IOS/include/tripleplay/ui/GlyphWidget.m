//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/GlyphWidget.java
//
//  Created by Thomas on 7/25/13.
//

#include "playn/core/Canvas.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/Pointer.h"
#include "react/UnitSlot.h"
#include "tripleplay/ui/Element.h"
#include "tripleplay/ui/GlyphWidget.h"
#include "tripleplay/ui/Widget.h"
#include "tripleplay/util/DimensionValue.h"

@implementation TripleplayUiGlyphWidget

@synthesize _glyph = _glyph_;

- (void)render {
  if ([self isShowing] && [((TripleplayUiWidget_Glyph *) nil_chk(_glyph_)) layer] != nil) [self paintWithPlaynCoreCanvas:[((TripleplayUiWidget_Glyph *) nil_chk(_glyph_)) canvas]];
}

- (id)initTripleplayUiGlyphWidgetWithBOOL:(BOOL)interactive {
  if ((self = [super init])) {
    _glyph_ = [[TripleplayUiWidget_Glyph alloc] initWithTripleplayUiWidget:self];
    if (interactive) [self enableInteraction];
  }
  return self;
}

- (id)initWithBOOL:(BOOL)interactive {
  return [self initTripleplayUiGlyphWidgetWithBOOL:interactive];
}

- (id)initWithBOOL:(BOOL)interactive
         withFloat:(float)width
         withFloat:(float)height {
  if ((self = [self initTripleplayUiGlyphWidgetWithBOOL:interactive])) {
    [((TripleplayUtilDimensionValue *) nil_chk(preferredSize_)) updateWithFloat:width withFloat:height];
  }
  return self;
}

- (ReactUnitSlot *)renderSlot {
  return [[TripleplayUiGlyphWidget_$1 alloc] initWithTripleplayUiGlyphWidget:self];
}

- (void)paintWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onClickWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                     withFloat:(float)x
                                     withFloat:(float)y {
  [super onPointerEndWithPlaynCorePointer_Event:event withFloat:x withFloat:y];
  if ([self containsWithFloat:x withFloat:y]) [self onClickWithPlaynCorePointer_Event:event];
}

- (TripleplayUiElement_BaseLayoutData *)createBaseLayoutDataWithFloat:(float)hintX
                                                            withFloat:(float)hintY {
  return [[TripleplayUiGlyphWidget_GlyphLayoutData alloc] initWithTripleplayUiGlyphWidget:self];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiGlyphWidget *typedCopy = (TripleplayUiGlyphWidget *) copy;
  typedCopy._glyph = _glyph_;
}

@end
@implementation TripleplayUiGlyphWidget_GlyphLayoutData

@synthesize this$1 = this$1_;

- (void)layoutWithFloat:(float)left
              withFloat:(float)top
              withFloat:(float)width
              withFloat:(float)height {
  [super layoutWithFloat:left withFloat:top withFloat:width withFloat:height];
  if (width == 0 && height == 0) {
    [((TripleplayUiWidget_Glyph *) nil_chk(this$1_._glyph)) destroy];
    return;
  }
  [((TripleplayUiWidget_Glyph *) nil_chk(this$1_._glyph)) prepareWithFloat:width withFloat:height];
  (void) [((id<PlaynCoreImageLayer>) nil_chk([((TripleplayUiWidget_Glyph *) nil_chk(this$1_._glyph)) layer])) setTranslationWithFloat:left withFloat:top];
  [this$1_ render];
}

- (id)initWithTripleplayUiGlyphWidget:(TripleplayUiGlyphWidget *)outer$ {
  if ((self = [super initWithTripleplayUiElement:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiGlyphWidget_GlyphLayoutData *typedCopy = (TripleplayUiGlyphWidget_GlyphLayoutData *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation TripleplayUiGlyphWidget_$1

@synthesize this$0 = this$0_;

- (void)onEmit {
  [this$0_ render];
}

- (id)initWithTripleplayUiGlyphWidget:(TripleplayUiGlyphWidget *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiGlyphWidget_$1 *typedCopy = (TripleplayUiGlyphWidget_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

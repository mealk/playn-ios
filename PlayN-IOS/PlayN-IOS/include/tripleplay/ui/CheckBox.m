//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/CheckBox.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "java/lang/Boolean.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/Pointer.h"
#import "playn/core/Sound.h"
#import "react/Connection.h"
#import "react/Value.h"
#import "tripleplay/ui/CheckBox.h"
#import "tripleplay/ui/Element.h"
#import "tripleplay/ui/Icon.h"
#import "tripleplay/ui/Icons.h"
#import "tripleplay/ui/Style.h"
#import "tripleplay/ui/Widget.h"

@implementation TripleplayUiCheckBox

@synthesize checked = checked_;
@synthesize _checkStr = _checkStr_;
@synthesize _checkIcon = _checkIcon_;
@synthesize _actionSound = _actionSound_;

- (id)init {
  return [self initTripleplayUiCheckBoxWithUnichar:0x2713];
}

- (id)initTripleplayUiCheckBoxWithUnichar:(unichar)checkChar {
  return [self initTripleplayUiCheckBoxWithUnichar:checkChar withTripleplayUiIcon:(id<TripleplayUiIcon>) nil];
}

- (id)initWithUnichar:(unichar)checkChar {
  return [self initTripleplayUiCheckBoxWithUnichar:checkChar];
}

- (id)initWithTripleplayUiIcon:(id<TripleplayUiIcon>)checkIcon {
  return [self initTripleplayUiCheckBoxWithUnichar:(unichar) 0 withTripleplayUiIcon:checkIcon];
}

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)checkIcon {
  return [self initTripleplayUiCheckBoxWithUnichar:(unichar) 0 withTripleplayUiIcon:[TripleplayUiIcons imageWithPlaynCoreImage:checkIcon]];
}

- (id)initTripleplayUiCheckBoxWithUnichar:(unichar)checkChar
                     withTripleplayUiIcon:(id<TripleplayUiIcon>)checkIcon {
  if ((self = [super init])) {
    checked_ = ((ReactValue *) [ReactValue createWithId:[JavaLangBoolean valueOfWithBOOL:NO]]);
    _checkStr_ = [NSString valueOfChar:checkChar];
    _checkIcon_ = checkIcon;
    (void) [((ReactValue *) NIL_CHK(checked_)) connectWithReactValueView_Listener:[[TripleplayUiCheckBox_$1 alloc] initWithTripleplayUiCheckBox:self]];
  }
  return self;
}

- (id)initWithUnichar:(unichar)checkChar
 withTripleplayUiIcon:(id<TripleplayUiIcon>)checkIcon {
  return [self initTripleplayUiCheckBoxWithUnichar:checkChar withTripleplayUiIcon:checkIcon];
}

- (IOSClass *)getStyleClass {
  return [IOSClass classWithClass:[TripleplayUiCheckBox class]];
}

- (NSString *)text {
  return (_checkIcon_ == nil) ? _checkStr_ : nil;
}

- (id<TripleplayUiIcon>)icon {
  return _checkIcon_;
}

- (void)onClickWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (_actionSound_ != nil) [_actionSound_ play];
  (void) [((ReactValue *) NIL_CHK(checked_)) updateWithId:[JavaLangBoolean valueOfWithBOOL:![((JavaLangBoolean *) [((ReactValue *) NIL_CHK(checked_)) get]) booleanValue]]];
}

- (void)layout {
  [super layout];
  _actionSound_ = ((id<PlaynCoreSound>) [self resolveStyleWithTripleplayUiStyle:[TripleplayUiStyle ACTION_SOUND]]);
  [self updateCheckViz];
}

- (void)updateCheckViz {
  BOOL isChecked = [((JavaLangBoolean *) [((ReactValue *) NIL_CHK(checked_)) get]) booleanValue];
  if ([((TripleplayUiWidget_Glyph *) NIL_CHK(_tglyph_)) layer] != nil) (void) [((id<PlaynCoreImageLayer>) [((TripleplayUiWidget_Glyph *) NIL_CHK(_tglyph_)) layer]) setVisibleWithBOOL:isChecked];
  if (_ilayer_ != nil) (void) [_ilayer_ setVisibleWithBOOL:isChecked];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiCheckBox *typedCopy = (TripleplayUiCheckBox *) copy;
  typedCopy.checked = checked_;
  typedCopy._checkStr = _checkStr_;
  typedCopy._checkIcon = _checkIcon_;
  typedCopy._actionSound = _actionSound_;
}

@end
@implementation TripleplayUiCheckBox_$1

@synthesize this$0 = this$0_;

- (void)onEmitWithId:(JavaLangBoolean *)checked {
  [this$0_ updateCheckViz];
}

- (id)initWithTripleplayUiCheckBox:(TripleplayUiCheckBox *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiCheckBox_$1 *typedCopy = (TripleplayUiCheckBox_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

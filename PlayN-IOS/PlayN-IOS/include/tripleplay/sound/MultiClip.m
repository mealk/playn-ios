//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/sound/MultiClip.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/PlayN.h"
#include "tripleplay/sound/Clip.h"
#include "tripleplay/sound/MultiClip.h"
#include "tripleplay/sound/SoundBoard.h"

@implementation TripleplaySoundMultiClip

@synthesize _board = _board_;
@synthesize _path = _path_;
@synthesize _reserveCopies = _reserveCopies_;
@synthesize _duration = _duration_;
@synthesize _copies = _copies_;

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)board
                           withNSString:(NSString *)path
                                withInt:(int)reserveCopies
                              withFloat:(float)duration {
  if ((self = [super init])) {
    _copies_ = [[JavaUtilArrayList alloc] init];
    _board_ = board;
    _path_ = path;
    _reserveCopies_ = reserveCopies;
    _duration_ = duration * 1000;
  }
  return self;
}

- (id<TripleplaySoundMultiClip_Copy>)reserve {
  double now = [PlaynCorePlayN currentTime];
  for (int ii = 0, ll = [((id<JavaUtilList>) nil_chk(_copies_)) size]; ii < ll; ii++) {
    TripleplaySoundMultiClip_CopyImpl *copy_ = [((id<JavaUtilList>) nil_chk(_copies_)) getWithInt:ii];
    if (((TripleplaySoundMultiClip_CopyImpl *) nil_chk(copy_)).releaseTime < now) {
      return [((id<JavaUtilList>) nil_chk(_copies_)) removeWithInt:ii];
    }
  }
  return [[TripleplaySoundMultiClip_CopyImpl alloc] initWithTripleplaySoundMultiClip:self];
}

- (void)release__ {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(_copies_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      TripleplaySoundMultiClip_CopyImpl *copy_ = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((id<TripleplaySoundClip>) nil_chk(((TripleplaySoundMultiClip_CopyImpl *) nil_chk(copy_)).sound)) release__];
    }
  }
  [((id<JavaUtilList>) nil_chk(_copies_)) clear];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundMultiClip *typedCopy = (TripleplaySoundMultiClip *) copy;
  typedCopy._board = _board_;
  typedCopy._path = _path_;
  typedCopy._reserveCopies = _reserveCopies_;
  typedCopy._duration = _duration_;
  typedCopy._copies = _copies_;
}

@end
@implementation TripleplaySoundMultiClip_CopyImpl

@synthesize this$0 = this$0_;
@synthesize sound = sound_;
@synthesize releaseTime = releaseTime_;

- (float)volume {
  return [((id<TripleplaySoundClip>) nil_chk(sound_)) volume];
}

- (void)setVolumeWithFloat:(float)volume {
  [((id<TripleplaySoundClip>) nil_chk(sound_)) setVolumeWithFloat:volume];
}

- (void)play {
  [((id<TripleplaySoundClip>) nil_chk(sound_)) play];
  if ([((id<JavaUtilList>) nil_chk(this$0_._copies)) size] < this$0_._reserveCopies) {
    releaseTime_ = [PlaynCorePlayN currentTime] + this$0_._duration;
    [((id<JavaUtilList>) nil_chk(this$0_._copies)) addWithId:self];
  }
}

- (void)release__ {
  if ([((id<JavaUtilList>) nil_chk(this$0_._copies)) size] < this$0_._reserveCopies) {
    releaseTime_ = [PlaynCorePlayN currentTime];
    [((id<JavaUtilList>) nil_chk(this$0_._copies)) addWithId:self];
  }
}

- (void)stop {
  [((id<TripleplaySoundClip>) nil_chk(sound_)) stop];
  releaseTime_ = 0;
}

- (BOOL)isPlaying {
  return [((id<TripleplaySoundClip>) nil_chk(sound_)) isPlaying];
}

- (id)initWithTripleplaySoundMultiClip:(TripleplaySoundMultiClip *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    sound_ = [((TripleplaySoundSoundBoard *) nil_chk(outer$._board)) getClipWithNSString:outer$._path];
    {
      [((id<TripleplaySoundClip>) nil_chk(sound_)) setVolumeWithFloat:1];
      [((id<TripleplaySoundClip>) nil_chk(sound_)) preload];
    }
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundMultiClip_CopyImpl *typedCopy = (TripleplaySoundMultiClip_CopyImpl *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.sound = sound_;
  typedCopy.releaseTime = releaseTime_;
}

@end

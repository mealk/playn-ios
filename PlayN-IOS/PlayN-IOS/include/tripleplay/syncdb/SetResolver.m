//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/syncdb/SetResolver.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "tripleplay/syncdb/SetResolver.h"


@implementation TripleplaySyncdbSetResolver

static id<TripleplaySyncdbSetResolver> TripleplaySyncdbSetResolver_SERVER_;
static id<TripleplaySyncdbSetResolver> TripleplaySyncdbSetResolver_UNION_;
static id<TripleplaySyncdbSetResolver> TripleplaySyncdbSetResolver_INTERSECTION_;

+ (id<TripleplaySyncdbSetResolver>)SERVER {
  return TripleplaySyncdbSetResolver_SERVER_;
}

+ (id<TripleplaySyncdbSetResolver>)UNION {
  return TripleplaySyncdbSetResolver_UNION_;
}

+ (id<TripleplaySyncdbSetResolver>)INTERSECTION {
  return TripleplaySyncdbSetResolver_INTERSECTION_;
}

+ (void)initialize OBJC_METHOD_FAMILY_NONE {
  TripleplaySyncdbSetResolver_SERVER_ = [[TripleplaySyncdbSetResolver_$1 alloc] init];
  TripleplaySyncdbSetResolver_UNION_ = [[TripleplaySyncdbSetResolver_$2 alloc] init];
  TripleplaySyncdbSetResolver_INTERSECTION_ = [[TripleplaySyncdbSetResolver_$3 alloc] init];
}

@end
@implementation TripleplaySyncdbSetResolver_$1

- (BOOL)resolveWithJavaUtilSet:(id<JavaUtilSet>)client
               withJavaUtilSet:(id<JavaUtilSet>)server {
  int osize = [((id<JavaUtilSet>) nil_chk(client)) size];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(client)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    if (![((id<JavaUtilSet>) nil_chk(server)) containsWithId:[((id<JavaUtilIterator>) nil_chk(iter)) next]]) [((id<JavaUtilIterator>) nil_chk(iter)) remove];
  }
  BOOL removed = [((id<JavaUtilSet>) nil_chk(client)) size] != osize;
  return [((id<JavaUtilSet>) nil_chk(client)) addAllWithJavaUtilCollection:server] || removed;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplaySyncdbSetResolver_$2

- (BOOL)resolveWithJavaUtilSet:(id<JavaUtilSet>)client
               withJavaUtilSet:(id<JavaUtilSet>)server {
  return [((id<JavaUtilSet>) nil_chk(client)) addAllWithJavaUtilCollection:server];
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplaySyncdbSetResolver_$3

- (BOOL)resolveWithJavaUtilSet:(id<JavaUtilSet>)client
               withJavaUtilSet:(id<JavaUtilSet>)server {
  return [((id<JavaUtilSet>) nil_chk(client)) retainAllWithJavaUtilCollection:server];
}

- (id)init {
  return [super init];
}

@end

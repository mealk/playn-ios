//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/syncdb/DBUtil.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSObjectArray.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "tripleplay/syncdb/Codec.h"
#include "tripleplay/syncdb/DBUtil.h"

@implementation TripleplaySyncdbDBUtil

static NSString * TripleplaySyncdbDBUtil_MAP_KEY_SEP_ = @"~";
static NSString * TripleplaySyncdbDBUtil_SUBDB_KEY_SEP_ = @"!";

+ (NSString *)MAP_KEY_SEP {
  return TripleplaySyncdbDBUtil_MAP_KEY_SEP_;
}

+ (NSString *)SUBDB_KEY_SEP {
  return TripleplaySyncdbDBUtil_SUBDB_KEY_SEP_;
}

+ (id<JavaUtilSet>)decodeSetWithNSString:(NSString *)data
               withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  return [TripleplaySyncdbDBUtil decodeWithNSString:data withTripleplaySyncdbCodec:codec withId:[[JavaUtilHashSet alloc] init]];
}

+ (NSString *)encodeSetWithJavaUtilSet:(id<JavaUtilSet>)set
             withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  return [TripleplaySyncdbDBUtil encodeWithJavaLangIterable:set withTripleplaySyncdbCodec:codec];
}

+ (id<JavaUtilList>)decodeListWithNSString:(NSString *)data
                 withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  return [TripleplaySyncdbDBUtil decodeWithNSString:data withTripleplaySyncdbCodec:codec withId:[[JavaUtilArrayList alloc] init]];
}

+ (NSString *)encodeListWithJavaUtilList:(id<JavaUtilList>)list
               withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  return [TripleplaySyncdbDBUtil encodeWithJavaLangIterable:list withTripleplaySyncdbCodec:codec];
}

+ (NSString *)subDBKeyWithNSString:(NSString *)prefix
                      withNSString:(NSString *)key {
  return [NSString stringWithFormat:@"%@!%@", prefix, key];
}

+ (NSString *)subDBWithNSString:(NSString *)fqKey {
  int sidx = [((NSString *) nil_chk(fqKey)) indexOfString:TripleplaySyncdbDBUtil_SUBDB_KEY_SEP_];
  return (sidx < 0) ? nil : [((NSString *) nil_chk(fqKey)) substring:0 endIndex:sidx];
}

+ (NSString *)mapKeyWithNSString:(NSString *)prefix
                          withId:(id)key
       withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  return [NSString stringWithFormat:@"%@~%@", prefix, [((TripleplaySyncdbCodec *) nil_chk(codec)) encodeWithId:key]];
}

+ (NSString *)encodeWithJavaLangIterable:(id<JavaLangIterable>)values
               withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaLangIterable>) nil_chk(values)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id elem = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([((JavaLangStringBuilder *) nil_chk(buf)) sequenceLength] > 0) (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"\t"];
      (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:[((TripleplaySyncdbCodec *) nil_chk(codec)) encodeWithId:elem]];
    }
  }
  return [((JavaLangStringBuilder *) nil_chk(buf)) description];
}

+ (id)decodeWithNSString:(NSString *)data
withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec
                  withId:(id<JavaUtilCollection>)into {
  if (data != nil && [((NSString *) nil_chk(data)) length] > 0) {
    {
      IOSObjectArray *a__ = [((NSString *) nil_chk(data)) split:@"\t"];
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        NSString *edata = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        [((id<JavaUtilCollection>) nil_chk(into)) addWithId:[((TripleplaySyncdbCodec *) nil_chk(codec)) decodeWithNSString:edata]];
      }
    }
  }
  return into;
}

- (id)init {
  return [super init];
}

@end

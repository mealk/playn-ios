//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/syncdb/SyncDB.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "playn/core/Asserts.h"
#include "playn/core/Platform.h"
#include "playn/core/Storage.h"
#include "react/RMap.h"
#include "react/RSet.h"
#include "react/Value.h"
#include "tripleplay/syncdb/Codec.h"
#include "tripleplay/syncdb/DBUtil.h"
#include "tripleplay/syncdb/Log.h"
#include "tripleplay/syncdb/Resolver.h"
#include "tripleplay/syncdb/SetResolver.h"
#include "tripleplay/syncdb/SyncDB.h"
#include "tripleplay/util/Logger.h"

@implementation TripleplaySyncdbSyncDB

static NSString * TripleplaySyncdbSyncDB_SYNC_VERS_KEY_ = @"syncv";
static NSString * TripleplaySyncdbSyncDB_SYNC_MODS_KEY_ = @"syncm";
static NSString * TripleplaySyncdbSyncDB_SYNC_PURGE_KEY_ = @"syncp";
static id<JavaUtilSet> TripleplaySyncdbSyncDB_SYNC_KEYS_;

@synthesize _platform = _platform_;
@synthesize _storage = _storage_;
@synthesize _batch = _batch_;
@synthesize _props = _props_;
@synthesize _subdbs = _subdbs_;
@synthesize _mods = _mods_;
@synthesize _version = _version_;
@synthesize _flushQueued = _flushQueued_;

+ (NSString *)SYNC_VERS_KEY {
  return TripleplaySyncdbSyncDB_SYNC_VERS_KEY_;
}

+ (NSString *)SYNC_MODS_KEY {
  return TripleplaySyncdbSyncDB_SYNC_MODS_KEY_;
}

+ (NSString *)SYNC_PURGE_KEY {
  return TripleplaySyncdbSyncDB_SYNC_PURGE_KEY_;
}

+ (id<JavaUtilSet>)SYNC_KEYS {
  return TripleplaySyncdbSyncDB_SYNC_KEYS_;
}

- (int)version__ {
  return _version_;
}

- (BOOL)hasUnsyncedChanges {
  return ![((id<JavaUtilMap>) nil_chk(_mods_)) isEmpty];
}

- (id<JavaUtilMap>)getDelta {
  id<JavaUtilMap> delta = [[JavaUtilHashMap alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(_mods_)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      NSString *name = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      (void) [((id<JavaUtilMap>) nil_chk(delta)) putWithId:name withId:[((id<PlaynCoreStorage>) nil_chk(_storage_)) getItemWithNSString:name]];
    }
  }
  return delta;
}

- (id<JavaUtilMap>)getMods {
  return [[JavaUtilHashMap alloc] initWithJavaUtilMap:_mods_];
}

- (void)noteSyncWithInt:(int)version_
        withJavaUtilMap:(id<JavaUtilMap>)syncedMods {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(syncedMods)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      NSString *prop = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
      JavaLangInteger *mcount = [((id<JavaUtilMap>) nil_chk(_mods_)) getWithId:prop];
      if (mcount == nil) {
        [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) warningWithNSString:@"Have no mod count for synced property?" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"prop", prop } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
        continue;
      }
      int syncedMC = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue])) intValue], curMC = [((JavaLangInteger *) nil_chk(mcount)) intValue];
      if (syncedMC > curMC) {
        [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) warningWithNSString:@"Synced mod count is greater than current?" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"prop", prop, @"curMC", [JavaLangInteger valueOfWithInt:curMC], @"syncedMC", [JavaLangInteger valueOfWithInt:syncedMC] } count:6 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      else if (syncedMC == curMC) {
        (void) [((id<JavaUtilMap>) nil_chk(_mods_)) removeWithId:prop];
      }
    }
  }
  [self flushMods];
  [self updateVersionWithInt:version_];
}

- (BOOL)containsMergesWithJavaUtilMap:(id<JavaUtilMap>)delta {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(delta)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      NSString *key = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([((id<JavaUtilMap>) nil_chk(_mods_)) containsKeyWithId:key]) return YES;
    }
  }
  return NO;
}

- (void)applyDeltaWithInt:(int)version_
          withJavaUtilMap:(id<JavaUtilMap>)delta {
  id<JavaUtilSet> subDBs = [[JavaUtilHashSet alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(delta)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      NSString *key = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      NSString *sdb = [TripleplaySyncdbDBUtil subDBWithNSString:key];
      if (sdb != nil) [((id<JavaUtilSet>) nil_chk(subDBs)) addWithId:sdb];
    }
  }
  if (![((id<JavaUtilSet>) nil_chk(subDBs)) isEmpty]) {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk(subDBs)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      NSString *subdb = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      (void) [self getSubDBWithNSString:subdb];
    }
  }
  [self startBatch];
  @try {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(delta)) entrySet])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey], *value = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
        id<TripleplaySyncdbSyncDB_Property> prop;
        int pidx = [((NSString *) nil_chk(name)) indexOfString:[TripleplaySyncdbDBUtil MAP_KEY_SEP]];
        if (pidx == -1) prop = [((id<JavaUtilMap>) nil_chk(_props_)) getWithId:name];
        else prop = [((id<JavaUtilMap>) nil_chk(_props_)) getWithId:[((NSString *) nil_chk(name)) substring:0 endIndex:pidx]];
        if (prop == nil) {
          [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) warningWithNSString:@"No local property defined" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"name", name } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
        }
        else if ([((id<JavaUtilMap>) nil_chk(_mods_)) containsKeyWithId:name]) {
          @try {
            if ([prop mergeWithNSString:name withNSString:value]) (void) [((id<JavaUtilMap>) nil_chk(_mods_)) removeWithId:name];
          }
          @catch (JavaLangException *e) {
            [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) warningWithNSString:@"Property merge fail" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"name", name, @"value", value, e } count:5 type:[IOSClass classWithClass:[NSObject class]]]];
          }
        }
        else {
          @try {
            [prop updateWithNSString:name withNSString:value];
          }
          @catch (JavaLangException *e) {
            [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) warningWithNSString:@"Property update fail" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"name", name, @"value", value, e } count:5 type:[IOSClass classWithClass:[NSObject class]]]];
          }
          (void) [((id<JavaUtilMap>) nil_chk(_mods_)) removeWithId:name];
        }
      }
    }
    [self flushMods];
    [self updateVersionWithInt:version_];
  }
  @finally {
    [self commitBatch];
  }
}

- (void)prepareToMeld {
  [self updateVersionWithInt:0];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(_props_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<TripleplaySyncdbSyncDB_Property> prop = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((id<TripleplaySyncdbSyncDB_Property>) nil_chk(prop)) prepareToMeld];
    }
  }
}

- (void)processPurges {
  [self startBatch];
  @try {
    [self purgeDBsWithJavaUtilSet:[self sgetWithNSString:TripleplaySyncdbSyncDB_SYNC_PURGE_KEY_ withTripleplaySyncdbCodec:[TripleplaySyncdbCodec STRING]]];
    [self removeItemWithNSString:TripleplaySyncdbSyncDB_SYNC_PURGE_KEY_];
  }
  @finally {
    [self commitBatch];
  }
}

- (id)initWithPlaynCorePlatform:(id<PlaynCorePlatform>)platform {
  if ((self = [super init])) {
    _props_ = [[JavaUtilHashMap alloc] init];
    _subdbs_ = [[JavaUtilHashMap alloc] init];
    _mods_ = [[JavaUtilHashMap alloc] init];
    _platform_ = platform;
    _storage_ = [((id<PlaynCorePlatform>) nil_chk(platform)) storage];
    _version_ = [((JavaLangInteger *) nil_chk([self getWithNSString:TripleplaySyncdbSyncDB_SYNC_VERS_KEY_ withId:[JavaLangInteger valueOfWithInt:0] withTripleplaySyncdbCodec:[TripleplaySyncdbCodec INT]])) intValue];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([self sgetWithNSString:TripleplaySyncdbSyncDB_SYNC_MODS_KEY_ withTripleplaySyncdbCodec:[TripleplaySyncdbCodec STRING]])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        NSString *mod = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        (void) [((id<JavaUtilMap>) nil_chk(_mods_)) putWithId:mod withId:[JavaLangInteger valueOfWithInt:1]];
      }
    }
  }
  return self;
}

- (ReactValue *)valueWithNSString:(NSString *)name
                           withId:(id)defval
        withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec
     withTripleplaySyncdbResolver:(id<TripleplaySyncdbResolver>)resolver {
  [PlaynCoreAsserts checkArgumentWithBOOL:![((id<JavaUtilSet>) nil_chk(TripleplaySyncdbSyncDB_SYNC_KEYS_)) containsWithId:name] withId:[NSString stringWithFormat:@"%@ is a reserved name.", name]];
  ReactValue *value = [[TripleplaySyncdbSyncDB_$1 alloc] initWithTripleplaySyncdbSyncDB:self withId:nil withNSString:name withId:defval withTripleplaySyncdbCodec:codec];
  (void) [((id<JavaUtilMap>) nil_chk(_props_)) putWithId:name withId:[[TripleplaySyncdbSyncDB_$2 alloc] initWithTripleplaySyncdbSyncDB:self withTripleplaySyncdbCodec:codec withId:defval withTripleplaySyncdbResolver:resolver withReactValue:value withNSString:name]];
  return value;
}

- (ReactRSet *)setWithNSString:(NSString *)name
     withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec
withTripleplaySyncdbSetResolver:(id<TripleplaySyncdbSetResolver>)resolver {
  [PlaynCoreAsserts checkArgumentWithBOOL:![((id<JavaUtilSet>) nil_chk(TripleplaySyncdbSyncDB_SYNC_KEYS_)) containsWithId:name] withId:[NSString stringWithFormat:@"%@ is a reserved name.", name]];
  ReactRSet *rset = [[TripleplaySyncdbSyncDB_$3 alloc] initWithTripleplaySyncdbSyncDB:self withJavaUtilSet:[self sgetWithNSString:name withTripleplaySyncdbCodec:codec] withNSString:name withTripleplaySyncdbCodec:codec];
  (void) [((id<JavaUtilMap>) nil_chk(_props_)) putWithId:name withId:[[TripleplaySyncdbSyncDB_$4 alloc] initWithTripleplaySyncdbSyncDB:self withTripleplaySyncdbCodec:codec withTripleplaySyncdbSetResolver:resolver withReactRSet:rset withNSString:name]];
  return rset;
}

- (ReactRMap *)mapWithNSString:(NSString *)prefix
     withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)keyCodec
     withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)valCodec
  withTripleplaySyncdbResolver:(id<TripleplaySyncdbResolver>)resolver {
  ReactRMap *map = [[ReactRMap alloc] initWithJavaUtilMap:[[TripleplaySyncdbSyncDB_map_StorageMap alloc] initWithTripleplaySyncdbSyncDB:self]];
  (void) [((id<JavaUtilMap>) nil_chk(_props_)) putWithId:prefix withId:[[TripleplaySyncdbSyncDB_$5 alloc] initWithTripleplaySyncdbSyncDB:self withTripleplaySyncdbCodec:keyCodec withNSString:prefix withReactRMap:map withTripleplaySyncdbCodec:valCodec withTripleplaySyncdbResolver:resolver]];
  (void) [((id<JavaUtilMap>) nil_chk(_props_)) putWithId:[TripleplaySyncdbSyncDB mapKeysKeyWithNSString:prefix] withId:[[TripleplaySyncdbSyncDB_$6 alloc] init]];
  return map;
}

- (TripleplaySyncdbSyncDB_SubDB *)getSubDBWithNSString:(NSString *)prefix {
  TripleplaySyncdbSyncDB_SubDB *db = [((id<JavaUtilMap>) nil_chk(_subdbs_)) getWithId:prefix];
  if (db == nil) (void) [((id<JavaUtilMap>) nil_chk(_subdbs_)) putWithId:prefix withId:db = [self createSubDBWithNSString:prefix]];
  return db;
}

- (TripleplaySyncdbSyncDB_SubDB *)createSubDBWithNSString:(NSString *)prefix {
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown subdb prefix: %@", prefix]];
}

- (id)getWithNSString:(NSString *)name
               withId:(id)defval
withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  return [((TripleplaySyncdbCodec *) nil_chk(codec)) decodeWithNSString:[((id<PlaynCoreStorage>) nil_chk(_storage_)) getItemWithNSString:name] withId:defval];
}

- (void)setWithNSString:(NSString *)name
                 withId:(id)value
withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  [self setItemWithNSString:name withNSString:[((TripleplaySyncdbCodec *) nil_chk(codec)) encodeWithId:value]];
}

- (void)ssetWithNSString:(NSString *)name
         withJavaUtilSet:(id<JavaUtilSet>)set
withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  [self setItemWithNSString:name withNSString:[TripleplaySyncdbDBUtil encodeSetWithJavaUtilSet:set withTripleplaySyncdbCodec:codec]];
}

- (id<JavaUtilSet>)sgetWithNSString:(NSString *)name
          withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec {
  return [TripleplaySyncdbDBUtil decodeSetWithNSString:[((id<PlaynCoreStorage>) nil_chk(_storage_)) getItemWithNSString:name] withTripleplaySyncdbCodec:codec];
}

- (void)updateVersionWithInt:(int)version_ {
  [self setWithNSString:TripleplaySyncdbSyncDB_SYNC_VERS_KEY_ withId:[JavaLangInteger valueOfWithInt:_version_ = version_] withTripleplaySyncdbCodec:[TripleplaySyncdbCodec INT]];
}

- (void)noteModifiedWithNSString:(NSString *)name {
  JavaLangInteger *omods = [((id<JavaUtilMap>) nil_chk(_mods_)) getWithId:name];
  (void) [((id<JavaUtilMap>) nil_chk(_mods_)) putWithId:name withId:[JavaLangInteger valueOfWithInt:(omods == nil) ? 1 : [((JavaLangInteger *) nil_chk(omods)) intValue] + 1]];
  if (omods == nil) [self queueFlushMods];
}

- (void)flushMods {
  [self ssetWithNSString:TripleplaySyncdbSyncDB_SYNC_MODS_KEY_ withJavaUtilSet:[((id<JavaUtilMap>) nil_chk(_mods_)) keySet] withTripleplaySyncdbCodec:[TripleplaySyncdbCodec STRING]];
}

- (void)queueFlushMods {
  if (_flushQueued_) return;
  _flushQueued_ = YES;
  [((id<PlaynCorePlatform>) nil_chk(_platform_)) invokeLaterWithJavaLangRunnable:[[TripleplaySyncdbSyncDB_$7 alloc] initWithTripleplaySyncdbSyncDB:self]];
}

- (void)startBatch {
  if (_batch_ == nil) _batch_ = [((id<PlaynCoreStorage>) nil_chk(_storage_)) startBatch];
}

- (void)commitBatch {
  if (_batch_ != nil) {
    [_batch_ commit];
    _batch_ = nil;
  }
}

- (void)setItemWithNSString:(NSString *)key
               withNSString:(NSString *)value {
  if (_batch_ != nil) [_batch_ setItemWithNSString:key withNSString:value];
  else [((id<PlaynCoreStorage>) nil_chk(_storage_)) setItemWithNSString:key withNSString:value];
}

- (void)removeItemWithNSString:(NSString *)key {
  if (_batch_ != nil) [_batch_ removeItemWithNSString:key];
  else [((id<PlaynCoreStorage>) nil_chk(_storage_)) removeItemWithNSString:key];
}

- (void)purgeDBsWithJavaUtilSet:(id<JavaUtilSet>)dbs {
  if ([((id<JavaUtilSet>) nil_chk(dbs)) isEmpty]) return;
  [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) infoWithNSString:@"Purging" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"dbs", dbs } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaLangIterable>) nil_chk([((id<PlaynCoreStorage>) nil_chk(_storage_)) keys])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      NSString *key = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      int sdbidx = [((NSString *) nil_chk(key)) indexOfString:[TripleplaySyncdbDBUtil SUBDB_KEY_SEP]];
      if (sdbidx == -1 || ![((id<JavaUtilSet>) nil_chk(dbs)) containsWithId:[((NSString *) nil_chk(key)) substring:0 endIndex:sdbidx]]) continue;
      [self removeItemWithNSString:key];
      (void) [((id<JavaUtilMap>) nil_chk(_mods_)) removeWithId:key];
    }
  }
  [self flushMods];
}

+ (NSString *)mapKeysKeyWithNSString:(NSString *)mapPrefix {
  return [NSString stringWithFormat:@"%@_keys", mapPrefix];
}

+ (void)initialize {
  if (self == [TripleplaySyncdbSyncDB class]) {
    TripleplaySyncdbSyncDB_SYNC_KEYS_ = [[JavaUtilHashSet alloc] init];
    {
      [((id<JavaUtilSet>) nil_chk(TripleplaySyncdbSyncDB_SYNC_KEYS_)) addWithId:TripleplaySyncdbSyncDB_SYNC_VERS_KEY_];
      [((id<JavaUtilSet>) nil_chk(TripleplaySyncdbSyncDB_SYNC_KEYS_)) addWithId:TripleplaySyncdbSyncDB_SYNC_MODS_KEY_];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB *typedCopy = (TripleplaySyncdbSyncDB *) copy;
  typedCopy._platform = _platform_;
  typedCopy._storage = _storage_;
  typedCopy._batch = _batch_;
  typedCopy._props = _props_;
  typedCopy._subdbs = _subdbs_;
  typedCopy._mods = _mods_;
  typedCopy._version = _version_;
  typedCopy._flushQueued = _flushQueued_;
}

@end
@implementation TripleplaySyncdbSyncDB_map_StorageMap

@synthesize this$0 = this$0_;
@synthesize _keys = _keys_;

- (int)size {
  return [((id<JavaUtilSet>) nil_chk(_keys_)) size];
}

- (BOOL)containsKeyWithId:(id)key {
  return [((id<JavaUtilSet>) nil_chk(_keys_)) containsWithId:key];
}

- (id)getWithId:(id)rawKey {
  return [((TripleplaySyncdbCodec *) nil_chk(val$valCodec_)) decodeWithNSString:[((id<PlaynCoreStorage>) nil_chk(this$0_._storage)) getItemWithNSString:[self skeyWithId:rawKey]] withId:nil];
}

- (id)putWithId:(id)key
         withId:(id)value {
  [((id<JavaUtilSet>) nil_chk(_keys_)) addWithId:key];
  NSString *skey = [self skeyWithId:key];
  NSString *valstr = [((TripleplaySyncdbCodec *) nil_chk(val$valCodec_)) encodeWithId:value];
  NSString *ovalstr = [((id<PlaynCoreStorage>) nil_chk(this$0_._storage)) getItemWithNSString:skey];
  [this$0_ setItemWithNSString:skey withNSString:valstr];
  if (![((NSString *) nil_chk(valstr)) isEqual:ovalstr]) [this$0_ noteModifiedWithNSString:skey];
  return [((TripleplaySyncdbCodec *) nil_chk(val$valCodec_)) decodeWithNSString:ovalstr withId:nil];
}

- (id)removeWithId:(id)rawKey {
  NSString *ovalue = [((id<PlaynCoreStorage>) nil_chk(this$0_._storage)) getItemWithNSString:[self skeyWithId:rawKey]];
  [((id<JavaUtilSet>) nil_chk(_keys_)) removeWithId:rawKey];
  return [((TripleplaySyncdbCodec *) nil_chk(val$valCodec_)) decodeWithNSString:ovalue withId:nil];
}

- (id<JavaUtilSet>)keySet {
  return [JavaUtilCollections unmodifiableSetWithJavaUtilSet:_keys_];
}

- (id<JavaUtilSet>)entrySet {
  return [[TripleplaySyncdbSyncDB_map_StorageMap_$1 alloc] initWithTripleplaySyncdbSyncDB_map_StorageMap:self];
}

- (NSString *)skeyWithId:(id)rawKey {
  id key = (id) rawKey;
  return [TripleplaySyncdbDBUtil mapKeyWithNSString:val$prefix_ withId:key withTripleplaySyncdbCodec:val$keyCodec_];
}

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    _keys_ = [[TripleplaySyncdbSyncDB_map_StorageMap_$2 alloc] initWithTripleplaySyncdbSyncDB_map_StorageMap:self withJavaUtilSet:[outer$ sgetWithNSString:[TripleplaySyncdbSyncDB mapKeysKeyWithNSString:val$prefix_] withTripleplaySyncdbCodec:val$keyCodec_]];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_map_StorageMap *typedCopy = (TripleplaySyncdbSyncDB_map_StorageMap *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._keys = _keys_;
}

@end
@implementation TripleplaySyncdbSyncDB_map_StorageMap_$1

@synthesize this$0 = this$0_;

- (id<JavaUtilIterator>)iterator {
  return [[TripleplaySyncdbSyncDB_map_StorageMap_$1_$1 alloc] initWithTripleplaySyncdbSyncDB_map_StorageMap_$1:self];
}

- (int)size {
  return [((id<JavaUtilSet>) nil_chk(this$0_._keys)) size];
}

- (id)initWithTripleplaySyncdbSyncDB_map_StorageMap:(TripleplaySyncdbSyncDB_map_StorageMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_map_StorageMap_$1 *typedCopy = (TripleplaySyncdbSyncDB_map_StorageMap_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplaySyncdbSyncDB_map_StorageMap_$1_$1

@synthesize this$0 = this$0_;
@synthesize _keysIter = _keysIter_;

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(_keysIter_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  id key = [((id<JavaUtilIterator>) nil_chk(_keysIter_)) next];
  return [[TripleplaySyncdbSyncDB_map_StorageMap_$1_$1_$1 alloc] initWithTripleplaySyncdbSyncDB_map_StorageMap_$1_$1:self withId:key];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(_keysIter_)) remove];
}

- (id)initWithTripleplaySyncdbSyncDB_map_StorageMap_$1:(TripleplaySyncdbSyncDB_map_StorageMap_$1 *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    _keysIter_ = [((id<JavaUtilSet>) nil_chk(outer$.this$0._keys)) iterator];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_map_StorageMap_$1_$1 *typedCopy = (TripleplaySyncdbSyncDB_map_StorageMap_$1_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._keysIter = _keysIter_;
}

@end
@implementation TripleplaySyncdbSyncDB_map_StorageMap_$1_$1_$1

@synthesize this$0 = this$0_;
@synthesize val$key = val$key_;

- (id)getKey {
  return val$key_;
}

- (id)getValue {
  return [this$0_.this$0.this$0 getWithId:val$key_];
}

- (id)setValueWithId:(id)value {
  return [this$0_.this$0.this$0 putWithId:val$key_ withId:value];
}

- (id)initWithTripleplaySyncdbSyncDB_map_StorageMap_$1_$1:(TripleplaySyncdbSyncDB_map_StorageMap_$1_$1 *)outer$
                                                   withId:(id)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$key_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_map_StorageMap_$1_$1_$1 *typedCopy = (TripleplaySyncdbSyncDB_map_StorageMap_$1_$1_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$key = val$key_;
}

@end
@implementation TripleplaySyncdbSyncDB_map_StorageMap_$2

@synthesize this$0 = this$0_;
@synthesize _superctordone = _superctordone_;

- (BOOL)addWithId:(id)elem {
  if (!_superctordone_) return [super addWithId:elem];
  if (![super addWithId:elem]) return NO;
  [this$0_.this$0 ssetWithNSString:[TripleplaySyncdbSyncDB mapKeysKeyWithNSString:this$0_.val$prefix] withJavaUtilSet:self withTripleplaySyncdbCodec:this$0_.val$keyCodec];
  return YES;
}

- (BOOL)removeWithId:(id)elem {
  if (![super removeWithId:elem]) return NO;
  id key = (id) elem;
  [self removeStorageWithId:key];
  [this$0_.this$0 ssetWithNSString:[TripleplaySyncdbSyncDB mapKeysKeyWithNSString:this$0_.val$prefix] withJavaUtilSet:self withTripleplaySyncdbCodec:this$0_.val$keyCodec];
  return YES;
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> iter = [super iterator];
  return [[TripleplaySyncdbSyncDB_map_StorageMap_$2_$1 alloc] initWithTripleplaySyncdbSyncDB_map_StorageMap_$2:self withJavaUtilIterator:iter];
}

- (void)removeStorageWithId:(id)key {
  NSString *skey = [this$0_ skeyWithId:key];
  [this$0_.this$0 removeItemWithNSString:skey];
  [this$0_.this$0 noteModifiedWithNSString:skey];
}

- (id)initWithTripleplaySyncdbSyncDB_map_StorageMap:(TripleplaySyncdbSyncDB_map_StorageMap *)outer$
                                    withJavaUtilSet:(id<JavaUtilSet>)arg$0 {
  if ((self = [super initWithJavaUtilCollection:arg$0])) {
    this$0_ = outer$;
    _superctordone_ = YES;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_map_StorageMap_$2 *typedCopy = (TripleplaySyncdbSyncDB_map_StorageMap_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._superctordone = _superctordone_;
}

@end
@implementation TripleplaySyncdbSyncDB_map_StorageMap_$2_$1

@synthesize this$0 = this$0_;
@synthesize _current = _current_;
@synthesize val$iter = val$iter_;

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(val$iter_)) hasNext];
}

- (id)next {
  return _current_ = [((id<JavaUtilIterator>) nil_chk(val$iter_)) next];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(val$iter_)) remove];
  [this$0_ removeStorageWithId:_current_];
}

- (id)initWithTripleplaySyncdbSyncDB_map_StorageMap_$2:(TripleplaySyncdbSyncDB_map_StorageMap_$2 *)outer$
                                  withJavaUtilIterator:(id<JavaUtilIterator>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$iter_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_map_StorageMap_$2_$1 *typedCopy = (TripleplaySyncdbSyncDB_map_StorageMap_$2_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._current = _current_;
  typedCopy.val$iter = val$iter_;
}

@end
@implementation TripleplaySyncdbSyncDB_SubDB

@synthesize this$0 = this$0_;
@synthesize _dbpre = _dbpre_;

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$
                        withNSString:(NSString *)prefix {
  if ((self = [super init])) {
    this$0_ = outer$;
    _dbpre_ = prefix;
  }
  return self;
}

- (ReactValue *)valueWithNSString:(NSString *)name
                           withId:(id)defval
        withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec
     withTripleplaySyncdbResolver:(id<TripleplaySyncdbResolver>)resolver {
  return [this$0_ valueWithNSString:[self keyWithNSString:name] withId:defval withTripleplaySyncdbCodec:codec withTripleplaySyncdbResolver:resolver];
}

- (ReactRSet *)setWithNSString:(NSString *)name
     withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)codec
withTripleplaySyncdbSetResolver:(id<TripleplaySyncdbSetResolver>)resolver {
  return [this$0_ setWithNSString:[self keyWithNSString:name] withTripleplaySyncdbCodec:codec withTripleplaySyncdbSetResolver:resolver];
}

- (ReactRMap *)mapWithNSString:(NSString *)prefix
     withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)keyCodec
     withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)valCodec
  withTripleplaySyncdbResolver:(id<TripleplaySyncdbResolver>)resolver {
  return [this$0_ mapWithNSString:[self keyWithNSString:prefix] withTripleplaySyncdbCodec:keyCodec withTripleplaySyncdbCodec:valCodec withTripleplaySyncdbResolver:resolver];
}

- (NSString *)keyWithNSString:(NSString *)name {
  return [TripleplaySyncdbDBUtil subDBKeyWithNSString:_dbpre_ withNSString:name];
}

- (void)purge {
  [this$0_ purgeDBsWithJavaUtilSet:[JavaUtilCollections singletonWithId:_dbpre_]];
  (void) [((id<JavaUtilMap>) nil_chk(this$0_._subdbs)) removeWithId:_dbpre_];
}

- (void)queuePurge {
  id<JavaUtilSet> pendingPurges = [this$0_ sgetWithNSString:[TripleplaySyncdbSyncDB SYNC_PURGE_KEY] withTripleplaySyncdbCodec:[TripleplaySyncdbCodec STRING]];
  [((id<JavaUtilSet>) nil_chk(pendingPurges)) addWithId:_dbpre_];
  [this$0_ ssetWithNSString:[TripleplaySyncdbSyncDB SYNC_PURGE_KEY] withJavaUtilSet:pendingPurges withTripleplaySyncdbCodec:[TripleplaySyncdbCodec STRING]];
  [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) infoWithNSString:@"Queued purge" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"subdb", _dbpre_, @"penders", pendingPurges } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
  (void) [((id<JavaUtilMap>) nil_chk(this$0_._subdbs)) removeWithId:_dbpre_];
}

- (void)cancelQueuedPurge {
  id<JavaUtilSet> pendingPurges = [this$0_ sgetWithNSString:[TripleplaySyncdbSyncDB SYNC_PURGE_KEY] withTripleplaySyncdbCodec:[TripleplaySyncdbCodec STRING]];
  if ([((id<JavaUtilSet>) nil_chk(pendingPurges)) removeWithId:_dbpre_]) {
    [this$0_ ssetWithNSString:[TripleplaySyncdbSyncDB SYNC_PURGE_KEY] withJavaUtilSet:pendingPurges withTripleplaySyncdbCodec:[TripleplaySyncdbCodec STRING]];
    [((TripleplayUtilLogger *) nil_chk([TripleplaySyncdbLog log])) infoWithNSString:@"Canceled queued purge" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"subdb", _dbpre_, @"penders", pendingPurges } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_SubDB *typedCopy = (TripleplaySyncdbSyncDB_SubDB *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._dbpre = _dbpre_;
}

@end
@implementation TripleplaySyncdbSyncDB_$1

@synthesize this$0 = this$0_;
@synthesize val$name = val$name_;
@synthesize val$defval = val$defval_;
@synthesize val$codec = val$codec_;

- (id)get {
  return [this$0_ getWithNSString:val$name_ withId:val$defval_ withTripleplaySyncdbCodec:val$codec_];
}

- (id)updateLocalWithId:(id)value {
  id oldValue = [self get];
  [this$0_ setWithNSString:val$name_ withId:value withTripleplaySyncdbCodec:val$codec_];
  return oldValue;
}

- (void)emitChangeWithId:(id)value
                  withId:(id)ovalue {
  [super emitChangeWithId:value withId:ovalue];
  [this$0_ noteModifiedWithNSString:val$name_];
}

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$
                              withId:(id)arg$0
                        withNSString:(NSString *)capture$0
                              withId:(id)capture$1
           withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)capture$2 {
  if ((self = [super initWithId:arg$0])) {
    this$0_ = outer$;
    val$name_ = capture$0;
    val$defval_ = capture$1;
    val$codec_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_$1 *typedCopy = (TripleplaySyncdbSyncDB_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$name = val$name_;
  typedCopy.val$defval = val$defval_;
  typedCopy.val$codec = val$codec_;
}

@end
@implementation TripleplaySyncdbSyncDB_$2

@synthesize this$0 = this$0_;
@synthesize val$codec = val$codec_;
@synthesize val$defval = val$defval_;
@synthesize val$resolver = val$resolver_;
@synthesize val$value = val$value_;
@synthesize val$name = val$name_;

- (BOOL)mergeWithNSString:(NSString *)name
             withNSString:(NSString *)data {
  id svalue = [((TripleplaySyncdbCodec *) nil_chk(val$codec_)) decodeWithNSString:data withId:val$defval_];
  id nvalue = [((id<TripleplaySyncdbResolver>) nil_chk(val$resolver_)) resolveWithId:[((ReactValue *) nil_chk(val$value_)) get] withId:svalue];
  (void) [((ReactValue *) nil_chk(val$value_)) updateWithId:nvalue];
  return [nil_chk(nvalue) isEqual:svalue];
}

- (void)updateWithNSString:(NSString *)name
              withNSString:(NSString *)data {
  (void) [((ReactValue *) nil_chk(val$value_)) updateWithId:[((TripleplaySyncdbCodec *) nil_chk(val$codec_)) decodeWithNSString:data withId:val$defval_]];
}

- (void)prepareToMeld {
  [this$0_ noteModifiedWithNSString:val$name_];
}

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$
           withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)capture$0
                              withId:(id)capture$1
        withTripleplaySyncdbResolver:(id<TripleplaySyncdbResolver>)capture$2
                      withReactValue:(ReactValue *)capture$3
                        withNSString:(NSString *)capture$4 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$codec_ = capture$0;
    val$defval_ = capture$1;
    val$resolver_ = capture$2;
    val$value_ = capture$3;
    val$name_ = capture$4;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_$2 *typedCopy = (TripleplaySyncdbSyncDB_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$codec = val$codec_;
  typedCopy.val$defval = val$defval_;
  typedCopy.val$resolver = val$resolver_;
  typedCopy.val$value = val$value_;
  typedCopy.val$name = val$name_;
}

@end
@implementation TripleplaySyncdbSyncDB_$3

@synthesize this$0 = this$0_;
@synthesize val$name = val$name_;
@synthesize val$codec = val$codec_;

- (void)emitAddWithId:(id)elem {
  [super emitAddWithId:elem];
  [this$0_ ssetWithNSString:val$name_ withJavaUtilSet:_impl_ withTripleplaySyncdbCodec:val$codec_];
  [this$0_ noteModifiedWithNSString:val$name_];
}

- (void)emitRemoveWithId:(id)elem {
  [super emitRemoveWithId:elem];
  [this$0_ ssetWithNSString:val$name_ withJavaUtilSet:_impl_ withTripleplaySyncdbCodec:val$codec_];
  [this$0_ noteModifiedWithNSString:val$name_];
}

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$
                     withJavaUtilSet:(id<JavaUtilSet>)arg$0
                        withNSString:(NSString *)capture$0
           withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)capture$1 {
  if ((self = [super initWithJavaUtilSet:arg$0])) {
    this$0_ = outer$;
    val$name_ = capture$0;
    val$codec_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_$3 *typedCopy = (TripleplaySyncdbSyncDB_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$name = val$name_;
  typedCopy.val$codec = val$codec_;
}

@end
@implementation TripleplaySyncdbSyncDB_$4

@synthesize this$0 = this$0_;
@synthesize val$codec = val$codec_;
@synthesize val$resolver = val$resolver_;
@synthesize val$rset = val$rset_;
@synthesize val$name = val$name_;

- (BOOL)mergeWithNSString:(NSString *)name
             withNSString:(NSString *)data {
  id<JavaUtilSet> sset = (data == nil) ? [JavaUtilCollections emptySet] : [TripleplaySyncdbDBUtil decodeSetWithNSString:data withTripleplaySyncdbCodec:val$codec_];
  [((id<TripleplaySyncdbSetResolver>) nil_chk(val$resolver_)) resolveWithJavaUtilSet:val$rset_ withJavaUtilSet:sset];
  return [((ReactRSet *) nil_chk(val$rset_)) isEqual:sset];
}

- (void)updateWithNSString:(NSString *)name
              withNSString:(NSString *)data {
  if (data == nil) [((ReactRSet *) nil_chk(val$rset_)) clear];
  else {
    id<JavaUtilSet> sset = [TripleplaySyncdbDBUtil decodeSetWithNSString:data withTripleplaySyncdbCodec:val$codec_];
    [((ReactRSet *) nil_chk(val$rset_)) retainAllWithJavaUtilCollection:sset];
    [((ReactRSet *) nil_chk(val$rset_)) addAllWithJavaUtilCollection:sset];
  }
}

- (void)prepareToMeld {
  [this$0_ noteModifiedWithNSString:val$name_];
}

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$
           withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)capture$0
     withTripleplaySyncdbSetResolver:(id<TripleplaySyncdbSetResolver>)capture$1
                       withReactRSet:(ReactRSet *)capture$2
                        withNSString:(NSString *)capture$3 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$codec_ = capture$0;
    val$resolver_ = capture$1;
    val$rset_ = capture$2;
    val$name_ = capture$3;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_$4 *typedCopy = (TripleplaySyncdbSyncDB_$4 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$codec = val$codec_;
  typedCopy.val$resolver = val$resolver_;
  typedCopy.val$rset = val$rset_;
  typedCopy.val$name = val$name_;
}

@end
@implementation TripleplaySyncdbSyncDB_$5

@synthesize this$0 = this$0_;
@synthesize val$keyCodec = val$keyCodec_;
@synthesize val$prefix = val$prefix_;
@synthesize val$map = val$map_;
@synthesize val$valCodec = val$valCodec_;
@synthesize val$resolver = val$resolver_;

- (BOOL)mergeWithNSString:(NSString *)name
             withNSString:(NSString *)data {
  id skey = [((TripleplaySyncdbCodec *) nil_chk(val$keyCodec_)) decodeWithNSString:[((NSString *) nil_chk(name)) substring:[((NSString *) nil_chk(val$prefix_)) length] + 1]];
  if (data == nil) {
    (void) [((ReactRMap *) nil_chk(val$map_)) removeWithId:skey];
    return YES;
  }
  id svalue = [((TripleplaySyncdbCodec *) nil_chk(val$valCodec_)) decodeWithNSString:data], nvalue = [((id<TripleplaySyncdbResolver>) nil_chk(val$resolver_)) resolveWithId:[((ReactRMap *) nil_chk(val$map_)) getWithId:skey] withId:svalue];
  (void) [((ReactRMap *) nil_chk(val$map_)) putWithId:skey withId:nvalue];
  return [nil_chk(nvalue) isEqual:svalue];
}

- (void)updateWithNSString:(NSString *)name
              withNSString:(NSString *)data {
  id skey = [((TripleplaySyncdbCodec *) nil_chk(val$keyCodec_)) decodeWithNSString:[((NSString *) nil_chk(name)) substring:[((NSString *) nil_chk(val$prefix_)) length] + 1]];
  if (data == nil) (void) [((ReactRMap *) nil_chk(val$map_)) removeWithId:skey];
  else (void) [((ReactRMap *) nil_chk(val$map_)) putWithId:skey withId:[((TripleplaySyncdbCodec *) nil_chk(val$valCodec_)) decodeWithNSString:data]];
}

- (void)prepareToMeld {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((ReactRMap *) nil_chk(val$map_)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id key = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [this$0_ noteModifiedWithNSString:[TripleplaySyncdbDBUtil mapKeyWithNSString:val$prefix_ withId:key withTripleplaySyncdbCodec:val$keyCodec_]];
    }
  }
}

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$
           withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)capture$0
                        withNSString:(NSString *)capture$1
                       withReactRMap:(ReactRMap *)capture$2
           withTripleplaySyncdbCodec:(TripleplaySyncdbCodec *)capture$3
        withTripleplaySyncdbResolver:(id<TripleplaySyncdbResolver>)capture$4 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$keyCodec_ = capture$0;
    val$prefix_ = capture$1;
    val$map_ = capture$2;
    val$valCodec_ = capture$3;
    val$resolver_ = capture$4;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_$5 *typedCopy = (TripleplaySyncdbSyncDB_$5 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$keyCodec = val$keyCodec_;
  typedCopy.val$prefix = val$prefix_;
  typedCopy.val$map = val$map_;
  typedCopy.val$valCodec = val$valCodec_;
  typedCopy.val$resolver = val$resolver_;
}

@end
@implementation TripleplaySyncdbSyncDB_$6

- (BOOL)mergeWithNSString:(NSString *)name
             withNSString:(NSString *)data {
  return YES;
}

- (void)updateWithNSString:(NSString *)name
              withNSString:(NSString *)data {
}

- (void)prepareToMeld {
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplaySyncdbSyncDB_$7

@synthesize this$0 = this$0_;

- (void)run {
  [this$0_ flushMods];
  this$0_._flushQueued = NO;
}

- (id)initWithTripleplaySyncdbSyncDB:(TripleplaySyncdbSyncDB *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbSyncDB_$7 *typedCopy = (TripleplaySyncdbSyncDB_$7 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

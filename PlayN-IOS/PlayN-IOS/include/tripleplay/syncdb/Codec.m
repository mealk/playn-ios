//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/syncdb/Codec.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSClass.h"
#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Boolean.h"
#import "java/lang/Enum.h"
#import "java/lang/Integer.h"
#import "java/lang/Long.h"
#import "java/lang/StringBuilder.h"
#import "tripleplay/syncdb/Codec.h"
#import "tripleplay/util/Base90.h"

@implementation TripleplaySyncdbCodec

static TripleplaySyncdbCodec * TripleplaySyncdbCodec_STRING_;
static TripleplaySyncdbCodec * TripleplaySyncdbCodec_INT_;
static TripleplaySyncdbCodec * TripleplaySyncdbCodec_INTS_;
static TripleplaySyncdbCodec * TripleplaySyncdbCodec_LONG_;
static TripleplaySyncdbCodec * TripleplaySyncdbCodec_BOOLEAN_;

+ (TripleplaySyncdbCodec *)STRING {
  return TripleplaySyncdbCodec_STRING_;
}

+ (TripleplaySyncdbCodec *)INT {
  return TripleplaySyncdbCodec_INT_;
}

+ (TripleplaySyncdbCodec *)INTS {
  return TripleplaySyncdbCodec_INTS_;
}

+ (TripleplaySyncdbCodec *)LONG {
  return TripleplaySyncdbCodec_LONG_;
}

+ (TripleplaySyncdbCodec *)BOOLEAN {
  return TripleplaySyncdbCodec_BOOLEAN_;
}

- (NSString *)encodeWithId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)decodeWithNSString:(NSString *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)decodeWithNSString:(NSString *)data
                  withId:(id)defval {
  return (data == nil) ? defval : [self decodeWithNSString:data];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TripleplaySyncdbCodec class]) {
    TripleplaySyncdbCodec_STRING_ = [[TripleplaySyncdbCodec_$1 alloc] init];
    TripleplaySyncdbCodec_INT_ = [[TripleplaySyncdbCodec_$2 alloc] init];
    TripleplaySyncdbCodec_INTS_ = [[TripleplaySyncdbCodec_$3 alloc] init];
    TripleplaySyncdbCodec_LONG_ = [[TripleplaySyncdbCodec_$4 alloc] init];
    TripleplaySyncdbCodec_BOOLEAN_ = [[TripleplaySyncdbCodec_$5 alloc] init];
  }
}

@end
@implementation TripleplaySyncdbCodec_EnumC

@synthesize _eclass = _eclass_;

+ (TripleplaySyncdbCodec_EnumC *)createWithIOSClass:(IOSClass *)eclass {
  return [[TripleplaySyncdbCodec_EnumC alloc] initWithIOSClass:eclass];
}

- (id)initWithIOSClass:(IOSClass *)eclass {
  if ((self = [super init])) {
    _eclass_ = eclass;
  }
  return self;
}

- (NSString *)encodeWithId:(JavaLangEnum *)value {
  return [((JavaLangEnum *) NIL_CHK(value)) name];
}

- (id)decodeWithNSString:(NSString *)data {
  return ((JavaLangEnum *) [JavaLangEnum valueOfWithIOSClass:_eclass_ withNSString:data]);
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySyncdbCodec_EnumC *typedCopy = (TripleplaySyncdbCodec_EnumC *) copy;
  typedCopy._eclass = _eclass_;
}

@end
@implementation TripleplaySyncdbCodec_$1

- (NSString *)encodeWithId:(NSString *)value {
  return value;
}

- (NSString *)decodeWithNSString:(NSString *)data {
  return data;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplaySyncdbCodec_$2

- (NSString *)encodeWithId:(JavaLangInteger *)value {
  return [TripleplayUtilBase90 encodeIntWithInt:[((JavaLangInteger *) NIL_CHK(value)) intValue]];
}

- (JavaLangInteger *)decodeWithNSString:(NSString *)data {
  return [JavaLangInteger valueOfWithInt:[TripleplayUtilBase90 decodeIntWithNSString:data]];
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplaySyncdbCodec_$3

- (NSString *)encodeWithId:(IOSIntArray *)values {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  {
    IOSIntArray *a__ = values;
    int n__ = (int) [((IOSIntArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      int value = [((IOSIntArray *) NIL_CHK(a__)) intAtIndex:i__];
      if ([((JavaLangStringBuilder *) NIL_CHK(buf)) sequenceLength] > 0) (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:@"\t"];
      (void) [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:[TripleplayUtilBase90 encodeIntWithInt:value]];
    }
  }
  return [((JavaLangStringBuilder *) NIL_CHK(buf)) description];
}

- (IOSIntArray *)decodeWithNSString:(NSString *)data {
  if ([NIL_CHK(data) length] == 0) return [[IOSIntArray alloc] initWithLength:0];
  IOSObjectArray *encs = [NIL_CHK(data) split:@"\t"];
  IOSIntArray *values = [[IOSIntArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(encs)) count]];
  for (int ii = 0; ii < (int) [((IOSObjectArray *) NIL_CHK(encs)) count]; ii++) [((IOSIntArray *) NIL_CHK(values)) replaceIntAtIndex:ii withInt:[TripleplayUtilBase90 decodeIntWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(encs)) objectAtIndex:ii])]];
  return values;
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplaySyncdbCodec_$4

- (NSString *)encodeWithId:(JavaLangLong *)value {
  return [TripleplayUtilBase90 encodeLongWithLongInt:[((JavaLangLong *) NIL_CHK(value)) longLongValue]];
}

- (JavaLangLong *)decodeWithNSString:(NSString *)data {
  return [JavaLangLong valueOfWithLongInt:[TripleplayUtilBase90 decodeLongWithNSString:data]];
}

- (id)init {
  return [super init];
}

@end
@implementation TripleplaySyncdbCodec_$5

- (NSString *)encodeWithId:(JavaLangBoolean *)value {
  return value ? @"t" : @"f";
}

- (JavaLangBoolean *)decodeWithNSString:(NSString *)data {
  return [JavaLangBoolean valueOfWithBOOL:[@"t" isEqual:data]];
}

- (id)init {
  return [super init];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/flump/MoviePlayer.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/lang/IllegalStateException.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/util/Clock.h"
#include "react/Value.h"
#include "tripleplay/anim/Animation.h"
#include "tripleplay/flump/Library.h"
#include "tripleplay/flump/Movie.h"
#include "tripleplay/flump/MoviePlayer.h"

@implementation TripleplayFlumpMoviePlayer

@synthesize movie_ = movie__;
@synthesize _lib = _lib_;
@synthesize _root = _root_;
@synthesize _oneshotMovie = _oneshotMovie_;
@synthesize _loopingMovie = _loopingMovie_;

- (TripleplayFlumpMovie *)movie {
  return [((ReactValue *) nil_chk(movie__)) get];
}

- (id)initWithTripleplayFlumpLibrary:(TripleplayFlumpLibrary *)lib {
  return [self initTripleplayFlumpMoviePlayerWithTripleplayFlumpLibrary:lib withPlaynCoreGroupLayer:[((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) createGroupLayer]];
}

- (id)initTripleplayFlumpMoviePlayerWithTripleplayFlumpLibrary:(TripleplayFlumpLibrary *)lib
                                       withPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)root {
  if ((self = [super init])) {
    movie__ = [ReactValue createWithId:nil];
    _lib_ = lib;
    _root_ = root;
  }
  return self;
}

- (id)initWithTripleplayFlumpLibrary:(TripleplayFlumpLibrary *)lib
             withPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)root {
  return [self initTripleplayFlumpMoviePlayerWithTripleplayFlumpLibrary:lib withPlaynCoreGroupLayer:root];
}

- (id<PlaynCoreLayer>)layer {
  return _root_;
}

- (BOOL)looping {
  return _oneshotMovie_ == nil && _loopingMovie_ != nil;
}

- (TripleplayFlumpMoviePlayer *)playWithNSString:(NSString *)name
                                        withBOOL:(BOOL)restart {
  if (_loopingMovie_ == nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"A loop must be started before the first call to play()"];
  }
  if (restart || _oneshotMovie_ == nil || ![((NSString *) nil_chk([((TripleplayFlumpMovie_Symbol *) nil_chk([((TripleplayFlumpMovie *) nil_chk(_oneshotMovie_)) symbol])) name])) isEqual:name]) {
    _oneshotMovie_ = [self setCurrentWithTripleplayFlumpMovie:[self createMovieWithNSString:name]];
  }
  return self;
}

- (TripleplayFlumpMoviePlayer *)playWithNSString:(NSString *)name {
  return [self playWithNSString:name withBOOL:YES];
}

- (TripleplayFlumpMoviePlayer *)loopWithNSString:(NSString *)name
                                        withBOOL:(BOOL)restart {
  if (restart || _loopingMovie_ == nil || ![((NSString *) nil_chk([((TripleplayFlumpMovie_Symbol *) nil_chk([((TripleplayFlumpMovie *) nil_chk(_loopingMovie_)) symbol])) name])) isEqual:name]) {
    _oneshotMovie_ = nil;
    _loopingMovie_ = [self setCurrentWithTripleplayFlumpMovie:[self createMovieWithNSString:name]];
  }
  return self;
}

- (TripleplayFlumpMoviePlayer *)loopWithNSString:(NSString *)name {
  return [self loopWithNSString:name withBOOL:YES];
}

- (TripleplayAnimAnimation *)animateWithNSString:(NSString *)name {
  return [[TripleplayFlumpMoviePlayer_PlayAnimation alloc] initWithTripleplayFlumpMoviePlayer:self withNSString:name];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  if (_oneshotMovie_ != nil && [((TripleplayFlumpMovie *) nil_chk(_oneshotMovie_)) position] + [((id<PlaynCoreUtilClock>) nil_chk(clock)) dt] * [((TripleplayFlumpMovie *) nil_chk(_oneshotMovie_)) speed] > ((TripleplayFlumpMovie_Symbol *) nil_chk([((TripleplayFlumpMovie *) nil_chk(_oneshotMovie_)) symbol])).duration) {
    _oneshotMovie_ = nil;
    (void) [self setCurrentWithTripleplayFlumpMovie:_loopingMovie_];
  }
  [((TripleplayFlumpMovie *) nil_chk([self movie])) paintWithPlaynCoreUtilClock:clock];
}

- (TripleplayFlumpMovie *)createMovieWithNSString:(NSString *)name {
  return [((TripleplayFlumpLibrary *) nil_chk(_lib_)) createMovieWithNSString:name];
}

- (TripleplayFlumpMovie *)setCurrentWithTripleplayFlumpMovie:(TripleplayFlumpMovie *)current {
  if ([self movie] != nil) {
    [((id<PlaynCoreGroupLayer>) nil_chk(_root_)) removeWithPlaynCoreLayer:[((TripleplayFlumpMovie *) nil_chk([self movie])) layer]];
  }
  [((id<PlaynCoreGroupLayer>) nil_chk(_root_)) addWithPlaynCoreLayer:[((TripleplayFlumpMovie *) nil_chk(current)) layer]];
  (void) [((ReactValue *) nil_chk(movie__)) updateWithId:current];
  return current;
}

- (void)destroy {
  if ([self movie] != nil) {
    [((id<PlaynCoreGroupLayer>) nil_chk([((TripleplayFlumpMovie *) nil_chk([self movie])) layer])) destroy];
  }
  _loopingMovie_ = nil;
  _oneshotMovie_ = nil;
  (void) [((ReactValue *) nil_chk(movie__)) updateWithId:nil];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpMoviePlayer *typedCopy = (TripleplayFlumpMoviePlayer *) copy;
  typedCopy.movie_ = movie__;
  typedCopy._lib = _lib_;
  typedCopy._root = _root_;
  typedCopy._oneshotMovie = _oneshotMovie_;
  typedCopy._loopingMovie = _loopingMovie_;
}

@end
@implementation TripleplayFlumpMoviePlayer_PlayAnimation

@synthesize this$0 = this$0_;
@synthesize _name = _name_;
@synthesize _playing = _playing_;

- (id)initWithTripleplayFlumpMoviePlayer:(TripleplayFlumpMoviePlayer *)outer$
                            withNSString:(NSString *)name {
  if ((self = [super init])) {
    this$0_ = outer$;
    _name_ = name;
  }
  return self;
}

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  [super init__WithFloat:time];
  (void) [this$0_ playWithNSString:_name_];
  _playing_ = [this$0_ movie];
}

- (float)applyWithFloat:(float)time {
  return ([this$0_ movie] == _playing_) ? 1 : 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpMoviePlayer_PlayAnimation *typedCopy = (TripleplayFlumpMoviePlayer_PlayAnimation *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._name = _name_;
  typedCopy._playing = _playing_;
}

@end

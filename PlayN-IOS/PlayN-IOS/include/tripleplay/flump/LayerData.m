//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/flump/LayerData.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "playn/core/Json.h"
#include "tripleplay/flump/KeyframeData.h"
#include "tripleplay/flump/LayerData.h"
#include "tripleplay/flump/Symbol.h"

@implementation TripleplayFlumpLayerData

@synthesize name = name_;
@synthesize keyframes = keyframes_;
@synthesize _multipleSymbols = _multipleSymbols_;
@synthesize _lastSymbol = _lastSymbol_;

- (id)initWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json {
  if ((self = [super init])) {
    name_ = [((id<PlaynCoreJson_Object>) nil_chk(json)) getStringWithNSString:@"name"];
    JavaUtilArrayList *keyframes = [[JavaUtilArrayList alloc] init];
    self.keyframes = [JavaUtilCollections unmodifiableListWithJavaUtilList:keyframes];
    TripleplayFlumpKeyframeData *prevKf = nil;
    {
      id<JavaUtilIterator> iter__ = [((id<PlaynCoreJson_TypedArray>) nil_chk([((id<PlaynCoreJson_Object>) nil_chk(json)) getArrayWithNSString:@"keyframes" withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Object)]])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<PlaynCoreJson_Object> kfJson = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        prevKf = [[TripleplayFlumpKeyframeData alloc] initWithPlaynCoreJson_Object:kfJson withTripleplayFlumpKeyframeData:prevKf];
        [((JavaUtilArrayList *) nil_chk(keyframes)) addWithId:prevKf];
      }
    }
  }
  return self;
}

- (int)frames {
  TripleplayFlumpKeyframeData *lastKf = [((id<JavaUtilList>) nil_chk(keyframes_)) getWithInt:[((id<JavaUtilList>) nil_chk(keyframes_)) size] - 1];
  return ((TripleplayFlumpKeyframeData *) nil_chk(lastKf)).index + ((TripleplayFlumpKeyframeData *) nil_chk(lastKf)).duration;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpLayerData *typedCopy = (TripleplayFlumpLayerData *) copy;
  typedCopy.name = name_;
  typedCopy.keyframes = keyframes_;
  typedCopy._multipleSymbols = _multipleSymbols_;
  typedCopy._lastSymbol = _lastSymbol_;
}

@end

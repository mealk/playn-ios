//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/flump/Movie.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/Arrays.h"
#import "java/util/Collections.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "playn/core/Asserts.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Json.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/FloatMath.h"
#import "pythagoras/f/IPoint.h"
#import "pythagoras/f/Transform.h"
#import "tripleplay/flump/Instance.h"
#import "tripleplay/flump/KeyframeData.h"
#import "tripleplay/flump/LayerData.h"
#import "tripleplay/flump/Library.h"
#import "tripleplay/flump/Movie.h"
#import "tripleplay/flump/Symbol.h"

@implementation TripleplayFlumpMovie

@synthesize _symbol = _symbol_;
@synthesize _root = _root_;
@synthesize _animators = _animators_;
@synthesize _frame = _frame_;
@synthesize _position = _position_;
@synthesize _speed = _speed_;

- (id)initWithTripleplayFlumpMovie_Symbol:(TripleplayFlumpMovie_Symbol *)symbol {
  if ((self = [super init])) {
    _root_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createGroupLayer];
    _frame_ = 0;
    _position_ = 0;
    _speed_ = 1;
    _symbol_ = symbol;
    _animators_ = [[IOSObjectArray alloc] initWithLength:[((id<JavaUtilList>) NIL_CHK(symbol.layers)) size] type:[IOSClass classWithClass:[TripleplayFlumpMovie_LayerAnimator class]]];
    for (int ii = 0, ll = (int) [((IOSObjectArray *) NIL_CHK(_animators_)) count]; ii < ll; ++ii) {
      TripleplayFlumpMovie_LayerAnimator *animator = [[TripleplayFlumpMovie_LayerAnimator alloc] initWithTripleplayFlumpLayerData:((TripleplayFlumpLayerData *) [((id<JavaUtilList>) NIL_CHK(symbol.layers)) getWithInt:ii])];
      [((IOSObjectArray *) NIL_CHK(_animators_)) replaceObjectAtIndex:ii withObject:animator];
      [((id<PlaynCoreGroupLayer>) NIL_CHK(_root_)) addWithPlaynCoreLayer:((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator)).content];
    }
    [self setFrameWithFloat:1 withFloat:0];
  }
  return self;
}

- (id<PlaynCoreGroupLayer>)layer {
  return _root_;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [self paintWithFloat:[((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt]];
}

- (void)paintWithFloat:(float)dt {
  dt *= _speed_;
  _position_ += dt;
  if (_position_ > ((TripleplayFlumpMovie_Symbol *) NIL_CHK(_symbol_)).duration) {
    _position_ = fmodf(_position_, ((TripleplayFlumpMovie_Symbol *) NIL_CHK(_symbol_)).duration);
  }
  float nextFrame = _position_ * ((TripleplayFlumpMovie_Symbol *) NIL_CHK(_symbol_))._framesPerMs;
  [self setFrameWithFloat:nextFrame withFloat:dt];
}

- (float)position {
  return _position_;
}

- (void)setPositionWithFloat:(float)position {
  if (position < 0) position = 0;
  _position_ = position;
  [self paintWithFloat:0];
}

- (TripleplayFlumpMovie_Symbol *)symbol {
  return _symbol_;
}

- (float)speed {
  return _speed_;
}

- (void)setSpeedWithFloat:(float)speed {
  _speed_ = speed;
}

- (id<PlaynCoreLayer>)getNamedLayerWithNSString:(NSString *)name {
  TripleplayFlumpMovie_LayerAnimator *animator = [self getNamedAnimatorWithNSString:name];
  return animator != nil ? ((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator)).content : nil;
}

- (id<JavaUtilList>)getInstancesWithNSString:(NSString *)name {
  TripleplayFlumpMovie_LayerAnimator *animator = [self getNamedAnimatorWithNSString:name];
  if (animator == nil) return ((id<JavaUtilList>) [JavaUtilCollections emptyList]);
  if (((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator))._instances == nil) return ((id<JavaUtilList>) [JavaUtilCollections singletonListWithId:((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator))._current]);
  return ((id<JavaUtilList>) [JavaUtilCollections unmodifiableListWithJavaUtilList:((id<JavaUtilList>) [JavaUtilArrays asListWithNSObjectArray:((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator))._instances])]);
}

- (void)setNamedLayerWithNSString:(NSString *)name
      withTripleplayFlumpInstance:(id<TripleplayFlumpInstance>)instance {
  TripleplayFlumpMovie_LayerAnimator *animator = [self getNamedAnimatorWithNSString:name];
  if (animator != nil) {
    [PlaynCoreAsserts checkStateWithBOOL:[(id) animator.content conformsToProtocol: @protocol(PlaynCoreGroupLayer)] withNSString:@"Layer not a container" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"name", name ]];
    [animator setCurrentWithTripleplayFlumpInstance:instance];
  }
}

- (id<JavaUtilMap>)namedLayers {
  id<JavaUtilMap> namedLayers = [[JavaUtilHashMap alloc] init];
  {
    IOSObjectArray *a__ = _animators_;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayFlumpMovie_LayerAnimator *animator = ((TripleplayFlumpMovie_LayerAnimator *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      (void) [((id<JavaUtilMap>) NIL_CHK(namedLayers)) putWithId:((TripleplayFlumpLayerData *) NIL_CHK(animator.data)).name withId:((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator)).content];
    }
  }
  return ((id<JavaUtilMap>) [JavaUtilCollections unmodifiableMapWithJavaUtilMap:namedLayers]);
}

- (TripleplayFlumpMovie_LayerAnimator *)getNamedAnimatorWithNSString:(NSString *)name {
  {
    IOSObjectArray *a__ = _animators_;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayFlumpMovie_LayerAnimator *animator = ((TripleplayFlumpMovie_LayerAnimator *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      if ([NIL_CHK(animator.data.name) isEqual:name]) {
        return animator;
      }
    }
  }
  return nil;
}

- (void)setFrameWithFloat:(float)frame
                withFloat:(float)dt {
  if (frame < _frame_) {
    for (int ii = 0, ll = (int) [((IOSObjectArray *) NIL_CHK(_animators_)) count]; ii < ll; ++ii) {
      TripleplayFlumpMovie_LayerAnimator *animator = ((TripleplayFlumpMovie_LayerAnimator *) [((IOSObjectArray *) NIL_CHK(_animators_)) objectAtIndex:ii]);
      ((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator)).changedKeyframe = YES;
      ((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator)).keyframeIdx = 0;
    }
  }
  for (int ii = 0, ll = (int) [((IOSObjectArray *) NIL_CHK(_animators_)) count]; ii < ll; ++ii) {
    TripleplayFlumpMovie_LayerAnimator *animator = ((TripleplayFlumpMovie_LayerAnimator *) [((IOSObjectArray *) NIL_CHK(_animators_)) objectAtIndex:ii]);
    [((TripleplayFlumpMovie_LayerAnimator *) NIL_CHK(animator)) setFrameWithFloat:frame withFloat:dt];
  }
  _frame_ = frame;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpMovie *typedCopy = (TripleplayFlumpMovie *) copy;
  typedCopy._symbol = _symbol_;
  typedCopy._root = _root_;
  typedCopy._animators = _animators_;
  typedCopy._frame = _frame_;
  typedCopy._position = _position_;
  typedCopy._speed = _speed_;
}

@end
@implementation TripleplayFlumpMovie_Symbol

@synthesize frames = frames_;
@synthesize layers = layers_;
@synthesize duration = duration_;
@synthesize _name = _name_;
@synthesize _framesPerMs = _framesPerMs_;

- (id)initWithTripleplayFlumpLibrary:(TripleplayFlumpLibrary *)lib
            withPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json {
  if ((self = [super init])) {
    _name_ = [((id<PlaynCoreJson_Object>) NIL_CHK(json)) getStringWithNSString:@"id"];
    JavaUtilArrayList *layers = [[JavaUtilArrayList alloc] init];
    self.layers = ((id<JavaUtilList>) [JavaUtilCollections unmodifiableListWithJavaUtilList:layers]);
    int frames = 0;
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<PlaynCoreJson_TypedArray>) [((id<PlaynCoreJson_Object>) NIL_CHK(json)) getArrayWithNSString:@"layers" withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Object)]]) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<PlaynCoreJson_Object> layerJson = ((id<PlaynCoreJson_Object>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        TripleplayFlumpLayerData *layer = [[TripleplayFlumpLayerData alloc] initWithPlaynCoreJson_Object:layerJson];
        frames = [JavaLangMath maxWithInt:[((TripleplayFlumpLayerData *) NIL_CHK(layer)) frames] withInt:frames];
        [((JavaUtilArrayList *) NIL_CHK(layers)) addWithId:layer];
      }
    }
    self.frames = frames;
    _framesPerMs_ = ((TripleplayFlumpLibrary *) NIL_CHK(lib)).frameRate / 1000;
    self.duration = frames / _framesPerMs_;
  }
  return self;
}

- (NSString *)name {
  return _name_;
}

- (TripleplayFlumpMovie *)createInstance {
  return [[TripleplayFlumpMovie alloc] initWithTripleplayFlumpMovie_Symbol:self];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpMovie_Symbol *typedCopy = (TripleplayFlumpMovie_Symbol *) copy;
  typedCopy.frames = frames_;
  typedCopy.layers = layers_;
  typedCopy.duration = duration_;
  typedCopy._name = _name_;
  typedCopy._framesPerMs = _framesPerMs_;
}

@end
@implementation TripleplayFlumpMovie_LayerAnimator

@synthesize data = data_;
@synthesize content = content_;
@synthesize keyframeIdx = keyframeIdx_;
@synthesize changedKeyframe = changedKeyframe_;
@synthesize _current = _current_;
@synthesize _instances = _instances_;

- (id)initWithTripleplayFlumpLayerData:(TripleplayFlumpLayerData *)data {
  if ((self = [super init])) {
    keyframeIdx_ = 0;
    changedKeyframe_ = NO;
    self.data = data;
    if (((TripleplayFlumpLayerData *) NIL_CHK(data))._multipleSymbols) {
      _instances_ = [[IOSObjectArray alloc] initWithLength:[((id<JavaUtilList>) NIL_CHK(data.keyframes)) size] type:[IOSClass classWithProtocol:@protocol(TripleplayFlumpInstance)]];
      for (int ii = 0, ll = (int) [((IOSObjectArray *) NIL_CHK(_instances_)) count]; ii < ll; ++ii) {
        [((IOSObjectArray *) NIL_CHK(_instances_)) replaceObjectAtIndex:ii withObject:[((id<TripleplayFlumpSymbol>) [((TripleplayFlumpKeyframeData *) [((id<JavaUtilList>) NIL_CHK(data.keyframes)) getWithInt:ii]) symbol]) createInstance]];
      }
      content_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createGroupLayer];
      [self setCurrentWithTripleplayFlumpInstance:((id<TripleplayFlumpInstance>) [((IOSObjectArray *) NIL_CHK(_instances_)) objectAtIndex:0])];
    }
    else if (((TripleplayFlumpLayerData *) NIL_CHK(data))._lastSymbol != nil) {
      _current_ = [((TripleplayFlumpLayerData *) NIL_CHK(data))._lastSymbol createInstance];
      content_ = [((id<TripleplayFlumpInstance>) NIL_CHK(_current_)) layer];
    }
    else {
      content_ = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createGroupLayer];
    }
  }
  return self;
}

- (void)setFrameWithFloat:(float)frame
                withFloat:(float)dt {
  id<JavaUtilList> keyframes = ((TripleplayFlumpLayerData *) NIL_CHK(data_)).keyframes;
  int finalFrame = [((id<JavaUtilList>) NIL_CHK(keyframes)) size] - 1;
  while (keyframeIdx_ < finalFrame && ((TripleplayFlumpKeyframeData *) [((id<JavaUtilList>) NIL_CHK(keyframes)) getWithInt:keyframeIdx_ + 1]).index <= frame) {
    ++keyframeIdx_;
    changedKeyframe_ = YES;
  }
  if (changedKeyframe_ && _instances_ != nil) {
    [self setCurrentWithTripleplayFlumpInstance:((id<TripleplayFlumpInstance>) [((IOSObjectArray *) NIL_CHK(_instances_)) objectAtIndex:keyframeIdx_])];
    changedKeyframe_ = NO;
  }
  TripleplayFlumpKeyframeData *kf = ((TripleplayFlumpKeyframeData *) [((id<JavaUtilList>) NIL_CHK(keyframes)) getWithInt:keyframeIdx_]);
  BOOL visible = [((TripleplayFlumpKeyframeData *) NIL_CHK(kf)) symbol] != nil && ((TripleplayFlumpKeyframeData *) NIL_CHK(kf)).visible;
  (void) [((id<PlaynCoreLayer>) NIL_CHK(content_)) setVisibleWithBOOL:visible];
  if (!visible) {
    return;
  }
  float locX = [((id<PythagorasFIPoint>) NIL_CHK(kf.loc)) x];
  float locY = [((id<PythagorasFIPoint>) NIL_CHK(kf.loc)) y];
  float scaleX = [((id<PythagorasFIPoint>) NIL_CHK(kf.scale_)) x];
  float scaleY = [((id<PythagorasFIPoint>) NIL_CHK(kf.scale_)) y];
  float skewX = [((id<PythagorasFIPoint>) NIL_CHK(kf.skew)) x];
  float skewY = [((id<PythagorasFIPoint>) NIL_CHK(kf.skew)) y];
  float alpha = ((TripleplayFlumpKeyframeData *) NIL_CHK(kf)).alpha;
  if (((TripleplayFlumpKeyframeData *) NIL_CHK(kf)).tweened && keyframeIdx_ < finalFrame) {
    float interp = (frame - ((TripleplayFlumpKeyframeData *) NIL_CHK(kf)).index) / ((TripleplayFlumpKeyframeData *) NIL_CHK(kf)).duration;
    float ease = ((TripleplayFlumpKeyframeData *) NIL_CHK(kf)).ease;
    if (ease != 0) {
      float t;
      if (ease < 0) {
        float inv = 1 - interp;
        t = 1 - inv * inv;
        ease = -ease;
      }
      else {
        t = interp * interp;
      }
      interp = ease * t + (1 - ease) * interp;
    }
    TripleplayFlumpKeyframeData *nextKf = ((TripleplayFlumpKeyframeData *) [((id<JavaUtilList>) NIL_CHK(keyframes)) getWithInt:keyframeIdx_ + 1]);
    locX += ([((id<PythagorasFIPoint>) NIL_CHK(nextKf.loc)) x] - locX) * interp;
    locY += ([((id<PythagorasFIPoint>) NIL_CHK(nextKf.loc)) y] - locY) * interp;
    scaleX += ([((id<PythagorasFIPoint>) NIL_CHK(nextKf.scale_)) x] - scaleX) * interp;
    scaleY += ([((id<PythagorasFIPoint>) NIL_CHK(nextKf.scale_)) y] - scaleY) * interp;
    skewX += ([((id<PythagorasFIPoint>) NIL_CHK(nextKf.skew)) x] - skewX) * interp;
    skewY += ([((id<PythagorasFIPoint>) NIL_CHK(nextKf.skew)) y] - skewY) * interp;
    alpha += (((TripleplayFlumpKeyframeData *) NIL_CHK(nextKf)).alpha - alpha) * interp;
  }
  float sinX = [PythagorasFFloatMath sinWithFloat:skewX], cosX = [PythagorasFFloatMath cosWithFloat:skewX];
  float sinY = [PythagorasFFloatMath sinWithFloat:skewY], cosY = [PythagorasFFloatMath cosWithFloat:skewY];
  float m00 = cosY * scaleX;
  float m01 = sinY * scaleX;
  float m10 = -sinX * scaleY;
  float m11 = cosX * scaleY;
  (void) [((id<PythagorasFTransform>) [((id<PlaynCoreLayer>) NIL_CHK(content_)) transform]) setTransformWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:locX withFloat:locY];
  (void) [((id<PlaynCoreLayer>) NIL_CHK(content_)) setOriginWithFloat:[((id<PythagorasFIPoint>) NIL_CHK(kf.pivot)) x] withFloat:[((id<PythagorasFIPoint>) NIL_CHK(kf.pivot)) y]];
  (void) [((id<PlaynCoreLayer>) NIL_CHK(content_)) setAlphaWithFloat:alpha];
  if (_current_ != nil) {
    [_current_ paintWithFloat:dt];
  }
}

- (void)setCurrentWithTripleplayFlumpInstance:(id<TripleplayFlumpInstance>)current {
  if (_current_ != current) {
    _current_ = current;
    id<PlaynCoreGroupLayer> group = (id<PlaynCoreGroupLayer>) content_;
    [((id<PlaynCoreGroupLayer>) NIL_CHK(group)) clear];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(group)) addWithPlaynCoreLayer:[((id<TripleplayFlumpInstance>) NIL_CHK(current)) layer]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpMovie_LayerAnimator *typedCopy = (TripleplayFlumpMovie_LayerAnimator *) copy;
  typedCopy.data = data_;
  typedCopy.content = content_;
  typedCopy.keyframeIdx = keyframeIdx_;
  typedCopy.changedKeyframe = changedKeyframe_;
  typedCopy._current = _current_;
  typedCopy._instances = _instances_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/flump/Library.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Exception.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Integer.h"
#import "java/util/ArrayList.h"
#import "java/util/Collections.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "playn/core/Asserts.h"
#import "playn/core/Assets.h"
#import "playn/core/Image.h"
#import "playn/core/Json.h"
#import "playn/core/PlayN.h"
#import "playn/core/util/Callback.h"
#import "react/Connection.h"
#import "react/Value.h"
#import "tripleplay/flump/Instance.h"
#import "tripleplay/flump/KeyframeData.h"
#import "tripleplay/flump/LayerData.h"
#import "tripleplay/flump/Library.h"
#import "tripleplay/flump/Movie.h"
#import "tripleplay/flump/Symbol.h"
#import "tripleplay/flump/Texture.h"

@implementation TripleplayFlumpLibrary

@synthesize frameRate = frameRate_;
@synthesize symbols = symbols_;

- (id)initWithPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)json
                      withNSString:(NSString *)baseDir
         withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  if ((self = [super init])) {
    frameRate_ = [((id<PlaynCoreJson_Object>) NIL_CHK(json)) getNumberWithNSString:@"frameRate"];
    id<JavaUtilMap> symbols = [[JavaUtilHashMap alloc] init];
    self.symbols = ((id<JavaUtilMap>) [JavaUtilCollections unmodifiableMapWithJavaUtilMap:symbols]);
    JavaUtilArrayList *movies = [[JavaUtilArrayList alloc] init];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<PlaynCoreJson_TypedArray>) [((id<PlaynCoreJson_Object>) NIL_CHK(json)) getArrayWithNSString:@"movies" withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Object)]]) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<PlaynCoreJson_Object> movieJson = ((id<PlaynCoreJson_Object>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        TripleplayFlumpMovie_Symbol *movie = [[TripleplayFlumpMovie_Symbol alloc] initWithTripleplayFlumpLibrary:self withPlaynCoreJson_Object:movieJson];
        [((JavaUtilArrayList *) NIL_CHK(movies)) addWithId:movie];
        (void) [((id<JavaUtilMap>) NIL_CHK(symbols)) putWithId:[((TripleplayFlumpMovie_Symbol *) NIL_CHK(movie)) name] withId:movie];
      }
    }
    id<PlaynCoreJson_TypedArray> textureGroups = ((id<PlaynCoreJson_TypedArray>) [((id<PlaynCoreJson_Object>) NIL_CHK(json)) getArrayWithNSString:@"textureGroups" withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Object)]]);
    id<PlaynCoreJson_TypedArray> atlases = ((id<PlaynCoreJson_TypedArray>) [((id<PlaynCoreJson_Object>) [((id<PlaynCoreJson_TypedArray>) NIL_CHK(textureGroups)) getWithInt:0]) getArrayWithNSString:@"atlases" withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Object)]]);
    ReactValue *remainingAtlases = ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreJson_TypedArray>) NIL_CHK(atlases)) length]]]);
    (void) [((ReactValue *) NIL_CHK(remainingAtlases)) connectNotifyWithReactValueView_Listener:[[TripleplayFlumpLibrary_$1 alloc] initWithTripleplayFlumpLibrary:self withJavaUtilArrayList:movies withJavaUtilMap:symbols withPlaynCoreUtilCallback:callback]];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<PlaynCoreJson_TypedArray>) NIL_CHK(atlases)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<PlaynCoreJson_Object> atlasJson = ((id<PlaynCoreJson_Object>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        id<PlaynCoreImage> atlas = [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[NSString stringWithFormat:@"%@/%@", baseDir, [((id<PlaynCoreJson_Object>) NIL_CHK(atlasJson)) getStringWithNSString:@"file"]]];
        [((id<PlaynCoreImage>) NIL_CHK(atlas)) addCallbackWithPlaynCoreUtilCallback:[[TripleplayFlumpLibrary_$2 alloc] initWithPlaynCoreUtilCallback:callback withPlaynCoreJson_Object:atlasJson withJavaUtilMap:symbols withReactValue:remainingAtlases]];
      }
    }
  }
  return self;
}

+ (void)fromAssetsWithNSString:(NSString *)baseDir
     withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback {
  (void) [PlaynCoreAsserts checkNotNullWithId:callback];
  [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getTextWithNSString:[NSString stringWithFormat:@"%@/library.json", baseDir] withPlaynCoreUtilCallback:[[TripleplayFlumpLibrary_$3 alloc] initWithPlaynCoreUtilCallback:callback withNSString:baseDir withPlaynCoreUtilCallback:callback]];
}

- (id<TripleplayFlumpInstance>)createInstanceWithNSString:(NSString *)symbolName {
  id<TripleplayFlumpSymbol> symbol = ((id<TripleplayFlumpSymbol>) [((id<JavaUtilMap>) NIL_CHK(symbols_)) getWithId:symbolName]);
  if (symbol == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Missing required symbol [name=%@]", symbolName]];
  }
  return [((id<TripleplayFlumpSymbol>) NIL_CHK(symbol)) createInstance];
}

- (TripleplayFlumpMovie *)createMovieWithNSString:(NSString *)symbolName {
  return (TripleplayFlumpMovie *) [self createInstanceWithNSString:symbolName];
}

- (TripleplayFlumpTexture *)createTextureWithNSString:(NSString *)symbolName {
  return (TripleplayFlumpTexture *) [self createInstanceWithNSString:symbolName];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpLibrary *typedCopy = (TripleplayFlumpLibrary *) copy;
  typedCopy.frameRate = frameRate_;
  typedCopy.symbols = symbols_;
}

@end
@implementation TripleplayFlumpLibrary_$1

@synthesize this$0 = this$0_;
@synthesize val$movies = val$movies_;
@synthesize val$symbols = val$symbols_;
@synthesize val$callback = val$callback_;

- (void)onChangeWithId:(JavaLangInteger *)remaining
                withId:(JavaLangInteger *)_ {
  if ([((JavaLangInteger *) NIL_CHK(remaining)) intValue] > 0) return;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((JavaUtilArrayList *) NIL_CHK(val$movies_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplayFlumpMovie_Symbol *movie = ((TripleplayFlumpMovie_Symbol *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      {
        id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(movie.layers)) iterator]);
        while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
          TripleplayFlumpLayerData *layer = ((TripleplayFlumpLayerData *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
          {
            id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(layer.keyframes)) iterator]);
            while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
              TripleplayFlumpKeyframeData *kf = ((TripleplayFlumpKeyframeData *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
              if (((TripleplayFlumpKeyframeData *) NIL_CHK(kf))._symbolName != nil) {
                id<TripleplayFlumpSymbol> symbol = ((id<TripleplayFlumpSymbol>) [((id<JavaUtilMap>) NIL_CHK(val$symbols_)) getWithId:((TripleplayFlumpKeyframeData *) NIL_CHK(kf))._symbolName]);
                (void) [PlaynCoreAsserts checkNotNullWithId:symbol];
                if (((TripleplayFlumpLayerData *) NIL_CHK(layer))._lastSymbol == nil) ((TripleplayFlumpLayerData *) NIL_CHK(layer))._lastSymbol = symbol;
                else if (((TripleplayFlumpLayerData *) NIL_CHK(layer))._lastSymbol != symbol) ((TripleplayFlumpLayerData *) NIL_CHK(layer))._multipleSymbols = YES;
                ((TripleplayFlumpKeyframeData *) NIL_CHK(kf))._symbol = symbol;
              }
            }
          }
        }
      }
    }
  }
  [((id<PlaynCoreUtilCallback>) NIL_CHK(val$callback_)) onSuccessWithId:this$0_];
}

- (id)initWithTripleplayFlumpLibrary:(TripleplayFlumpLibrary *)outer$
               withJavaUtilArrayList:(JavaUtilArrayList *)capture$0
                     withJavaUtilMap:(id<JavaUtilMap>)capture$1
           withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)capture$2 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$movies_ = capture$0;
    val$symbols_ = capture$1;
    val$callback_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpLibrary_$1 *typedCopy = (TripleplayFlumpLibrary_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$movies = val$movies_;
  typedCopy.val$symbols = val$symbols_;
  typedCopy.val$callback = val$callback_;
}

@end
@implementation TripleplayFlumpLibrary_$2

@synthesize val$atlasJson = val$atlasJson_;
@synthesize val$symbols = val$symbols_;
@synthesize val$remainingAtlases = val$remainingAtlases_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)atlas {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<PlaynCoreJson_TypedArray>) [((id<PlaynCoreJson_Object>) NIL_CHK(val$atlasJson_)) getArrayWithNSString:@"textures" withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Object)]]) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<PlaynCoreJson_Object> textureJson = ((id<PlaynCoreJson_Object>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      TripleplayFlumpTexture_Symbol *texture = [[TripleplayFlumpTexture_Symbol alloc] initWithPlaynCoreJson_Object:textureJson withPlaynCoreImage:atlas];
      (void) [((id<JavaUtilMap>) NIL_CHK(val$symbols_)) putWithId:[((TripleplayFlumpTexture_Symbol *) NIL_CHK(texture)) name] withId:texture];
    }
  }
  (void) [((ReactValue *) NIL_CHK(val$remainingAtlases_)) updateWithId:[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) [((ReactValue *) NIL_CHK(val$remainingAtlases_)) get]) intValue] - 1]];
}

- (id)initWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)arg$0
           withPlaynCoreJson_Object:(id<PlaynCoreJson_Object>)capture$0
                    withJavaUtilMap:(id<JavaUtilMap>)capture$1
                     withReactValue:(ReactValue *)capture$2 {
  if ((self = [super initWithPlaynCoreUtilCallback:arg$0])) {
    val$atlasJson_ = capture$0;
    val$symbols_ = capture$1;
    val$remainingAtlases_ = capture$2;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpLibrary_$2 *typedCopy = (TripleplayFlumpLibrary_$2 *) copy;
  typedCopy.val$atlasJson = val$atlasJson_;
  typedCopy.val$symbols = val$symbols_;
  typedCopy.val$remainingAtlases = val$remainingAtlases_;
}

@end
@implementation TripleplayFlumpLibrary_$3

@synthesize val$baseDir = val$baseDir_;
@synthesize val$callback = val$callback_;

- (void)onSuccessWithId:(NSString *)text {
  @try {
    [[TripleplayFlumpLibrary alloc] initWithPlaynCoreJson_Object:[((id<PlaynCoreJson>) [PlaynCorePlayN json]) parseWithNSString:text] withNSString:val$baseDir_ withPlaynCoreUtilCallback:val$callback_];
  }
  @catch (JavaLangException *err) {
    [((id<PlaynCoreUtilCallback>) NIL_CHK(val$callback_)) onFailureWithJavaLangThrowable:err];
  }
}

- (id)initWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)arg$0
                       withNSString:(NSString *)capture$0
          withPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)capture$1 {
  if ((self = [super initWithPlaynCoreUtilCallback:arg$0])) {
    val$baseDir_ = capture$0;
    val$callback_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayFlumpLibrary_$3 *typedCopy = (TripleplayFlumpLibrary_$3 *) copy;
  typedCopy.val$baseDir = val$baseDir_;
  typedCopy.val$callback = val$callback_;
}

@end

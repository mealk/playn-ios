//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/anim/AnimGroup.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "tripleplay/anim/AnimGroup.h"
#include "tripleplay/anim/Animation.h"
#include "tripleplay/anim/Animator.h"

@implementation TripleplayAnimAnimGroup

@synthesize _anims = _anims_;

- (id)addWithId:(TripleplayAnimAnimation *)anim {
  if (_anims_ == nil) @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"AnimGroup already animated."];
  [((id<JavaUtilList>) nil_chk(_anims_)) addWithId:anim];
  return anim;
}

- (TripleplayAnimAnimation *)toAnim {
  IOSObjectArray *groupAnims = [((id<JavaUtilList>) nil_chk(_anims_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(_anims_)) size] type:[IOSClass classWithClass:[TripleplayAnimAnimation class]]]];
  _anims_ = nil;
  return [[TripleplayAnimAnimGroup_$1 alloc] initWithTripleplayAnimAnimationArray:groupAnims];
}

- (id)init {
  if ((self = [super init])) {
    _anims_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimGroup *typedCopy = (TripleplayAnimAnimGroup *) copy;
  typedCopy._anims = _anims_;
}

@end
@implementation TripleplayAnimAnimGroup_$1

@synthesize _animator = _animator_;
@synthesize _curAnims = _curAnims_;
@synthesize val$groupAnims = val$groupAnims_;

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  [super init__WithFloat:time];
  for (int ii = 0; ii < (int) [((IOSObjectArray *) nil_chk(val$groupAnims_)) count]; ii++) {
    [([((IOSObjectArray *) nil_chk(_curAnims_)) replaceObjectAtIndex:ii withObject:[((IOSObjectArray *) nil_chk(val$groupAnims_)) objectAtIndex:ii]]) init__WithFloat:time];
  }
}

- (float)applyWithTripleplayAnimAnimator:(TripleplayAnimAnimator *)animator
                               withFloat:(float)time {
  _animator_ = animator;
  return [super applyWithTripleplayAnimAnimator:animator withFloat:time];
}

- (float)applyWithFloat:(float)time {
  float remain = JavaLangFloat_NEGATIVE_INFINITY;
  int processed = 0;
  for (int ii = 0; ii < (int) [((IOSObjectArray *) nil_chk(_curAnims_)) count]; ii++) {
    TripleplayAnimAnimation *anim = [((IOSObjectArray *) nil_chk(_curAnims_)) objectAtIndex:ii];
    if (anim == nil) continue;
    float aremain = [((TripleplayAnimAnimation *) nil_chk(anim)) applyWithTripleplayAnimAnimator:_animator_ withFloat:time];
    if (aremain <= 0) (void) [((IOSObjectArray *) nil_chk(_curAnims_)) replaceObjectAtIndex:ii withObject:nil];
    remain = [JavaLangMath maxWithFloat:remain withFloat:aremain];
    processed++;
  }
  return processed == 0 ? 0 : remain;
}

- (id)initWithTripleplayAnimAnimationArray:(IOSObjectArray *)capture$0 {
  if ((self = [super init])) {
    val$groupAnims_ = capture$0;
    _curAnims_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(val$groupAnims_)) count] type:[IOSClass classWithClass:[TripleplayAnimAnimation class]]];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimGroup_$1 *typedCopy = (TripleplayAnimAnimGroup_$1 *) copy;
  typedCopy._animator = _animator_;
  typedCopy._curAnims = _curAnims_;
  typedCopy.val$groupAnims = val$groupAnims_;
}

@end

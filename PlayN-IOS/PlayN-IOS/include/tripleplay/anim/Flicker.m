//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/anim/Flicker.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Math.h"
#import "playn/core/Pointer.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/MathUtil.h"
#import "react/Signal.h"
#import "tripleplay/anim/Animation.h"
#import "tripleplay/anim/Flicker.h"
#import "tripleplay/util/Interpolator.h"

@implementation TripleplayAnimFlicker

@synthesize min = min_;
@synthesize max = max_;
@synthesize position = position_;
@synthesize clicked = clicked_;
@synthesize DRAGGING = DRAGGING_;
@synthesize SCROLLING = SCROLLING_;
@synthesize DECELERATE = DECELERATE_;
@synthesize SNAPBACK = SNAPBACK_;
@synthesize EASEBACK = EASEBACK_;
@synthesize STOPPED = STOPPED_;
@synthesize _state = _state_;
@synthesize _lastTime = _lastTime_;
@synthesize _vel = _vel_;
@synthesize _accel = _accel_;
@synthesize _origPos = _origPos_;
@synthesize _start = _start_;
@synthesize _cur = _cur_;
@synthesize _prev = _prev_;
@synthesize _curStamp = _curStamp_;
@synthesize _prevStamp = _prevStamp_;
@synthesize _maxDelta = _maxDelta_;
@synthesize _minFlickExceeded = _minFlickExceeded_;

- (id)initWithFloat:(float)initial
          withFloat:(float)min
          withFloat:(float)max {
  if ((self = [super init])) {
    clicked_ = ((ReactSignal *) [ReactSignal create]);
    DRAGGING_ = [[TripleplayAnimFlicker_$2 alloc] initWithTripleplayAnimFlicker:self];
    SCROLLING_ = [[TripleplayAnimFlicker_$3 alloc] initWithTripleplayAnimFlicker:self];
    DECELERATE_ = [[TripleplayAnimFlicker_$4 alloc] initWithTripleplayAnimFlicker:self];
    SNAPBACK_ = [[TripleplayAnimFlicker_$5 alloc] initWithTripleplayAnimFlicker:self];
    EASEBACK_ = [[TripleplayAnimFlicker_$6 alloc] initWithTripleplayAnimFlicker:self];
    STOPPED_ = [[TripleplayAnimFlicker_$7 alloc] initWithTripleplayAnimFlicker:self];
    _state_ = STOPPED_;
    self.position = initial;
    self.min = min;
    self.max = max;
  }
  return self;
}

- (id<TripleplayAnimAnimation_Value>)posValue {
  return [[TripleplayAnimFlicker_$1 alloc] initWithTripleplayAnimFlicker:self];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  float now = [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) time], dt = now - _lastTime_;
  if (_vel_ != 0) position_ = position_ + _vel_ * dt;
  [((TripleplayAnimFlicker_State *) NIL_CHK(_state_)) paintWithFloat:dt];
  _lastTime_ = now;
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  _vel_ = 0;
  _maxDelta_ = 0;
  _minFlickExceeded_ = NO;
  _origPos_ = position_;
  _start_ = _prev_ = _cur_ = [self getPositionWithPlaynCorePointer_Event:event];
  _prevStamp_ = 0;
  _curStamp_ = [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time];
  [self setStateWithTripleplayAnimFlicker_State:DRAGGING_];
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  _prev_ = _cur_;
  _prevStamp_ = _curStamp_;
  _cur_ = [self getPositionWithPlaynCorePointer_Event:event];
  _curStamp_ = [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time];
  float delta = _cur_ - _start_;
  position_ = _origPos_ + delta;
  if (![self allowRebound]) position_ = [PythagorasFMathUtil clampWithFloat:position_ withFloat:min_ withFloat:max_];
  else if (position_ < min_) position_ += (min_ - position_) * [self overFraction];
  else if (position_ > max_) position_ -= (position_ - max_) * [self overFraction];
  float absDelta = [JavaLangMath absWithFloat:delta];
  if (!_minFlickExceeded_ && absDelta > [self minFlickDelta]) {
    _minFlickExceeded_ = YES;
    [self minFlickExceeded];
  }
  _maxDelta_ = [JavaLangMath maxWithFloat:absDelta withFloat:_maxDelta_];
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (_maxDelta_ < [self maxClickDelta]) [((ReactSignal *) NIL_CHK(clicked_)) emitWithId:event];
  else {
    float dragTime = (float) (_curStamp_ - _prevStamp_);
    float delta = _cur_ - _prev_;
    float signum = [JavaLangMath signumWithFloat:delta];
    float dragVel = [JavaLangMath absWithFloat:delta] / dragTime;
    if (position_ < min_ || position_ > max_) [self setStateWithTripleplayAnimFlicker_State:EASEBACK_];
    else if (dragVel > [self flickVelThresh] && _minFlickExceeded_) {
      _vel_ = signum * [JavaLangMath minWithFloat:[self maxFlickVel] withFloat:dragVel * [self flickXfer]];
      _accel_ = -signum * [self friction];
      [self setStateWithTripleplayAnimFlicker_State:SCROLLING_];
    }
    else [self setStateWithTripleplayAnimFlicker_State:STOPPED_];
  }
}

- (float)getPositionWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  return [((id<PlaynCorePointer_Event>) NIL_CHK(event)) y];
}

- (float)friction {
  return 0.0015f;
}

- (float)flickVelThresh {
  return 0.5f;
}

- (float)flickXfer {
  return 0.9f;
}

- (float)maxFlickVel {
  return 1.4f;
}

- (float)maxClickDelta {
  return 5;
}

- (float)minFlickDelta {
  return 10;
}

- (void)minFlickExceeded {
}

- (BOOL)allowRebound {
  return YES;
}

- (float)overFraction {
  return 0.5f;
}

- (float)easebackTime {
  return 500;
}

- (float)decelerateSnap {
  return 5;
}

- (void)setStateWithTripleplayAnimFlicker_State:(TripleplayAnimFlicker_State *)state {
  _state_ = state;
  [((TripleplayAnimFlicker_State *) NIL_CHK(state)) becameActive];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimFlicker *typedCopy = (TripleplayAnimFlicker *) copy;
  typedCopy.min = min_;
  typedCopy.max = max_;
  typedCopy.position = position_;
  typedCopy.clicked = clicked_;
  typedCopy.DRAGGING = DRAGGING_;
  typedCopy.SCROLLING = SCROLLING_;
  typedCopy.DECELERATE = DECELERATE_;
  typedCopy.SNAPBACK = SNAPBACK_;
  typedCopy.EASEBACK = EASEBACK_;
  typedCopy.STOPPED = STOPPED_;
  typedCopy._state = _state_;
  typedCopy._lastTime = _lastTime_;
  typedCopy._vel = _vel_;
  typedCopy._accel = _accel_;
  typedCopy._origPos = _origPos_;
  typedCopy._start = _start_;
  typedCopy._cur = _cur_;
  typedCopy._prev = _prev_;
  typedCopy._curStamp = _curStamp_;
  typedCopy._prevStamp = _prevStamp_;
  typedCopy._maxDelta = _maxDelta_;
  typedCopy._minFlickExceeded = _minFlickExceeded_;
}

@end
@implementation TripleplayAnimFlicker_$1

@synthesize this$0 = this$0_;

- (float)initial OBJC_METHOD_FAMILY_NONE {
  return this$0_.position;
}

- (void)setWithFloat:(float)value {
  this$0_.position = value;
}

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimFlicker_$1 *typedCopy = (TripleplayAnimFlicker_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayAnimFlicker_State

- (void)becameActive {
}

- (void)paintWithFloat:(float)dt {
}

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  return [super init];
}

@end
@implementation TripleplayAnimFlicker_$2

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  return [super initWithTripleplayAnimFlicker:outer$];
}

@end
@implementation TripleplayAnimFlicker_$3

@synthesize this$1 = this$1_;

- (void)paintWithFloat:(float)dt {
  float prevVel = this$1_._vel;
  this$1_._vel += this$1_._accel * dt;
  if ([JavaLangMath signumWithFloat:prevVel] != [JavaLangMath signumWithFloat:this$1_._vel]) [this$1_ setStateWithTripleplayAnimFlicker_State:this$1_.STOPPED];
  else if (this$1_.position < this$1_.min || this$1_.position > this$1_.max) [this$1_ setStateWithTripleplayAnimFlicker_State:[this$1_ allowRebound] ? this$1_.DECELERATE : this$1_.STOPPED];
}

- (NSString *)description {
  return @"SCROLLING";
}

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  if ((self = [super initWithTripleplayAnimFlicker:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimFlicker_$3 *typedCopy = (TripleplayAnimFlicker_$3 *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation TripleplayAnimFlicker_$4

@synthesize this$1 = this$1_;

- (void)paintWithFloat:(float)dt {
  float retpix = (this$1_.position < this$1_.min) ? (this$1_.min - this$1_.position) : (this$1_.max - this$1_.position);
  this$1_._accel = retpix / (1000 * [this$1_ decelerateSnap]);
  float prevVel = this$1_._vel;
  this$1_._vel += this$1_._accel * dt;
  if ([JavaLangMath signumWithFloat:prevVel] != [JavaLangMath signumWithFloat:this$1_._vel]) [this$1_ setStateWithTripleplayAnimFlicker_State:this$1_.SNAPBACK];
}

- (NSString *)description {
  return @"DECELERATE";
}

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  if ((self = [super initWithTripleplayAnimFlicker:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimFlicker_$4 *typedCopy = (TripleplayAnimFlicker_$4 *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation TripleplayAnimFlicker_$5

@synthesize this$1 = this$1_;
@synthesize _snapdist = _snapdist_;

- (void)becameActive {
  this$1_._vel = 0;
  _snapdist_ = (this$1_.position < this$1_.min) ? (this$1_.min - this$1_.position) : (this$1_.max - this$1_.position);
}

- (void)paintWithFloat:(float)dt {
  float retpix = (this$1_.position < this$1_.min) ? (this$1_.min - this$1_.position) : (this$1_.max - this$1_.position);
  float retpct = retpix / _snapdist_;
  if (retpct > 0.7f) this$1_._vel += this$1_._accel * dt;
  else [this$1_ setStateWithTripleplayAnimFlicker_State:this$1_.EASEBACK];
}

- (NSString *)description {
  return @"SNAPBACK";
}

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  if ((self = [super initWithTripleplayAnimFlicker:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimFlicker_$5 *typedCopy = (TripleplayAnimFlicker_$5 *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy._snapdist = _snapdist_;
}

@end
@implementation TripleplayAnimFlicker_$6

@synthesize this$1 = this$1_;
@synthesize _time = _time_;
@synthesize _spos = _spos_;
@synthesize _delta = _delta_;

- (void)becameActive {
  this$1_._vel = 0;
  _spos_ = this$1_.position;
  _delta_ = 0;
  _time_ = [this$1_ easebackTime];
}

- (void)paintWithFloat:(float)dt {
  _delta_ += dt;
  float target = (this$1_.position <= this$1_.min) ? this$1_.min : this$1_.max;
  if (_delta_ > _time_) {
    this$1_.position = target;
    [this$1_ setStateWithTripleplayAnimFlicker_State:this$1_.STOPPED];
  }
  else {
    this$1_.position = [((TripleplayUtilInterpolator *) NIL_CHK([TripleplayUtilInterpolator EASE_OUT])) applyWithFloat:_spos_ withFloat:target - _spos_ withFloat:_delta_ withFloat:_time_];
  }
}

- (NSString *)description {
  return @"EASEBACK";
}

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  if ((self = [super initWithTripleplayAnimFlicker:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimFlicker_$6 *typedCopy = (TripleplayAnimFlicker_$6 *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy._time = _time_;
  typedCopy._spos = _spos_;
  typedCopy._delta = _delta_;
}

@end
@implementation TripleplayAnimFlicker_$7

@synthesize this$1 = this$1_;

- (void)becameActive {
  this$1_.position = [PythagorasFMathUtil clampWithFloat:this$1_.position withFloat:this$1_.min withFloat:this$1_.max];
  this$1_._vel = 0;
}

- (NSString *)description {
  return @"STOPPED";
}

- (id)initWithTripleplayAnimFlicker:(TripleplayAnimFlicker *)outer$ {
  if ((self = [super initWithTripleplayAnimFlicker:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimFlicker_$7 *typedCopy = (TripleplayAnimFlicker_$7 *) copy;
  typedCopy.this$1 = this$1_;
}

@end

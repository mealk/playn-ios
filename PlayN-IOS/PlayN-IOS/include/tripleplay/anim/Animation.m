//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/anim/Animation.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Runnable.h"
#include "java/util/Random.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/Layer.h"
#include "pythagoras/f/XY.h"
#include "tripleplay/anim/AnimBuilder.h"
#include "tripleplay/anim/Animation.h"
#include "tripleplay/anim/Animator.h"
#include "tripleplay/anim/Flipbook.h"
#include "tripleplay/util/Frames.h"
#include "tripleplay/util/Interpolator.h"

@implementation TripleplayAnimAnimation

static JavaUtilRandom * TripleplayAnimAnimation_RANDS_;

@synthesize _start = _start_;
@synthesize _root = _root_;
@synthesize _current = _current_;
@synthesize _next = _next_;
@synthesize _canceled = _canceled_;

+ (JavaUtilRandom *)RANDS {
  return TripleplayAnimAnimation_RANDS_;
}

- (TripleplayAnimAnimBuilder *)then {
  return [[TripleplayAnimAnimation_$1 alloc] initWithTripleplayAnimAnimation:self];
}

- (id<TripleplayAnimAnimation_Handle>)handle {
  return [[TripleplayAnimAnimation_$2 alloc] initWithTripleplayAnimAnimation:self];
}

- (id)init {
  if ((self = [super init])) {
    _root_ = self;
  }
  return self;
}

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  _start_ = time;
  _current_ = self;
}

- (float)applyWithTripleplayAnimAnimator:(TripleplayAnimAnimator *)animator
                               withFloat:(float)time {
  if (_canceled_) return 0;
  float remain = [((TripleplayAnimAnimation *) nil_chk(_current_)) applyWithFloat:time];
  if (remain > 0) return remain;
  while (remain <= 0) {
    if (_canceled_) return 0;
    _current_ = [((TripleplayAnimAnimation *) nil_chk(_current_)) next];
    if (_current_ == nil) return remain;
    [((TripleplayAnimAnimation *) nil_chk(_current_)) init__WithFloat:time + remain];
    remain = [((TripleplayAnimAnimation *) nil_chk(_current_)) applyWithFloat:time];
  }
  return remain;
}

- (void)cancel {
  _canceled_ = YES;
}

- (float)applyWithFloat:(float)time {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TripleplayAnimAnimation *)next {
  return _next_;
}

- (NSString *)description {
  NSString *name = [[self getClass] getName];
  name = [((NSString *) nil_chk(name)) substring:[((NSString *) nil_chk(name)) lastIndexOfString:@"."] + 1];
  return [NSString stringWithFormat:@"%@:%d start:%f", name, (int) [self hash], _start_];
}

+ (void)initialize {
  if (self == [TripleplayAnimAnimation class]) {
    TripleplayAnimAnimation_RANDS_ = [[JavaUtilRandom alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation *typedCopy = (TripleplayAnimAnimation *) copy;
  typedCopy._start = _start_;
  typedCopy._root = _root_;
  typedCopy._current = _current_;
  typedCopy._next = _next_;
  typedCopy._canceled = _canceled_;
}

@end
@implementation TripleplayAnimAnimation_Flip

@synthesize _target = _target_;
@synthesize _book = _book_;
@synthesize _curIdx = _curIdx_;

- (id)initWithPlaynCoreImageLayer:(id<PlaynCoreImageLayer>)target
       withTripleplayAnimFlipbook:(TripleplayAnimFlipbook *)book {
  if ((self = [super init])) {
    _target_ = target;
    _book_ = book;
  }
  return self;
}

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  [super init__WithFloat:time];
  [self setFrameWithInt:0];
}

- (float)applyWithFloat:(float)time {
  float dt = time - _start_;
  int newIdx = _curIdx_;
  IOSFloatArray *frameEnds = ((TripleplayAnimFlipbook *) nil_chk(_book_)).frameEnds;
  float remain = [((IOSFloatArray *) nil_chk(frameEnds)) floatAtIndex:(int) [((IOSFloatArray *) nil_chk(frameEnds)) count] - 1] - dt;
  if (remain < 0) return remain;
  while ([((IOSFloatArray *) nil_chk(frameEnds)) floatAtIndex:newIdx] < dt) newIdx++;
  if (newIdx != _curIdx_) [self setFrameWithInt:newIdx];
  return remain;
}

- (void)setFrameWithInt:(int)idx {
  [((id<TripleplayUtilFrames>) nil_chk(((TripleplayAnimFlipbook *) nil_chk(_book_)).frames)) applyWithInt:[((IOSIntArray *) nil_chk(((TripleplayAnimFlipbook *) nil_chk(_book_)).frameIndexes)) intAtIndex:idx] withPlaynCoreImageLayer:_target_];
  _curIdx_ = idx;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Flip *typedCopy = (TripleplayAnimAnimation_Flip *) copy;
  typedCopy._target = _target_;
  typedCopy._book = _book_;
  typedCopy._curIdx = _curIdx_;
}

@end
@implementation TripleplayAnimAnimation_Interped

@synthesize _interp = _interp_;
@synthesize _duration = _duration_;

- (id)using__WithTripleplayUtilInterpolator:(TripleplayUtilInterpolator *)interp {
  _interp_ = interp;
  id tthis = (id) self;
  return tthis;
}

- (id)linear {
  return [self using__WithTripleplayUtilInterpolator:[TripleplayUtilInterpolator LINEAR]];
}

- (id)easeIn {
  return [self using__WithTripleplayUtilInterpolator:[TripleplayUtilInterpolator EASE_IN]];
}

- (id)easeOut {
  return [self using__WithTripleplayUtilInterpolator:[TripleplayUtilInterpolator EASE_OUT]];
}

- (id)easeInOut {
  return [self using__WithTripleplayUtilInterpolator:[TripleplayUtilInterpolator EASE_INOUT]];
}

- (id)inWithFloat:(float)duration {
  _duration_ = duration;
  id tthis = (id) self;
  return tthis;
}

- (id)init {
  if ((self = [super init])) {
    _interp_ = [TripleplayUtilInterpolator LINEAR];
    _duration_ = 1000;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Interped *typedCopy = (TripleplayAnimAnimation_Interped *) copy;
  typedCopy._interp = _interp_;
  typedCopy._duration = _duration_;
}

@end
@implementation TripleplayAnimAnimation_One

@synthesize _target = _target_;
@synthesize _from = _from_;
@synthesize _to = _to_;

- (id)initWithTripleplayAnimAnimation_Value:(id<TripleplayAnimAnimation_Value>)target {
  if ((self = [super init])) {
    _from_ = JavaLangFloat_MIN_VALUE;
    _target_ = target;
  }
  return self;
}

- (TripleplayAnimAnimation_One *)fromWithFloat:(float)value {
  _from_ = value;
  return self;
}

- (TripleplayAnimAnimation_One *)toWithFloat:(float)value {
  _to_ = value;
  return self;
}

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  [super init__WithFloat:time];
  if (_from_ == JavaLangFloat_MIN_VALUE) _from_ = [((id<TripleplayAnimAnimation_Value>) nil_chk(_target_)) initial];
}

- (float)applyWithFloat:(float)time {
  float dt = time - _start_;
  [((id<TripleplayAnimAnimation_Value>) nil_chk(_target_)) setWithFloat:(dt < _duration_) ? [((TripleplayUtilInterpolator *) nil_chk(_interp_)) applyWithFloat:_from_ withFloat:_to_ - _from_ withFloat:dt withFloat:_duration_] : _to_];
  return _duration_ - dt;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@ start:%f to %f", [[self getClass] getName], _start_, _to_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_One *typedCopy = (TripleplayAnimAnimation_One *) copy;
  typedCopy._target = _target_;
  typedCopy._from = _from_;
  typedCopy._to = _to_;
}

@end
@implementation TripleplayAnimAnimation_Two

@synthesize _x = _x_;
@synthesize _y = _y_;
@synthesize _fromx = _fromx_;
@synthesize _fromy = _fromy_;
@synthesize _tox = _tox_;
@synthesize _toy = _toy_;

- (id)initWithTripleplayAnimAnimation_Value:(id<TripleplayAnimAnimation_Value>)x
          withTripleplayAnimAnimation_Value:(id<TripleplayAnimAnimation_Value>)y {
  if ((self = [super init])) {
    _fromx_ = JavaLangFloat_MIN_VALUE;
    _fromy_ = JavaLangFloat_MIN_VALUE;
    _x_ = x;
    _y_ = y;
  }
  return self;
}

- (TripleplayAnimAnimation_Two *)fromWithFloat:(float)fromx
                                     withFloat:(float)fromy {
  _fromx_ = fromx;
  _fromy_ = fromy;
  return self;
}

- (TripleplayAnimAnimation_Two *)fromWithPythagorasFXY:(id<PythagorasFXY>)pos {
  return [self fromWithFloat:[((id<PythagorasFXY>) nil_chk(pos)) x] withFloat:[((id<PythagorasFXY>) nil_chk(pos)) y]];
}

- (TripleplayAnimAnimation_Two *)toWithFloat:(float)tox
                                   withFloat:(float)toy {
  _tox_ = tox;
  _toy_ = toy;
  return self;
}

- (TripleplayAnimAnimation_Two *)toWithPythagorasFXY:(id<PythagorasFXY>)pos {
  return [self toWithFloat:[((id<PythagorasFXY>) nil_chk(pos)) x] withFloat:[((id<PythagorasFXY>) nil_chk(pos)) y]];
}

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  [super init__WithFloat:time];
  if (_fromx_ == JavaLangFloat_MIN_VALUE) _fromx_ = [((id<TripleplayAnimAnimation_Value>) nil_chk(_x_)) initial];
  if (_fromy_ == JavaLangFloat_MIN_VALUE) _fromy_ = [((id<TripleplayAnimAnimation_Value>) nil_chk(_y_)) initial];
}

- (float)applyWithFloat:(float)time {
  float dt = time - _start_;
  if (dt < _duration_) {
    [((id<TripleplayAnimAnimation_Value>) nil_chk(_x_)) setWithFloat:[((TripleplayUtilInterpolator *) nil_chk(_interp_)) applyWithFloat:_fromx_ withFloat:_tox_ - _fromx_ withFloat:dt withFloat:_duration_]];
    [((id<TripleplayAnimAnimation_Value>) nil_chk(_y_)) setWithFloat:[((TripleplayUtilInterpolator *) nil_chk(_interp_)) applyWithFloat:_fromy_ withFloat:_toy_ - _fromy_ withFloat:dt withFloat:_duration_]];
  }
  else {
    [((id<TripleplayAnimAnimation_Value>) nil_chk(_x_)) setWithFloat:_tox_];
    [((id<TripleplayAnimAnimation_Value>) nil_chk(_y_)) setWithFloat:_toy_];
  }
  return _duration_ - dt;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Two *typedCopy = (TripleplayAnimAnimation_Two *) copy;
  typedCopy._x = _x_;
  typedCopy._y = _y_;
  typedCopy._fromx = _fromx_;
  typedCopy._fromy = _fromy_;
  typedCopy._tox = _tox_;
  typedCopy._toy = _toy_;
}

@end
@implementation TripleplayAnimAnimation_Delay

@synthesize _duration = _duration_;

- (id)initWithFloat:(float)duration {
  if ((self = [super init])) {
    _duration_ = duration;
  }
  return self;
}

- (float)applyWithFloat:(float)time {
  return _start_ + _duration_ - time;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Delay *typedCopy = (TripleplayAnimAnimation_Delay *) copy;
  typedCopy._duration = _duration_;
}

@end
@implementation TripleplayAnimAnimation_Action

@synthesize _action = _action_;

- (id)initWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  if ((self = [super init])) {
    _action_ = action;
  }
  return self;
}

- (float)applyWithFloat:(float)time {
  [((id<JavaLangRunnable>) nil_chk(_action_)) run];
  return _start_ - time;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Action *typedCopy = (TripleplayAnimAnimation_Action *) copy;
  typedCopy._action = _action_;
}

@end
@implementation TripleplayAnimAnimation_Repeat

@synthesize _layer = _layer_;

- (id)initWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  if ((self = [super init])) {
    _layer_ = layer;
  }
  return self;
}

- (TripleplayAnimAnimBuilder *)then {
  return [[TripleplayAnimAnimation_Repeat_$1 alloc] initWithTripleplayAnimAnimation_Repeat:self];
}

- (float)applyWithFloat:(float)time {
  return _start_ - time;
}

- (TripleplayAnimAnimation *)next {
  return ([((id<PlaynCoreLayer>) nil_chk(_layer_)) parent] == nil) ? nil : _next_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Repeat *typedCopy = (TripleplayAnimAnimation_Repeat *) copy;
  typedCopy._layer = _layer_;
}

@end
@implementation TripleplayAnimAnimation_ChainBuilder

@synthesize this$0 = this$0_;
@synthesize _added = _added_;

- (id)addWithId:(TripleplayAnimAnimation *)anim {
  if (_added_) @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot add multiple animations off the same then()"];
  _added_ = YES;
  ((TripleplayAnimAnimation *) nil_chk(anim))._root = this$0_._root;
  ((TripleplayAnimAnimation *) nil_chk(anim))._next = [self next];
  this$0_._next = anim;
  return anim;
}

- (TripleplayAnimAnimation *)next {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithTripleplayAnimAnimation:(TripleplayAnimAnimation *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_ChainBuilder *typedCopy = (TripleplayAnimAnimation_ChainBuilder *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._added = _added_;
}

@end
@implementation TripleplayAnimAnimation_Repeat_$1

@synthesize this$1 = this$1_;

- (TripleplayAnimAnimation *)next {
  return this$1_;
}

- (id)initWithTripleplayAnimAnimation_Repeat:(TripleplayAnimAnimation_Repeat *)outer$ {
  if ((self = [super initWithTripleplayAnimAnimation:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Repeat_$1 *typedCopy = (TripleplayAnimAnimation_Repeat_$1 *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation TripleplayAnimAnimation_Shake

@synthesize _layer = _layer_;
@synthesize _underX = _underX_;
@synthesize _overX = _overX_;
@synthesize _underY = _underY_;
@synthesize _overY = _overY_;
@synthesize _cycleTimeX = _cycleTimeX_;
@synthesize _cycleTimeY = _cycleTimeY_;
@synthesize _startX = _startX_;
@synthesize _startY = _startY_;
@synthesize _timeX = _timeX_;
@synthesize _timeY = _timeY_;
@synthesize _curMinX = _curMinX_;
@synthesize _curRangeX = _curRangeX_;
@synthesize _curMinY = _curMinY_;
@synthesize _curRangeY = _curRangeY_;

- (id)initWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  if ((self = [super init])) {
    _underX_ = -2;
    _overX_ = 2;
    _underY_ = -2;
    _overY_ = 2;
    _cycleTimeX_ = 100;
    _cycleTimeY_ = 100;
    _layer_ = layer;
  }
  return self;
}

- (TripleplayAnimAnimation_Shake *)boundsWithFloat:(float)underX
                                         withFloat:(float)overX
                                         withFloat:(float)underY
                                         withFloat:(float)overY {
  _underX_ = underX;
  _overX_ = overX;
  _underY_ = underY;
  _overY_ = overY;
  return self;
}

- (TripleplayAnimAnimation_Shake *)cycleTimeWithFloat:(float)millis {
  return [self cycleTimeWithFloat:millis withFloat:millis];
}

- (TripleplayAnimAnimation_Shake *)cycleTimeWithFloat:(float)millisX
                                            withFloat:(float)millisY {
  _cycleTimeX_ = millisX;
  _cycleTimeY_ = millisY;
  return self;
}

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  [super init__WithFloat:time];
  _startX_ = [((id<PlaynCoreLayer>) nil_chk(_layer_)) tx];
  _startY_ = [((id<PlaynCoreLayer>) nil_chk(_layer_)) ty];
  _curMinX_ = _startX_;
  if (_overX_ == 0) _curRangeX_ = _underX_;
  else if (_underX_ == 0) _curRangeX_ = _overX_;
  else _curRangeX_ = [((JavaUtilRandom *) nil_chk([TripleplayAnimAnimation RANDS])) nextBoolean] ? _overX_ : _underX_;
  _curMinY_ = _startY_;
  if (_overY_ == 0) _curRangeY_ = _underY_;
  else if (_underY_ == 0) _curRangeY_ = _overY_;
  else _curRangeY_ = [((JavaUtilRandom *) nil_chk([TripleplayAnimAnimation RANDS])) nextBoolean] ? _overY_ : _underY_;
}

- (float)applyWithFloat:(float)time {
  float dt = time - _start_, nx, ny;
  if (dt < _duration_) {
    float dtx = time - _timeX_, dty = time - _timeY_;
    if (dtx < _cycleTimeX_) nx = [((TripleplayUtilInterpolator *) nil_chk(_interp_)) applyWithFloat:_curMinX_ withFloat:_curRangeX_ withFloat:dtx withFloat:_cycleTimeX_];
    else {
      nx = _curMinX_ + _curRangeX_;
      _curMinX_ = nx;
      float rangeX = _startX_ + (_curRangeX_ < 0 ? _overX_ : _underX_) - nx;
      _curRangeX_ = rangeX / 2 + [((JavaUtilRandom *) nil_chk([TripleplayAnimAnimation RANDS])) nextFloat] * rangeX / 2;
      _timeX_ = time;
    }
    if (dty < _cycleTimeY_) ny = [((TripleplayUtilInterpolator *) nil_chk(_interp_)) applyWithFloat:_curMinY_ withFloat:_curRangeY_ withFloat:dty withFloat:_cycleTimeY_];
    else {
      ny = _curMinY_ + _curRangeY_;
      _curMinY_ = ny;
      float rangeY = _startY_ + (_curRangeY_ < 0 ? _overY_ : _underY_) - ny;
      _curRangeY_ = rangeY / 2 + [((JavaUtilRandom *) nil_chk([TripleplayAnimAnimation RANDS])) nextFloat] * rangeY / 2;
      _timeY_ = time;
    }
  }
  else {
    nx = _startX_;
    ny = _startY_;
  }
  (void) [((id<PlaynCoreLayer>) nil_chk(_layer_)) setTranslationWithFloat:nx withFloat:ny];
  return _duration_ - dt;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_Shake *typedCopy = (TripleplayAnimAnimation_Shake *) copy;
  typedCopy._layer = _layer_;
  typedCopy._underX = _underX_;
  typedCopy._overX = _overX_;
  typedCopy._underY = _underY_;
  typedCopy._overY = _overY_;
  typedCopy._cycleTimeX = _cycleTimeX_;
  typedCopy._cycleTimeY = _cycleTimeY_;
  typedCopy._startX = _startX_;
  typedCopy._startY = _startY_;
  typedCopy._timeX = _timeX_;
  typedCopy._timeY = _timeY_;
  typedCopy._curMinX = _curMinX_;
  typedCopy._curRangeX = _curRangeX_;
  typedCopy._curMinY = _curMinY_;
  typedCopy._curRangeY = _curRangeY_;
}

@end
@implementation TripleplayAnimAnimation_$1

@synthesize this$1 = this$1_;

- (TripleplayAnimAnimation *)next {
  return this$1_._next;
}

- (id)initWithTripleplayAnimAnimation:(TripleplayAnimAnimation *)outer$ {
  if ((self = [super initWithTripleplayAnimAnimation:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_$1 *typedCopy = (TripleplayAnimAnimation_$1 *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation TripleplayAnimAnimation_$2

@synthesize this$0 = this$0_;

- (void)cancel {
  [((TripleplayAnimAnimation *) nil_chk(this$0_._root)) cancel];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"handle:%@", this$0_];
}

- (id)initWithTripleplayAnimAnimation:(TripleplayAnimAnimation *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimation_$2 *typedCopy = (TripleplayAnimAnimation_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

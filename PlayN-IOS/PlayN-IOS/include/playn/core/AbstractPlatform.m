//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/AbstractPlatform.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "playn/core/AbstractPlatform.h"
#include "playn/core/Analytics.h"
#include "playn/core/Assets.h"
#include "playn/core/Audio.h"
#include "playn/core/Game.h"
#include "playn/core/Graphics.h"
#include "playn/core/Json.h"
#include "playn/core/Keyboard.h"
#include "playn/core/Log.h"
#include "playn/core/Mouse.h"
#include "playn/core/Net.h"
#include "playn/core/Platform.h"
#include "playn/core/PlayN.h"
#include "playn/core/Pointer.h"
#include "playn/core/RegularExpression.h"
#include "playn/core/Storage.h"
#include "playn/core/Touch.h"
#include "playn/core/UIOverlay.h"
#include "playn/core/UIOverlayStub.h"
#include "playn/core/util/Callback.h"
#include "playn/core/util/RunQueue.h"

@implementation PlaynCoreAbstractPlatform

@synthesize runQueue = runQueue_;
@synthesize log_ = log__;
@synthesize lifecycleListener = lifecycleListener_;

- (void)invokeLaterWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((PlaynCoreUtilRunQueue *) nil_chk(runQueue_)) addWithJavaLangRunnable:runnable];
}

- (void)setLifecycleListenerWithPlaynCorePlayN_LifecycleListener:(id<PlaynCorePlayN_LifecycleListener>)listener {
  lifecycleListener_ = listener;
}

- (id<PlaynCoreLog>)log {
  return log__;
}

- (id<PlaynCoreUIOverlay>)uiOverlay {
  return [[PlaynCoreUIOverlayStub alloc] init];
}

- (void)notifySuccessWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback
                                        withId:(id)result {
  [self invokeLaterWithJavaLangRunnable:[[PlaynCoreAbstractPlatform_$1 alloc] initWithPlaynCoreUtilCallback:callback withId:result]];
}

- (void)notifyFailureWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)callback
                         withJavaLangThrowable:(JavaLangThrowable *)error {
  [self invokeLaterWithJavaLangRunnable:[[PlaynCoreAbstractPlatform_$2 alloc] initWithPlaynCoreUtilCallback:callback withJavaLangThrowable:error]];
}

- (void)invokeAsyncWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)initWithPlaynCoreLog:(id<PlaynCoreLog>)log {
  if ((self = [super init])) {
    self.log_ = log;
    self.runQueue = [[PlaynCoreUtilRunQueue alloc] initWithPlaynCoreLog:log];
  }
  return self;
}

- (void)onPause {
  if (lifecycleListener_ != nil) {
    @try {
      [lifecycleListener_ onPause];
    }
    @catch (JavaLangException *e) {
      [((id<PlaynCoreLog>) nil_chk(log__)) warnWithNSString:@"LifecycleListener.onPause failure" withJavaLangThrowable:e];
    }
  }
}

- (void)onResume {
  if (lifecycleListener_ != nil) {
    @try {
      [lifecycleListener_ onResume];
    }
    @catch (JavaLangException *e) {
      [((id<PlaynCoreLog>) nil_chk(log__)) warnWithNSString:@"LifecycleListener.onResume failure" withJavaLangThrowable:e];
    }
  }
}

- (void)onExit {
  if (lifecycleListener_ != nil) {
    @try {
      [lifecycleListener_ onExit];
    }
    @catch (JavaLangException *e) {
      [((id<PlaynCoreLog>) nil_chk(log__)) warnWithNSString:@"LifecycleListener.onExit failure" withJavaLangThrowable:e];
    }
  }
}

- (id<PlaynCoreAnalytics>)analytics {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreAssets>)assets {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreAudio>)audio {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreGraphics>)graphics {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreJson>)json {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreKeyboard>)keyboard {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreMouse>)mouse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreNet>)net {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)openURLWithNSString:(NSString *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<PlaynCorePointer>)pointer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)random {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreRegularExpression>)regularExpression {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)runWithPlaynCoreGame:(id<PlaynCoreGame>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setPropagateEventsWithBOOL:(BOOL)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<PlaynCoreStorage>)storage {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)tick {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)time {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreTouch>)touch {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (PlaynCorePlatform_TypeEnum *)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractPlatform *typedCopy = (PlaynCoreAbstractPlatform *) copy;
  typedCopy.runQueue = runQueue_;
  typedCopy.log_ = log__;
  typedCopy.lifecycleListener = lifecycleListener_;
}

@end
@implementation PlaynCoreAbstractPlatform_$1

@synthesize val$callback = val$callback_;
@synthesize val$result = val$result_;

- (void)run {
  [((id<PlaynCoreUtilCallback>) nil_chk(val$callback_)) onSuccessWithId:val$result_];
}

- (id)initWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)capture$0
                             withId:(id)capture$1 {
  if ((self = [super init])) {
    val$callback_ = capture$0;
    val$result_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractPlatform_$1 *typedCopy = (PlaynCoreAbstractPlatform_$1 *) copy;
  typedCopy.val$callback = val$callback_;
  typedCopy.val$result = val$result_;
}

@end
@implementation PlaynCoreAbstractPlatform_$2

@synthesize val$callback = val$callback_;
@synthesize val$error = val$error_;

- (void)run {
  [((id<PlaynCoreUtilCallback>) nil_chk(val$callback_)) onFailureWithJavaLangThrowable:val$error_];
}

- (id)initWithPlaynCoreUtilCallback:(id<PlaynCoreUtilCallback>)capture$0
              withJavaLangThrowable:(JavaLangThrowable *)capture$1 {
  if ((self = [super init])) {
    val$callback_ = capture$0;
    val$error_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAbstractPlatform_$2 *typedCopy = (PlaynCoreAbstractPlatform_$2 *) copy;
  typedCopy.val$callback = val$callback_;
  typedCopy.val$error = val$error_;
}

@end

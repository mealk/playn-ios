//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/AssetWatcher.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Throwable.h"
#include "playn/core/Asserts.h"
#include "playn/core/AssetWatcher.h"
#include "playn/core/Image.h"
#include "playn/core/Sound.h"
#include "playn/core/util/Callback.h"

@implementation PlaynCoreAssetWatcher

@synthesize total = total_;
@synthesize loaded = loaded_;
@synthesize errors = errors_;
@synthesize start_ = start__;
@synthesize listener = listener_;
@synthesize callback = callback_;

- (id)init {
  if ((self = [self initPlaynCoreAssetWatcherWithPlaynCoreAssetWatcher_Listener:nil])) {
    [self start];
  }
  return self;
}

- (id)initPlaynCoreAssetWatcherWithPlaynCoreAssetWatcher_Listener:(PlaynCoreAssetWatcher_Listener *)listener {
  if ((self = [super init])) {
    callback_ = [[PlaynCoreAssetWatcher_$1 alloc] initWithPlaynCoreAssetWatcher:self];
    self.listener = listener;
  }
  return self;
}

- (id)initWithPlaynCoreAssetWatcher_Listener:(PlaynCoreAssetWatcher_Listener *)listener {
  return [self initPlaynCoreAssetWatcherWithPlaynCoreAssetWatcher_Listener:listener];
}

- (void)addWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  [PlaynCoreAsserts checkStateWithBOOL:!start__ || listener_ == nil];
  ++total_;
  [((id<PlaynCoreImage>) nil_chk(image)) addCallbackWithPlaynCoreUtilCallback:callback_];
}

- (void)addWithPlaynCoreSound:(id<PlaynCoreSound>)sound {
  [PlaynCoreAsserts checkStateWithBOOL:!start__ || listener_ == nil];
  ++total_;
  [((id<PlaynCoreSound>) nil_chk(sound)) addCallbackWithPlaynCoreUtilCallback:callback_];
}

- (BOOL)isDone {
  return start__ && (loaded_ + errors_ == total_);
}

- (void)start {
  start__ = YES;
  [self update];
}

- (void)update {
  if (listener_ == nil) return;
  [((PlaynCoreAssetWatcher_Listener *) nil_chk(listener_)) progressWithInt:loaded_ withInt:errors_ withInt:total_];
  if ([self isDone]) [((PlaynCoreAssetWatcher_Listener *) nil_chk(listener_)) done];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAssetWatcher *typedCopy = (PlaynCoreAssetWatcher *) copy;
  typedCopy.total = total_;
  typedCopy.loaded = loaded_;
  typedCopy.errors = errors_;
  typedCopy.start_ = start__;
  typedCopy.listener = listener_;
  typedCopy.callback = callback_;
}

@end
@implementation PlaynCoreAssetWatcher_Listener

- (void)progressWithInt:(int)loaded
                withInt:(int)errors
                withInt:(int)total {
}

- (void)done {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreAssetWatcher_$1

@synthesize this$0 = this$0_;

- (void)onSuccessWithId:(id)resource {
  ++this$0_.loaded;
  [this$0_ update];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)e {
  ++this$0_.errors;
  if (this$0_.listener != nil) [this$0_.listener errorWithJavaLangThrowable:e];
  [this$0_ update];
}

- (id)initWithPlaynCoreAssetWatcher:(PlaynCoreAssetWatcher *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreAssetWatcher_$1 *typedCopy = (PlaynCoreAssetWatcher_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end

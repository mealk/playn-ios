//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/PlayN.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Runnable.h"
#include "playn/core/Analytics.h"
#include "playn/core/Assets.h"
#include "playn/core/Audio.h"
#include "playn/core/Game.h"
#include "playn/core/Graphics.h"
#include "playn/core/Json.h"
#include "playn/core/Keyboard.h"
#include "playn/core/Log.h"
#include "playn/core/Mouse.h"
#include "playn/core/Net.h"
#include "playn/core/Platform.h"
#include "playn/core/PlayN.h"
#include "playn/core/Pointer.h"
#include "playn/core/RegularExpression.h"
#include "playn/core/Storage.h"
#include "playn/core/Touch.h"
#include "playn/core/UIOverlay.h"

@implementation PlaynCorePlayN

static id<PlaynCorePlatform> PlaynCorePlayN_platform__;

+ (void)setPlatform:(id<PlaynCorePlatform>)platform_ {
  PlaynCorePlayN_platform__ = platform_;
}

+ (void)runWithPlaynCoreGame:(id<PlaynCoreGame>)game {
  [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) runWithPlaynCoreGame:game];
}

+ (id<PlaynCorePlatform>)platform {
  return PlaynCorePlayN_platform__;
}

+ (PlaynCorePlatform_TypeEnum *)platformType {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) type];
}

+ (double)currentTime {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) time];
}

+ (int)tick {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) tick];
}

+ (float)random {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) random];
}

+ (void)openURLWithNSString:(NSString *)url {
  [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) openURLWithNSString:url];
}

+ (void)invokeLaterWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) invokeLaterWithJavaLangRunnable:runnable];
}

+ (void)setLifecycleListenerWithPlaynCorePlayN_LifecycleListener:(id<PlaynCorePlayN_LifecycleListener>)listener {
  [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) setLifecycleListenerWithPlaynCorePlayN_LifecycleListener:listener];
}

+ (id<PlaynCoreAudio>)audio {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) audio];
}

+ (id<PlaynCoreGraphics>)graphics {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) graphics];
}

+ (id<PlaynCoreAssets>)assets {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) assets];
}

+ (id<PlaynCoreJson>)json {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) json];
}

+ (id<PlaynCoreKeyboard>)keyboard {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) keyboard];
}

+ (id<PlaynCoreLog>)log {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) log];
}

+ (id<PlaynCoreNet>)net {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) net];
}

+ (id<PlaynCorePointer>)pointer {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) pointer];
}

+ (id<PlaynCoreMouse>)mouse {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) mouse];
}

+ (id<PlaynCoreRegularExpression>)regularExpression {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) regularExpression];
}

+ (id<PlaynCoreTouch>)touch {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) touch];
}

+ (id<PlaynCoreStorage>)storage {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) storage];
}

+ (id<PlaynCoreAnalytics>)analytics {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) analytics];
}

+ (id<PlaynCoreUIOverlay>)uiOverlay {
  return [((id<PlaynCorePlatform>) nil_chk(PlaynCorePlayN_platform__)) uiOverlay];
}

+ (void)setPlatformWithPlaynCorePlatform:(id<PlaynCorePlatform>)platform {
  PlaynCorePlayN_platform__ = platform;
}

- (id)init {
  return [super init];
}

@end

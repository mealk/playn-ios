//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/json/JsonTypedArray.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "playn/core/Json.h"
#include "playn/core/json/JsonTypedArray.h"

@implementation PlaynCoreJsonJsonTypedArray

static id<JavaUtilMap> PlaynCoreJsonJsonTypedArray_getters_;

@synthesize array = array_;
@synthesize getter = getter_;

+ (id<JavaUtilMap>)getters {
  return PlaynCoreJsonJsonTypedArray_getters_;
}

+ (void)setGetters:(id<JavaUtilMap>)getters {
  PlaynCoreJsonJsonTypedArray_getters_ = getters;
}

- (id)initWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                     withIOSClass:(IOSClass *)type {
  if ((self = [super init])) {
    self.array = array;
    id<PlaynCoreJsonJsonTypedArray_Getter> getter = (id<PlaynCoreJsonJsonTypedArray_Getter>) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) getWithId:type];
    if (getter == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Only json types may be used for TypedArray, not '%@'", [((IOSClass *) nil_chk(type)) getName]]];
    }
    self.getter = getter;
  }
  return self;
}

- (int)length {
  return [((id<PlaynCoreJson_Array>) nil_chk(array_)) length];
}

- (id)getWithInt:(int)index {
  return [((id<PlaynCoreJsonJsonTypedArray_Getter>) nil_chk(getter_)) getWithPlaynCoreJson_Array:array_ withInt:index withId:nil];
}

- (id)getWithInt:(int)index
          withId:(id)dflt {
  return [((id<PlaynCoreJsonJsonTypedArray_Getter>) nil_chk(getter_)) getWithPlaynCoreJson_Array:array_ withInt:index withId:dflt];
}

- (id<JavaUtilIterator>)iterator {
  return [[PlaynCoreJsonJsonTypedArray_$8 alloc] initWithPlaynCoreJsonJsonTypedArray:self];
}

+ (void)initialize {
  if (self == [PlaynCoreJsonJsonTypedArray class]) {
    PlaynCoreJsonJsonTypedArray_getters_ = [[JavaUtilHashMap alloc] init];
    {
      (void) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) putWithId:[IOSClass classWithClass:[JavaLangBoolean class]] withId:[[PlaynCoreJsonJsonTypedArray_$1 alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) putWithId:[IOSClass classWithClass:[JavaLangInteger class]] withId:[[PlaynCoreJsonJsonTypedArray_$2 alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) putWithId:[IOSClass classWithClass:[JavaLangDouble class]] withId:[[PlaynCoreJsonJsonTypedArray_$3 alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) putWithId:[IOSClass classWithClass:[JavaLangFloat class]] withId:[[PlaynCoreJsonJsonTypedArray_$4 alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) putWithId:[IOSClass classWithClass:[NSString class]] withId:[[PlaynCoreJsonJsonTypedArray_$5 alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) putWithId:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Array)] withId:[[PlaynCoreJsonJsonTypedArray_$6 alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(PlaynCoreJsonJsonTypedArray_getters_)) putWithId:[IOSClass classWithProtocol:@protocol(PlaynCoreJson_Object)] withId:[[PlaynCoreJsonJsonTypedArray_$7 alloc] init]];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreJsonJsonTypedArray *typedCopy = (PlaynCoreJsonJsonTypedArray *) copy;
  typedCopy.array = array_;
  typedCopy.getter = getter_;
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$1

- (JavaLangBoolean *)getWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                                        withInt:(int)index
                                         withId:(JavaLangBoolean *)dflt {
  return [JavaLangBoolean valueOfWithBOOL:dflt == nil ? [((id<PlaynCoreJson_Array>) nil_chk(array)) getBooleanWithInt:index] : [((id<PlaynCoreJson_Array>) nil_chk(array)) getBooleanWithInt:index withBOOL:[((JavaLangBoolean *) nil_chk(dflt)) booleanValue]]];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$2

- (JavaLangInteger *)getWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                                        withInt:(int)index
                                         withId:(JavaLangInteger *)dflt {
  return [JavaLangInteger valueOfWithInt:dflt == nil ? [((id<PlaynCoreJson_Array>) nil_chk(array)) getIntWithInt:index] : [((id<PlaynCoreJson_Array>) nil_chk(array)) getIntWithInt:index withInt:[((JavaLangInteger *) nil_chk(dflt)) intValue]]];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$3

- (JavaLangDouble *)getWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                                       withInt:(int)index
                                        withId:(JavaLangDouble *)dflt {
  return [JavaLangDouble valueOfWithDouble:dflt == nil ? [((id<PlaynCoreJson_Array>) nil_chk(array)) getDoubleWithInt:index] : [((id<PlaynCoreJson_Array>) nil_chk(array)) getDoubleWithInt:index withDouble:[((JavaLangDouble *) nil_chk(dflt)) doubleValue]]];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$4

- (JavaLangFloat *)getWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                                      withInt:(int)index
                                       withId:(JavaLangFloat *)dflt {
  return [JavaLangFloat valueOfWithFloat:dflt == nil ? [((id<PlaynCoreJson_Array>) nil_chk(array)) getNumberWithInt:index] : [((id<PlaynCoreJson_Array>) nil_chk(array)) getNumberWithInt:index withFloat:[((JavaLangFloat *) nil_chk(dflt)) floatValue]]];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$5

- (NSString *)getWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                                 withInt:(int)index
                                  withId:(NSString *)dflt {
  return [((id<PlaynCoreJson_Array>) nil_chk(array)) getStringWithInt:index withNSString:dflt];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$6

- (id<PlaynCoreJson_Array>)getWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                                              withInt:(int)index
                                               withId:(id<PlaynCoreJson_Array>)dflt {
  return [((id<PlaynCoreJson_Array>) nil_chk(array)) getArrayWithInt:index withPlaynCoreJson_Array:dflt];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$7

- (id<PlaynCoreJson_Object>)getWithPlaynCoreJson_Array:(id<PlaynCoreJson_Array>)array
                                               withInt:(int)index
                                                withId:(id<PlaynCoreJson_Object>)dflt {
  return [((id<PlaynCoreJson_Array>) nil_chk(array)) getObjectWithInt:index withPlaynCoreJson_Object:dflt];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreJsonJsonTypedArray_$8

@synthesize this$0 = this$0_;
@synthesize index = index_;

- (BOOL)hasNext {
  return index_ < [this$0_ length];
}

- (id)next {
  if (index_ >= [this$0_ length]) {
    @throw [[JavaUtilNoSuchElementException alloc] init];
  }
  return [this$0_ getWithInt:index_++];
}

- (void)remove {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)initWithPlaynCoreJsonJsonTypedArray:(PlaynCoreJsonJsonTypedArray *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreJsonJsonTypedArray_$8 *typedCopy = (PlaynCoreJsonJsonTypedArray_$8 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.index = index_;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/TouchImpl.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "playn/core/AbstractLayer.h"
#include "playn/core/Dispatcher.h"
#include "playn/core/Events.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/PlayN.h"
#include "playn/core/Touch.h"
#include "playn/core/TouchImpl.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Transform.h"

@implementation PlaynCoreTouchImpl

static id<PlaynCoreAbstractLayer_Interaction> PlaynCoreTouchImpl_START_;
static id<PlaynCoreAbstractLayer_Interaction> PlaynCoreTouchImpl_MOVE_;
static id<PlaynCoreAbstractLayer_Interaction> PlaynCoreTouchImpl_END_;
static id<PlaynCoreAbstractLayer_Interaction> PlaynCoreTouchImpl_CANCEL_;

@synthesize enabled = enabled_;
@synthesize dispatcher = dispatcher_;
@synthesize listener_ = listener__;
@synthesize activeLayers = activeLayers_;

+ (id<PlaynCoreAbstractLayer_Interaction>)START {
  return PlaynCoreTouchImpl_START_;
}

+ (void)setSTART:(id<PlaynCoreAbstractLayer_Interaction>)START {
  PlaynCoreTouchImpl_START_ = START;
}

+ (id<PlaynCoreAbstractLayer_Interaction>)MOVE {
  return PlaynCoreTouchImpl_MOVE_;
}

+ (void)setMOVE:(id<PlaynCoreAbstractLayer_Interaction>)MOVE {
  PlaynCoreTouchImpl_MOVE_ = MOVE;
}

+ (id<PlaynCoreAbstractLayer_Interaction>)END {
  return PlaynCoreTouchImpl_END_;
}

+ (void)setEND:(id<PlaynCoreAbstractLayer_Interaction>)END {
  PlaynCoreTouchImpl_END_ = END;
}

+ (id<PlaynCoreAbstractLayer_Interaction>)CANCEL {
  return PlaynCoreTouchImpl_CANCEL_;
}

+ (void)setCANCEL:(id<PlaynCoreAbstractLayer_Interaction>)CANCEL {
  PlaynCoreTouchImpl_CANCEL_ = CANCEL;
}

- (BOOL)hasTouch {
  return YES;
}

- (BOOL)isEnabled {
  return enabled_;
}

- (void)setEnabledWithBOOL:(BOOL)enabled {
  self.enabled = enabled;
}

- (id<PlaynCoreTouch_Listener>)listener {
  return listener__;
}

- (void)setListenerWithPlaynCoreTouch_Listener:(id<PlaynCoreTouch_Listener>)listener {
  self.listener_ = listener;
}

- (void)cancelLayerTouchesWithPlaynCoreLayer:(id<PlaynCoreLayer>)except {
  double now = [PlaynCorePlayN currentTime];
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(activeLayers_)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(iter)) next];
    PlaynCoreAbstractLayer *layer = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
    if (layer == except) continue;
    [((id<JavaUtilIterator>) nil_chk(iter)) remove];
    PlaynCoreTouch_Event_Impl *event = [[PlaynCoreTouch_Event_Impl alloc] initWithPlaynCoreEvents_Flags:[[PlaynCoreEvents_Flags_Impl alloc] init] withDouble:now withFloat:0 withFloat:0 withInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey])) intValue]];
    [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:layer withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreTouch_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:PlaynCoreTouchImpl_CANCEL_];
  }
}

- (void)setPropagateEventsWithBOOL:(BOOL)propagate {
  dispatcher_ = [PlaynCoreDispatcher_Util selectWithBOOL:propagate];
}

- (void)onTouchStartWithPlaynCoreTouch_Event_ImplArray:(IOSObjectArray *)touches {
  if (!enabled_) return;
  if (listener__ != nil) [listener__ onTouchStartWithPlaynCoreTouch_EventArray:touches];
  id<PlaynCoreGroupLayer> root = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer];
  if ([((id<PlaynCoreGroupLayer>) nil_chk(root)) interactive]) {
    {
      IOSObjectArray *a__ = touches;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        PlaynCoreTouch_Event_Impl *event = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        PythagorasFPoint *p = [[PythagorasFPoint alloc] initWithFloat:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) x] withFloat:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) y]];
        (void) [((id<PythagorasFTransform>) nil_chk([((id<PlaynCoreGroupLayer>) nil_chk(root)) transform])) inverseTransformWithPythagorasFIPoint:p withPythagorasFPoint:p];
        ((PythagorasFPoint *) nil_chk(p)).x_ += [((id<PlaynCoreGroupLayer>) nil_chk(root)) originX];
        ((PythagorasFPoint *) nil_chk(p)).y_ += [((id<PlaynCoreGroupLayer>) nil_chk(root)) originY];
        PlaynCoreAbstractLayer *hitLayer = (PlaynCoreAbstractLayer *) [((id<PlaynCoreGroupLayer>) nil_chk(root)) hitTestWithPythagorasFPoint:p];
        if (hitLayer != nil) {
          (void) [((id<JavaUtilMap>) nil_chk(activeLayers_)) putWithId:[JavaLangInteger valueOfWithInt:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) id__]] withId:hitLayer];
          [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:hitLayer withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreTouch_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:PlaynCoreTouchImpl_START_];
        }
      }
    }
  }
}

- (void)onTouchMoveWithPlaynCoreTouch_Event_ImplArray:(IOSObjectArray *)touches {
  if (!enabled_) return;
  if (listener__ != nil) [listener__ onTouchMoveWithPlaynCoreTouch_EventArray:touches];
  {
    IOSObjectArray *a__ = touches;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      PlaynCoreTouch_Event_Impl *event = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      PlaynCoreAbstractLayer *activeLayer = [((id<JavaUtilMap>) nil_chk(activeLayers_)) getWithId:[JavaLangInteger valueOfWithInt:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) id__]]];
      if (activeLayer != nil) {
        [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:activeLayer withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreTouch_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:PlaynCoreTouchImpl_MOVE_];
      }
    }
  }
}

- (void)onTouchEndWithPlaynCoreTouch_Event_ImplArray:(IOSObjectArray *)touches {
  if (!enabled_) return;
  if (listener__ != nil) [listener__ onTouchEndWithPlaynCoreTouch_EventArray:touches];
  {
    IOSObjectArray *a__ = touches;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      PlaynCoreTouch_Event_Impl *event = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      PlaynCoreAbstractLayer *activeLayer = [((id<JavaUtilMap>) nil_chk(activeLayers_)) getWithId:[JavaLangInteger valueOfWithInt:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) id__]]];
      if (activeLayer != nil) {
        [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:activeLayer withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreTouch_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:PlaynCoreTouchImpl_END_];
        (void) [((id<JavaUtilMap>) nil_chk(activeLayers_)) removeWithId:[JavaLangInteger valueOfWithInt:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) id__]]];
      }
    }
  }
}

- (void)onTouchCancelWithPlaynCoreTouch_Event_ImplArray:(IOSObjectArray *)touches {
  if (!enabled_) return;
  if (listener__ != nil) [listener__ onTouchCancelWithPlaynCoreTouch_EventArray:touches];
  {
    IOSObjectArray *a__ = touches;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      PlaynCoreTouch_Event_Impl *event = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      PlaynCoreAbstractLayer *activeLayer = [((id<JavaUtilMap>) nil_chk(activeLayers_)) getWithId:[JavaLangInteger valueOfWithInt:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) id__]]];
      if (activeLayer != nil) {
        [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:activeLayer withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreTouch_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:PlaynCoreTouchImpl_CANCEL_];
        (void) [((id<JavaUtilMap>) nil_chk(activeLayers_)) removeWithId:[JavaLangInteger valueOfWithInt:[((PlaynCoreTouch_Event_Impl *) nil_chk(event)) id__]]];
      }
    }
  }
}

- (id)init {
  if ((self = [super init])) {
    enabled_ = YES;
    dispatcher_ = [PlaynCoreDispatcher SINGLE];
    activeLayers_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

+ (void)initialize {
  if (self == [PlaynCoreTouchImpl class]) {
    PlaynCoreTouchImpl_START_ = [[PlaynCoreTouchImpl_$1 alloc] init];
    PlaynCoreTouchImpl_MOVE_ = [[PlaynCoreTouchImpl_$2 alloc] init];
    PlaynCoreTouchImpl_END_ = [[PlaynCoreTouchImpl_$3 alloc] init];
    PlaynCoreTouchImpl_CANCEL_ = [[PlaynCoreTouchImpl_$4 alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreTouchImpl *typedCopy = (PlaynCoreTouchImpl *) copy;
  typedCopy.enabled = enabled_;
  typedCopy.dispatcher = dispatcher_;
  typedCopy.listener_ = listener__;
  typedCopy.activeLayers = activeLayers_;
}

@end
@implementation PlaynCoreTouchImpl_$1

- (void)interactWithId:(id<PlaynCoreTouch_LayerListener>)l
                withId:(PlaynCoreTouch_Event_Impl *)ev {
  [((id<PlaynCoreTouch_LayerListener>) nil_chk(l)) onTouchStartWithPlaynCoreTouch_Event:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreTouchImpl_$2

- (void)interactWithId:(id<PlaynCoreTouch_LayerListener>)l
                withId:(PlaynCoreTouch_Event_Impl *)ev {
  [((id<PlaynCoreTouch_LayerListener>) nil_chk(l)) onTouchMoveWithPlaynCoreTouch_Event:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreTouchImpl_$3

- (void)interactWithId:(id<PlaynCoreTouch_LayerListener>)l
                withId:(PlaynCoreTouch_Event_Impl *)ev {
  [((id<PlaynCoreTouch_LayerListener>) nil_chk(l)) onTouchEndWithPlaynCoreTouch_Event:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreTouchImpl_$4

- (void)interactWithId:(id<PlaynCoreTouch_LayerListener>)l
                withId:(PlaynCoreTouch_Event_Impl *)ev {
  [((id<PlaynCoreTouch_LayerListener>) nil_chk(l)) onTouchCancelWithPlaynCoreTouch_Event:ev];
}

- (id)init {
  return [super init];
}

@end

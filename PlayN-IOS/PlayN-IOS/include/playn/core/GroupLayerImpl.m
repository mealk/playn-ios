//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/GroupLayerImpl.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "playn/core/AbstractLayer.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/GroupLayerImpl.h"
#include "playn/core/Layer.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Transform.h"

@implementation PlaynCoreGroupLayerImpl

@synthesize children = children_;

- (int)addWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_
                           withId:(PlaynCoreAbstractLayer *)child {
  id<PlaynCoreGroupLayer> parent = [((PlaynCoreAbstractLayer *) nil_chk(child)) parent];
  if (parent == self_) {
    return [self findChildWithId:child withFloat:[((PlaynCoreAbstractLayer *) nil_chk(child)) depth]];
  }
  int count = [((id<JavaUtilList>) nil_chk(children_)) size], index;
  if (count == 0 || [((PlaynCoreAbstractLayer *) nil_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:count - 1])) depth] <= [((PlaynCoreAbstractLayer *) nil_chk(child)) depth]) {
    index = count;
  }
  else {
    index = [self findInsertionWithFloat:[((PlaynCoreAbstractLayer *) nil_chk(child)) depth]];
  }
  if (parent != nil) {
    [((id<PlaynCoreGroupLayer>) nil_chk([((PlaynCoreAbstractLayer *) nil_chk(child)) parent])) removeWithPlaynCoreLayer:child];
  }
  [((id<JavaUtilList>) nil_chk(children_)) addWithInt:index withId:child];
  [((PlaynCoreAbstractLayer *) nil_chk(child)) setParentWithPlaynCoreGroupLayer:self_];
  [((PlaynCoreAbstractLayer *) nil_chk(child)) onAdd];
  if ([((PlaynCoreAbstractLayer *) nil_chk(child)) interactive]) (void) [((id<PlaynCoreGroupLayer>) nil_chk(self_)) setInteractiveWithBOOL:YES];
  return index;
}

- (void)addAtWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_
                  withPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                           withFloat:(float)tx
                           withFloat:(float)ty {
  (void) [((id<PlaynCoreLayer>) nil_chk(layer)) setTranslationWithFloat:tx withFloat:ty];
  [((id<PlaynCoreGroupLayer>) nil_chk(self_)) addWithPlaynCoreLayer:layer];
}

- (void)removeWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_
                               withId:(PlaynCoreAbstractLayer *)child {
  int index = [self findChildWithId:child withFloat:[((PlaynCoreAbstractLayer *) nil_chk(child)) depth]];
  if (index < 0) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Could not remove Layer because it is not a child of the GroupLayer"];
  }
  [self removeWithInt:index];
}

- (void)clearWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_ {
  while (![((id<JavaUtilList>) nil_chk(children_)) isEmpty]) {
    [self removeWithInt:[((id<JavaUtilList>) nil_chk(children_)) size] - 1];
  }
}

- (void)destroyWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_ {
  IOSObjectArray *toDestroy = [((id<JavaUtilList>) nil_chk(children_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(children_)) size] type:[IOSClass classWithClass:[PlaynCoreAbstractLayer class]]]];
  [((id<PlaynCoreGroupLayer>) nil_chk(self_)) clear];
  {
    IOSObjectArray *a__ = toDestroy;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      PlaynCoreAbstractLayer *child = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      [((PlaynCoreAbstractLayer *) nil_chk(child)) destroy];
    }
  }
}

- (void)onAddWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_ {
  for (int ii = 0, ll = [((id<JavaUtilList>) nil_chk(children_)) size]; ii < ll; ii++) {
    [((PlaynCoreAbstractLayer *) nil_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:ii])) onAdd];
  }
}

- (void)onRemoveWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_ {
  for (int ii = 0, ll = [((id<JavaUtilList>) nil_chk(children_)) size]; ii < ll; ii++) {
    [((PlaynCoreAbstractLayer *) nil_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:ii])) onRemove];
  }
}

- (id<PlaynCoreLayer>)hitTestWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_
                                withPythagorasFPoint:(PythagorasFPoint *)point {
  float x = ((PythagorasFPoint *) nil_chk(point)).x_, y = ((PythagorasFPoint *) nil_chk(point)).y_;
  BOOL sawInteractiveChild = NO;
  for (int ii = [((id<JavaUtilList>) nil_chk(children_)) size] - 1; ii >= 0; ii--) {
    PlaynCoreAbstractLayer *child = [((id<JavaUtilList>) nil_chk(children_)) getWithInt:ii];
    if (![((PlaynCoreAbstractLayer *) nil_chk(child)) interactive]) continue;
    sawInteractiveChild = YES;
    if (![((PlaynCoreAbstractLayer *) nil_chk(child)) visible]) continue;
    (void) [((id<PythagorasFTransform>) nil_chk([((PlaynCoreAbstractLayer *) nil_chk(child)) transform])) inverseTransformWithPythagorasFIPoint:[((PythagorasFPoint *) nil_chk(point)) setWithFloat:x withFloat:y] withPythagorasFPoint:point];
    ((PythagorasFPoint *) nil_chk(point)).x_ += [((PlaynCoreAbstractLayer *) nil_chk(child)) originX];
    ((PythagorasFPoint *) nil_chk(point)).y_ += [((PlaynCoreAbstractLayer *) nil_chk(child)) originY];
    id<PlaynCoreLayer> l = [((PlaynCoreAbstractLayer *) nil_chk(child)) hitTestWithPythagorasFPoint:point];
    if (l != nil) return l;
  }
  if (!sawInteractiveChild && ![((PlaynCoreAbstractLayer *) self_) hasInteractors]) (void) [((id<PlaynCoreGroupLayer>) nil_chk(self_)) setInteractiveWithBOOL:NO];
  return nil;
}

- (int)depthChangedWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)self_
                        withPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                                 withFloat:(float)oldDepth {
  PlaynCoreAbstractLayer *child = (PlaynCoreAbstractLayer *) layer;
  int oldIndex = [self findChildWithId:child withFloat:oldDepth];
  float newDepth = [((PlaynCoreAbstractLayer *) nil_chk(child)) depth];
  BOOL leftCorrect = (oldIndex == 0 || [((PlaynCoreAbstractLayer *) nil_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:oldIndex - 1])) depth] <= newDepth);
  BOOL rightCorrect = (oldIndex == [((id<JavaUtilList>) nil_chk(children_)) size] - 1 || [((PlaynCoreAbstractLayer *) nil_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:oldIndex + 1])) depth] >= newDepth);
  if (leftCorrect && rightCorrect) {
    return oldIndex;
  }
  (void) [((id<JavaUtilList>) nil_chk(children_)) removeWithInt:oldIndex];
  int newIndex = [self findInsertionWithFloat:newDepth];
  [((id<JavaUtilList>) nil_chk(children_)) addWithInt:newIndex withId:child];
  return newIndex;
}

- (void)removeWithInt:(int)index {
  PlaynCoreAbstractLayer *child = [((id<JavaUtilList>) nil_chk(children_)) removeWithInt:index];
  [((PlaynCoreAbstractLayer *) nil_chk(child)) onRemove];
  [((PlaynCoreAbstractLayer *) nil_chk(child)) setParentWithPlaynCoreGroupLayer:nil];
}

- (int)findChildWithId:(PlaynCoreAbstractLayer *)child
             withFloat:(float)depth {
  int startIdx = [self findInsertionWithFloat:depth];
  for (int ii = startIdx - 1; ii >= 0; ii--) {
    PlaynCoreAbstractLayer *c = [((id<JavaUtilList>) nil_chk(children_)) getWithInt:ii];
    if (c == child) {
      return ii;
    }
    if ([((PlaynCoreAbstractLayer *) nil_chk(c)) depth] != depth) {
      break;
    }
  }
  for (int ii = startIdx, ll = [((id<JavaUtilList>) nil_chk(children_)) size]; ii < ll; ii++) {
    PlaynCoreAbstractLayer *c = [((id<JavaUtilList>) nil_chk(children_)) getWithInt:ii];
    if (c == child) {
      return ii;
    }
    if ([((PlaynCoreAbstractLayer *) nil_chk(c)) depth] != depth) {
      break;
    }
  }
  return -1;
}

- (int)findInsertionWithFloat:(float)depth {
  int low = 0, high = [((id<JavaUtilList>) nil_chk(children_)) size] - 1;
  while (low <= high) {
    int mid = (int) (((unsigned int) (low + high)) >> 1);
    float midDepth = [((PlaynCoreAbstractLayer *) nil_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:mid])) depth];
    if (depth > midDepth) {
      low = mid + 1;
    }
    else if (depth < midDepth) {
      high = mid - 1;
    }
    else {
      return mid;
    }
  }
  return low;
}

- (id)init {
  if ((self = [super init])) {
    children_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGroupLayerImpl *typedCopy = (PlaynCoreGroupLayerImpl *) copy;
  typedCopy.children = children_;
}

@end

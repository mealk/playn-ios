//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/IndexedTrisShader.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "playn/core/gl/GL20.h"
#include "playn/core/gl/GLBuffer.h"
#include "playn/core/gl/GLContext.h"
#include "playn/core/gl/GLProgram.h"
#include "playn/core/gl/GLShader.h"
#include "playn/core/gl/IndexedTrisShader.h"

@implementation PlaynCoreGlIndexedTrisShader

static NSString * PlaynCoreGlIndexedTrisShader_VERT_UNIFS_ = @"uniform vec2 u_ScreenSize;\n";
static NSString * PlaynCoreGlIndexedTrisShader_VERT_ATTRS_ = @"attribute vec4 a_Matrix;\nattribute vec2 a_Translation;\nattribute vec2 a_Position;\nattribute vec2 a_TexCoord;\nattribute vec2 a_Color;\n";
static NSString * PlaynCoreGlIndexedTrisShader_VERT_VARS_ = @"varying vec2 v_TexCoord;\nvarying vec4 v_Color;\n";
static NSString * PlaynCoreGlIndexedTrisShader_VERT_SETPOS_ = @"mat3 transform = mat3(\n  a_Matrix[0], a_Matrix[1], 0,\n  a_Matrix[2], a_Matrix[3], 0,\n  a_Translation[0], a_Translation[1], 1);\ngl_Position = vec4(transform * vec3(a_Position, 1.0), 1);\ngl_Position.xy /= (u_ScreenSize.xy / 2.0);\ngl_Position.x -= 1.0;\ngl_Position.y = 1.0 - gl_Position.y;\n";
static NSString * PlaynCoreGlIndexedTrisShader_VERT_SETTEX_ = @"v_TexCoord = a_TexCoord;\n";
static NSString * PlaynCoreGlIndexedTrisShader_VERT_SETCOLOR_ = @"float red = mod(a_Color.x, 256.0);\nfloat alpha = (a_Color.x - red) / 256.0;\nfloat blue = mod(a_Color.y, 256.0);\nfloat green = (a_Color.y - blue) / 256.0;\nv_Color = vec4(red / 255.0, green / 255.0, blue / 255.0, alpha / 255.0);\n";
static NSString * PlaynCoreGlIndexedTrisShader_VERTEX_SHADER_ = @"uniform vec2 u_ScreenSize;\nattribute vec4 a_Matrix;\nattribute vec2 a_Translation;\nattribute vec2 a_Position;\nattribute vec2 a_TexCoord;\nattribute vec2 a_Color;\nvarying vec2 v_TexCoord;\nvarying vec4 v_Color;\nvoid main(void) {\nmat3 transform = mat3(\n  a_Matrix[0], a_Matrix[1], 0,\n  a_Matrix[2], a_Matrix[3], 0,\n  a_Translation[0], a_Translation[1], 1);\ngl_Position = vec4(transform * vec3(a_Position, 1.0), 1);\ngl_Position.xy /= (u_ScreenSize.xy / 2.0);\ngl_Position.x -= 1.0;\ngl_Position.y = 1.0 - gl_Position.y;\nv_TexCoord = a_TexCoord;\nfloat red = mod(a_Color.x, 256.0);\nfloat alpha = (a_Color.x - red) / 256.0;\nfloat blue = mod(a_Color.y, 256.0);\nfloat green = (a_Color.y - blue) / 256.0;\nv_Color = vec4(red / 255.0, green / 255.0, blue / 255.0, alpha / 255.0);\n}";

+ (NSString *)VERT_UNIFS {
  return PlaynCoreGlIndexedTrisShader_VERT_UNIFS_;
}

+ (NSString *)VERT_ATTRS {
  return PlaynCoreGlIndexedTrisShader_VERT_ATTRS_;
}

+ (NSString *)VERT_VARS {
  return PlaynCoreGlIndexedTrisShader_VERT_VARS_;
}

+ (NSString *)VERT_SETPOS {
  return PlaynCoreGlIndexedTrisShader_VERT_SETPOS_;
}

+ (NSString *)VERT_SETTEX {
  return PlaynCoreGlIndexedTrisShader_VERT_SETTEX_;
}

+ (NSString *)VERT_SETCOLOR {
  return PlaynCoreGlIndexedTrisShader_VERT_SETCOLOR_;
}

+ (NSString *)VERTEX_SHADER {
  return PlaynCoreGlIndexedTrisShader_VERTEX_SHADER_;
}

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  return [super initWithPlaynCoreGlGLContext:ctx];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"itris/%@/%@", texCore_, colorCore_];
}

- (NSString *)vertexShader {
  return PlaynCoreGlIndexedTrisShader_VERTEX_SHADER_;
}

- (int)vertexSize {
  return 12;
}

- (int)vertexStride {
  return [self vertexSize] * PlaynCoreGlIndexedTrisShader_FLOAT_SIZE_BYTES;
}

- (PlaynCoreGlGLShader_Core *)createTextureCore {
  return [[PlaynCoreGlIndexedTrisShader_ITCore alloc] initWithPlaynCoreGlIndexedTrisShader:self withNSString:[self vertexShader] withNSString:[self textureFragmentShader]];
}

- (PlaynCoreGlGLShader_Core *)createColorCore {
  return [[PlaynCoreGlIndexedTrisShader_ITCore alloc] initWithPlaynCoreGlIndexedTrisShader:self withNSString:[self vertexShader] withNSString:[self colorFragmentShader]];
}

@end
@implementation PlaynCoreGlIndexedTrisShader_ITCore

@synthesize this$1 = this$1_;
@synthesize uScreenSize = uScreenSize_;
@synthesize aMatrix = aMatrix_;
@synthesize aTranslation = aTranslation_;
@synthesize aPosition = aPosition_;
@synthesize aTexCoord = aTexCoord_;
@synthesize aColor = aColor_;
@synthesize vertices = vertices_;
@synthesize elements = elements_;
@synthesize arTint = arTint_;
@synthesize gbTint = gbTint_;

- (id)initWithPlaynCoreGlIndexedTrisShader:(PlaynCoreGlIndexedTrisShader *)outer$
                              withNSString:(NSString *)vertShader
                              withNSString:(NSString *)fragShader {
  if ((self = [super initWithPlaynCoreGlGLShader:outer$ withNSString:vertShader withNSString:fragShader])) {
    this$1_ = outer$;
    uScreenSize_ = [((id<PlaynCoreGlGLProgram>) nil_chk(prog_)) getUniform2fWithNSString:@"u_ScreenSize"];
    aMatrix_ = [((id<PlaynCoreGlGLProgram>) nil_chk(prog_)) getAttribWithNSString:@"a_Matrix" withInt:4 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aTranslation_ = [((id<PlaynCoreGlGLProgram>) nil_chk(prog_)) getAttribWithNSString:@"a_Translation" withInt:2 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aPosition_ = [((id<PlaynCoreGlGLProgram>) nil_chk(prog_)) getAttribWithNSString:@"a_Position" withInt:2 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aTexCoord_ = [((id<PlaynCoreGlGLProgram>) nil_chk(prog_)) getAttribWithNSString:@"a_TexCoord" withInt:2 withInt:PlaynCoreGlGL20_GL_FLOAT];
    aColor_ = [((id<PlaynCoreGlGLProgram>) nil_chk(prog_)) getAttribWithNSString:@"a_Color" withInt:2 withInt:PlaynCoreGlGL20_GL_FLOAT];
    vertices_ = [((PlaynCoreGlGLContext *) nil_chk(outer$.ctx)) createFloatBufferWithInt:PlaynCoreGlIndexedTrisShader_START_VERTS * [outer$ vertexSize]];
    elements_ = [((PlaynCoreGlGLContext *) nil_chk(outer$.ctx)) createShortBufferWithInt:PlaynCoreGlIndexedTrisShader_START_ELEMS];
  }
  return self;
}

- (void)activateWithInt:(int)fbufWidth
                withInt:(int)fbufHeight {
  [((id<PlaynCoreGlGLProgram>) nil_chk(prog_)) bind];
  [((id<PlaynCoreGlGLShader_Uniform2f>) nil_chk(uScreenSize_)) bindWithFloat:fbufWidth withFloat:fbufHeight];
  [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) bindWithInt:PlaynCoreGlGL20_GL_ARRAY_BUFFER];
  [((id<PlaynCoreGlGLShader_Attrib>) nil_chk(aMatrix_)) bindWithInt:[this$1_ vertexStride] withInt:0];
  [((id<PlaynCoreGlGLShader_Attrib>) nil_chk(aTranslation_)) bindWithInt:[this$1_ vertexStride] withInt:16];
  [((id<PlaynCoreGlGLShader_Attrib>) nil_chk(aPosition_)) bindWithInt:[this$1_ vertexStride] withInt:24];
  if (aTexCoord_ != nil) [aTexCoord_ bindWithInt:[this$1_ vertexStride] withInt:32];
  [((id<PlaynCoreGlGLShader_Attrib>) nil_chk(aColor_)) bindWithInt:[this$1_ vertexStride] withInt:40];
  [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) bindWithInt:PlaynCoreGlGL20_GL_ELEMENT_ARRAY_BUFFER];
  [((PlaynCoreGlGLContext *) nil_chk(this$1_.ctx)) checkGLErrorWithNSString:@"Shader.prepare bind"];
}

- (void)prepareWithInt:(int)tint
              withBOOL:(BOOL)justActivated {
  self.arTint = (tint >> 16) & (int) 0xFFFF;
  self.gbTint = tint & (int) 0xFFFF;
}

- (void)flush {
  if ([((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) position] == 0) return;
  [((PlaynCoreGlGLContext *) nil_chk(this$1_.ctx)) checkGLErrorWithNSString:@"Shader.flush"];
  [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) sendWithInt:PlaynCoreGlGL20_GL_ARRAY_BUFFER withInt:PlaynCoreGlGL20_GL_STREAM_DRAW];
  int elems = [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) sendWithInt:PlaynCoreGlGL20_GL_ELEMENT_ARRAY_BUFFER withInt:PlaynCoreGlGL20_GL_STREAM_DRAW];
  [((PlaynCoreGlGLContext *) nil_chk(this$1_.ctx)) checkGLErrorWithNSString:@"Shader.flush BufferData"];
  [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) drawElementsWithInt:PlaynCoreGlGL20_GL_TRIANGLES withInt:elems];
  [((PlaynCoreGlGLContext *) nil_chk(this$1_.ctx)) checkGLErrorWithNSString:@"Shader.flush DrawElements"];
}

- (void)destroy {
  [super destroy];
  [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) destroy];
  [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) destroy];
}

- (void)addQuadWithFloat:(float)m00
               withFloat:(float)m01
               withFloat:(float)m10
               withFloat:(float)m11
               withFloat:(float)tx
               withFloat:(float)ty
               withFloat:(float)x1
               withFloat:(float)y1
               withFloat:(float)sx1
               withFloat:(float)sy1
               withFloat:(float)x2
               withFloat:(float)y2
               withFloat:(float)sx2
               withFloat:(float)sy2
               withFloat:(float)x3
               withFloat:(float)y3
               withFloat:(float)sx3
               withFloat:(float)sy3
               withFloat:(float)x4
               withFloat:(float)y4
               withFloat:(float)sx4
               withFloat:(float)sy4 {
  int vertIdx = [self beginPrimitiveWithInt:4 withInt:6];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) addWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty])) addWithFloat:x1 withFloat:y1])) addWithFloat:sx1 withFloat:sy1];
  [self addExtraVertexAttribsWithPlaynCoreGlGLBuffer_Float:vertices_];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) addWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty])) addWithFloat:x2 withFloat:y2])) addWithFloat:sx2 withFloat:sy2];
  [self addExtraVertexAttribsWithPlaynCoreGlGLBuffer_Float:vertices_];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) addWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty])) addWithFloat:x3 withFloat:y3])) addWithFloat:sx3 withFloat:sy3];
  [self addExtraVertexAttribsWithPlaynCoreGlGLBuffer_Float:vertices_];
  (void) [((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) addWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty])) addWithFloat:x4 withFloat:y4])) addWithFloat:sx4 withFloat:sy4];
  [self addExtraVertexAttribsWithPlaynCoreGlGLBuffer_Float:vertices_];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + 0];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + 1];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + 2];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + 1];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + 3];
  (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + 2];
}

- (void)addTrianglesWithFloat:(float)m00
                    withFloat:(float)m01
                    withFloat:(float)m10
                    withFloat:(float)m11
                    withFloat:(float)tx
                    withFloat:(float)ty
               withFloatArray:(IOSFloatArray *)xys
                    withFloat:(float)tw
                    withFloat:(float)th
                 withIntArray:(IOSIntArray *)indices {
  int vertIdx = [self beginPrimitiveWithInt:(int) [((IOSFloatArray *) nil_chk(xys)) count] / 2 withInt:(int) [((IOSIntArray *) nil_chk(indices)) count]];
  for (int ii = 0, ll = (int) [((IOSFloatArray *) nil_chk(xys)) count]; ii < ll; ii += 2) {
    float x = [((IOSFloatArray *) nil_chk(xys)) floatAtIndex:ii], y = [((IOSFloatArray *) nil_chk(xys)) floatAtIndex:ii + 1];
    (void) [((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) addWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty])) addWithFloat:x withFloat:y])) addWithFloat:x / tw withFloat:y / th];
    [self addExtraVertexAttribsWithPlaynCoreGlGLBuffer_Float:vertices_];
  }
  for (int ii = 0, ll = (int) [((IOSIntArray *) nil_chk(indices)) count]; ii < ll; ii++) (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + [((IOSIntArray *) nil_chk(indices)) intAtIndex:ii]];
}

- (void)addTrianglesWithFloat:(float)m00
                    withFloat:(float)m01
                    withFloat:(float)m10
                    withFloat:(float)m11
                    withFloat:(float)tx
                    withFloat:(float)ty
               withFloatArray:(IOSFloatArray *)xys
               withFloatArray:(IOSFloatArray *)sxys
                 withIntArray:(IOSIntArray *)indices {
  int vertIdx = [self beginPrimitiveWithInt:(int) [((IOSFloatArray *) nil_chk(xys)) count] / 2 withInt:(int) [((IOSIntArray *) nil_chk(indices)) count]];
  for (int ii = 0, ll = (int) [((IOSFloatArray *) nil_chk(xys)) count]; ii < ll; ii += 2) {
    (void) [((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk([((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) addWithFloat:m00 withFloat:m01 withFloat:m10 withFloat:m11 withFloat:tx withFloat:ty])) addWithFloat:[((IOSFloatArray *) nil_chk(xys)) floatAtIndex:ii] withFloat:[((IOSFloatArray *) nil_chk(xys)) floatAtIndex:ii + 1]])) addWithFloat:[((IOSFloatArray *) nil_chk(sxys)) floatAtIndex:ii] withFloat:[((IOSFloatArray *) nil_chk(sxys)) floatAtIndex:ii + 1]];
    [self addExtraVertexAttribsWithPlaynCoreGlGLBuffer_Float:vertices_];
  }
  for (int ii = 0, ll = (int) [((IOSIntArray *) nil_chk(indices)) count]; ii < ll; ii++) (void) [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) addWithInt:vertIdx + [((IOSIntArray *) nil_chk(indices)) intAtIndex:ii]];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"cq=%d", ([((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) capacity] / 6)];
}

- (void)addExtraVertexAttribsWithPlaynCoreGlGLBuffer_Float:(id<PlaynCoreGlGLBuffer_Float>)vertices {
  (void) [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices)) addWithFloat:arTint_ withFloat:gbTint_];
}

- (int)beginPrimitiveWithInt:(int)vertexCount
                     withInt:(int)elemCount {
  int vertIdx = [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) position] / [this$1_ vertexSize];
  int verts = vertIdx + vertexCount, elems = [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) position] + elemCount;
  int availVerts = [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) capacity] / [this$1_ vertexSize], availElems = [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) capacity];
  if ((verts > availVerts) || (elems > availElems)) {
    [this$1_ flush];
    if (verts > availVerts) [self expandVertsWithInt:verts];
    if (elems > availElems) [self expandElemsWithInt:elems];
    return 0;
  }
  return vertIdx;
}

- (void)expandVertsWithInt:(int)vertCount {
  int newVerts = [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) capacity] / [this$1_ vertexSize];
  while (newVerts < vertCount) newVerts += PlaynCoreGlIndexedTrisShader_EXPAND_VERTS;
  [((id<PlaynCoreGlGLBuffer_Float>) nil_chk(vertices_)) expandWithInt:newVerts * [this$1_ vertexSize]];
}

- (void)expandElemsWithInt:(int)elemCount {
  int newElems = [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) capacity];
  while (newElems < elemCount) newElems += PlaynCoreGlIndexedTrisShader_EXPAND_ELEMS;
  [((id<PlaynCoreGlGLBuffer_Short>) nil_chk(elements_)) expandWithInt:newElems];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlIndexedTrisShader_ITCore *typedCopy = (PlaynCoreGlIndexedTrisShader_ITCore *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.uScreenSize = uScreenSize_;
  typedCopy.aMatrix = aMatrix_;
  typedCopy.aTranslation = aTranslation_;
  typedCopy.aPosition = aPosition_;
  typedCopy.aTexCoord = aTexCoord_;
  typedCopy.aColor = aColor_;
  typedCopy.vertices = vertices_;
  typedCopy.elements = elements_;
  typedCopy.arTint = arTint_;
  typedCopy.gbTint = gbTint_;
}

@end

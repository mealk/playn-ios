//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/GroupLayerGL.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Math.h"
#import "java/util/List.h"
#import "playn/core/AbstractLayer.h"
#import "playn/core/Asserts.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/GroupLayerImpl.h"
#import "playn/core/InternalTransform.h"
#import "playn/core/Layer.h"
#import "playn/core/Tint.h"
#import "playn/core/gl/GLContext.h"
#import "playn/core/gl/GLShader.h"
#import "playn/core/gl/GroupLayerGL.h"
#import "playn/core/gl/LayerGL.h"
#import "pythagoras/f/Point.h"
#import "pythagoras/f/Transform.h"
#import "pythagoras/f/Vector.h"

@implementation PlaynCoreGlGroupLayerGL

@synthesize impl = impl_;

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  if ((self = [super initWithPlaynCoreGlGLContext:ctx])) {
    impl_ = [[PlaynCoreGroupLayerImpl alloc] init];
  }
  return self;
}

- (id<PlaynCoreLayer>)getWithInt:(int)index {
  return ((PlaynCoreGlLayerGL *) [((id<JavaUtilList>) NIL_CHK(impl_.children)) getWithInt:index]);
}

- (void)addWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  [PlaynCoreAsserts checkArgumentWithBOOL:[(id) layer isKindOfClass:[PlaynCoreGlLayerGL class]]];
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) addWithPlaynCoreGroupLayer:self withId:(PlaynCoreGlLayerGL *) layer];
}

- (void)addAtWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                      withFloat:(float)tx
                      withFloat:(float)ty {
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) addAtWithPlaynCoreGroupLayer:self withPlaynCoreLayer:layer withFloat:tx withFloat:ty];
}

- (void)removeWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  [PlaynCoreAsserts checkArgumentWithBOOL:[(id) layer isKindOfClass:[PlaynCoreGlLayerGL class]]];
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) removeWithPlaynCoreGroupLayer:self withId:(PlaynCoreGlLayerGL *) layer];
}

- (void)clear {
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) clearWithPlaynCoreGroupLayer:self];
}

- (int)size {
  return [((id<JavaUtilList>) NIL_CHK(impl_.children)) size];
}

- (void)destroy {
  [super destroy];
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) destroyWithPlaynCoreGroupLayer:self];
}

- (void)onAdd {
  [super onAdd];
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) onAddWithPlaynCoreGroupLayer:self];
}

- (void)onRemove {
  [super onRemove];
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) onRemoveWithPlaynCoreGroupLayer:self];
}

- (id<PlaynCoreLayer>)hitTestDefaultWithPythagorasFPoint:(PythagorasFPoint *)p {
  return [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) hitTestWithPlaynCoreGroupLayer:self withPythagorasFPoint:p];
}

- (void)depthChangedWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                             withFloat:(float)oldDepth {
  [((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)) depthChangedWithPlaynCoreGroupLayer:self withPlaynCoreLayer:layer withFloat:oldDepth];
}

- (void)paintWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)curTransform
                                    withInt:(int)curTint
                    withPlaynCoreGlGLShader:(PlaynCoreGlGLShader *)curShader {
  if (![self visible]) return;
  if (tint__ != PlaynCoreTint_NOOP_TINT) curTint = [PlaynCoreTint combineWithInt:curTint withInt:tint__];
  [self renderWithPlaynCoreInternalTransform:[self localTransformWithPlaynCoreInternalTransform:curTransform] withInt:curTint withPlaynCoreGlGLShader:(shader_ == nil) ? curShader : shader_];
}

- (void)renderWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform
                                     withInt:(int)curTint
                     withPlaynCoreGlGLShader:(PlaynCoreGlGLShader *)shader {
  id<JavaUtilList> children = ((PlaynCoreGroupLayerImpl *) NIL_CHK(impl_)).children;
  for (int ii = 0, ll = [((id<JavaUtilList>) NIL_CHK(children)) size]; ii < ll; ii++) {
    [((PlaynCoreGlLayerGL *) [((id<JavaUtilList>) NIL_CHK(children)) getWithInt:ii]) paintWithPlaynCoreInternalTransform:xform withInt:curTint withPlaynCoreGlGLShader:shader];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGroupLayerGL *typedCopy = (PlaynCoreGlGroupLayerGL *) copy;
  typedCopy.impl = impl_;
}

@end
@implementation PlaynCoreGlGroupLayerGL_Clipped

@synthesize pos = pos_;
@synthesize size = size_;
@synthesize width_ = width__;
@synthesize height_ = height__;

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
                         withFloat:(float)width
                         withFloat:(float)height {
  if ((self = [super initWithPlaynCoreGlGLContext:ctx])) {
    pos_ = [[PythagorasFPoint alloc] init];
    size_ = [[PythagorasFVector alloc] init];
    self.width_ = width;
    self.height_ = height;
  }
  return self;
}

- (void)setSizeWithFloat:(float)width
               withFloat:(float)height {
  self.width_ = width;
  self.height_ = height;
}

- (void)setWidthWithFloat:(float)width {
  self.width_ = width;
}

- (void)setHeightWithFloat:(float)height {
  self.height_ = height;
}

- (float)width {
  return self.width_;
}

- (float)height {
  return self.height_;
}

- (float)scaledWidth {
  return [self scaleX] * [self width];
}

- (float)scaledHeight {
  return [self scaleY] * [self height];
}

- (void)renderWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform
                                     withInt:(int)curTint
                     withPlaynCoreGlGLShader:(PlaynCoreGlGLShader *)shader {
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) translateWithFloat:originX__ withFloat:originY__];
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) transformWithPythagorasFIPoint:[((PythagorasFPoint *) NIL_CHK(pos_)) setWithFloat:-originX__ withFloat:-originY__] withPythagorasFPoint:pos_];
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) transformWithPythagorasFIVector:[((PythagorasFVector *) NIL_CHK(size_)) setWithFloat:width__ withFloat:height__] withPythagorasFVector:size_];
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform)) translateWithFloat:-originX__ withFloat:-originY__];
  [((PlaynCoreGlGLContext *) NIL_CHK(ctx_)) startClippedWithInt:(int) ((PythagorasFPoint *) NIL_CHK(pos_)).x_ withInt:(int) ((PythagorasFPoint *) NIL_CHK(pos_)).y_ withInt:[JavaLangMath roundWithFloat:[JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(size_)).x_]] withInt:[JavaLangMath roundWithFloat:[JavaLangMath absWithFloat:((PythagorasFVector *) NIL_CHK(size_)).y_]]];
  @try {
    [super renderWithPlaynCoreInternalTransform:xform withInt:curTint withPlaynCoreGlGLShader:shader];
  }
  @finally {
    [((PlaynCoreGlGLContext *) NIL_CHK(ctx_)) endClipped];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGroupLayerGL_Clipped *typedCopy = (PlaynCoreGlGroupLayerGL_Clipped *) copy;
  typedCopy.pos = pos_;
  typedCopy.size = size_;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/Scale.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "playn/core/Asserts.h"
#import "playn/core/gl/Scale.h"
#import "pythagoras/f/MathUtil.h"

@implementation PlaynCoreGlScale

static PlaynCoreGlScale * PlaynCoreGlScale_ONE_;

@synthesize factor = factor_;

+ (PlaynCoreGlScale *)ONE {
  return PlaynCoreGlScale_ONE_;
}

- (id)initWithFloat:(float)factor {
  if ((self = [super init])) {
    [PlaynCoreAsserts checkArgumentWithBOOL:factor >= 1 withId:@"Scale factor cannot be less than one."];
    self.factor = factor;
  }
  return self;
}

- (float)scaledWithFloat:(float)length {
  return factor_ * length;
}

- (int)scaledCeilWithFloat:(float)length {
  return [PythagorasFMathUtil iceilWithFloat:[self scaledWithFloat:length]];
}

- (int)scaledFloorWithFloat:(float)length {
  return [PythagorasFMathUtil ifloorWithFloat:[self scaledWithFloat:length]];
}

- (float)invScaledWithFloat:(float)length {
  return length / factor_;
}

- (id<JavaUtilList>)getScaledResourcesWithNSString:(NSString *)path {
  id<JavaUtilList> rsrcs = [[JavaUtilArrayList alloc] init];
  [((id<JavaUtilList>) NIL_CHK(rsrcs)) addWithId:[[PlaynCoreGlScale_ScaledResource alloc] initWithPlaynCoreGlScale:self withNSString:[self computePathWithNSString:path withFloat:factor_]]];
  for (float rscale = factor_ / 2; rscale > 1; rscale /= 2) {
    [((id<JavaUtilList>) NIL_CHK(rsrcs)) addWithId:[[PlaynCoreGlScale_ScaledResource alloc] initWithPlaynCoreGlScale:[[PlaynCoreGlScale alloc] initWithFloat:rscale] withNSString:[self computePathWithNSString:path withFloat:rscale]]];
  }
  [((id<JavaUtilList>) NIL_CHK(rsrcs)) addWithId:[[PlaynCoreGlScale_ScaledResource alloc] initWithPlaynCoreGlScale:PlaynCoreGlScale_ONE_ withNSString:path]];
  return rsrcs;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"x%f", factor_];
}

- (NSString *)computePathWithNSString:(NSString *)path
                            withFloat:(float)scale_ {
  int scaleFactor = (int) (scale_ * 10);
  if (scaleFactor % 10 == 0) scaleFactor /= 10;
  int didx = [NIL_CHK(path) lastIndexOfString:@"."];
  if (didx == -1) {
    return path;
  }
  else {
    return [NSString stringWithFormat:@"%@@%dx%@", [NIL_CHK(path) substring:0 endIndex:didx], scaleFactor, [NIL_CHK(path) substring:didx]];
  }
}

+ (void)initialize {
  if (self == [PlaynCoreGlScale class]) {
    PlaynCoreGlScale_ONE_ = [[PlaynCoreGlScale alloc] initWithFloat:1];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlScale *typedCopy = (PlaynCoreGlScale *) copy;
  typedCopy.factor = factor_;
}

@end
@implementation PlaynCoreGlScale_ScaledResource

@synthesize scale_ = scale__;
@synthesize path = path_;

- (id)initWithPlaynCoreGlScale:(PlaynCoreGlScale *)scale_
                  withNSString:(NSString *)path {
  if ((self = [super init])) {
    self.scale_ = scale_;
    self.path = path;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlScale_ScaledResource *typedCopy = (PlaynCoreGlScale_ScaledResource *) copy;
  typedCopy.scale_ = scale__;
  typedCopy.path = path_;
}

@end

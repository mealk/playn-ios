//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/GL20Buffer.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/ByteOrder.h"
#include "java/nio/FloatBuffer.h"
#include "java/nio/IntBuffer.h"
#include "java/nio/ShortBuffer.h"
#include "playn/core/Asserts.h"
#include "playn/core/InternalTransform.h"
#include "playn/core/gl/GL20.h"
#include "playn/core/gl/GL20Buffer.h"
#include "playn/core/gl/GLBuffer.h"

@implementation PlaynCoreGlGL20Buffer

@synthesize gl = gl_;
@synthesize bufferId = bufferId_;

- (void)bindWithInt:(int)target {
  [((id<PlaynCoreGlGL20>) nil_chk(gl_)) glBindBufferWithInt:target withInt:bufferId_];
}

- (int)sendWithInt:(int)target
           withInt:(int)usage {
  JavaNioBuffer *buffer = [self buffer];
  int count = [((JavaNioBuffer *) nil_chk(buffer)) position], byteSize = [self byteSize];
  (void) [((JavaNioBuffer *) nil_chk(buffer)) positionWithInt:0];
  [((id<PlaynCoreGlGL20>) nil_chk(gl_)) glBufferDataWithInt:target withInt:byteSize withJavaNioBuffer:buffer withInt:usage];
  return count;
}

- (void)destroy {
  [((id<PlaynCoreGlGL20>) nil_chk(gl_)) glDeleteBuffersWithInt:1 withIntArray:[IOSIntArray arrayWithInts:(int[]){ bufferId_ } count:1] withInt:0];
}

- (JavaNioBuffer *)buffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl {
  if ((self = [super init])) {
    self.gl = gl;
    self.bufferId = [PlaynCoreGlGL20Buffer genBufferIdWithPlaynCoreGlGL20:gl];
  }
  return self;
}

+ (int)genBufferIdWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl {
  IOSIntArray *ids = [IOSIntArray arrayWithLength:1];
  [((id<PlaynCoreGlGL20>) nil_chk(gl)) glGenBuffersWithInt:1 withIntArray:ids withInt:0];
  return [((IOSIntArray *) nil_chk(ids)) intAtIndex:0];
}

- (int)byteSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)capacity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)expandWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)position {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)skipWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Buffer *typedCopy = (PlaynCoreGlGL20Buffer *) copy;
  typedCopy.gl = gl_;
  typedCopy.bufferId = bufferId_;
}

@end
@implementation PlaynCoreGlGL20Buffer_FloatImpl

@synthesize buffer_ = buffer__;
@synthesize intBuffer = intBuffer_;

- (id)initWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl
                      withInt:(int)capacity {
  if ((self = [super initWithPlaynCoreGlGL20:gl])) {
    [self expandWithInt:capacity];
  }
  return self;
}

- (int)capacity {
  return [((JavaNioFloatBuffer *) nil_chk(buffer__)) capacity];
}

- (int)position {
  return [((JavaNioFloatBuffer *) nil_chk(buffer__)) position];
}

- (int)byteSize {
  return [self position] * PlaynCoreGlGL20Buffer_FloatImpl_BYTES_PER_FLOAT;
}

- (void)skipWithInt:(int)count {
  (void) [((JavaNioFloatBuffer *) nil_chk(buffer__)) positionWithInt:[self position] + count];
}

- (void)expandWithInt:(int)capacity {
  [PlaynCoreAsserts checkStateWithBOOL:buffer__ == nil || [((JavaNioFloatBuffer *) nil_chk(buffer__)) position] == 0];
//  JavaNioByteBuffer *raw = [((JavaNioByteBuffer *) nil_chk([JavaNioByteBuffer allocateDirectWithInt:capacity * PlaynCoreGlGL20Buffer_FloatImpl_BYTES_PER_FLOAT])) orderWithJavaNioByteOrder:[JavaNioByteOrder nativeOrder]];
//  buffer__ = [((JavaNioByteBuffer *) nil_chk(raw)) asFloatBuffer];
//  intBuffer_ = [((JavaNioByteBuffer *) nil_chk(raw)) asIntBuffer];
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithFloat:(float)value {
  (void) [((JavaNioFloatBuffer *) nil_chk(buffer__)) putWithFloat:value];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform {
  return [self addWithFloat:[((id<PlaynCoreInternalTransform>) nil_chk(xform)) m00] withFloat:[((id<PlaynCoreInternalTransform>) nil_chk(xform)) m01] withFloat:[((id<PlaynCoreInternalTransform>) nil_chk(xform)) m10] withFloat:[((id<PlaynCoreInternalTransform>) nil_chk(xform)) m11] withFloat:[((id<PlaynCoreInternalTransform>) nil_chk(xform)) tx] withFloat:[((id<PlaynCoreInternalTransform>) nil_chk(xform)) ty]];
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithFloat:(float)x
                                    withFloat:(float)y {
  (void) [((JavaNioFloatBuffer *) nil_chk([((JavaNioFloatBuffer *) nil_chk(buffer__)) putWithFloat:x])) putWithFloat:y];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithFloat:(float)m00
                                    withFloat:(float)m01
                                    withFloat:(float)m10
                                    withFloat:(float)m11
                                    withFloat:(float)tx
                                    withFloat:(float)ty {
  (void) [((JavaNioFloatBuffer *) nil_chk([((JavaNioFloatBuffer *) nil_chk([((JavaNioFloatBuffer *) nil_chk([((JavaNioFloatBuffer *) nil_chk([((JavaNioFloatBuffer *) nil_chk([((JavaNioFloatBuffer *) nil_chk(buffer__)) putWithFloat:m00])) putWithFloat:m01])) putWithFloat:m10])) putWithFloat:m11])) putWithFloat:tx])) putWithFloat:ty];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithFloatArray:(IOSFloatArray *)data
                                           withInt:(int)offset
                                           withInt:(int)length {
  (void) [((JavaNioFloatBuffer *) nil_chk(buffer__)) putWithFloatArray:data withInt:offset withInt:length];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Float>)addWithInt:(int)value {
  (void) [((JavaNioIntBuffer *) nil_chk(intBuffer_)) positionWithInt:[((JavaNioFloatBuffer *) nil_chk(buffer__)) position]];
  (void) [((JavaNioIntBuffer *) nil_chk(intBuffer_)) putWithInt:value];
  (void) [((JavaNioFloatBuffer *) nil_chk(buffer__)) positionWithInt:[((JavaNioIntBuffer *) nil_chk(intBuffer_)) position]];
  return self;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"floatbuf:%d", bufferId_];
}

- (JavaNioBuffer *)buffer {
  return buffer__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Buffer_FloatImpl *typedCopy = (PlaynCoreGlGL20Buffer_FloatImpl *) copy;
  typedCopy.buffer_ = buffer__;
  typedCopy.intBuffer = intBuffer_;
}

@end
@implementation PlaynCoreGlGL20Buffer_ShortImpl

@synthesize buffer_ = buffer__;

- (id)initWithPlaynCoreGlGL20:(id<PlaynCoreGlGL20>)gl
                      withInt:(int)capacity {
  if ((self = [super initWithPlaynCoreGlGL20:gl])) {
    [self expandWithInt:capacity];
  }
  return self;
}

- (int)capacity {
  return [((JavaNioShortBuffer *) nil_chk(buffer__)) capacity];
}

- (int)position {
  return [((JavaNioShortBuffer *) nil_chk(buffer__)) position];
}

- (int)byteSize {
  return [self position] * PlaynCoreGlGL20Buffer_ShortImpl_BYTES_PER_SHORT;
}

- (void)skipWithInt:(int)count {
  (void) [((JavaNioShortBuffer *) nil_chk(buffer__)) positionWithInt:[self position] + count];
}

- (void)expandWithInt:(int)capacity {
  [PlaynCoreAsserts checkStateWithBOOL:buffer__ == nil || [((JavaNioShortBuffer *) nil_chk(buffer__)) position] == 0];
//  buffer__ = [((JavaNioByteBuffer *) nil_chk([((JavaNioByteBuffer *) nil_chk([JavaNioByteBuffer allocateDirectWithInt:capacity * PlaynCoreGlGL20Buffer_ShortImpl_BYTES_PER_SHORT])) orderWithJavaNioByteOrder:[JavaNioByteOrder nativeOrder]])) asShortBuffer];
}

- (id<PlaynCoreGlGLBuffer_Short>)addWithInt:(int)value {
  (void) [((JavaNioShortBuffer *) nil_chk(buffer__)) putWithShortInt:(short int) value];
  return self;
}

- (id<PlaynCoreGlGLBuffer_Short>)addWithInt:(int)x
                                    withInt:(int)y {
  (void) [((JavaNioShortBuffer *) nil_chk([((JavaNioShortBuffer *) nil_chk(buffer__)) putWithShortInt:(short int) x])) putWithShortInt:(short int) y];
  return self;
}

- (void)drawElementsWithInt:(int)mode
                    withInt:(int)count {
  [((id<PlaynCoreGlGL20>) nil_chk(gl_)) glDrawElementsWithInt:mode withInt:count withInt:PlaynCoreGlGL20_GL_UNSIGNED_SHORT withInt:0];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"shortbuf:%d", bufferId_];
}

- (JavaNioBuffer *)buffer {
  return buffer__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlGL20Buffer_ShortImpl *typedCopy = (PlaynCoreGlGL20Buffer_ShortImpl *) copy;
  typedCopy.buffer_ = buffer__;
}

@end

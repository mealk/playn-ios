//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/ImageLayerGL.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Float.h"
#include "playn/core/AbstractLayer.h"
#include "playn/core/Asserts.h"
#include "playn/core/Image.h"
#include "playn/core/ImageLayer.h"
#include "playn/core/InternalTransform.h"
#include "playn/core/Tint.h"
#include "playn/core/gl/AbstractImageGL.h"
#include "playn/core/gl/GLContext.h"
#include "playn/core/gl/GLShader.h"
#include "playn/core/gl/ImageLayerGL.h"
#include "playn/core/gl/LayerGL.h"

@implementation PlaynCoreGlImageLayerGL

@synthesize width_ = width__;
@synthesize height_ = height__;
@synthesize widthSet = widthSet_;
@synthesize heightSet = heightSet_;
@synthesize img = img_;

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx {
  return [super initWithPlaynCoreGlGLContext:ctx];
}

- (void)destroy {
  [super destroy];
  (void) [self setImageWithPlaynCoreImage:nil];
}

- (void)clearHeight {
  heightSet_ = NO;
}

- (void)clearWidth {
  widthSet_ = NO;
}

- (id<PlaynCoreImage>)image {
  return img_;
}

- (id<PlaynCoreImageLayer>)setImageWithPlaynCoreImage:(id<PlaynCoreImage>)img {
  [PlaynCoreAsserts checkArgumentWithBOOL:img == nil || [(id) img isKindOfClass:[PlaynCoreGlAbstractImageGL class]]];
  if (self.img != img) {
    if (self.img != nil) [self.img release__];
    self.img = (PlaynCoreGlAbstractImageGL *) img;
    if (self.img != nil) [self.img reference];
  }
  return self;
}

- (void)setWidthWithFloat:(float)width {
  [PlaynCoreAsserts checkArgumentWithBOOL:width > 0 withId:@"Width must be > 0"];
  widthSet_ = YES;
  self.width_ = width;
}

- (void)setHeightWithFloat:(float)height {
  [PlaynCoreAsserts checkArgumentWithBOOL:height > 0 withId:@"Height must be > 0"];
  heightSet_ = YES;
  self.height_ = height;
}

- (void)setSizeWithFloat:(float)width
               withFloat:(float)height {
  [PlaynCoreAsserts checkArgumentWithBOOL:width > 0 && height > 0 withNSString:@"Width and height must be > 0 (got %dx%d)" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangFloat valueOfWithFloat:width], [JavaLangFloat valueOfWithFloat:height] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  widthSet_ = YES;
  self.width_ = width;
  heightSet_ = YES;
  self.height_ = height;
}

- (void)paintWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)curTransform
                                    withInt:(int)curTint
                    withPlaynCoreGlGLShader:(PlaynCoreGlGLShader *)curShader {
  if ([self visible] && img_ != nil) {
    if (tint__ != PlaynCoreTint_NOOP_TINT) curTint = [PlaynCoreTint combineWithInt:curTint withInt:tint__];
    [((PlaynCoreGlAbstractImageGL *) nil_chk(img_)) drawWithPlaynCoreGlGLShader:(shader_ == nil) ? curShader : shader_ withPlaynCoreInternalTransform:[self localTransformWithPlaynCoreInternalTransform:curTransform] withInt:curTint withFloat:0 withFloat:0 withFloat:[self width] withFloat:[self height]];
  }
}

- (float)width {
  (void) [PlaynCoreAsserts checkNotNullWithId:img_ withId:@"Image must not be null"];
  return widthSet_ ? width__ : [((PlaynCoreGlAbstractImageGL *) nil_chk(img_)) width];
}

- (float)height {
  (void) [PlaynCoreAsserts checkNotNullWithId:img_ withId:@"Image must not be null"];
  return heightSet_ ? height__ : [((PlaynCoreGlAbstractImageGL *) nil_chk(img_)) height];
}

- (float)scaledWidth {
  return [self scaleX] * [self width];
}

- (float)scaledHeight {
  return [self scaleY] * [self height];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlImageLayerGL *typedCopy = (PlaynCoreGlImageLayerGL *) copy;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
  typedCopy.widthSet = widthSet_;
  typedCopy.heightSet = heightSet_;
  typedCopy.img = img_;
}

@end

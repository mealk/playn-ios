//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/gl/ImageGL.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "playn/core/Image.h"
#include "playn/core/InternalTransform.h"
#include "playn/core/Tint.h"
#include "playn/core/gl/GLContext.h"
#include "playn/core/gl/GLShader.h"
#include "playn/core/gl/GLUtil.h"
#include "playn/core/gl/ImageGL.h"
#include "playn/core/gl/Scale.h"

@implementation PlaynCoreGlImageGL

@synthesize scale_ = scale__;
@synthesize tex = tex_;

- (PlaynCoreGlScale *)scale__ {
  return scale__;
}

- (int)ensureTexture {
  if (tex_ != 0) {
    return tex_;
  }
  else if (![self isReady]) {
    return 0;
  }
  else if (repeatX__ || repeatY__ || mipmapped_) {
    return (tex_ = [self scaleTexture]);
  }
  else {
    return (tex_ = [self createMainTex]);
  }
}

- (void)clearTexture {
  if (tex_ > 0) {
    [((PlaynCoreGlGLContext *) nil_chk(ctx_)) destroyTextureWithInt:tex_];
    tex_ = 0;
  }
}

- (id)initWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
              withPlaynCoreGlScale:(PlaynCoreGlScale *)scale_ {
  if ((self = [super initWithPlaynCoreGlGLContext:ctx])) {
    self.scale_ = scale_;
  }
  return self;
}

- (void)updateTextureWithInt:(int)tex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  if (tex_ > 0) [((PlaynCoreGlGLContext *) nil_chk(ctx_)) queueDestroyTextureWithInt:tex_];
  scale__ = nil;
}

- (int)createMainTex {
  int tex = [((PlaynCoreGlGLContext *) nil_chk(ctx_)) createTextureWithBOOL:NO withBOOL:NO withBOOL:NO];
  [self updateTextureWithInt:tex];
  return tex;
}

- (int)createPow2RepTexWithInt:(int)width
                       withInt:(int)height
                      withBOOL:(BOOL)repeatX
                      withBOOL:(BOOL)repeatY
                      withBOOL:(BOOL)mipmapped {
  int powtex = [((PlaynCoreGlGLContext *) nil_chk(ctx_)) createTextureWithInt:width withInt:height withBOOL:repeatX withBOOL:repeatY withBOOL:mipmapped];
  [self updateTextureWithInt:powtex];
  return powtex;
}

- (int)scaleTexture {
  int scaledWidth = [((PlaynCoreGlScale *) nil_chk(scale__)) scaledCeilWithFloat:[self width]];
  int scaledHeight = [((PlaynCoreGlScale *) nil_chk(scale__)) scaledCeilWithFloat:[self height]];
  int width = [PlaynCoreGlGLUtil nextPowerOfTwoWithInt:scaledWidth], height = [PlaynCoreGlGLUtil nextPowerOfTwoWithInt:scaledHeight];
  if ((width == 0) && (height == 0)) {
    int reptex = [self createPow2RepTexWithInt:scaledWidth withInt:scaledHeight withBOOL:repeatX__ withBOOL:repeatY__ withBOOL:mipmapped_];
    if (mipmapped_) [((PlaynCoreGlGLContext *) nil_chk(ctx_)) generateMipmapWithInt:reptex];
    return reptex;
  }
  int tex = [self createMainTex];
  if (width == 0) width = scaledWidth;
  if (height == 0) height = scaledHeight;
  @try {
    return [PlaynCoreGlImageGL convertToRepTexWithPlaynCoreGlGLContext:ctx_ withInt:tex withInt:width withInt:height withBOOL:repeatX__ withBOOL:repeatY__ withBOOL:mipmapped_];
  }
  @finally {
    [((PlaynCoreGlGLContext *) nil_chk(ctx_)) destroyTextureWithInt:tex];
  }
}

+ (int)convertToRepTexWithPlaynCoreGlGLContext:(PlaynCoreGlGLContext *)ctx
                                       withInt:(int)tex
                                       withInt:(int)width
                                       withInt:(int)height
                                      withBOOL:(BOOL)repeatX
                                      withBOOL:(BOOL)repeatY
                                      withBOOL:(BOOL)mipmapped {
  int reptex = [((PlaynCoreGlGLContext *) nil_chk(ctx)) createTextureWithInt:width withInt:height withBOOL:repeatX withBOOL:repeatY withBOOL:mipmapped];
  int fbuf = [((PlaynCoreGlGLContext *) nil_chk(ctx)) createFramebufferWithInt:reptex];
  [((PlaynCoreGlGLContext *) nil_chk(ctx)) pushFramebufferWithInt:fbuf withInt:width withInt:height];
  @try {
    [((PlaynCoreGlGLContext *) nil_chk(ctx)) clearWithFloat:0 withFloat:0 withFloat:0 withFloat:0];
    PlaynCoreGlGLShader *shader = [((PlaynCoreGlGLShader *) nil_chk([((PlaynCoreGlGLContext *) nil_chk(ctx)) quadShaderWithPlaynCoreGlGLShader:nil])) prepareTextureWithInt:tex withInt:PlaynCoreTint_NOOP_TINT];
    [((PlaynCoreGlGLShader *) nil_chk(shader)) addQuadWithPlaynCoreInternalTransform:[((PlaynCoreGlGLContext *) nil_chk(ctx)) createTransform] withFloat:0 withFloat:height withFloat:width withFloat:0 withFloat:0 withFloat:0 withFloat:1 withFloat:1];
    [((PlaynCoreGlGLShader *) nil_chk(shader)) flush];
    if (mipmapped) [((PlaynCoreGlGLContext *) nil_chk(ctx)) generateMipmapWithInt:reptex];
    return reptex;
  }
  @finally {
    [((PlaynCoreGlGLContext *) nil_chk(ctx)) popFramebuffer];
    [((PlaynCoreGlGLContext *) nil_chk(ctx)) deleteFramebufferWithInt:fbuf];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreGlImageGL *typedCopy = (PlaynCoreGlImageGL *) copy;
  typedCopy.scale_ = scale__;
  typedCopy.tex = tex_;
}

@end

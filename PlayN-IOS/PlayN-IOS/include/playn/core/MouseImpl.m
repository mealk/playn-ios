//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/MouseImpl.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "playn/core/AbstractLayer.h"
#include "playn/core/Dispatcher.h"
#include "playn/core/Events.h"
#include "playn/core/Graphics.h"
#include "playn/core/GroupLayer.h"
#include "playn/core/Layer.h"
#include "playn/core/Mouse.h"
#include "playn/core/MouseImpl.h"
#include "playn/core/PlayN.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Transform.h"

@implementation PlaynCoreMouseImpl

@synthesize enabled = enabled_;
@synthesize dispatcher = dispatcher_;
@synthesize listener_ = listener__;
@synthesize activeLayer = activeLayer_;
@synthesize hoverLayer = hoverLayer_;
@synthesize DOWN = DOWN_;
@synthesize UP = UP_;
@synthesize DRAG = DRAG_;
@synthesize MOVE = MOVE_;
@synthesize OVER = OVER_;
@synthesize OUT = OUT_;
@synthesize WHEEL_SCROLL = WHEEL_SCROLL_;

- (BOOL)hasMouse {
  return YES;
}

- (BOOL)isEnabled {
  return enabled_;
}

- (void)setEnabledWithBOOL:(BOOL)enabled {
  self.enabled = enabled;
}

- (id<PlaynCoreMouse_Listener>)listener {
  return listener__;
}

- (void)setListenerWithPlaynCoreMouse_Listener:(id<PlaynCoreMouse_Listener>)listener {
  self.listener_ = listener;
}

- (void)lock {
}

- (void)unlock {
}

- (BOOL)isLocked {
  return NO;
}

- (BOOL)isLockSupported {
  return NO;
}

- (void)setPropagateEventsWithBOOL:(BOOL)propagate {
  dispatcher_ = [PlaynCoreDispatcher_Util selectWithBOOL:propagate];
}

- (BOOL)onMouseDownWithPlaynCoreMouse_ButtonEvent_Impl:(PlaynCoreMouse_ButtonEvent_Impl *)event {
  if (!enabled_) return NO;
  [((id<PlaynCoreEvents_Flags>) nil_chk([((PlaynCoreMouse_ButtonEvent_Impl *) nil_chk(event)) flags])) setPreventDefaultWithBOOL:NO];
  if (listener__ != nil) {
    [listener__ onMouseDownWithPlaynCoreMouse_ButtonEvent:event];
  }
  id<PlaynCoreGroupLayer> root = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer];
  if ([((id<PlaynCoreGroupLayer>) nil_chk(root)) interactive]) {
    PythagorasFPoint *p = [[PythagorasFPoint alloc] initWithFloat:[((PlaynCoreMouse_ButtonEvent_Impl *) nil_chk(event)) x] withFloat:[((PlaynCoreMouse_ButtonEvent_Impl *) nil_chk(event)) y]];
    (void) [((id<PythagorasFTransform>) nil_chk([((id<PlaynCoreGroupLayer>) nil_chk(root)) transform])) inverseTransformWithPythagorasFIPoint:p withPythagorasFPoint:p];
    ((PythagorasFPoint *) nil_chk(p)).x_ += [((id<PlaynCoreGroupLayer>) nil_chk(root)) originX];
    ((PythagorasFPoint *) nil_chk(p)).y_ += [((id<PlaynCoreGroupLayer>) nil_chk(root)) originY];
    activeLayer_ = (PlaynCoreAbstractLayer *) [((id<PlaynCoreGroupLayer>) nil_chk(root)) hitTestWithPythagorasFPoint:p];
    if (activeLayer_ != nil) {
      [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:activeLayer_ withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreMouse_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:DOWN_];
    }
  }
  return [((id<PlaynCoreEvents_Flags>) nil_chk([((PlaynCoreMouse_ButtonEvent_Impl *) nil_chk(event)) flags])) getPreventDefault];
}

- (BOOL)onMouseMoveWithPlaynCoreMouse_MotionEvent_Impl:(PlaynCoreMouse_MotionEvent_Impl *)event {
  if (!enabled_) return NO;
  [((id<PlaynCoreEvents_Flags>) nil_chk([((PlaynCoreMouse_MotionEvent_Impl *) nil_chk(event)) flags])) setPreventDefaultWithBOOL:NO];
  if (listener__ != nil) {
    [listener__ onMouseMoveWithPlaynCoreMouse_MotionEvent:event];
  }
  id<PlaynCoreGroupLayer> root = [((id<PlaynCoreGraphics>) nil_chk([PlaynCorePlayN graphics])) rootLayer];
  if ([((id<PlaynCoreGroupLayer>) nil_chk(root)) interactive]) {
    PythagorasFPoint *p = [[PythagorasFPoint alloc] initWithFloat:[((PlaynCoreMouse_MotionEvent_Impl *) nil_chk(event)) x] withFloat:[((PlaynCoreMouse_MotionEvent_Impl *) nil_chk(event)) y]];
    (void) [((id<PythagorasFTransform>) nil_chk([((id<PlaynCoreGroupLayer>) nil_chk(root)) transform])) inverseTransformWithPythagorasFIPoint:p withPythagorasFPoint:p];
    ((PythagorasFPoint *) nil_chk(p)).x_ += [((id<PlaynCoreGroupLayer>) nil_chk(root)) originX];
    ((PythagorasFPoint *) nil_chk(p)).y_ += [((id<PlaynCoreGroupLayer>) nil_chk(root)) originY];
    PlaynCoreAbstractLayer *lastHoverLayer = hoverLayer_;
    hoverLayer_ = (PlaynCoreAbstractLayer *) [((id<PlaynCoreGroupLayer>) nil_chk(root)) hitTestWithPythagorasFPoint:p];
    if (activeLayer_ != nil) {
      [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:activeLayer_ withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreMouse_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:DRAG_];
    }
    else if (hoverLayer_ != nil) {
      [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:hoverLayer_ withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreMouse_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:MOVE_];
    }
    if (lastHoverLayer != hoverLayer_ && lastHoverLayer != nil) {
      [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:lastHoverLayer withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreMouse_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:OUT_];
    }
    if (hoverLayer_ != lastHoverLayer && hoverLayer_ != nil) {
      [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:hoverLayer_ withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreMouse_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:OVER_];
    }
  }
  return [((id<PlaynCoreEvents_Flags>) nil_chk([((PlaynCoreMouse_MotionEvent_Impl *) nil_chk(event)) flags])) getPreventDefault];
}

- (BOOL)onMouseUpWithPlaynCoreMouse_ButtonEvent_Impl:(PlaynCoreMouse_ButtonEvent_Impl *)event {
  if (!enabled_) return NO;
  [((id<PlaynCoreEvents_Flags>) nil_chk([((PlaynCoreMouse_ButtonEvent_Impl *) nil_chk(event)) flags])) setPreventDefaultWithBOOL:NO];
  if (listener__ != nil) {
    [listener__ onMouseUpWithPlaynCoreMouse_ButtonEvent:event];
  }
  if (activeLayer_ != nil) {
    [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:activeLayer_ withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreMouse_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:UP_];
    activeLayer_ = nil;
  }
  return [((id<PlaynCoreEvents_Flags>) nil_chk([((PlaynCoreMouse_ButtonEvent_Impl *) nil_chk(event)) flags])) getPreventDefault];
}

- (BOOL)onMouseWheelScrollWithPlaynCoreMouse_WheelEvent_Impl:(PlaynCoreMouse_WheelEvent_Impl *)event {
  if (!enabled_) return NO;
  if (listener__ != nil) [listener__ onMouseWheelScrollWithPlaynCoreMouse_WheelEvent:event];
  PlaynCoreAbstractLayer *target = (activeLayer_ != nil) ? activeLayer_ : hoverLayer_;
  if (target != nil) [((id<PlaynCoreDispatcher>) nil_chk(dispatcher_)) dispatchWithPlaynCoreAbstractLayer:target withIOSClass:[IOSClass classWithProtocol:@protocol(PlaynCoreMouse_LayerListener)] withId:event withPlaynCoreAbstractLayer_Interaction:WHEEL_SCROLL_];
  return [((id<PlaynCoreEvents_Flags>) nil_chk([((PlaynCoreMouse_WheelEvent_Impl *) nil_chk(event)) flags])) getPreventDefault];
}

- (id)init {
  if ((self = [super init])) {
    enabled_ = YES;
    dispatcher_ = [PlaynCoreDispatcher SINGLE];
    DOWN_ = [[PlaynCoreMouseImpl_$1 alloc] init];
    UP_ = [[PlaynCoreMouseImpl_$2 alloc] init];
    DRAG_ = [[PlaynCoreMouseImpl_$3 alloc] init];
    MOVE_ = [[PlaynCoreMouseImpl_$4 alloc] init];
    OVER_ = [[PlaynCoreMouseImpl_$5 alloc] init];
    OUT_ = [[PlaynCoreMouseImpl_$6 alloc] init];
    WHEEL_SCROLL_ = [[PlaynCoreMouseImpl_$7 alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreMouseImpl *typedCopy = (PlaynCoreMouseImpl *) copy;
  typedCopy.enabled = enabled_;
  typedCopy.dispatcher = dispatcher_;
  typedCopy.listener_ = listener__;
  typedCopy.activeLayer = activeLayer_;
  typedCopy.hoverLayer = hoverLayer_;
  typedCopy.DOWN = DOWN_;
  typedCopy.UP = UP_;
  typedCopy.DRAG = DRAG_;
  typedCopy.MOVE = MOVE_;
  typedCopy.OVER = OVER_;
  typedCopy.OUT = OUT_;
  typedCopy.WHEEL_SCROLL = WHEEL_SCROLL_;
}

@end
@implementation PlaynCoreMouseImpl_$1

- (void)interactWithId:(id<PlaynCoreMouse_LayerListener>)l
                withId:(PlaynCoreMouse_ButtonEvent_Impl *)ev {
  [((id<PlaynCoreMouse_LayerListener>) nil_chk(l)) onMouseDownWithPlaynCoreMouse_ButtonEvent:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreMouseImpl_$2

- (void)interactWithId:(id<PlaynCoreMouse_LayerListener>)l
                withId:(PlaynCoreMouse_ButtonEvent_Impl *)ev {
  [((id<PlaynCoreMouse_LayerListener>) nil_chk(l)) onMouseUpWithPlaynCoreMouse_ButtonEvent:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreMouseImpl_$3

- (void)interactWithId:(id<PlaynCoreMouse_LayerListener>)l
                withId:(PlaynCoreMouse_MotionEvent_Impl *)ev {
  [((id<PlaynCoreMouse_LayerListener>) nil_chk(l)) onMouseDragWithPlaynCoreMouse_MotionEvent:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreMouseImpl_$4

- (void)interactWithId:(id<PlaynCoreMouse_LayerListener>)l
                withId:(PlaynCoreMouse_MotionEvent_Impl *)ev {
  [((id<PlaynCoreMouse_LayerListener>) nil_chk(l)) onMouseMoveWithPlaynCoreMouse_MotionEvent:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreMouseImpl_$5

- (void)interactWithId:(id<PlaynCoreMouse_LayerListener>)l
                withId:(PlaynCoreMouse_MotionEvent_Impl *)ev {
  [((id<PlaynCoreMouse_LayerListener>) nil_chk(l)) onMouseOverWithPlaynCoreMouse_MotionEvent:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreMouseImpl_$6

- (void)interactWithId:(id<PlaynCoreMouse_LayerListener>)l
                withId:(PlaynCoreMouse_MotionEvent_Impl *)ev {
  [((id<PlaynCoreMouse_LayerListener>) nil_chk(l)) onMouseOutWithPlaynCoreMouse_MotionEvent:ev];
}

- (id)init {
  return [super init];
}

@end
@implementation PlaynCoreMouseImpl_$7

- (void)interactWithId:(id<PlaynCoreMouse_LayerListener>)l
                withId:(PlaynCoreMouse_WheelEvent_Impl *)ev {
  [((id<PlaynCoreMouse_LayerListener>) nil_chk(l)) onMouseWheelScrollWithPlaynCoreMouse_WheelEvent:ev];
}

- (id)init {
  return [super init];
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/TextFormat.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "playn/core/Font.h"
#include "playn/core/TextFormat.h"

@implementation PlaynCoreTextFormat

@synthesize font = font_;
@synthesize wrapWidth = wrapWidth_;
@synthesize align = align_;

- (id)init {
  return [self initPlaynCoreTextFormatWithPlaynCoreFont:nil withFloat:JavaLangFloat_MAX_VALUE withPlaynCoreTextFormat_AlignmentEnum:[PlaynCoreTextFormat_AlignmentEnum LEFT]];
}

- (id)initPlaynCoreTextFormatWithPlaynCoreFont:(id<PlaynCoreFont>)font
                                     withFloat:(float)wrapWidth
         withPlaynCoreTextFormat_AlignmentEnum:(PlaynCoreTextFormat_AlignmentEnum *)align {
  if ((self = [super init])) {
    self.font = font;
    self.wrapWidth = wrapWidth;
    self.align = align;
  }
  return self;
}

- (id)initWithPlaynCoreFont:(id<PlaynCoreFont>)font
                  withFloat:(float)wrapWidth
withPlaynCoreTextFormat_AlignmentEnum:(PlaynCoreTextFormat_AlignmentEnum *)align {
  return [self initPlaynCoreTextFormatWithPlaynCoreFont:font withFloat:wrapWidth withPlaynCoreTextFormat_AlignmentEnum:align];
}

- (BOOL)shouldWrap {
  return wrapWidth_ != JavaLangFloat_MAX_VALUE;
}

- (PlaynCoreTextFormat *)withFontWithPlaynCoreFont:(id<PlaynCoreFont>)font {
  return [[PlaynCoreTextFormat alloc] initWithPlaynCoreFont:font withFloat:self.wrapWidth withPlaynCoreTextFormat_AlignmentEnum:self.align];
}

- (PlaynCoreTextFormat *)withWrappingWithFloat:(float)wrapWidth
         withPlaynCoreTextFormat_AlignmentEnum:(PlaynCoreTextFormat_AlignmentEnum *)align {
  return [[PlaynCoreTextFormat alloc] initWithPlaynCoreFont:self.font withFloat:wrapWidth withPlaynCoreTextFormat_AlignmentEnum:align];
}

- (PlaynCoreTextFormat *)withWrapWidthWithFloat:(float)wrapWidth {
  return [[PlaynCoreTextFormat alloc] initWithPlaynCoreFont:self.font withFloat:wrapWidth withPlaynCoreTextFormat_AlignmentEnum:self.align];
}

- (PlaynCoreTextFormat *)withAlignmentWithPlaynCoreTextFormat_AlignmentEnum:(PlaynCoreTextFormat_AlignmentEnum *)align {
  return [[PlaynCoreTextFormat alloc] initWithPlaynCoreFont:self.font withFloat:self.wrapWidth withPlaynCoreTextFormat_AlignmentEnum:align];
}

- (NSString *)description {
  NSString *wrapStr = [self shouldWrap] ? [NSString stringWithFormat:@"%f", wrapWidth_] : @"n/a";
  return [NSString stringWithFormat:@"[font=%@, wrapWidth=%@, align=%@]", font_, wrapStr, align_];
}

- (BOOL)isEqual:(id)other {
  if ([other isKindOfClass:[PlaynCoreTextFormat class]]) {
    PlaynCoreTextFormat *ofmt = (PlaynCoreTextFormat *) other;
    return (font_ == ((PlaynCoreTextFormat *) nil_chk(ofmt)).font || (font_ != nil && [((id<PlaynCoreFont>) nil_chk(font_)) isEqual:((PlaynCoreTextFormat *) nil_chk(ofmt)).font])) && wrapWidth_ == ((PlaynCoreTextFormat *) nil_chk(ofmt)).wrapWidth && align_ == ((PlaynCoreTextFormat *) nil_chk(ofmt)).align;
  }
  else {
    return NO;
  }
}

- (NSUInteger)hash {
  int hash_ = [((PlaynCoreTextFormat_AlignmentEnum *) nil_chk(align_)) hash] ^ (int) wrapWidth_;
  if (font_ != nil) hash_ ^= [font_ hash];
  return hash_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreTextFormat *typedCopy = (PlaynCoreTextFormat *) copy;
  typedCopy.font = font_;
  typedCopy.wrapWidth = wrapWidth_;
  typedCopy.align = align_;
}

@end

static PlaynCoreTextFormat_AlignmentEnum *PlaynCoreTextFormat_AlignmentEnum_LEFT;
static PlaynCoreTextFormat_AlignmentEnum *PlaynCoreTextFormat_AlignmentEnum_CENTER;
static PlaynCoreTextFormat_AlignmentEnum *PlaynCoreTextFormat_AlignmentEnum_RIGHT;
IOSObjectArray *PlaynCoreTextFormat_AlignmentEnum_values;

@implementation PlaynCoreTextFormat_AlignmentEnum

+ (PlaynCoreTextFormat_AlignmentEnum *)LEFT {
  return PlaynCoreTextFormat_AlignmentEnum_LEFT;
}
+ (PlaynCoreTextFormat_AlignmentEnum *)CENTER {
  return PlaynCoreTextFormat_AlignmentEnum_CENTER;
}
+ (PlaynCoreTextFormat_AlignmentEnum *)RIGHT {
  return PlaynCoreTextFormat_AlignmentEnum_RIGHT;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (float)getXWithFloat:(float)textWidth
             withFloat:(float)lineWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [PlaynCoreTextFormat_AlignmentEnum class]) {
    PlaynCoreTextFormat_AlignmentEnum_LEFT = [[PlaynCoreTextFormat_AlignmentEnum_$1 alloc] initWithNSString:@"PlaynCoreTextFormat_Alignment_LEFT" withInt:0];
    PlaynCoreTextFormat_AlignmentEnum_CENTER = [[PlaynCoreTextFormat_AlignmentEnum_$2 alloc] initWithNSString:@"PlaynCoreTextFormat_Alignment_CENTER" withInt:1];
    PlaynCoreTextFormat_AlignmentEnum_RIGHT = [[PlaynCoreTextFormat_AlignmentEnum_$3 alloc] initWithNSString:@"PlaynCoreTextFormat_Alignment_RIGHT" withInt:2];
    PlaynCoreTextFormat_AlignmentEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ PlaynCoreTextFormat_AlignmentEnum_LEFT, PlaynCoreTextFormat_AlignmentEnum_CENTER, PlaynCoreTextFormat_AlignmentEnum_RIGHT, nil } count:3 type:[IOSClass classWithClass:[PlaynCoreTextFormat_AlignmentEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:PlaynCoreTextFormat_AlignmentEnum_values];
}

+ (PlaynCoreTextFormat_AlignmentEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [PlaynCoreTextFormat_AlignmentEnum_values count]; i++) {
    PlaynCoreTextFormat_AlignmentEnum *e = [PlaynCoreTextFormat_AlignmentEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
@implementation PlaynCoreTextFormat_AlignmentEnum_$1

- (float)getXWithFloat:(float)textWidth
             withFloat:(float)lineWidth {
  return 0;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

@end
@implementation PlaynCoreTextFormat_AlignmentEnum_$2

- (float)getXWithFloat:(float)textWidth
             withFloat:(float)lineWidth {
  return (lineWidth - textWidth) / 2;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

@end
@implementation PlaynCoreTextFormat_AlignmentEnum_$3

- (float)getXWithFloat:(float)textWidth
             withFloat:(float)lineWidth {
  return (lineWidth - textWidth);
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

@end

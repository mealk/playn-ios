//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: playn/core/canvas/SurfaceLayerCanvas.java
//
//  Created by Thomas on 7/25/13.
//

#include "playn/core/AbstractLayer.h"
#include "playn/core/Asserts.h"
#include "playn/core/Canvas.h"
#include "playn/core/CanvasImage.h"
#include "playn/core/InternalTransform.h"
#include "playn/core/Surface.h"
#include "playn/core/canvas/CanvasSurface.h"
#include "playn/core/canvas/LayerCanvas.h"
#include "playn/core/canvas/SurfaceLayerCanvas.h"

@implementation PlaynCoreCanvasSurfaceLayerCanvas

@synthesize image = image_;
@synthesize surface_ = surface__;

- (id)initWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>)xform
                withPlaynCoreCanvasImage:(id<PlaynCoreCanvasImage>)image {
  if ((self = [super initWithPlaynCoreInternalTransform:xform])) {
    self.image = image;
    self.surface_ = [[PlaynCoreCanvasCanvasSurface alloc] initWithPlaynCoreCanvas:[((id<PlaynCoreCanvasImage>) nil_chk(image)) canvas]];
  }
  return self;
}

- (id<PlaynCoreSurface>)surface {
  return surface__;
}

- (float)width {
  (void) [PlaynCoreAsserts checkNotNullWithId:surface__ withId:@"Surface must not be null"];
  return [((PlaynCoreCanvasCanvasSurface *) nil_chk(surface__)) width];
}

- (float)height {
  (void) [PlaynCoreAsserts checkNotNullWithId:surface__ withId:@"Surface must not be null"];
  return [((PlaynCoreCanvasCanvasSurface *) nil_chk(surface__)) height];
}

- (float)scaledWidth {
  return [self scaleX] * [self width];
}

- (float)scaledHeight {
  return [self scaleY] * [self height];
}

- (void)destroy {
  [super destroy];
  image_ = nil;
  surface__ = nil;
}

- (void)paintWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                       withFloat:(float)parentAlpha {
  if (![self visible]) return;
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) save];
  [self transformWithPlaynCoreCanvas:canvas];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) setAlphaWithFloat:parentAlpha * [self alpha]];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) drawImageWithPlaynCoreImage:image_ withFloat:0 withFloat:0];
  (void) [((id<PlaynCoreCanvas>) nil_chk(canvas)) restore];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PlaynCoreCanvasSurfaceLayerCanvas *typedCopy = (PlaynCoreCanvasSurfaceLayerCanvas *) copy;
  typedCopy.image = image_;
  typedCopy.surface_ = surface__;
}

@end

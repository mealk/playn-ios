//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/CrossingHelper.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "pythagoras/f/CrossingHelper.h"
#include "pythagoras/f/GeometryUtil.h"
#include "pythagoras/f/IntersectPoint.h"

@implementation PythagorasFCrossingHelper

@synthesize coords = coords_;
@synthesize sizes = sizes_;
@synthesize isectPoints = isectPoints_;

- (id)initWithFloatArray2:(IOSObjectArray *)coords
             withIntArray:(IOSIntArray *)sizes {
  if ((self = [super init])) {
    isectPoints_ = [[JavaUtilArrayList alloc] init];
    self.coords = coords;
    self.sizes = sizes;
  }
  return self;
}

- (IOSObjectArray *)findCrossing {
  int pointCount1 = [((IOSIntArray *) nil_chk(sizes_)) intAtIndex:0] / 2;
  int pointCount2 = [((IOSIntArray *) nil_chk(sizes_)) intAtIndex:1] / 2;
  IOSIntArray *indices = [IOSIntArray arrayWithLength:pointCount1 + pointCount2];
  for (int i = 0; i < pointCount1 + pointCount2; i++) {
    (*[((IOSIntArray *) nil_chk(indices)) intRefAtIndex:i]) = i;
  }
  [PythagorasFCrossingHelper sortWithFloatArray:[((IOSObjectArray *) nil_chk(coords_)) objectAtIndex:0] withInt:pointCount1 withFloatArray:[((IOSObjectArray *) nil_chk(coords_)) objectAtIndex:1] withInt:pointCount2 withIntArray:indices];
  id<JavaUtilList> edges = [[JavaUtilArrayList alloc] init];
  PythagorasFCrossingHelper_Edge *edge;
  int begIndex, endIndex;
  int areaNumber;
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(indices)) count]; i++) {
    if ([((IOSIntArray *) nil_chk(indices)) intAtIndex:i] < pointCount1) {
      begIndex = [((IOSIntArray *) nil_chk(indices)) intAtIndex:i];
      endIndex = [((IOSIntArray *) nil_chk(indices)) intAtIndex:i] - 1;
      if (endIndex < 0) {
        endIndex = pointCount1 - 1;
      }
      areaNumber = 0;
    }
    else if ([((IOSIntArray *) nil_chk(indices)) intAtIndex:i] < pointCount1 + pointCount2) {
      begIndex = [((IOSIntArray *) nil_chk(indices)) intAtIndex:i] - pointCount1;
      endIndex = [((IOSIntArray *) nil_chk(indices)) intAtIndex:i] - 1 - pointCount1;
      if (endIndex < 0) {
        endIndex = pointCount2 - 1;
      }
      areaNumber = 1;
    }
    else {
      @throw [[JavaLangIndexOutOfBoundsException alloc] init];
    }
    if (![self removeEdgeWithJavaUtilList:edges withInt:begIndex withInt:endIndex]) {
      edge = [[PythagorasFCrossingHelper_Edge alloc] initWithInt:begIndex withInt:endIndex withInt:areaNumber];
      [self intersectShapeWithJavaUtilList:edges withFloatArray:[((IOSObjectArray *) nil_chk(coords_)) objectAtIndex:0] withInt:pointCount1 withFloatArray:[((IOSObjectArray *) nil_chk(coords_)) objectAtIndex:1] withInt:pointCount2 withPythagorasFCrossingHelper_Edge:edge];
      [((id<JavaUtilList>) nil_chk(edges)) addWithId:edge];
    }
    begIndex = [((IOSIntArray *) nil_chk(indices)) intAtIndex:i];
    endIndex = [((IOSIntArray *) nil_chk(indices)) intAtIndex:i] + 1;
    if ((begIndex < pointCount1) && (endIndex == pointCount1)) {
      endIndex = 0;
    }
    else if ((begIndex >= pointCount1) && (endIndex == (pointCount2 + pointCount1))) {
      endIndex = pointCount1;
    }
    if (endIndex < pointCount1) {
      areaNumber = 0;
    }
    else {
      areaNumber = 1;
      endIndex -= pointCount1;
      begIndex -= pointCount1;
    }
    if (![self removeEdgeWithJavaUtilList:edges withInt:begIndex withInt:endIndex]) {
      edge = [[PythagorasFCrossingHelper_Edge alloc] initWithInt:begIndex withInt:endIndex withInt:areaNumber];
      [self intersectShapeWithJavaUtilList:edges withFloatArray:[((IOSObjectArray *) nil_chk(coords_)) objectAtIndex:0] withInt:pointCount1 withFloatArray:[((IOSObjectArray *) nil_chk(coords_)) objectAtIndex:1] withInt:pointCount2 withPythagorasFCrossingHelper_Edge:edge];
      [((id<JavaUtilList>) nil_chk(edges)) addWithId:edge];
    }
  }
  return [((id<JavaUtilList>) nil_chk(isectPoints_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(isectPoints_)) size] type:[IOSClass classWithClass:[PythagorasFIntersectPoint class]]]];
}

- (BOOL)removeEdgeWithJavaUtilList:(id<JavaUtilList>)edges
                           withInt:(int)begIndex
                           withInt:(int)endIndex {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(edges)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      PythagorasFCrossingHelper_Edge *edge = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([((PythagorasFCrossingHelper_Edge *) nil_chk(edge)) reverseCompareWithInt:begIndex withInt:endIndex]) {
        [((id<JavaUtilList>) nil_chk(edges)) removeWithId:edge];
        return YES;
      }
    }
  }
  return NO;
}

- (void)intersectShapeWithJavaUtilList:(id<JavaUtilList>)edges
                        withFloatArray:(IOSFloatArray *)coords1
                               withInt:(int)length1
                        withFloatArray:(IOSFloatArray *)coords2
                               withInt:(int)length2
    withPythagorasFCrossingHelper_Edge:(PythagorasFCrossingHelper_Edge *)initEdge {
  int areaOfEdge1, areaOfEdge2;
  int initBegin, initEnd;
  int addBegin, addEnd;
  float x1, y1, x2, y2, x3, y3, x4, y4;
  IOSFloatArray *point = [IOSFloatArray arrayWithLength:2];
  PythagorasFCrossingHelper_Edge *edge;
  if (((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).areaNumber == 0) {
    x1 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).begIndex];
    y1 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).begIndex + 1];
    x2 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).endIndex];
    y2 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).endIndex + 1];
    areaOfEdge1 = 0;
  }
  else {
    x1 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).begIndex];
    y1 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).begIndex + 1];
    x2 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).endIndex];
    y2 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).endIndex + 1];
    areaOfEdge1 = 1;
  }
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(edges)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    edge = [((id<JavaUtilIterator>) nil_chk(iter)) next];
    if (((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).areaNumber == 0) {
      x3 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).begIndex];
      y3 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).begIndex + 1];
      x4 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).endIndex];
      y4 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).endIndex + 1];
      areaOfEdge2 = 0;
    }
    else {
      x3 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).begIndex];
      y3 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).begIndex + 1];
      x4 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).endIndex];
      y4 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).endIndex + 1];
      areaOfEdge2 = 1;
    }
    if ((areaOfEdge1 != areaOfEdge2) && ([PythagorasFGeometryUtil intersectLinesWithFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2 withFloat:x3 withFloat:y3 withFloat:x4 withFloat:y4 withFloatArray:point] == 1) && (![self containsPointWithFloatArray:point])) {
      if (((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).areaNumber == 0) {
        initBegin = ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).begIndex;
        initEnd = ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).endIndex;
        addBegin = ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).begIndex;
        addEnd = ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).endIndex;
      }
      else {
        initBegin = ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).begIndex;
        initEnd = ((PythagorasFCrossingHelper_Edge *) nil_chk(edge)).endIndex;
        addBegin = ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).begIndex;
        addEnd = ((PythagorasFCrossingHelper_Edge *) nil_chk(initEdge)).endIndex;
      }
      if (((initEnd == length1 - 1) && (initBegin == 0 && initEnd > initBegin)) || (((initEnd != length1 - 1) || (initBegin != 0)) && ((initBegin != length1 - 1) || (initEnd != 0)) && (initBegin > initEnd))) {
        int temp = initBegin;
        initBegin = initEnd;
        initEnd = temp;
      }
      if (((addEnd == length2 - 1) && (addBegin == 0) && (addEnd > addBegin)) || (((addEnd != length2 - 1) || (addBegin != 0)) && ((addBegin != length2 - 1) || (addEnd != 0)) && (addBegin > addEnd))) {
        int temp = addBegin;
        addBegin = addEnd;
        addEnd = temp;
      }
      PythagorasFIntersectPoint *ip;
      for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(isectPoints_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        ip = [((id<JavaUtilIterator>) nil_chk(i)) next];
        if ((initBegin == [((PythagorasFIntersectPoint *) nil_chk(ip)) begIndexWithBOOL:YES]) && (initEnd == [((PythagorasFIntersectPoint *) nil_chk(ip)) endIndexWithBOOL:YES])) {
          if ([PythagorasFCrossingHelper compareWithFloat:[((PythagorasFIntersectPoint *) nil_chk(ip)) x] withFloat:[((PythagorasFIntersectPoint *) nil_chk(ip)) y] withFloat:[((IOSFloatArray *) nil_chk(point)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(point)) floatAtIndex:1]] > 0) {
            initEnd = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
            [((PythagorasFIntersectPoint *) nil_chk(ip)) setBegIndex1WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
          }
          else {
            initBegin = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
            [((PythagorasFIntersectPoint *) nil_chk(ip)) setEndIndex1WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
          }
        }
        if ((addBegin == [((PythagorasFIntersectPoint *) nil_chk(ip)) begIndexWithBOOL:NO]) && (addEnd == [((PythagorasFIntersectPoint *) nil_chk(ip)) endIndexWithBOOL:NO])) {
          if ([PythagorasFCrossingHelper compareWithFloat:[((PythagorasFIntersectPoint *) nil_chk(ip)) x] withFloat:[((PythagorasFIntersectPoint *) nil_chk(ip)) y] withFloat:[((IOSFloatArray *) nil_chk(point)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(point)) floatAtIndex:1]] > 0) {
            addEnd = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
            [((PythagorasFIntersectPoint *) nil_chk(ip)) setBegIndex2WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
          }
          else {
            addBegin = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
            [((PythagorasFIntersectPoint *) nil_chk(ip)) setEndIndex2WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
          }
        }
      }
      [((id<JavaUtilList>) nil_chk(isectPoints_)) addWithId:[[PythagorasFIntersectPoint alloc] initWithInt:initBegin withInt:initEnd withInt:addBegin withInt:addEnd withFloat:[((IOSFloatArray *) nil_chk(point)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(point)) floatAtIndex:1]]];
    }
  }
}

+ (void)sortWithFloatArray:(IOSFloatArray *)coords1
                   withInt:(int)length1
            withFloatArray:(IOSFloatArray *)coords2
                   withInt:(int)length2
              withIntArray:(IOSIntArray *)array {
  int temp;
  int length = length1 + length2;
  float x1, y1, x2, y2;
  for (int i = 1; i < length; i++) {
    if ([((IOSIntArray *) nil_chk(array)) intAtIndex:i - 1] < length1) {
      x1 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:i - 1]];
      y1 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:i - 1] + 1];
    }
    else {
      x1 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:i - 1] - length1)];
      y1 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:i - 1] - length1) + 1];
    }
    if ([((IOSIntArray *) nil_chk(array)) intAtIndex:i] < length1) {
      x2 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:i]];
      y2 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:i] + 1];
    }
    else {
      x2 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:i] - length1)];
      y2 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:i] - length1) + 1];
    }
    int j = i;
    while (j > 0 && [PythagorasFCrossingHelper compareWithFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2] <= 0) {
      temp = [((IOSIntArray *) nil_chk(array)) intAtIndex:j];
      (*[((IOSIntArray *) nil_chk(array)) intRefAtIndex:j]) = [((IOSIntArray *) nil_chk(array)) intAtIndex:j - 1];
      (*[((IOSIntArray *) nil_chk(array)) intRefAtIndex:j - 1]) = temp;
      j--;
      if (j > 0) {
        if ([((IOSIntArray *) nil_chk(array)) intAtIndex:j - 1] < length1) {
          x1 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:j - 1]];
          y1 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:j - 1] + 1];
        }
        else {
          x1 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:j - 1] - length1)];
          y1 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:j - 1] - length1) + 1];
        }
        if ([((IOSIntArray *) nil_chk(array)) intAtIndex:j] < length1) {
          x2 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:j]];
          y2 = [((IOSFloatArray *) nil_chk(coords1)) floatAtIndex:2 * [((IOSIntArray *) nil_chk(array)) intAtIndex:j] + 1];
        }
        else {
          x2 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:j] - length1)];
          y2 = [((IOSFloatArray *) nil_chk(coords2)) floatAtIndex:2 * ([((IOSIntArray *) nil_chk(array)) intAtIndex:j] - length1) + 1];
        }
      }
    }
  }
}

- (BOOL)containsPointWithFloatArray:(IOSFloatArray *)point {
  PythagorasFIntersectPoint *ipoint;
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(isectPoints_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ipoint = [((id<JavaUtilIterator>) nil_chk(i)) next];
    if ([((PythagorasFIntersectPoint *) nil_chk(ipoint)) x] == [((IOSFloatArray *) nil_chk(point)) floatAtIndex:0] && [((PythagorasFIntersectPoint *) nil_chk(ipoint)) y] == [((IOSFloatArray *) nil_chk(point)) floatAtIndex:1]) {
      return YES;
    }
  }
  return NO;
}

+ (int)compareWithFloat:(float)x1
              withFloat:(float)y1
              withFloat:(float)x2
              withFloat:(float)y2 {
  if ((x1 < x2) || (x1 == x2 && y1 < y2)) {
    return 1;
  }
  else if (x1 == x2 && y1 == y2) {
    return 0;
  }
  return -1;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFCrossingHelper *typedCopy = (PythagorasFCrossingHelper *) copy;
  typedCopy.coords = coords_;
  typedCopy.sizes = sizes_;
  typedCopy.isectPoints = isectPoints_;
}

@end
@implementation PythagorasFCrossingHelper_Edge

@synthesize begIndex = begIndex_;
@synthesize endIndex = endIndex_;
@synthesize areaNumber = areaNumber_;

- (id)initWithInt:(int)begIndex
          withInt:(int)endIndex
          withInt:(int)areaNumber {
  if ((self = [super init])) {
    self.begIndex = begIndex;
    self.endIndex = endIndex;
    self.areaNumber = areaNumber;
  }
  return self;
}

- (BOOL)reverseCompareWithInt:(int)begIndex
                      withInt:(int)endIndex {
  return self.begIndex == endIndex && self.endIndex == begIndex;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFCrossingHelper_Edge *typedCopy = (PythagorasFCrossingHelper_Edge *) copy;
  typedCopy.begIndex = begIndex_;
  typedCopy.endIndex = endIndex_;
  typedCopy.areaNumber = areaNumber_;
}

@end

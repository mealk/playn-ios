//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Vectors.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "pythagoras/f/FloatMath.h"
#include "pythagoras/f/IPoint.h"
#include "pythagoras/f/IVector.h"
#include "pythagoras/f/MathUtil.h"
#include "pythagoras/f/Vector.h"
#include "pythagoras/f/Vectors.h"

@implementation PythagorasFVectors

static id<PythagorasFIVector> PythagorasFVectors_UNIT_X_;
static id<PythagorasFIVector> PythagorasFVectors_UNIT_Y_;
static id<PythagorasFIVector> PythagorasFVectors_ZERO_;
static id<PythagorasFIVector> PythagorasFVectors_MIN_VALUE_;
static id<PythagorasFIVector> PythagorasFVectors_MAX_VALUE_;

+ (id<PythagorasFIVector>)UNIT_X {
  return PythagorasFVectors_UNIT_X_;
}

+ (id<PythagorasFIVector>)UNIT_Y {
  return PythagorasFVectors_UNIT_Y_;
}

+ (id<PythagorasFIVector>)ZERO {
  return PythagorasFVectors_ZERO_;
}

+ (id<PythagorasFIVector>)MIN_VALUE {
  return PythagorasFVectors_MIN_VALUE_;
}

+ (id<PythagorasFIVector>)MAX_VALUE {
  return PythagorasFVectors_MAX_VALUE_;
}

+ (PythagorasFVector *)fromPolarWithFloat:(float)magnitude
                                withFloat:(float)angle {
  return [[PythagorasFVector alloc] initWithFloat:magnitude * [PythagorasFFloatMath cosWithFloat:angle] withFloat:magnitude * [PythagorasFFloatMath sinWithFloat:angle]];
}

+ (PythagorasFVector *)fromWithPythagorasFIPoint:(id<PythagorasFIPoint>)from
                           withPythagorasFIPoint:(id<PythagorasFIPoint>)to {
  return [[PythagorasFVector alloc] initWithFloat:[((id<PythagorasFIPoint>) nil_chk(to)) x] - [((id<PythagorasFIPoint>) nil_chk(from)) x] withFloat:[((id<PythagorasFIPoint>) nil_chk(to)) y] - [((id<PythagorasFIPoint>) nil_chk(from)) y]];
}

+ (float)lengthWithFloat:(float)x
               withFloat:(float)y {
  return [PythagorasFFloatMath sqrtWithFloat:[PythagorasFVectors lengthSqWithFloat:x withFloat:y]];
}

+ (float)lengthSqWithFloat:(float)x
                 withFloat:(float)y {
  return (x * x + y * y);
}

+ (BOOL)isZeroWithFloat:(float)x
              withFloat:(float)y {
  return x == 0 && y == 0;
}

+ (BOOL)isEpsilonZeroWithFloat:(float)x
                     withFloat:(float)y {
  return [PythagorasFVectors isEpsilonZeroWithFloat:x withFloat:y withFloat:PythagorasFMathUtil_EPSILON];
}

+ (BOOL)isEpsilonZeroWithFloat:(float)x
                     withFloat:(float)y
                     withFloat:(float)epsilon {
  return [JavaLangMath absWithFloat:x] <= epsilon && [JavaLangMath absWithFloat:y] <= epsilon;
}

+ (BOOL)epsilonEqualsWithPythagorasFIVector:(id<PythagorasFIVector>)v1
                     withPythagorasFIVector:(id<PythagorasFIVector>)v2 {
  return [PythagorasFVectors epsilonEqualsWithPythagorasFIVector:v1 withPythagorasFIVector:v2 withFloat:PythagorasFMathUtil_EPSILON];
}

+ (BOOL)epsilonEqualsWithPythagorasFIVector:(id<PythagorasFIVector>)v1
                     withPythagorasFIVector:(id<PythagorasFIVector>)v2
                                  withFloat:(float)epsilon {
  return [JavaLangMath absWithFloat:[((id<PythagorasFIVector>) nil_chk(v1)) x] - [((id<PythagorasFIVector>) nil_chk(v2)) x]] <= epsilon && [JavaLangMath absWithFloat:[((id<PythagorasFIVector>) nil_chk(v1)) y] - [((id<PythagorasFIVector>) nil_chk(v2)) y]] <= epsilon;
}

+ (PythagorasFVector *)transformWithFloat:(float)x
                                withFloat:(float)y
                                withFloat:(float)sx
                                withFloat:(float)sy
                                withFloat:(float)rotation
                                withFloat:(float)tx
                                withFloat:(float)ty
                    withPythagorasFVector:(PythagorasFVector *)result {
  return [PythagorasFVectors transformWithFloat:x withFloat:y withFloat:sx withFloat:sy withFloat:[PythagorasFFloatMath sinWithFloat:rotation] withFloat:[PythagorasFFloatMath cosWithFloat:rotation] withFloat:tx withFloat:ty withPythagorasFVector:result];
}

+ (PythagorasFVector *)transformWithFloat:(float)x
                                withFloat:(float)y
                                withFloat:(float)sx
                                withFloat:(float)sy
                                withFloat:(float)rotation
                    withPythagorasFVector:(PythagorasFVector *)result {
  return [PythagorasFVectors transformWithFloat:x withFloat:y withFloat:sx withFloat:sy withFloat:[PythagorasFFloatMath sinWithFloat:rotation] withFloat:[PythagorasFFloatMath cosWithFloat:rotation] withPythagorasFVector:result];
}

+ (PythagorasFVector *)transformWithFloat:(float)x
                                withFloat:(float)y
                                withFloat:(float)sx
                                withFloat:(float)sy
                                withFloat:(float)sina
                                withFloat:(float)cosa
                    withPythagorasFVector:(PythagorasFVector *)result {
  return [((PythagorasFVector *) nil_chk(result)) setWithFloat:(x * cosa - y * sina) * sx withFloat:(x * sina + y * cosa) * sy];
}

+ (PythagorasFVector *)transformWithFloat:(float)x
                                withFloat:(float)y
                                withFloat:(float)sx
                                withFloat:(float)sy
                                withFloat:(float)sina
                                withFloat:(float)cosa
                                withFloat:(float)tx
                                withFloat:(float)ty
                    withPythagorasFVector:(PythagorasFVector *)result {
  return [((PythagorasFVector *) nil_chk(result)) setWithFloat:(x * cosa - y * sina) * sx + tx withFloat:(x * sina + y * cosa) * sy + ty];
}

+ (PythagorasFVector *)inverseTransformWithFloat:(float)x
                                       withFloat:(float)y
                                       withFloat:(float)sx
                                       withFloat:(float)sy
                                       withFloat:(float)rotation
                           withPythagorasFVector:(PythagorasFVector *)result {
  float sinnega = [PythagorasFFloatMath sinWithFloat:-rotation], cosnega = [PythagorasFFloatMath cosWithFloat:-rotation];
  float nx = (x * cosnega - y * sinnega);
  float ny = (x * sinnega + y * cosnega);
  return [((PythagorasFVector *) nil_chk(result)) setWithFloat:nx / sx withFloat:ny / sy];
}

+ (NSString *)vectorToStringWithFloat:(float)x
                            withFloat:(float)y {
  return [NSString stringWithFormat:@"%@%@", [PythagorasFMathUtil toStringWithFloat:x], [PythagorasFMathUtil toStringWithFloat:y]];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [PythagorasFVectors class]) {
    PythagorasFVectors_UNIT_X_ = [[PythagorasFVector alloc] initWithFloat:1.0f withFloat:0.0f];
    PythagorasFVectors_UNIT_Y_ = [[PythagorasFVector alloc] initWithFloat:0.0f withFloat:1.0f];
    PythagorasFVectors_ZERO_ = [[PythagorasFVector alloc] initWithFloat:0.0f withFloat:0.0f];
    PythagorasFVectors_MIN_VALUE_ = [[PythagorasFVector alloc] initWithFloat:-JavaLangFloat_MAX_VALUE withFloat:-JavaLangFloat_MAX_VALUE];
    PythagorasFVectors_MAX_VALUE_ = [[PythagorasFVector alloc] initWithFloat:JavaLangFloat_MAX_VALUE withFloat:JavaLangFloat_MAX_VALUE];
  }
}

@end

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/Path.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/NoSuchElementException.h"
#include "pythagoras/f/Crossing.h"
#include "pythagoras/f/FlatteningPathIterator.h"
#include "pythagoras/f/IPoint.h"
#include "pythagoras/f/IRectangle.h"
#include "pythagoras/f/IShape.h"
#include "pythagoras/f/IllegalPathStateException.h"
#include "pythagoras/f/Path.h"
#include "pythagoras/f/PathIterator.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Rectangle.h"
#include "pythagoras/f/Transform.h"
#include "pythagoras/util/Platform.h"

@implementation PythagorasFPath

static IOSIntArray * PythagorasFPath_pointShift_;

@synthesize types = types_;
@synthesize points = points_;
@synthesize typeSize = typeSize_;
@synthesize pointSize = pointSize_;
@synthesize rule = rule_;

+ (int)WIND_EVEN_ODD {
  return PythagorasFPath_WIND_EVEN_ODD;
}

+ (int)WIND_NON_ZERO {
  return PythagorasFPath_WIND_NON_ZERO;
}

+ (IOSIntArray *)pointShift {
  return PythagorasFPath_pointShift_;
}

+ (void)setPointShift:(IOSIntArray *)pointShift {
  PythagorasFPath_pointShift_ = pointShift;
}

+ (int)BUFFER_SIZE {
  return PythagorasFPath_BUFFER_SIZE;
}

+ (int)BUFFER_CAPACITY {
  return PythagorasFPath_BUFFER_CAPACITY;
}

- (id)init {
  return [self initPythagorasFPathWithInt:PythagorasFPath_WIND_NON_ZERO withInt:PythagorasFPath_BUFFER_SIZE];
}

- (id)initWithInt:(int)rule {
  return [self initPythagorasFPathWithInt:rule withInt:PythagorasFPath_BUFFER_SIZE];
}

- (id)initPythagorasFPathWithInt:(int)rule
                         withInt:(int)initialCapacity {
  if ((self = [super init])) {
    [self setWindingRuleWithInt:rule];
    types_ = [IOSByteArray arrayWithLength:initialCapacity];
    points_ = [IOSFloatArray arrayWithLength:initialCapacity * 2];
  }
  return self;
}

- (id)initWithInt:(int)rule
          withInt:(int)initialCapacity {
  return [self initPythagorasFPathWithInt:rule withInt:initialCapacity];
}

- (id)initWithPythagorasFIShape:(id<PythagorasFIShape>)shape {
  if ((self = [self initPythagorasFPathWithInt:PythagorasFPath_WIND_NON_ZERO withInt:PythagorasFPath_BUFFER_SIZE])) {
    id<PythagorasFPathIterator> p = [((id<PythagorasFIShape>) nil_chk(shape)) pathIteratorWithPythagorasFTransform:nil];
    [self setWindingRuleWithInt:[((id<PythagorasFPathIterator>) nil_chk(p)) windingRule]];
    [self appendWithPythagorasFPathIterator:p withBOOL:NO];
  }
  return self;
}

- (void)setWindingRuleWithInt:(int)rule {
  if (rule != PythagorasFPath_WIND_EVEN_ODD && rule != PythagorasFPath_WIND_NON_ZERO) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid winding rule value"];
  }
  self.rule = rule;
}

- (int)windingRule {
  return rule_;
}

- (void)moveToWithFloat:(float)x
              withFloat:(float)y {
  if (typeSize_ > 0 && [((IOSByteArray *) nil_chk(types_)) byteAtIndex:typeSize_ - 1] == PythagorasFPathIterator_SEG_MOVETO) {
    (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_ - 2]) = x;
    (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_ - 1]) = y;
  }
  else {
    [self checkBufWithInt:2 withBOOL:NO];
    (*[((IOSByteArray *) nil_chk(types_)) byteRefAtIndex:typeSize_++]) = PythagorasFPathIterator_SEG_MOVETO;
    (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = x;
    (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = y;
  }
}

- (void)lineToWithFloat:(float)x
              withFloat:(float)y {
  [self checkBufWithInt:2 withBOOL:YES];
  (*[((IOSByteArray *) nil_chk(types_)) byteRefAtIndex:typeSize_++]) = PythagorasFPathIterator_SEG_LINETO;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = x;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = y;
}

- (void)quadToWithFloat:(float)x1
              withFloat:(float)y1
              withFloat:(float)x2
              withFloat:(float)y2 {
  [self checkBufWithInt:4 withBOOL:YES];
  (*[((IOSByteArray *) nil_chk(types_)) byteRefAtIndex:typeSize_++]) = PythagorasFPathIterator_SEG_QUADTO;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = x1;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = y1;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = x2;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = y2;
}

- (void)curveToWithFloat:(float)x1
               withFloat:(float)y1
               withFloat:(float)x2
               withFloat:(float)y2
               withFloat:(float)x3
               withFloat:(float)y3 {
  [self checkBufWithInt:6 withBOOL:YES];
  (*[((IOSByteArray *) nil_chk(types_)) byteRefAtIndex:typeSize_++]) = PythagorasFPathIterator_SEG_CUBICTO;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = x1;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = y1;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = x2;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = y2;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = x3;
  (*[((IOSFloatArray *) nil_chk(points_)) floatRefAtIndex:pointSize_++]) = y3;
}

- (void)closePath {
  if (typeSize_ == 0 || [((IOSByteArray *) nil_chk(types_)) byteAtIndex:typeSize_ - 1] != PythagorasFPathIterator_SEG_CLOSE) {
    [self checkBufWithInt:0 withBOOL:YES];
    (*[((IOSByteArray *) nil_chk(types_)) byteRefAtIndex:typeSize_++]) = PythagorasFPathIterator_SEG_CLOSE;
  }
}

- (void)appendWithPythagorasFIShape:(id<PythagorasFIShape>)shape
                           withBOOL:(BOOL)connect {
  id<PythagorasFPathIterator> p = [((id<PythagorasFIShape>) nil_chk(shape)) pathIteratorWithPythagorasFTransform:nil];
  [self appendWithPythagorasFPathIterator:p withBOOL:connect];
}

- (void)appendWithPythagorasFPathIterator:(id<PythagorasFPathIterator>)path
                                 withBOOL:(BOOL)connect {
  while (![((id<PythagorasFPathIterator>) nil_chk(path)) isDone]) {
    IOSFloatArray *coords = [IOSFloatArray arrayWithLength:6];
    switch ([((id<PythagorasFPathIterator>) nil_chk(path)) currentSegmentWithFloatArray:coords]) {
      case PythagorasFPathIterator_SEG_MOVETO:
      if (!connect || typeSize_ == 0) {
        [self moveToWithFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:1]];
      }
      else if ([((IOSByteArray *) nil_chk(types_)) byteAtIndex:typeSize_ - 1] != PythagorasFPathIterator_SEG_CLOSE && [((IOSFloatArray *) nil_chk(points_)) floatAtIndex:pointSize_ - 2] == [((IOSFloatArray *) nil_chk(coords)) floatAtIndex:0] && [((IOSFloatArray *) nil_chk(points_)) floatAtIndex:pointSize_ - 1] == [((IOSFloatArray *) nil_chk(coords)) floatAtIndex:1]) {
      }
      else {
        [self lineToWithFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:1]];
      }
      break;
      case PythagorasFPathIterator_SEG_LINETO:
      [self lineToWithFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:1]];
      break;
      case PythagorasFPathIterator_SEG_QUADTO:
      [self quadToWithFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:1] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:2] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:3]];
      break;
      case PythagorasFPathIterator_SEG_CUBICTO:
      [self curveToWithFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:0] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:1] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:2] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:3] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:4] withFloat:[((IOSFloatArray *) nil_chk(coords)) floatAtIndex:5]];
      break;
      case PythagorasFPathIterator_SEG_CLOSE:
      [self closePath];
      break;
    }
    [((id<PythagorasFPathIterator>) nil_chk(path)) next];
    connect = NO;
  }
}

- (PythagorasFPoint *)currentPoint {
  if (typeSize_ == 0) {
    return nil;
  }
  int j = pointSize_ - 2;
  if ([((IOSByteArray *) nil_chk(types_)) byteAtIndex:typeSize_ - 1] == PythagorasFPathIterator_SEG_CLOSE) {
    for (int i = typeSize_ - 2; i > 0; i--) {
      int type = [((IOSByteArray *) nil_chk(types_)) byteAtIndex:i];
      if (type == PythagorasFPathIterator_SEG_MOVETO) {
        break;
      }
      j -= [((IOSIntArray *) nil_chk(PythagorasFPath_pointShift_)) intAtIndex:type];
    }
  }
  return [[PythagorasFPoint alloc] initWithFloat:[((IOSFloatArray *) nil_chk(points_)) floatAtIndex:j] withFloat:[((IOSFloatArray *) nil_chk(points_)) floatAtIndex:j + 1]];
}

- (void)reset {
  typeSize_ = 0;
  pointSize_ = 0;
}

- (void)transformWithPythagorasFTransform:(id<PythagorasFTransform>)t {
  [((id<PythagorasFTransform>) nil_chk(t)) transformWithFloatArray:points_ withInt:0 withFloatArray:points_ withInt:0 withInt:pointSize_ / 2];
}

- (id<PythagorasFIShape>)createTransformedShapeWithPythagorasFTransform:(id<PythagorasFTransform>)t {
  PythagorasFPath *p = [self clone];
  if (t != nil) {
    [((PythagorasFPath *) nil_chk(p)) transformWithPythagorasFTransform:t];
  }
  return p;
}

- (PythagorasFRectangle *)bounds {
  return [self boundsWithPythagorasFRectangle:[[PythagorasFRectangle alloc] init]];
}

- (PythagorasFRectangle *)boundsWithPythagorasFRectangle:(PythagorasFRectangle *)target {
  float rx1, ry1, rx2, ry2;
  if (pointSize_ == 0) {
    rx1 = ry1 = rx2 = ry2 = 0.0f;
  }
  else {
    int i = pointSize_ - 1;
    ry1 = ry2 = [((IOSFloatArray *) nil_chk(points_)) floatAtIndex:i--];
    rx1 = rx2 = [((IOSFloatArray *) nil_chk(points_)) floatAtIndex:i--];
    while (i > 0) {
      float y = [((IOSFloatArray *) nil_chk(points_)) floatAtIndex:i--];
      float x = [((IOSFloatArray *) nil_chk(points_)) floatAtIndex:i--];
      if (x < rx1) {
        rx1 = x;
      }
      else if (x > rx2) {
        rx2 = x;
      }
      if (y < ry1) {
        ry1 = y;
      }
      else if (y > ry2) {
        ry2 = y;
      }
    }
  }
  [((PythagorasFRectangle *) nil_chk(target)) setBoundsWithFloat:rx1 withFloat:ry1 withFloat:rx2 - rx1 withFloat:ry2 - ry1];
  return target;
}

- (BOOL)isEmpty {
  return [((PythagorasFRectangle *) nil_chk([self bounds])) isEmpty];
}

- (BOOL)containsWithFloat:(float)px
                withFloat:(float)py {
  return [self isInsideWithInt:[PythagorasFCrossing crossShapeWithPythagorasFIShape:self withFloat:px withFloat:py]];
}

- (BOOL)containsWithFloat:(float)rx
                withFloat:(float)ry
                withFloat:(float)rw
                withFloat:(float)rh {
  int cross = [PythagorasFCrossing intersectShapeWithPythagorasFIShape:self withFloat:rx withFloat:ry withFloat:rw withFloat:rh];
  return cross != PythagorasFCrossing_CROSSING && [self isInsideWithInt:cross];
}

- (BOOL)intersectsWithFloat:(float)rx
                  withFloat:(float)ry
                  withFloat:(float)rw
                  withFloat:(float)rh {
  int cross = [PythagorasFCrossing intersectShapeWithPythagorasFIShape:self withFloat:rx withFloat:ry withFloat:rw withFloat:rh];
  return cross == PythagorasFCrossing_CROSSING || [self isInsideWithInt:cross];
}

- (BOOL)containsWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  return [self containsWithFloat:[((id<PythagorasFIPoint>) nil_chk(p)) x] withFloat:[((id<PythagorasFIPoint>) nil_chk(p)) y]];
}

- (BOOL)containsWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)r {
  return [self containsWithFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) x] withFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) y] withFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) width] withFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) height]];
}

- (BOOL)intersectsWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)r {
  return [self intersectsWithFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) x] withFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) y] withFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) width] withFloat:[((id<PythagorasFIRectangle>) nil_chk(r)) height]];
}

- (id<PythagorasFPathIterator>)pathIteratorWithPythagorasFTransform:(id<PythagorasFTransform>)t {
  return [[PythagorasFPath_Iterator alloc] initWithPythagorasFPath:self withPythagorasFTransform:t];
}

- (id<PythagorasFPathIterator>)pathIteratorWithPythagorasFTransform:(id<PythagorasFTransform>)t
                                                          withFloat:(float)flatness {
  return [[PythagorasFFlatteningPathIterator alloc] initWithPythagorasFPathIterator:[self pathIteratorWithPythagorasFTransform:t] withFloat:flatness];
}

- (PythagorasFPath *)clone {
  return [[PythagorasFPath alloc] initWithInt:rule_ withByteArray:[PythagorasUtilPlatform cloneWithByteArray:types_] withFloatArray:[PythagorasUtilPlatform cloneWithFloatArray:points_] withInt:typeSize_ withInt:pointSize_];
}

- (void)checkBufWithInt:(int)pointCount
               withBOOL:(BOOL)checkMove {
  if (checkMove && typeSize_ == 0) {
    @throw [[PythagorasFIllegalPathStateException alloc] initWithNSString:@"First segment must be a SEG_MOVETO"];
  }
  if (typeSize_ == (int) [((IOSByteArray *) nil_chk(types_)) count]) {
    IOSByteArray *tmp = [IOSByteArray arrayWithLength:typeSize_ + PythagorasFPath_BUFFER_CAPACITY];
    [JavaLangSystem arraycopyWithId:types_ withInt:0 withId:tmp withInt:0 withInt:typeSize_];
    types_ = tmp;
  }
  if (pointSize_ + pointCount > (int) [((IOSFloatArray *) nil_chk(points_)) count]) {
    IOSFloatArray *tmp = [IOSFloatArray arrayWithLength:pointSize_ + [JavaLangMath maxWithInt:PythagorasFPath_BUFFER_CAPACITY * 2 withInt:pointCount]];
    [JavaLangSystem arraycopyWithId:points_ withInt:0 withId:tmp withInt:0 withInt:pointSize_];
    points_ = tmp;
  }
}

- (BOOL)isInsideWithInt:(int)cross {
  return (rule_ == PythagorasFPath_WIND_NON_ZERO) ? [PythagorasFCrossing isInsideNonZeroWithInt:cross] : [PythagorasFCrossing isInsideEvenOddWithInt:cross];
}

- (id)initWithInt:(int)rule
    withByteArray:(IOSByteArray *)types
   withFloatArray:(IOSFloatArray *)points
          withInt:(int)typeSize
          withInt:(int)pointSize {
  if ((self = [super init])) {
    self.rule = rule;
    self.types = types;
    self.points = points;
    self.typeSize = typeSize;
    self.pointSize = pointSize;
  }
  return self;
}

+ (void)initialize {
  if (self == [PythagorasFPath class]) {
    PythagorasFPath_pointShift_ = [IOSIntArray arrayWithInts:(int[]){ 2, 2, 4, 6, 0 } count:5];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFPath *typedCopy = (PythagorasFPath *) copy;
  typedCopy.types = types_;
  typedCopy.points = points_;
  typedCopy.typeSize = typeSize_;
  typedCopy.pointSize = pointSize_;
  typedCopy.rule = rule_;
}

@end
@implementation PythagorasFPath_Iterator

@synthesize typeIndex = typeIndex_;
@synthesize pointIndex = pointIndex_;
@synthesize p = p_;
@synthesize t = t_;

- (id)initWithPythagorasFPath:(PythagorasFPath *)path {
  return [self initPythagorasFPath_IteratorWithPythagorasFPath:path withPythagorasFTransform:nil];
}

- (id)initPythagorasFPath_IteratorWithPythagorasFPath:(PythagorasFPath *)path
                             withPythagorasFTransform:(id<PythagorasFTransform>)at {
  if ((self = [super init])) {
    self.p = path;
    self.t = at;
  }
  return self;
}

- (id)initWithPythagorasFPath:(PythagorasFPath *)path
     withPythagorasFTransform:(id<PythagorasFTransform>)at {
  return [self initPythagorasFPath_IteratorWithPythagorasFPath:path withPythagorasFTransform:at];
}

- (int)windingRule {
  return [((PythagorasFPath *) nil_chk(p_)) windingRule];
}

- (BOOL)isDone {
  return typeIndex_ >= ((PythagorasFPath *) nil_chk(p_)).typeSize;
}

- (void)next {
  typeIndex_++;
}

- (int)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:@"Iterator out of bounds"];
  }
  int type = [((IOSByteArray *) nil_chk(((PythagorasFPath *) nil_chk(p_)).types)) byteAtIndex:typeIndex_];
  int count = [((IOSIntArray *) nil_chk([PythagorasFPath pointShift])) intAtIndex:type];
  [JavaLangSystem arraycopyWithId:((PythagorasFPath *) nil_chk(p_)).points withInt:pointIndex_ withId:coords withInt:0 withInt:count];
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:count / 2];
  }
  pointIndex_ += count;
  return type;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFPath_Iterator *typedCopy = (PythagorasFPath_Iterator *) copy;
  typedCopy.typeIndex = typeIndex_;
  typedCopy.pointIndex = pointIndex_;
  typedCopy.p = p_;
  typedCopy.t = t_;
}

@end

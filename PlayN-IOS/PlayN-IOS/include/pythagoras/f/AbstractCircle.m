//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/AbstractCircle.java
//
//  Created by Thomas on 7/25/13.
//

#include "pythagoras/f/AbstractCircle.h"
#include "pythagoras/f/Circle.h"
#include "pythagoras/f/ICircle.h"
#include "pythagoras/f/IPoint.h"
#include "pythagoras/f/Points.h"
#include "pythagoras/util/Platform.h"

@implementation PythagorasFAbstractCircle

- (BOOL)intersectsWithPythagorasFICircle:(id<PythagorasFICircle>)c {
  float maxDist = [self radius] + [((id<PythagorasFICircle>) nil_chk(c)) radius];
  return [PythagorasFPoints distanceSqWithFloat:[self x] withFloat:[self y] withFloat:[((id<PythagorasFICircle>) nil_chk(c)) x] withFloat:[((id<PythagorasFICircle>) nil_chk(c)) y]] < (maxDist * maxDist);
}

- (BOOL)containsWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  float r = [self radius];
  return [PythagorasFPoints distanceSqWithFloat:[self x] withFloat:[self y] withFloat:[((id<PythagorasFIPoint>) nil_chk(p)) x] withFloat:[((id<PythagorasFIPoint>) nil_chk(p)) y]] < r * r;
}

- (BOOL)containsWithFloat:(float)x
                withFloat:(float)y {
  float r = [self radius];
  return [PythagorasFPoints distanceSqWithFloat:[self x] withFloat:[self y] withFloat:x withFloat:y] < r * r;
}

- (PythagorasFCircle *)offsetWithFloat:(float)x
                             withFloat:(float)y {
  return [[PythagorasFCircle alloc] initWithFloat:[self x] + x withFloat:[self y] + y withFloat:[self radius]];
}

- (PythagorasFCircle *)offsetWithFloat:(float)x
                             withFloat:(float)y
                 withPythagorasFCircle:(PythagorasFCircle *)result {
  (void) [((PythagorasFCircle *) nil_chk(result)) setWithFloat:[self x] + x withFloat:[self y] + y withFloat:[self radius]];
  return result;
}

- (PythagorasFCircle *)clone {
  return [[PythagorasFCircle alloc] initWithPythagorasFICircle:self];
}

- (BOOL)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[PythagorasFAbstractCircle class]]) {
    PythagorasFAbstractCircle *c = (PythagorasFAbstractCircle *) obj;
    return [self x] == [((PythagorasFAbstractCircle *) nil_chk(c)) x] && [self y] == [((PythagorasFAbstractCircle *) nil_chk(c)) y] && [self radius] == [((PythagorasFAbstractCircle *) nil_chk(c)) radius];
  }
  return NO;
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithFloat:[self x]] ^ [PythagorasUtilPlatform hashCodeWithFloat:[self y]] ^ [PythagorasUtilPlatform hashCodeWithFloat:[self radius]];
}

- (float)radius {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

@end

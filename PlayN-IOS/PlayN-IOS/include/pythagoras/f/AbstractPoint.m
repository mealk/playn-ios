//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/AbstractPoint.java
//
//  Created by Thomas on 7/25/13.
//

#include "pythagoras/f/AbstractPoint.h"
#include "pythagoras/f/FloatMath.h"
#include "pythagoras/f/IPoint.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Points.h"
#include "pythagoras/f/XY.h"
#include "pythagoras/util/Platform.h"

@implementation PythagorasFAbstractPoint

- (float)distanceSqWithFloat:(float)px
                   withFloat:(float)py {
  return [PythagorasFPoints distanceSqWithFloat:[self x] withFloat:[self y] withFloat:px withFloat:py];
}

- (float)distanceSqWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  return [PythagorasFPoints distanceSqWithFloat:[self x] withFloat:[self y] withFloat:[((id<PythagorasFIPoint>) nil_chk(p)) x] withFloat:[((id<PythagorasFIPoint>) nil_chk(p)) y]];
}

- (float)distanceWithFloat:(float)px
                 withFloat:(float)py {
  return [PythagorasFPoints distanceWithFloat:[self x] withFloat:[self y] withFloat:px withFloat:py];
}

- (float)distanceWithPythagorasFIPoint:(id<PythagorasFIPoint>)p {
  return [PythagorasFPoints distanceWithFloat:[self x] withFloat:[self y] withFloat:[((id<PythagorasFIPoint>) nil_chk(p)) x] withFloat:[((id<PythagorasFIPoint>) nil_chk(p)) y]];
}

- (float)directionWithPythagorasFIPoint:(id<PythagorasFIPoint>)other {
  return [PythagorasFFloatMath atan2WithFloat:[((id<PythagorasFIPoint>) nil_chk(other)) y] - [self y] withFloat:[((id<PythagorasFIPoint>) nil_chk(other)) x] - [self x]];
}

- (PythagorasFPoint *)multWithFloat:(float)s {
  return [self multWithFloat:s withPythagorasFPoint:[[PythagorasFPoint alloc] init]];
}

- (PythagorasFPoint *)multWithFloat:(float)s
               withPythagorasFPoint:(PythagorasFPoint *)result {
  return [((PythagorasFPoint *) nil_chk(result)) setWithFloat:[self x] * s withFloat:[self y] * s];
}

- (PythagorasFPoint *)addWithFloat:(float)x
                         withFloat:(float)y {
  return [[PythagorasFPoint alloc] initWithFloat:[self x] + x withFloat:[self y] + y];
}

- (PythagorasFPoint *)addWithFloat:(float)x
                         withFloat:(float)y
              withPythagorasFPoint:(PythagorasFPoint *)result {
  return [((PythagorasFPoint *) nil_chk(result)) setWithFloat:[self x] + x withFloat:[self y] + y];
}

- (PythagorasFPoint *)subtractWithFloat:(float)x
                              withFloat:(float)y {
  return [self subtractWithFloat:x withFloat:y withPythagorasFPoint:[[PythagorasFPoint alloc] init]];
}

- (PythagorasFPoint *)subtractWithFloat:(float)x
                              withFloat:(float)y
                   withPythagorasFPoint:(PythagorasFPoint *)result {
  return [((PythagorasFPoint *) nil_chk(result)) setWithFloat:[self x] - x withFloat:[self y] - y];
}

- (PythagorasFPoint *)subtractWithPythagorasFIPoint:(id<PythagorasFIPoint>)other
                               withPythagorasFPoint:(PythagorasFPoint *)result {
  return [self subtractWithFloat:[((id<PythagorasFIPoint>) nil_chk(other)) x] withFloat:[((id<PythagorasFIPoint>) nil_chk(other)) y] withPythagorasFPoint:result];
}

- (PythagorasFPoint *)rotateWithFloat:(float)angle {
  return [self rotateWithFloat:angle withPythagorasFPoint:[[PythagorasFPoint alloc] init]];
}

- (PythagorasFPoint *)rotateWithFloat:(float)angle
                 withPythagorasFPoint:(PythagorasFPoint *)result {
  float x = [self x], y = [self y];
  float sina = [PythagorasFFloatMath sinWithFloat:angle], cosa = [PythagorasFFloatMath cosWithFloat:angle];
  return [((PythagorasFPoint *) nil_chk(result)) setWithFloat:x * cosa - y * sina withFloat:x * sina + y * cosa];
}

- (PythagorasFPoint *)clone {
  return [[PythagorasFPoint alloc] initWithPythagorasFIPoint:self];
}

- (BOOL)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[PythagorasFAbstractPoint class]]) {
    PythagorasFAbstractPoint *p = (PythagorasFAbstractPoint *) obj;
    return [self x] == [((PythagorasFAbstractPoint *) nil_chk(p)) x] && [self y] == [((PythagorasFAbstractPoint *) nil_chk(p)) y];
  }
  return NO;
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithFloat:[self x]] ^ [PythagorasUtilPlatform hashCodeWithFloat:[self y]];
}

- (NSString *)description {
  return [PythagorasFPoints pointToStringWithFloat:[self x] withFloat:[self y]];
}

- (float)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

@end

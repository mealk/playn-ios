//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/IdentityTransform.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSFloatArray.h"
#include "IOSObjectArray.h"
#include "java/lang/UnsupportedOperationException.h"
#include "pythagoras/f/IPoint.h"
#include "pythagoras/f/IVector.h"
#include "pythagoras/f/IdentityTransform.h"
#include "pythagoras/f/Point.h"
#include "pythagoras/f/Transform.h"
#include "pythagoras/f/Vector.h"

@implementation PythagorasFIdentityTransform

+ (int)GENERALITY {
  return PythagorasFIdentityTransform_GENERALITY;
}

- (float)uniformScale {
  return 1;
}

- (float)scaleX {
  return 1;
}

- (float)scaleY {
  return 1;
}

- (float)rotation {
  return 0;
}

- (float)tx {
  return 0;
}

- (float)ty {
  return 0;
}

- (void)getWithFloatArray:(IOSFloatArray *)matrix {
  (*[((IOSFloatArray *) nil_chk(matrix)) floatRefAtIndex:0]) = 1;
  (*[((IOSFloatArray *) nil_chk(matrix)) floatRefAtIndex:1]) = 0;
  (*[((IOSFloatArray *) nil_chk(matrix)) floatRefAtIndex:2]) = 0;
  (*[((IOSFloatArray *) nil_chk(matrix)) floatRefAtIndex:3]) = 1;
  (*[((IOSFloatArray *) nil_chk(matrix)) floatRefAtIndex:4]) = 0;
  (*[((IOSFloatArray *) nil_chk(matrix)) floatRefAtIndex:5]) = 0;
}

- (id<PythagorasFTransform>)invert {
  return self;
}

- (id<PythagorasFTransform>)concatenateWithPythagorasFTransform:(id<PythagorasFTransform>)other {
  return other;
}

- (id<PythagorasFTransform>)preConcatenateWithPythagorasFTransform:(id<PythagorasFTransform>)other {
  return other;
}

- (id<PythagorasFTransform>)lerpWithPythagorasFTransform:(id<PythagorasFTransform>)other
                                               withFloat:(float)t {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (PythagorasFPoint *)transformWithPythagorasFIPoint:(id<PythagorasFIPoint>)p
                                withPythagorasFPoint:(PythagorasFPoint *)into {
  return [((PythagorasFPoint *) nil_chk(into)) setWithPythagorasFIPoint:p];
}

- (void)transformWithPythagorasFIPointArray:(IOSObjectArray *)src
                                    withInt:(int)srcOff
                  withPythagorasFPointArray:(IOSObjectArray *)dst
                                    withInt:(int)dstOff
                                    withInt:(int)count {
  for (int ii = 0; ii < count; ii++) {
    (void) [self transformWithPythagorasFIPoint:[((IOSObjectArray *) nil_chk(src)) objectAtIndex:srcOff++] withPythagorasFPoint:[((IOSObjectArray *) nil_chk(dst)) objectAtIndex:dstOff++]];
  }
}

- (void)transformWithFloatArray:(IOSFloatArray *)src
                        withInt:(int)srcOff
                 withFloatArray:(IOSFloatArray *)dst
                        withInt:(int)dstOff
                        withInt:(int)count {
  for (int ii = 0; ii < count; ii++) {
    (*[((IOSFloatArray *) nil_chk(dst)) floatRefAtIndex:dstOff++]) = [((IOSFloatArray *) nil_chk(src)) floatAtIndex:srcOff++];
  }
}

- (PythagorasFPoint *)inverseTransformWithPythagorasFIPoint:(id<PythagorasFIPoint>)p
                                       withPythagorasFPoint:(PythagorasFPoint *)into {
  return [((PythagorasFPoint *) nil_chk(into)) setWithPythagorasFIPoint:p];
}

- (PythagorasFVector *)transformPointWithPythagorasFIVector:(id<PythagorasFIVector>)v
                                      withPythagorasFVector:(PythagorasFVector *)into {
  return [((PythagorasFVector *) nil_chk(into)) setWithPythagorasFIVector:v];
}

- (PythagorasFVector *)transformWithPythagorasFIVector:(id<PythagorasFIVector>)v
                                 withPythagorasFVector:(PythagorasFVector *)into {
  return [((PythagorasFVector *) nil_chk(into)) setWithPythagorasFIVector:v];
}

- (PythagorasFVector *)inverseTransformWithPythagorasFIVector:(id<PythagorasFIVector>)v
                                        withPythagorasFVector:(PythagorasFVector *)into {
  return [((PythagorasFVector *) nil_chk(into)) setWithPythagorasFIVector:v];
}

- (id<PythagorasFTransform>)copy__ OBJC_METHOD_FAMILY_NONE {
  return self;
}

- (int)generality {
  return PythagorasFIdentityTransform_GENERALITY;
}

- (NSString *)description {
  return @"ident";
}

- (id)init {
  return [super init];
}

@end

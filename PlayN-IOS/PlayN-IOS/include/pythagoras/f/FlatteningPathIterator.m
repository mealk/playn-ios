//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/f/FlatteningPathIterator.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSFloatArray.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Math.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/System.h"
#import "java/util/NoSuchElementException.h"
#import "pythagoras/f/CubicCurves.h"
#import "pythagoras/f/FlatteningPathIterator.h"
#import "pythagoras/f/PathIterator.h"
#import "pythagoras/f/QuadCurves.h"

@implementation PythagorasFFlatteningPathIterator

@synthesize bufType = bufType_;
@synthesize bufLimit = bufLimit_;
@synthesize bufSize = bufSize_;
@synthesize bufIndex = bufIndex_;
@synthesize bufSubdiv = bufSubdiv_;
@synthesize buf = buf_;
@synthesize bufEmpty = bufEmpty_;
@synthesize p = p_;
@synthesize flatness_ = flatness__;
@synthesize flatness2 = flatness2_;
@synthesize px = px_;
@synthesize py = py_;
@synthesize coords = coords_;

- (id)initWithPythagorasFPathIterator:(id<PythagorasFPathIterator>)path
                            withFloat:(float)flatness {
  return [self initPythagorasFFlatteningPathIteratorWithPythagorasFPathIterator:path withFloat:flatness withInt:PythagorasFFlatteningPathIterator_BUFFER_LIMIT];
}

- (id)initPythagorasFFlatteningPathIteratorWithPythagorasFPathIterator:(id<PythagorasFPathIterator>)path
                                                             withFloat:(float)flatness
                                                               withInt:(int)limit {
  if ((self = [super init])) {
    bufEmpty_ = YES;
    coords_ = [[IOSFloatArray alloc] initWithLength:6];
    if (flatness < 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Flatness is less then zero"];
    }
    if (limit < 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Limit is less then zero"];
    }
    if (path == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Path is null"];
    }
    self.p = path;
    self.flatness_ = flatness;
    self.flatness2 = flatness * flatness;
    self.bufLimit = limit;
    self.bufSize = [JavaLangMath minWithInt:bufLimit_ withInt:PythagorasFFlatteningPathIterator_BUFFER_SIZE];
    self.buf = [[IOSFloatArray alloc] initWithLength:bufSize_];
    self.bufIndex = bufSize_;
  }
  return self;
}

- (id)initWithPythagorasFPathIterator:(id<PythagorasFPathIterator>)path
                            withFloat:(float)flatness
                              withInt:(int)limit {
  return [self initPythagorasFFlatteningPathIteratorWithPythagorasFPathIterator:path withFloat:flatness withInt:limit];
}

- (float)flatness {
  return flatness__;
}

- (int)recursionLimit {
  return bufLimit_;
}

- (int)windingRule {
  return [((id<PythagorasFPathIterator>) NIL_CHK(p_)) windingRule];
}

- (BOOL)isDone {
  return bufEmpty_ && [((id<PythagorasFPathIterator>) NIL_CHK(p_)) isDone];
}

- (void)next {
  if (bufEmpty_) {
    [((id<PythagorasFPathIterator>) NIL_CHK(p_)) next];
  }
}

- (int)currentSegmentWithJavaLangFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:@"Iterator out of bounds"];
  }
  [self evaluate];
  int type = bufType_;
  if (type != PythagorasFPathIterator_SEG_CLOSE) {
    [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:0 withFloat:px_];
    [((IOSFloatArray *) NIL_CHK(coords)) replaceFloatAtIndex:1 withFloat:py_];
    if (type != PythagorasFPathIterator_SEG_MOVETO) {
      type = PythagorasFPathIterator_SEG_LINETO;
    }
  }
  return type;
}

- (void)evaluate {
  if (bufEmpty_) {
    bufType_ = [((id<PythagorasFPathIterator>) NIL_CHK(p_)) currentSegmentWithJavaLangFloatArray:coords_];
  }
  switch (bufType_) {
    case PythagorasFPathIterator_SEG_MOVETO:
    case PythagorasFPathIterator_SEG_LINETO:
    px_ = [((IOSFloatArray *) NIL_CHK(coords_)) floatAtIndex:0];
    py_ = [((IOSFloatArray *) NIL_CHK(coords_)) floatAtIndex:1];
    break;
    case PythagorasFPathIterator_SEG_QUADTO:
    if (bufEmpty_) {
      bufIndex_ -= 6;
      [((IOSFloatArray *) NIL_CHK(buf_)) replaceFloatAtIndex:bufIndex_ + 0 withFloat:px_];
      [((IOSFloatArray *) NIL_CHK(buf_)) replaceFloatAtIndex:bufIndex_ + 1 withFloat:py_];
      [JavaLangSystem arraycopyWithId:coords_ withInt:0 withId:buf_ withInt:bufIndex_ + 2 withInt:4];
      bufSubdiv_ = 0;
    }
    while (bufSubdiv_ < bufLimit_) {
      if ([PythagorasFQuadCurves flatnessSqWithJavaLangFloatArray:buf_ withInt:bufIndex_] < flatness2_) {
        break;
      }
      if (bufIndex_ <= 4) {
        IOSFloatArray *tmp = [[IOSFloatArray alloc] initWithLength:bufSize_ + PythagorasFFlatteningPathIterator_BUFFER_CAPACITY];
        [JavaLangSystem arraycopyWithId:buf_ withInt:bufIndex_ withId:tmp withInt:bufIndex_ + PythagorasFFlatteningPathIterator_BUFFER_CAPACITY withInt:bufSize_ - bufIndex_];
        buf_ = tmp;
        bufSize_ += PythagorasFFlatteningPathIterator_BUFFER_CAPACITY;
        bufIndex_ += PythagorasFFlatteningPathIterator_BUFFER_CAPACITY;
      }
      [PythagorasFQuadCurves subdivideWithJavaLangFloatArray:buf_ withInt:bufIndex_ withJavaLangFloatArray:buf_ withInt:bufIndex_ - 4 withJavaLangFloatArray:buf_ withInt:bufIndex_];
      bufIndex_ -= 4;
      bufSubdiv_++;
    }
    bufIndex_ += 4;
    px_ = [((IOSFloatArray *) NIL_CHK(buf_)) floatAtIndex:bufIndex_];
    py_ = [((IOSFloatArray *) NIL_CHK(buf_)) floatAtIndex:bufIndex_ + 1];
    bufEmpty_ = (bufIndex_ == bufSize_ - 2);
    if (bufEmpty_) {
      bufIndex_ = bufSize_;
      bufType_ = PythagorasFPathIterator_SEG_LINETO;
    }
    break;
    case PythagorasFPathIterator_SEG_CUBICTO:
    if (bufEmpty_) {
      bufIndex_ -= 8;
      [((IOSFloatArray *) NIL_CHK(buf_)) replaceFloatAtIndex:bufIndex_ + 0 withFloat:px_];
      [((IOSFloatArray *) NIL_CHK(buf_)) replaceFloatAtIndex:bufIndex_ + 1 withFloat:py_];
      [JavaLangSystem arraycopyWithId:coords_ withInt:0 withId:buf_ withInt:bufIndex_ + 2 withInt:6];
      bufSubdiv_ = 0;
    }
    while (bufSubdiv_ < bufLimit_) {
      if ([PythagorasFCubicCurves flatnessSqWithJavaLangFloatArray:buf_ withInt:bufIndex_] < flatness2_) {
        break;
      }
      if (bufIndex_ <= 6) {
        IOSFloatArray *tmp = [[IOSFloatArray alloc] initWithLength:bufSize_ + PythagorasFFlatteningPathIterator_BUFFER_CAPACITY];
        [JavaLangSystem arraycopyWithId:buf_ withInt:bufIndex_ withId:tmp withInt:bufIndex_ + PythagorasFFlatteningPathIterator_BUFFER_CAPACITY withInt:bufSize_ - bufIndex_];
        buf_ = tmp;
        bufSize_ += PythagorasFFlatteningPathIterator_BUFFER_CAPACITY;
        bufIndex_ += PythagorasFFlatteningPathIterator_BUFFER_CAPACITY;
      }
      [PythagorasFCubicCurves subdivideWithJavaLangFloatArray:buf_ withInt:bufIndex_ withJavaLangFloatArray:buf_ withInt:bufIndex_ - 6 withJavaLangFloatArray:buf_ withInt:bufIndex_];
      bufIndex_ -= 6;
      bufSubdiv_++;
    }
    bufIndex_ += 6;
    px_ = [((IOSFloatArray *) NIL_CHK(buf_)) floatAtIndex:bufIndex_];
    py_ = [((IOSFloatArray *) NIL_CHK(buf_)) floatAtIndex:bufIndex_ + 1];
    bufEmpty_ = (bufIndex_ == bufSize_ - 2);
    if (bufEmpty_) {
      bufIndex_ = bufSize_;
      bufType_ = PythagorasFPathIterator_SEG_LINETO;
    }
    break;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasFFlatteningPathIterator *typedCopy = (PythagorasFFlatteningPathIterator *) copy;
  typedCopy.bufType = bufType_;
  typedCopy.bufLimit = bufLimit_;
  typedCopy.bufSize = bufSize_;
  typedCopy.bufIndex = bufIndex_;
  typedCopy.bufSubdiv = bufSubdiv_;
  typedCopy.buf = buf_;
  typedCopy.bufEmpty = bufEmpty_;
  typedCopy.p = p_;
  typedCopy.flatness_ = flatness__;
  typedCopy.flatness2 = flatness2_;
  typedCopy.px = px_;
  typedCopy.py = py_;
  typedCopy.coords = coords_;
}

@end

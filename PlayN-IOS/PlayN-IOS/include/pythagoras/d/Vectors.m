//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Vectors.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "pythagoras/d/IPoint.h"
#include "pythagoras/d/IVector.h"
#include "pythagoras/d/MathUtil.h"
#include "pythagoras/d/Vector.h"
#include "pythagoras/d/Vectors.h"

@implementation PythagorasDVectors

static id<PythagorasDIVector> PythagorasDVectors_UNIT_X_;
static id<PythagorasDIVector> PythagorasDVectors_UNIT_Y_;
static id<PythagorasDIVector> PythagorasDVectors_ZERO_;
static id<PythagorasDIVector> PythagorasDVectors_MIN_VALUE_;
static id<PythagorasDIVector> PythagorasDVectors_MAX_VALUE_;

+ (id<PythagorasDIVector>)UNIT_X {
  return PythagorasDVectors_UNIT_X_;
}

+ (id<PythagorasDIVector>)UNIT_Y {
  return PythagorasDVectors_UNIT_Y_;
}

+ (id<PythagorasDIVector>)ZERO {
  return PythagorasDVectors_ZERO_;
}

+ (id<PythagorasDIVector>)MIN_VALUE {
  return PythagorasDVectors_MIN_VALUE_;
}

+ (id<PythagorasDIVector>)MAX_VALUE {
  return PythagorasDVectors_MAX_VALUE_;
}

+ (PythagorasDVector *)fromPolarWithDouble:(double)magnitude
                                withDouble:(double)angle {
  return [[PythagorasDVector alloc] initWithDouble:magnitude * [JavaLangMath cosWithDouble:angle] withDouble:magnitude * [JavaLangMath sinWithDouble:angle]];
}

+ (PythagorasDVector *)fromWithPythagorasDIPoint:(id<PythagorasDIPoint>)from
                           withPythagorasDIPoint:(id<PythagorasDIPoint>)to {
  return [[PythagorasDVector alloc] initWithDouble:[((id<PythagorasDIPoint>) nil_chk(to)) x] - [((id<PythagorasDIPoint>) nil_chk(from)) x] withDouble:[((id<PythagorasDIPoint>) nil_chk(to)) y] - [((id<PythagorasDIPoint>) nil_chk(from)) y]];
}

+ (double)lengthWithDouble:(double)x
                withDouble:(double)y {
  return [JavaLangMath sqrtWithDouble:[PythagorasDVectors lengthSqWithDouble:x withDouble:y]];
}

+ (double)lengthSqWithDouble:(double)x
                  withDouble:(double)y {
  return (x * x + y * y);
}

+ (BOOL)isZeroWithDouble:(double)x
              withDouble:(double)y {
  return x == 0 && y == 0;
}

+ (BOOL)isEpsilonZeroWithDouble:(double)x
                     withDouble:(double)y {
  return [PythagorasDVectors isEpsilonZeroWithDouble:x withDouble:y withDouble:PythagorasDMathUtil_EPSILON];
}

+ (BOOL)isEpsilonZeroWithDouble:(double)x
                     withDouble:(double)y
                     withDouble:(double)epsilon {
  return [JavaLangMath absWithDouble:x] <= epsilon && [JavaLangMath absWithDouble:y] <= epsilon;
}

+ (BOOL)epsilonEqualsWithPythagorasDIVector:(id<PythagorasDIVector>)v1
                     withPythagorasDIVector:(id<PythagorasDIVector>)v2 {
  return [PythagorasDVectors epsilonEqualsWithPythagorasDIVector:v1 withPythagorasDIVector:v2 withDouble:PythagorasDMathUtil_EPSILON];
}

+ (BOOL)epsilonEqualsWithPythagorasDIVector:(id<PythagorasDIVector>)v1
                     withPythagorasDIVector:(id<PythagorasDIVector>)v2
                                 withDouble:(double)epsilon {
  return [JavaLangMath absWithDouble:[((id<PythagorasDIVector>) nil_chk(v1)) x] - [((id<PythagorasDIVector>) nil_chk(v2)) x]] <= epsilon && [JavaLangMath absWithDouble:[((id<PythagorasDIVector>) nil_chk(v1)) y] - [((id<PythagorasDIVector>) nil_chk(v2)) y]] <= epsilon;
}

+ (PythagorasDVector *)transformWithDouble:(double)x
                                withDouble:(double)y
                                withDouble:(double)sx
                                withDouble:(double)sy
                                withDouble:(double)rotation
                                withDouble:(double)tx
                                withDouble:(double)ty
                     withPythagorasDVector:(PythagorasDVector *)result {
  return [PythagorasDVectors transformWithDouble:x withDouble:y withDouble:sx withDouble:sy withDouble:[JavaLangMath sinWithDouble:rotation] withDouble:[JavaLangMath cosWithDouble:rotation] withDouble:tx withDouble:ty withPythagorasDVector:result];
}

+ (PythagorasDVector *)transformWithDouble:(double)x
                                withDouble:(double)y
                                withDouble:(double)sx
                                withDouble:(double)sy
                                withDouble:(double)rotation
                     withPythagorasDVector:(PythagorasDVector *)result {
  return [PythagorasDVectors transformWithDouble:x withDouble:y withDouble:sx withDouble:sy withDouble:[JavaLangMath sinWithDouble:rotation] withDouble:[JavaLangMath cosWithDouble:rotation] withPythagorasDVector:result];
}

+ (PythagorasDVector *)transformWithDouble:(double)x
                                withDouble:(double)y
                                withDouble:(double)sx
                                withDouble:(double)sy
                                withDouble:(double)sina
                                withDouble:(double)cosa
                     withPythagorasDVector:(PythagorasDVector *)result {
  return [((PythagorasDVector *) nil_chk(result)) setWithDouble:(x * cosa - y * sina) * sx withDouble:(x * sina + y * cosa) * sy];
}

+ (PythagorasDVector *)transformWithDouble:(double)x
                                withDouble:(double)y
                                withDouble:(double)sx
                                withDouble:(double)sy
                                withDouble:(double)sina
                                withDouble:(double)cosa
                                withDouble:(double)tx
                                withDouble:(double)ty
                     withPythagorasDVector:(PythagorasDVector *)result {
  return [((PythagorasDVector *) nil_chk(result)) setWithDouble:(x * cosa - y * sina) * sx + tx withDouble:(x * sina + y * cosa) * sy + ty];
}

+ (PythagorasDVector *)inverseTransformWithDouble:(double)x
                                       withDouble:(double)y
                                       withDouble:(double)sx
                                       withDouble:(double)sy
                                       withDouble:(double)rotation
                            withPythagorasDVector:(PythagorasDVector *)result {
  double sinnega = [JavaLangMath sinWithDouble:-rotation], cosnega = [JavaLangMath cosWithDouble:-rotation];
  double nx = (x * cosnega - y * sinnega);
  double ny = (x * sinnega + y * cosnega);
  return [((PythagorasDVector *) nil_chk(result)) setWithDouble:nx / sx withDouble:ny / sy];
}

+ (NSString *)vectorToStringWithDouble:(double)x
                            withDouble:(double)y {
  return [NSString stringWithFormat:@"%@%@", [PythagorasDMathUtil toStringWithDouble:x], [PythagorasDMathUtil toStringWithDouble:y]];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [PythagorasDVectors class]) {
    PythagorasDVectors_UNIT_X_ = [[PythagorasDVector alloc] initWithDouble:1.0f withDouble:0.0f];
    PythagorasDVectors_UNIT_Y_ = [[PythagorasDVector alloc] initWithDouble:0.0f withDouble:1.0f];
    PythagorasDVectors_ZERO_ = [[PythagorasDVector alloc] initWithDouble:0.0f withDouble:0.0f];
    PythagorasDVectors_MIN_VALUE_ = [[PythagorasDVector alloc] initWithDouble:-JavaLangFloat_MAX_VALUE withDouble:-JavaLangFloat_MAX_VALUE];
    PythagorasDVectors_MAX_VALUE_ = [[PythagorasDVector alloc] initWithDouble:JavaLangFloat_MAX_VALUE withDouble:JavaLangFloat_MAX_VALUE];
  }
}

@end

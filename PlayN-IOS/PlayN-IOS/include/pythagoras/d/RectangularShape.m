//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/RectangularShape.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Math.h"
#include "pythagoras/d/FlatteningPathIterator.h"
#include "pythagoras/d/IDimension.h"
#include "pythagoras/d/IPoint.h"
#include "pythagoras/d/IRectangle.h"
#include "pythagoras/d/IRectangularShape.h"
#include "pythagoras/d/IShape.h"
#include "pythagoras/d/PathIterator.h"
#include "pythagoras/d/Point.h"
#include "pythagoras/d/Rectangle.h"
#include "pythagoras/d/RectangularShape.h"
#include "pythagoras/d/Transform.h"

@implementation PythagorasDRectangularShape

- (void)setFrameWithDouble:(double)x
                withDouble:(double)y
                withDouble:(double)width
                withDouble:(double)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setFrameWithPythagorasDIPoint:(id<PythagorasDIPoint>)loc
            withPythagorasDIDimension:(id<PythagorasDIDimension>)size {
  [self setFrameWithDouble:[((id<PythagorasDIPoint>) nil_chk(loc)) x] withDouble:[((id<PythagorasDIPoint>) nil_chk(loc)) y] withDouble:[((id<PythagorasDIDimension>) nil_chk(size)) width] withDouble:[((id<PythagorasDIDimension>) nil_chk(size)) height]];
}

- (void)setFrameWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)r {
  [self setFrameWithDouble:[((id<PythagorasDIRectangle>) nil_chk(r)) x] withDouble:[((id<PythagorasDIRectangle>) nil_chk(r)) y] withDouble:[((id<PythagorasDIRectangle>) nil_chk(r)) width] withDouble:[((id<PythagorasDIRectangle>) nil_chk(r)) height]];
}

- (void)setFrameFromDiagonalWithDouble:(double)x1
                            withDouble:(double)y1
                            withDouble:(double)x2
                            withDouble:(double)y2 {
  double rx, ry, rw, rh;
  if (x1 < x2) {
    rx = x1;
    rw = x2 - x1;
  }
  else {
    rx = x2;
    rw = x1 - x2;
  }
  if (y1 < y2) {
    ry = y1;
    rh = y2 - y1;
  }
  else {
    ry = y2;
    rh = y1 - y2;
  }
  [self setFrameWithDouble:rx withDouble:ry withDouble:rw withDouble:rh];
}

- (void)setFrameFromDiagonalWithPythagorasDIPoint:(id<PythagorasDIPoint>)p1
                            withPythagorasDIPoint:(id<PythagorasDIPoint>)p2 {
  [self setFrameFromDiagonalWithDouble:[((id<PythagorasDIPoint>) nil_chk(p1)) x] withDouble:[((id<PythagorasDIPoint>) nil_chk(p1)) y] withDouble:[((id<PythagorasDIPoint>) nil_chk(p2)) x] withDouble:[((id<PythagorasDIPoint>) nil_chk(p2)) y]];
}

- (void)setFrameFromCenterWithDouble:(double)centerX
                          withDouble:(double)centerY
                          withDouble:(double)cornerX
                          withDouble:(double)cornerY {
  double width = [JavaLangMath absWithDouble:cornerX - centerX];
  double height = [JavaLangMath absWithDouble:cornerY - centerY];
  [self setFrameWithDouble:centerX - width withDouble:centerY - height withDouble:width * 2 withDouble:height * 2];
}

- (void)setFrameFromCenterWithPythagorasDIPoint:(id<PythagorasDIPoint>)center
                          withPythagorasDIPoint:(id<PythagorasDIPoint>)corner {
  [self setFrameFromCenterWithDouble:[((id<PythagorasDIPoint>) nil_chk(center)) x] withDouble:[((id<PythagorasDIPoint>) nil_chk(center)) y] withDouble:[((id<PythagorasDIPoint>) nil_chk(corner)) x] withDouble:[((id<PythagorasDIPoint>) nil_chk(corner)) y]];
}

- (PythagorasDPoint *)min {
  return [[PythagorasDPoint alloc] initWithDouble:[self minX] withDouble:[self minY]];
}

- (double)minX {
  return [self x];
}

- (double)minY {
  return [self y];
}

- (PythagorasDPoint *)max {
  return [[PythagorasDPoint alloc] initWithDouble:[self maxX] withDouble:[self maxY]];
}

- (double)maxX {
  return [self x] + [self width];
}

- (double)maxY {
  return [self y] + [self height];
}

- (PythagorasDPoint *)center {
  return [[PythagorasDPoint alloc] initWithDouble:[self centerX] withDouble:[self centerY]];
}

- (double)centerX {
  return [self x] + [self width] / 2;
}

- (double)centerY {
  return [self y] + [self height] / 2;
}

- (PythagorasDRectangle *)frame {
  return [self bounds];
}

- (PythagorasDRectangle *)frameWithPythagorasDRectangle:(PythagorasDRectangle *)target {
  return [self boundsWithPythagorasDRectangle:target];
}

- (BOOL)isEmpty {
  return [self width] <= 0 || [self height] <= 0;
}

- (BOOL)containsWithPythagorasDIPoint:(id<PythagorasDIPoint>)point {
  return [self containsWithDouble:[((id<PythagorasDIPoint>) nil_chk(point)) x] withDouble:[((id<PythagorasDIPoint>) nil_chk(point)) y]];
}

- (BOOL)containsWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)rect {
  return [self containsWithDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) x] withDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) y] withDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) width] withDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) height]];
}

- (BOOL)intersectsWithPythagorasDIRectangle:(id<PythagorasDIRectangle>)rect {
  return [self intersectsWithDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) x] withDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) y] withDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) width] withDouble:[((id<PythagorasDIRectangle>) nil_chk(rect)) height]];
}

- (PythagorasDRectangle *)bounds {
  return [self boundsWithPythagorasDRectangle:[[PythagorasDRectangle alloc] init]];
}

- (PythagorasDRectangle *)boundsWithPythagorasDRectangle:(PythagorasDRectangle *)target {
  [((PythagorasDRectangle *) nil_chk(target)) setBoundsWithDouble:[self x] withDouble:[self y] withDouble:[self width] withDouble:[self height]];
  return target;
}

- (id<PythagorasDPathIterator>)pathIteratorWithPythagorasDTransform:(id<PythagorasDTransform>)t
                                                         withDouble:(double)flatness {
  return [[PythagorasDFlatteningPathIterator alloc] initWithPythagorasDPathIterator:[self pathIteratorWithPythagorasDTransform:t] withDouble:flatness];
}

- (double)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)containsWithDouble:(double)param0
                withDouble:(double)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)containsWithDouble:(double)param0
                withDouble:(double)param1
                withDouble:(double)param2
                withDouble:(double)param3 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)intersectsWithDouble:(double)param0
                  withDouble:(double)param1
                  withDouble:(double)param2
                  withDouble:(double)param3 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PythagorasDPathIterator>)pathIteratorWithPythagorasDTransform:(id<PythagorasDTransform>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

@end

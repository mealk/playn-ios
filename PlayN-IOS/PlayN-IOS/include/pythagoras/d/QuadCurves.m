//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/QuadCurves.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSDoubleArray.h"
#include "pythagoras/d/Crossing.h"
#include "pythagoras/d/IQuadCurve.h"
#include "pythagoras/d/Lines.h"
#include "pythagoras/d/QuadCurve.h"
#include "pythagoras/d/QuadCurves.h"

@implementation PythagorasDQuadCurves

+ (double)flatnessSqWithDouble:(double)x1
                    withDouble:(double)y1
                    withDouble:(double)ctrlx
                    withDouble:(double)ctrly
                    withDouble:(double)x2
                    withDouble:(double)y2 {
  return [PythagorasDLines pointSegDistSqWithDouble:ctrlx withDouble:ctrly withDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
}

+ (double)flatnessSqWithDoubleArray:(IOSDoubleArray *)coords
                            withInt:(int)offset {
  return [PythagorasDLines pointSegDistSqWithDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 2] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 3] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 0] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 1] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 4] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 5]];
}

+ (double)flatnessWithDouble:(double)x1
                  withDouble:(double)y1
                  withDouble:(double)ctrlx
                  withDouble:(double)ctrly
                  withDouble:(double)x2
                  withDouble:(double)y2 {
  return [PythagorasDLines pointSegDistWithDouble:ctrlx withDouble:ctrly withDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
}

+ (double)flatnessWithDoubleArray:(IOSDoubleArray *)coords
                          withInt:(int)offset {
  return [PythagorasDLines pointSegDistWithDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 2] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 3] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 0] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 1] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 4] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 5]];
}

+ (void)subdivideWithPythagorasDIQuadCurve:(id<PythagorasDIQuadCurve>)src
                  withPythagorasDQuadCurve:(PythagorasDQuadCurve *)left
                  withPythagorasDQuadCurve:(PythagorasDQuadCurve *)right {
  double x1 = [((id<PythagorasDIQuadCurve>) nil_chk(src)) x1];
  double y1 = [((id<PythagorasDIQuadCurve>) nil_chk(src)) y1];
  double cx = [((id<PythagorasDIQuadCurve>) nil_chk(src)) ctrlX];
  double cy = [((id<PythagorasDIQuadCurve>) nil_chk(src)) ctrlY];
  double x2 = [((id<PythagorasDIQuadCurve>) nil_chk(src)) x2];
  double y2 = [((id<PythagorasDIQuadCurve>) nil_chk(src)) y2];
  double cx1 = (x1 + cx) / 2.0f;
  double cy1 = (y1 + cy) / 2.0f;
  double cx2 = (x2 + cx) / 2.0f;
  double cy2 = (y2 + cy) / 2.0f;
  cx = (cx1 + cx2) / 2.0f;
  cy = (cy1 + cy2) / 2.0f;
  if (left != nil) {
    [left setCurveWithDouble:x1 withDouble:y1 withDouble:cx1 withDouble:cy1 withDouble:cx withDouble:cy];
  }
  if (right != nil) {
    [right setCurveWithDouble:cx withDouble:cy withDouble:cx2 withDouble:cy2 withDouble:x2 withDouble:y2];
  }
}

+ (void)subdivideWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(int)srcoff
                 withDoubleArray:(IOSDoubleArray *)left
                         withInt:(int)leftOff
                 withDoubleArray:(IOSDoubleArray *)right
                         withInt:(int)rightOff {
  double x1 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcoff + 0];
  double y1 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcoff + 1];
  double cx = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcoff + 2];
  double cy = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcoff + 3];
  double x2 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcoff + 4];
  double y2 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcoff + 5];
  double cx1 = (x1 + cx) / 2.0f;
  double cy1 = (y1 + cy) / 2.0f;
  double cx2 = (x2 + cx) / 2.0f;
  double cy2 = (y2 + cy) / 2.0f;
  cx = (cx1 + cx2) / 2.0f;
  cy = (cy1 + cy2) / 2.0f;
  if (left != nil) {
    (*[left doubleRefAtIndex:leftOff + 0]) = x1;
    (*[left doubleRefAtIndex:leftOff + 1]) = y1;
    (*[left doubleRefAtIndex:leftOff + 2]) = cx1;
    (*[left doubleRefAtIndex:leftOff + 3]) = cy1;
    (*[left doubleRefAtIndex:leftOff + 4]) = cx;
    (*[left doubleRefAtIndex:leftOff + 5]) = cy;
  }
  if (right != nil) {
    (*[right doubleRefAtIndex:rightOff + 0]) = cx;
    (*[right doubleRefAtIndex:rightOff + 1]) = cy;
    (*[right doubleRefAtIndex:rightOff + 2]) = cx2;
    (*[right doubleRefAtIndex:rightOff + 3]) = cy2;
    (*[right doubleRefAtIndex:rightOff + 4]) = x2;
    (*[right doubleRefAtIndex:rightOff + 5]) = y2;
  }
}

+ (int)solveQuadraticWithDoubleArray:(IOSDoubleArray *)eqn {
  return [PythagorasDQuadCurves solveQuadraticWithDoubleArray:eqn withDoubleArray:eqn];
}

+ (int)solveQuadraticWithDoubleArray:(IOSDoubleArray *)eqn
                     withDoubleArray:(IOSDoubleArray *)res {
  return [PythagorasDCrossing solveQuadWithDoubleArray:eqn withDoubleArray:res];
}

- (id)init {
  return [super init];
}

@end

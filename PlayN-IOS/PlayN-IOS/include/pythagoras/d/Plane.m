//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Plane.java
//
//  Created by Thomas on 7/10/13.
//

#import "IOSDoubleArray.h"
#import "java/lang/Double.h"
#import "java/lang/Float.h"
#import "java/lang/Math.h"
#import "java/nio/DoubleBuffer.h"
#import "pythagoras/d/IRay3.h"
#import "pythagoras/d/IVector3.h"
#import "pythagoras/d/MathUtil.h"
#import "pythagoras/d/Plane.h"
#import "pythagoras/d/Vector3.h"
#import "pythagoras/util/Platform.h"

@implementation PythagorasDPlane

static PythagorasDPlane * PythagorasDPlane_XY_PLANE_;
static PythagorasDPlane * PythagorasDPlane_XZ_PLANE_;
static PythagorasDPlane * PythagorasDPlane_YZ_PLANE_;

@synthesize constant_ = constant__;
@synthesize _normal = _normal_;
@synthesize _v1 = _v1_;
@synthesize _v2 = _v2_;

+ (PythagorasDPlane *)XY_PLANE {
  return PythagorasDPlane_XY_PLANE_;
}

+ (PythagorasDPlane *)XZ_PLANE {
  return PythagorasDPlane_XZ_PLANE_;
}

+ (PythagorasDPlane *)YZ_PLANE {
  return PythagorasDPlane_YZ_PLANE_;
}

- (id)initWithPythagorasDIVector3:(id<PythagorasDIVector3>)normal
                       withDouble:(double)constant {
  if ((self = [super init])) {
    _normal_ = [[PythagorasDVector3 alloc] init];
    _v1_ = [[PythagorasDVector3 alloc] init];
    _v2_ = [[PythagorasDVector3 alloc] init];
    (void) [self setWithPythagorasDIVector3:normal withDouble:constant];
  }
  return self;
}

- (id)initWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  if ((self = [super init])) {
    _normal_ = [[PythagorasDVector3 alloc] init];
    _v1_ = [[PythagorasDVector3 alloc] init];
    _v2_ = [[PythagorasDVector3 alloc] init];
    (void) [self setWithJavaLangDoubleArray:values];
  }
  return self;
}

- (id)initWithDouble:(double)a
          withDouble:(double)b
          withDouble:(double)c
          withDouble:(double)d {
  if ((self = [super init])) {
    _normal_ = [[PythagorasDVector3 alloc] init];
    _v1_ = [[PythagorasDVector3 alloc] init];
    _v2_ = [[PythagorasDVector3 alloc] init];
    (void) [self setWithDouble:a withDouble:b withDouble:c withDouble:d];
  }
  return self;
}

- (id)initWithPythagorasDPlane:(PythagorasDPlane *)other {
  if ((self = [super init])) {
    _normal_ = [[PythagorasDVector3 alloc] init];
    _v1_ = [[PythagorasDVector3 alloc] init];
    _v2_ = [[PythagorasDVector3 alloc] init];
    (void) [self setWithPythagorasDPlane:other];
  }
  return self;
}

- (id)init {
  if ((self = [super init])) {
    _normal_ = [[PythagorasDVector3 alloc] init];
    _v1_ = [[PythagorasDVector3 alloc] init];
    _v2_ = [[PythagorasDVector3 alloc] init];
  }
  return self;
}

- (PythagorasDPlane *)setWithPythagorasDPlane:(PythagorasDPlane *)other {
  return [self setWithPythagorasDIVector3:[((PythagorasDPlane *) NIL_CHK(other)) normal] withDouble:((PythagorasDPlane *) NIL_CHK(other)).constant_];
}

- (PythagorasDPlane *)setWithPythagorasDIVector3:(id<PythagorasDIVector3>)normal
                                      withDouble:(double)constant {
  return [self setWithDouble:[((id<PythagorasDIVector3>) NIL_CHK(normal)) x] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(normal)) y] withDouble:[((id<PythagorasDIVector3>) NIL_CHK(normal)) z] withDouble:constant];
}

- (PythagorasDPlane *)setWithJavaLangDoubleArray:(IOSDoubleArray *)values {
  return [self setWithDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:0] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:1] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:2] withDouble:[((IOSDoubleArray *) NIL_CHK(values)) doubleAtIndex:3]];
}

- (PythagorasDPlane *)setWithDouble:(double)a
                         withDouble:(double)b
                         withDouble:(double)c
                         withDouble:(double)d {
  (void) [((PythagorasDVector3 *) NIL_CHK(_normal_)) setWithDouble:a withDouble:b withDouble:c];
  constant__ = d;
  return self;
}

- (PythagorasDPlane *)fromPointsWithPythagorasDIVector3:(id<PythagorasDIVector3>)p1
                                withPythagorasDIVector3:(id<PythagorasDIVector3>)p2
                                withPythagorasDIVector3:(id<PythagorasDIVector3>)p3 {
  (void) [((id<PythagorasDIVector3>) NIL_CHK(p2)) subtractWithPythagorasDIVector3:p1 withPythagorasDVector3:_v1_];
  (void) [((id<PythagorasDIVector3>) NIL_CHK(p3)) subtractWithPythagorasDIVector3:p1 withPythagorasDVector3:_v2_];
  (void) [[((PythagorasDVector3 *) NIL_CHK(_v1_)) crossWithPythagorasDIVector3:_v2_ withPythagorasDVector3:_normal_] normalizeLocal];
  constant__ = -[((PythagorasDVector3 *) NIL_CHK(_normal_)) dotWithPythagorasDIVector3:p1];
  return self;
}

- (PythagorasDPlane *)fromPointNormalWithPythagorasDIVector3:(id<PythagorasDIVector3>)pt
                                     withPythagorasDIVector3:(id<PythagorasDIVector3>)normal {
  return [self setWithPythagorasDIVector3:normal withDouble:-[((id<PythagorasDIVector3>) NIL_CHK(normal)) dotWithPythagorasDIVector3:pt]];
}

- (PythagorasDPlane *)negateLocal {
  return [self negateWithPythagorasDPlane:self];
}

- (double)constant {
  return constant__;
}

- (id<PythagorasDIVector3>)normal {
  return _normal_;
}

- (JavaNioDoubleBuffer *)getWithJavaNioDoubleBuffer:(JavaNioDoubleBuffer *)buf {
  return [[[[((JavaNioDoubleBuffer *) NIL_CHK(buf)) putWithDouble:((PythagorasDVector3 *) NIL_CHK(_normal_)).x_] putWithDouble:((PythagorasDVector3 *) NIL_CHK(_normal_)).y_] putWithDouble:((PythagorasDVector3 *) NIL_CHK(_normal_)).z_] putWithDouble:constant__];
}

- (double)distanceWithPythagorasDIVector3:(id<PythagorasDIVector3>)pt {
  return [((PythagorasDVector3 *) NIL_CHK(_normal_)) dotWithPythagorasDIVector3:pt] + constant__;
}

- (PythagorasDPlane *)negate {
  return [self negateWithPythagorasDPlane:[[PythagorasDPlane alloc] init]];
}

- (PythagorasDPlane *)negateWithPythagorasDPlane:(PythagorasDPlane *)result {
  (void) [((PythagorasDVector3 *) NIL_CHK(_normal_)) negateWithPythagorasDVector3:((PythagorasDPlane *) NIL_CHK(result))._normal];
  ((PythagorasDPlane *) NIL_CHK(result)).constant_ = -constant__;
  return result;
}

- (BOOL)intersectionWithPythagorasDIRay3:(id<PythagorasDIRay3>)ray
                  withPythagorasDVector3:(PythagorasDVector3 *)result {
  double distance = [self distanceWithPythagorasDIRay3:ray];
  if ([JavaLangDouble isNaNWithDouble:distance] || distance < 0.0f) {
    return NO;
  }
  else {
    (void) [((id<PythagorasDIVector3>) [((id<PythagorasDIRay3>) NIL_CHK(ray)) origin]) addScaledWithPythagorasDIVector3:[((id<PythagorasDIRay3>) NIL_CHK(ray)) direction] withDouble:distance withPythagorasDVector3:result];
    return YES;
  }
}

- (double)distanceWithPythagorasDIRay3:(id<PythagorasDIRay3>)ray {
  double dividend = -[self distanceWithPythagorasDIVector3:[((id<PythagorasDIRay3>) NIL_CHK(ray)) origin]];
  double divisor = [((PythagorasDVector3 *) NIL_CHK(_normal_)) dotWithPythagorasDIVector3:[((id<PythagorasDIRay3>) NIL_CHK(ray)) direction]];
  if ([JavaLangMath absWithDouble:dividend] < PythagorasDMathUtil_EPSILON) {
    return 0.0f;
  }
  else if ([JavaLangMath absWithDouble:divisor] < PythagorasDMathUtil_EPSILON) {
    return JavaLangFloat_NaN;
  }
  else {
    return dividend / divisor;
  }
}

- (NSUInteger)hash {
  return [((PythagorasDVector3 *) NIL_CHK(_normal_)) hash] ^ [PythagorasUtilPlatform hashCodeWithDouble:constant__];
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[PythagorasDPlane class]])) {
    return NO;
  }
  PythagorasDPlane *oplane = (PythagorasDPlane *) other;
  return constant__ == ((PythagorasDPlane *) NIL_CHK(oplane)).constant_ && [((PythagorasDVector3 *) NIL_CHK(_normal_)) isEqual:[((PythagorasDPlane *) NIL_CHK(oplane)) normal]];
}

+ (void)initialize {
  if (self == [PythagorasDPlane class]) {
    PythagorasDPlane_XY_PLANE_ = [[PythagorasDPlane alloc] initWithPythagorasDIVector3:[PythagorasDVector3 UNIT_Z] withDouble:0.0f];
    PythagorasDPlane_XZ_PLANE_ = [[PythagorasDPlane alloc] initWithPythagorasDIVector3:[PythagorasDVector3 UNIT_Y] withDouble:0.0f];
    PythagorasDPlane_YZ_PLANE_ = [[PythagorasDPlane alloc] initWithPythagorasDIVector3:[PythagorasDVector3 UNIT_X] withDouble:0.0f];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDPlane *typedCopy = (PythagorasDPlane *) copy;
  typedCopy.constant_ = constant__;
  typedCopy._normal = _normal_;
  typedCopy._v1 = _v1_;
  typedCopy._v2 = _v2_;
}

@end

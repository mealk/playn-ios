//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/Ray2.java
//
//  Created by Thomas on 7/25/13.
//

#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "pythagoras/d/IRay2.h"
#include "pythagoras/d/IVector.h"
#include "pythagoras/d/MathUtil.h"
#include "pythagoras/d/Ray2.h"
#include "pythagoras/d/Transform.h"
#include "pythagoras/d/Vector.h"

@implementation PythagorasDRay2

@synthesize origin_ = origin__;
@synthesize direction_ = direction__;

- (id)initWithPythagorasDVector:(PythagorasDVector *)origin
          withPythagorasDVector:(PythagorasDVector *)direction {
  if ((self = [super init])) {
    origin__ = [[PythagorasDVector alloc] init];
    direction__ = [[PythagorasDVector alloc] init];
    (void) [self setWithPythagorasDIVector:origin withPythagorasDIVector:direction];
  }
  return self;
}

- (id)initWithPythagorasDRay2:(PythagorasDRay2 *)other {
  if ((self = [super init])) {
    origin__ = [[PythagorasDVector alloc] init];
    direction__ = [[PythagorasDVector alloc] init];
    (void) [self setWithPythagorasDIRay2:other];
  }
  return self;
}

- (id)init {
  if ((self = [super init])) {
    origin__ = [[PythagorasDVector alloc] init];
    direction__ = [[PythagorasDVector alloc] init];
  }
  return self;
}

- (PythagorasDRay2 *)setWithPythagorasDIRay2:(id<PythagorasDIRay2>)other {
  return [self setWithPythagorasDIVector:[((id<PythagorasDIRay2>) nil_chk(other)) origin] withPythagorasDIVector:[((id<PythagorasDIRay2>) nil_chk(other)) direction]];
}

- (PythagorasDRay2 *)setWithPythagorasDIVector:(id<PythagorasDIVector>)origin
                        withPythagorasDIVector:(id<PythagorasDIVector>)direction {
  (void) [((PythagorasDVector *) nil_chk(self.origin_)) setWithPythagorasDIVector:origin];
  (void) [((PythagorasDVector *) nil_chk(self.direction_)) setWithPythagorasDIVector:direction];
  return self;
}

- (PythagorasDRay2 *)transformLocalWithPythagorasDTransform:(id<PythagorasDTransform>)transform {
  return [self transformWithPythagorasDTransform:transform withPythagorasDRay2:self];
}

- (id<PythagorasDIVector>)origin {
  return origin__;
}

- (id<PythagorasDIVector>)direction {
  return direction__;
}

- (PythagorasDRay2 *)transformWithPythagorasDTransform:(id<PythagorasDTransform>)transform {
  return [self transformWithPythagorasDTransform:transform withPythagorasDRay2:[[PythagorasDRay2 alloc] init]];
}

- (PythagorasDRay2 *)transformWithPythagorasDTransform:(id<PythagorasDTransform>)transform
                                   withPythagorasDRay2:(PythagorasDRay2 *)result {
  (void) [((id<PythagorasDTransform>) nil_chk(transform)) transformPointWithPythagorasDIVector:origin__ withPythagorasDVector:((PythagorasDRay2 *) nil_chk(result)).origin_];
  (void) [((PythagorasDVector *) nil_chk([((id<PythagorasDTransform>) nil_chk(transform)) transformWithPythagorasDIVector:direction__ withPythagorasDVector:((PythagorasDRay2 *) nil_chk(result)).direction_])) normalizeLocal];
  return result;
}

- (BOOL)intersectsWithPythagorasDIVector:(id<PythagorasDIVector>)pt {
  if ([JavaLangMath absWithDouble:((PythagorasDVector *) nil_chk(direction__)).x_] > [JavaLangMath absWithDouble:((PythagorasDVector *) nil_chk(direction__)).y_]) {
    double t = ([((id<PythagorasDIVector>) nil_chk(pt)) x] - ((PythagorasDVector *) nil_chk(origin__)).x_) / ((PythagorasDVector *) nil_chk(direction__)).x_;
    return t >= 0.0f && ((PythagorasDVector *) nil_chk(origin__)).y_ + t * ((PythagorasDVector *) nil_chk(direction__)).y_ == [((id<PythagorasDIVector>) nil_chk(pt)) y];
  }
  else {
    double t = ([((id<PythagorasDIVector>) nil_chk(pt)) y] - ((PythagorasDVector *) nil_chk(origin__)).y_) / ((PythagorasDVector *) nil_chk(direction__)).y_;
    return t >= 0.0f && ((PythagorasDVector *) nil_chk(origin__)).x_ + t * ((PythagorasDVector *) nil_chk(direction__)).x_ == [((id<PythagorasDIVector>) nil_chk(pt)) x];
  }
}

- (BOOL)getIntersectionWithPythagorasDIVector:(id<PythagorasDIVector>)start
                       withPythagorasDIVector:(id<PythagorasDIVector>)end
                        withPythagorasDVector:(PythagorasDVector *)result {
  double ax = ((PythagorasDVector *) nil_chk(origin__)).x_, ay = ((PythagorasDVector *) nil_chk(origin__)).y_;
  double bx = ((PythagorasDVector *) nil_chk(direction__)).x_, by = ((PythagorasDVector *) nil_chk(direction__)).y_;
  double cx = [((id<PythagorasDIVector>) nil_chk(start)) x], cy = [((id<PythagorasDIVector>) nil_chk(start)) y];
  double dx = [((id<PythagorasDIVector>) nil_chk(end)) x] - [((id<PythagorasDIVector>) nil_chk(start)) x], dy = [((id<PythagorasDIVector>) nil_chk(end)) y] - [((id<PythagorasDIVector>) nil_chk(start)) y];
  double divisor = bx * dy - by * dx;
  if ([JavaLangMath absWithDouble:divisor] < PythagorasDMathUtil_EPSILON) {
    double t = [JavaLangMath minWithDouble:[self getIntersectionWithPythagorasDIVector:start] withDouble:[self getIntersectionWithPythagorasDIVector:end]];
    BOOL isect = (t != JavaLangFloat_MAX_VALUE);
    if (isect) {
      (void) [((PythagorasDVector *) nil_chk(origin__)) addScaledWithPythagorasDIVector:direction__ withDouble:t withPythagorasDVector:result];
    }
    return isect;
  }
  double cxax = cx - ax, cyay = cy - ay;
  double s = (by * cxax - bx * cyay) / divisor;
  if (s < 0.0f || s > 1.0f) {
    return NO;
  }
  double t = (dy * cxax - dx * cyay) / divisor;
  BOOL isect = (t >= 0.0f);
  if (isect) {
    (void) [((PythagorasDVector *) nil_chk(origin__)) addScaledWithPythagorasDIVector:direction__ withDouble:t withPythagorasDVector:result];
  }
  return isect;
}

- (BOOL)getIntersectionWithPythagorasDIVector:(id<PythagorasDIVector>)start
                       withPythagorasDIVector:(id<PythagorasDIVector>)end
                                   withDouble:(double)radius
                        withPythagorasDVector:(PythagorasDVector *)result {
  double startx = [((id<PythagorasDIVector>) nil_chk(start)) x], starty = [((id<PythagorasDIVector>) nil_chk(start)) y];
  double a = starty - [((id<PythagorasDIVector>) nil_chk(end)) y], b = [((id<PythagorasDIVector>) nil_chk(end)) x] - startx;
  double len = [JavaLangMath hypotWithDouble:a withDouble:b];
  if (len < PythagorasDMathUtil_EPSILON) {
    return [self getIntersectionWithPythagorasDIVector:start withDouble:radius withPythagorasDVector:result];
  }
  double rlen = 1.0f / len;
  a *= rlen;
  b *= rlen;
  double c = -a * startx - b * starty;
  double dist = a * ((PythagorasDVector *) nil_chk(origin__)).x_ + b * ((PythagorasDVector *) nil_chk(origin__)).y_ + c;
  BOOL above = (dist > +radius), below = (dist < -radius);
  double x, y;
  if (above || below) {
    double divisor = a * ((PythagorasDVector *) nil_chk(direction__)).x_ + b * ((PythagorasDVector *) nil_chk(direction__)).y_;
    if ([JavaLangMath absWithDouble:divisor] < PythagorasDMathUtil_EPSILON) {
      return NO;
    }
    c += (above ? -radius : +radius);
    double t = (-a * ((PythagorasDVector *) nil_chk(origin__)).x_ - b * ((PythagorasDVector *) nil_chk(origin__)).y_ - c) / divisor;
    if (t < 0.0f) {
      return NO;
    }
    x = ((PythagorasDVector *) nil_chk(origin__)).x_ + t * ((PythagorasDVector *) nil_chk(direction__)).x_;
    y = ((PythagorasDVector *) nil_chk(origin__)).y_ + t * ((PythagorasDVector *) nil_chk(direction__)).y_;
  }
  else {
    x = ((PythagorasDVector *) nil_chk(origin__)).x_;
    y = ((PythagorasDVector *) nil_chk(origin__)).y_;
  }
  double tmp = a;
  a = b;
  b = -tmp;
  c = -a * startx - b * starty;
  dist = a * x + b * y + c;
  if (dist < 0.0f) {
    return [self getIntersectionWithPythagorasDIVector:start withDouble:radius withPythagorasDVector:result];
  }
  else if (dist > len) {
    return [self getIntersectionWithPythagorasDIVector:end withDouble:radius withPythagorasDVector:result];
  }
  else {
    (void) [((PythagorasDVector *) nil_chk(result)) setWithDouble:x withDouble:y];
    return YES;
  }
}

- (BOOL)getIntersectionWithPythagorasDIVector:(id<PythagorasDIVector>)center
                                   withDouble:(double)radius
                        withPythagorasDVector:(PythagorasDVector *)result {
  if ([((PythagorasDVector *) nil_chk(origin__)) distanceSqWithPythagorasDIVector:center] <= radius * radius) {
    (void) [((PythagorasDVector *) nil_chk(result)) setWithPythagorasDIVector:origin__];
    return YES;
  }
  double ax = ((PythagorasDVector *) nil_chk(origin__)).x_ - [((id<PythagorasDIVector>) nil_chk(center)) x], ay = ((PythagorasDVector *) nil_chk(origin__)).y_ - [((id<PythagorasDIVector>) nil_chk(center)) y];
  double b = 2.0f * (((PythagorasDVector *) nil_chk(direction__)).x_ * ax + ((PythagorasDVector *) nil_chk(direction__)).y_ * ay);
  double c = ax * ax + ay * ay - radius * radius;
  double radicand = b * b - 4.0f * c;
  if (radicand < 0.0f) {
    return NO;
  }
  double t = (-b - [JavaLangMath sqrtWithDouble:radicand]) * 0.5f;
  BOOL isect = (t >= 0.0f);
  if (isect) {
    (void) [((PythagorasDVector *) nil_chk(origin__)) addScaledWithPythagorasDIVector:direction__ withDouble:t withPythagorasDVector:result];
  }
  return isect;
}

- (PythagorasDVector *)getNearestPointWithPythagorasDIVector:(id<PythagorasDIVector>)point
                                       withPythagorasDVector:(PythagorasDVector *)result {
  if (result == nil) {
    result = [[PythagorasDVector alloc] init];
  }
  double r = [((PythagorasDVector *) nil_chk([((id<PythagorasDIVector>) nil_chk(point)) subtractWithPythagorasDIVector:origin__])) dotWithPythagorasDIVector:direction__];
  (void) [((PythagorasDVector *) nil_chk(result)) setWithPythagorasDIVector:[((PythagorasDVector *) nil_chk(origin__)) addWithPythagorasDIVector:[((PythagorasDVector *) nil_chk(direction__)) scale__WithDouble:r]]];
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[origin=%@, direction=%@]", origin__, direction__];
}

- (double)getIntersectionWithPythagorasDIVector:(id<PythagorasDIVector>)pt {
  if ([JavaLangMath absWithDouble:((PythagorasDVector *) nil_chk(direction__)).x_] > [JavaLangMath absWithDouble:((PythagorasDVector *) nil_chk(direction__)).y_]) {
    double t = ([((id<PythagorasDIVector>) nil_chk(pt)) x] - ((PythagorasDVector *) nil_chk(origin__)).x_) / ((PythagorasDVector *) nil_chk(direction__)).x_;
    return (t >= 0.0f && ((PythagorasDVector *) nil_chk(origin__)).y_ + t * ((PythagorasDVector *) nil_chk(direction__)).y_ == [((id<PythagorasDIVector>) nil_chk(pt)) y]) ? t : JavaLangFloat_MAX_VALUE;
  }
  else {
    double t = ([((id<PythagorasDIVector>) nil_chk(pt)) y] - ((PythagorasDVector *) nil_chk(origin__)).y_) / ((PythagorasDVector *) nil_chk(direction__)).y_;
    return (t >= 0.0f && ((PythagorasDVector *) nil_chk(origin__)).x_ + t * ((PythagorasDVector *) nil_chk(direction__)).x_ == [((id<PythagorasDIVector>) nil_chk(pt)) x]) ? t : JavaLangFloat_MAX_VALUE;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  PythagorasDRay2 *typedCopy = (PythagorasDRay2 *) copy;
  typedCopy.origin_ = origin__;
  typedCopy.direction_ = direction__;
}

@end

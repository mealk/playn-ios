//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/AbstractCircle.java
//
//  Created by Thomas on 7/10/13.
//

#import "pythagoras/d/AbstractCircle.h"
#import "pythagoras/d/Circle.h"
#import "pythagoras/d/ICircle.h"
#import "pythagoras/d/IPoint.h"
#import "pythagoras/d/Points.h"
#import "pythagoras/util/Platform.h"

@implementation PythagorasDAbstractCircle

- (BOOL)intersectsWithPythagorasDICircle:(id<PythagorasDICircle>)c {
  double maxDist = [self radius] + [((id<PythagorasDICircle>) NIL_CHK(c)) radius];
  return [PythagorasDPoints distanceSqWithDouble:[self x] withDouble:[self y] withDouble:[((id<PythagorasDICircle>) NIL_CHK(c)) x] withDouble:[((id<PythagorasDICircle>) NIL_CHK(c)) y]] < (maxDist * maxDist);
}

- (BOOL)containsWithPythagorasDIPoint:(id<PythagorasDIPoint>)p {
  double r = [self radius];
  return [PythagorasDPoints distanceSqWithDouble:[self x] withDouble:[self y] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) x] withDouble:[((id<PythagorasDIPoint>) NIL_CHK(p)) y]] < r * r;
}

- (BOOL)containsWithDouble:(double)x
                withDouble:(double)y {
  double r = [self radius];
  return [PythagorasDPoints distanceSqWithDouble:[self x] withDouble:[self y] withDouble:x withDouble:y] < r * r;
}

- (PythagorasDCircle *)offsetWithDouble:(double)x
                             withDouble:(double)y {
  return [[PythagorasDCircle alloc] initWithDouble:[self x] + x withDouble:[self y] + y withDouble:[self radius]];
}

- (PythagorasDCircle *)offsetWithDouble:(double)x
                             withDouble:(double)y
                  withPythagorasDCircle:(PythagorasDCircle *)result {
  (void) [((PythagorasDCircle *) NIL_CHK(result)) setWithDouble:[self x] + x withDouble:[self y] + y withDouble:[self radius]];
  return result;
}

- (PythagorasDCircle *)clone {
  return [[PythagorasDCircle alloc] initWithPythagorasDICircle:self];
}

- (BOOL)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[PythagorasDAbstractCircle class]]) {
    PythagorasDAbstractCircle *c = (PythagorasDAbstractCircle *) obj;
    return [self x] == [((PythagorasDAbstractCircle *) NIL_CHK(c)) x] && [self y] == [((PythagorasDAbstractCircle *) NIL_CHK(c)) y] && [self radius] == [((PythagorasDAbstractCircle *) NIL_CHK(c)) radius];
  }
  return NO;
}

- (NSUInteger)hash {
  return [PythagorasUtilPlatform hashCodeWithDouble:[self x]] ^ [PythagorasUtilPlatform hashCodeWithDouble:[self y]] ^ [PythagorasUtilPlatform hashCodeWithDouble:[self radius]];
}

- (double)radius {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (double)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

@end

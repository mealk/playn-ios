//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pythagoras/d/CubicCurves.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSDoubleArray.h"
#include "java/lang/Math.h"
#include "pythagoras/d/Crossing.h"
#include "pythagoras/d/CubicCurve.h"
#include "pythagoras/d/CubicCurves.h"
#include "pythagoras/d/ICubicCurve.h"
#include "pythagoras/d/Lines.h"

@implementation PythagorasDCubicCurves

+ (double)flatnessSqWithDouble:(double)x1
                    withDouble:(double)y1
                    withDouble:(double)ctrlx1
                    withDouble:(double)ctrly1
                    withDouble:(double)ctrlx2
                    withDouble:(double)ctrly2
                    withDouble:(double)x2
                    withDouble:(double)y2 {
  return [JavaLangMath maxWithDouble:[PythagorasDLines pointSegDistSqWithDouble:ctrlx1 withDouble:ctrly1 withDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2] withDouble:[PythagorasDLines pointSegDistSqWithDouble:ctrlx2 withDouble:ctrly2 withDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2]];
}

+ (double)flatnessSqWithDoubleArray:(IOSDoubleArray *)coords
                            withInt:(int)offset {
  return [PythagorasDCubicCurves flatnessSqWithDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 0] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 1] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 2] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 3] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 4] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 5] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 6] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 7]];
}

+ (double)flatnessWithDouble:(double)x1
                  withDouble:(double)y1
                  withDouble:(double)ctrlx1
                  withDouble:(double)ctrly1
                  withDouble:(double)ctrlx2
                  withDouble:(double)ctrly2
                  withDouble:(double)x2
                  withDouble:(double)y2 {
  return [JavaLangMath sqrtWithDouble:[PythagorasDCubicCurves flatnessSqWithDouble:x1 withDouble:y1 withDouble:ctrlx1 withDouble:ctrly1 withDouble:ctrlx2 withDouble:ctrly2 withDouble:x2 withDouble:y2]];
}

+ (double)flatnessWithDoubleArray:(IOSDoubleArray *)coords
                          withInt:(int)offset {
  return [PythagorasDCubicCurves flatnessWithDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 0] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 1] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 2] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 3] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 4] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 5] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 6] withDouble:[((IOSDoubleArray *) nil_chk(coords)) doubleAtIndex:offset + 7]];
}

+ (void)subdivideWithPythagorasDICubicCurve:(id<PythagorasDICubicCurve>)src
                  withPythagorasDCubicCurve:(PythagorasDCubicCurve *)left
                  withPythagorasDCubicCurve:(PythagorasDCubicCurve *)right {
  double x1 = [((id<PythagorasDICubicCurve>) nil_chk(src)) x1], y1 = [((id<PythagorasDICubicCurve>) nil_chk(src)) y1];
  double cx1 = [((id<PythagorasDICubicCurve>) nil_chk(src)) ctrlX1], cy1 = [((id<PythagorasDICubicCurve>) nil_chk(src)) ctrlY1];
  double cx2 = [((id<PythagorasDICubicCurve>) nil_chk(src)) ctrlX2], cy2 = [((id<PythagorasDICubicCurve>) nil_chk(src)) ctrlY2];
  double x2 = [((id<PythagorasDICubicCurve>) nil_chk(src)) x2], y2 = [((id<PythagorasDICubicCurve>) nil_chk(src)) y2];
  double cx = (cx1 + cx2) / 2.0f, cy = (cy1 + cy2) / 2.0f;
  cx1 = (x1 + cx1) / 2.0f;
  cy1 = (y1 + cy1) / 2.0f;
  cx2 = (x2 + cx2) / 2.0f;
  cy2 = (y2 + cy2) / 2.0f;
  double ax = (cx1 + cx) / 2.0f, ay = (cy1 + cy) / 2.0f;
  double bx = (cx2 + cx) / 2.0f, by = (cy2 + cy) / 2.0f;
  cx = (ax + bx) / 2.0f;
  cy = (ay + by) / 2.0f;
  if (left != nil) {
    [left setCurveWithDouble:x1 withDouble:y1 withDouble:cx1 withDouble:cy1 withDouble:ax withDouble:ay withDouble:cx withDouble:cy];
  }
  if (right != nil) {
    [right setCurveWithDouble:cx withDouble:cy withDouble:bx withDouble:by withDouble:cx2 withDouble:cy2 withDouble:x2 withDouble:y2];
  }
}

+ (void)subdivideWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(int)srcOff
                 withDoubleArray:(IOSDoubleArray *)left
                         withInt:(int)leftOff
                 withDoubleArray:(IOSDoubleArray *)right
                         withInt:(int)rightOff {
  double x1 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 0], y1 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 1];
  double cx1 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 2], cy1 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 3];
  double cx2 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 4], cy2 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 5];
  double x2 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 6], y2 = [((IOSDoubleArray *) nil_chk(src)) doubleAtIndex:srcOff + 7];
  double cx = (cx1 + cx2) / 2.0f, cy = (cy1 + cy2) / 2.0f;
  cx1 = (x1 + cx1) / 2.0f;
  cy1 = (y1 + cy1) / 2.0f;
  cx2 = (x2 + cx2) / 2.0f;
  cy2 = (y2 + cy2) / 2.0f;
  double ax = (cx1 + cx) / 2.0f, ay = (cy1 + cy) / 2.0f;
  double bx = (cx2 + cx) / 2.0f, by = (cy2 + cy) / 2.0f;
  cx = (ax + bx) / 2.0f;
  cy = (ay + by) / 2.0f;
  if (left != nil) {
    (*[left doubleRefAtIndex:leftOff + 0]) = x1;
    (*[left doubleRefAtIndex:leftOff + 1]) = y1;
    (*[left doubleRefAtIndex:leftOff + 2]) = cx1;
    (*[left doubleRefAtIndex:leftOff + 3]) = cy1;
    (*[left doubleRefAtIndex:leftOff + 4]) = ax;
    (*[left doubleRefAtIndex:leftOff + 5]) = ay;
    (*[left doubleRefAtIndex:leftOff + 6]) = cx;
    (*[left doubleRefAtIndex:leftOff + 7]) = cy;
  }
  if (right != nil) {
    (*[right doubleRefAtIndex:rightOff + 0]) = cx;
    (*[right doubleRefAtIndex:rightOff + 1]) = cy;
    (*[right doubleRefAtIndex:rightOff + 2]) = bx;
    (*[right doubleRefAtIndex:rightOff + 3]) = by;
    (*[right doubleRefAtIndex:rightOff + 4]) = cx2;
    (*[right doubleRefAtIndex:rightOff + 5]) = cy2;
    (*[right doubleRefAtIndex:rightOff + 6]) = x2;
    (*[right doubleRefAtIndex:rightOff + 7]) = y2;
  }
}

+ (int)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn {
  return [PythagorasDCubicCurves solveCubicWithDoubleArray:eqn withDoubleArray:eqn];
}

+ (int)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn
                 withDoubleArray:(IOSDoubleArray *)res {
  return [PythagorasDCrossing solveCubicWithDoubleArray:eqn withDoubleArray:res];
}

- (id)init {
  return [super init];
}

@end

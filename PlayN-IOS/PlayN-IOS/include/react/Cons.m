//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/Cons.java
//
//  Created by Thomas on 7/10/13.
//

#import "java/lang/Boolean.h"
#import "react/Connection.h"
#import "react/Cons.h"
#import "react/Reactor.h"

@implementation ReactCons

@synthesize owner = owner_;
@synthesize listener = listener_;
@synthesize next = next_;
@synthesize oneShot = oneShot_;

- (id)initWithReactReactor:(ReactReactor *)owner
                    withId:(ReactReactor_RListener *)listener {
  if ((self = [super init])) {
    self.owner = owner;
    self.listener = listener;
  }
  return self;
}

- (id<ReactConnection>)once {
  oneShot_ = YES;
  return self;
}

- (void)disconnect {
  [((ReactReactor *) NIL_CHK(owner_)) disconnectWithReactCons:self];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[owner=%@, lner=%@, hasNext=%@, oneShot=%@]", owner_, listener_, [JavaLangBoolean toStringWithBOOL:(next_ != nil)], [JavaLangBoolean toStringWithBOOL:oneShot_]];
}

+ (ReactCons *)insertWithReactCons:(ReactCons *)head
                     withReactCons:(ReactCons *)cons {
  if (head == nil) {
    return cons;
  }
  else if ([((ReactReactor_RListener *) NIL_CHK(head.listener)) priority] > [((ReactReactor_RListener *) NIL_CHK(cons.listener)) priority]) {
    ((ReactCons *) NIL_CHK(cons)).next = head;
    return cons;
  }
  else {
    head.next = [ReactCons insertWithReactCons:head.next withReactCons:cons];
    return head;
  }
}

+ (ReactCons *)removeWithReactCons:(ReactCons *)head
                     withReactCons:(ReactCons *)cons {
  if (head == nil) return head;
  if (head == cons) return ((ReactCons *) NIL_CHK(head)).next;
  ((ReactCons *) NIL_CHK(head)).next = [ReactCons removeWithReactCons:((ReactCons *) NIL_CHK(head)).next withReactCons:cons];
  return head;
}

+ (ReactCons *)removeAllWithReactCons:(ReactCons *)head
                               withId:(id)listener {
  if (head == nil) return nil;
  if (((ReactCons *) NIL_CHK(head)).listener == listener) return [ReactCons removeAllWithReactCons:((ReactCons *) NIL_CHK(head)).next withId:listener];
  ((ReactCons *) NIL_CHK(head)).next = [ReactCons removeAllWithReactCons:((ReactCons *) NIL_CHK(head)).next withId:listener];
  return head;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactCons *typedCopy = (ReactCons *) copy;
  typedCopy.owner = owner_;
  typedCopy.listener = listener_;
  typedCopy.next = next_;
  typedCopy.oneShot = oneShot_;
}

@end

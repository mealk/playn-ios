//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/MultiFailureException.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSClass.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Error.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "react/MultiFailureException.h"

@implementation ReactMultiFailureException

@synthesize _failures = _failures_;

- (id<JavaLangIterable>)failures {
  return _failures_;
}

- (void)addFailureWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<JavaUtilList>) nil_chk(_failures_)) addWithId:t];
}

- (void)trigger {
  if ([((id<JavaUtilList>) nil_chk(_failures_)) size] != 1) @throw self;
  JavaLangThrowable *t = [((id<JavaUtilList>) nil_chk(_failures_)) getWithInt:0];
  if ([t isKindOfClass:[JavaLangRuntimeException class]]) {
    @throw (JavaLangRuntimeException *) t;
  }
  else if ([t isKindOfClass:[JavaLangError class]]) {
    @throw (JavaLangError *) t;
  }
  else {
    @throw (ReactMultiFailureException *) [self initCauseWithJavaLangThrowable:t];
  }
}

- (NSString *)getMessage {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(_failures_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      JavaLangThrowable *failure = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([((JavaLangStringBuilder *) nil_chk(buf)) sequenceLength] > 0) (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@", "];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:[[((JavaLangThrowable *) nil_chk(failure)) getClass] getName]])) appendWithNSString:@": "])) appendWithNSString:[((JavaLangThrowable *) nil_chk(failure)) getMessage]];
    }
  }
  return [NSString stringWithFormat:@"%d failures: %@", [((id<JavaUtilList>) nil_chk(_failures_)) size], buf];
}

- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(_failures_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      JavaLangThrowable *failure = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((JavaLangThrowable *) nil_chk(failure)) printStackTraceWithJavaIoPrintStream:s];
    }
  }
}

- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)w {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(_failures_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      JavaLangThrowable *failure = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((JavaLangThrowable *) nil_chk(failure)) printStackTraceWithJavaIoPrintWriter:w];
    }
  }
}

- (JavaLangThrowable *)fillInStackTrace {
  return self;
}

- (id)init {
  if ((self = [super init])) {
    _failures_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactMultiFailureException *typedCopy = (ReactMultiFailureException *) copy;
  typedCopy._failures = _failures_;
}

@end

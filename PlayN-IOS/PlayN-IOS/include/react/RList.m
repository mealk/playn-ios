//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/RList.java
//
//  Created by Thomas on 7/25/13.
//

#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "react/Connection.h"
#include "react/Cons.h"
#include "react/MultiFailureException.h"
#include "react/RList.h"
#include "react/Reactor.h"
#include "react/Value.h"
#include "react/ValueView.h"

@implementation ReactRList

@synthesize _impl = _impl_;
@synthesize _sizeView = _sizeView_;

+ (ReactRList *)create {
  return [ReactRList createWithJavaUtilList:[[JavaUtilArrayList alloc] init]];
}

+ (ReactRList *)createWithJavaUtilList:(id<JavaUtilList>)impl {
  return [[ReactRList alloc] initWithJavaUtilList:impl];
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)impl {
  if ((self = [super init])) {
    _impl_ = impl;
  }
  return self;
}

- (id<ReactConnection>)connectWithReactRList_Listener:(ReactRList_Listener *)listener {
  ReactRList_Listener *casted = (ReactRList_Listener *) listener;
  return [self addConnectionWithId:casted];
}

- (void)disconnectWithReactRList_Listener:(ReactRList_Listener *)listener {
  ReactRList_Listener *casted = (ReactRList_Listener *) listener;
  [self removeConnectionWithId:casted];
}

- (BOOL)removeForceWithId:(id)elem {
  [self checkMutate];
  int index = [((id<JavaUtilList>) nil_chk(_impl_)) indexOfWithId:elem];
  if (index >= 0) (void) [((id<JavaUtilList>) nil_chk(_impl_)) removeWithInt:index];
  [self emitRemoveWithInt:index withId:elem];
  return (index >= 0);
}

- (id<ReactValueView>)sizeView {
  @synchronized(self) {
    {
      if (_sizeView_ == nil) {
        _sizeView_ = [ReactValue createWithId:[JavaLangInteger valueOfWithInt:[self size]]];
        (void) [self connectWithReactRList_Listener:[[ReactRList_$1 alloc] initWithReactRList:self]];
      }
      return _sizeView_;
    }
  }
}

- (BOOL)addWithId:(id)element {
  [self addWithInt:[self size] withId:element];
  return YES;
}

- (void)addWithInt:(int)index
            withId:(id)element {
  [self checkMutate];
  [((id<JavaUtilList>) nil_chk(_impl_)) addWithInt:index withId:element];
  [self emitAddWithInt:index withId:element];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [self addAllWithInt:[self size] withJavaUtilCollection:collection];
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)elements {
  [self checkMutate];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk(elements)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id elem = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [self addWithInt:index++ withId:elem];
    }
  }
  return YES;
}

- (id<JavaUtilIterator>)iterator {
  return [self listIterator];
}

- (id<JavaUtilListIterator>)listIterator {
  return [self listIteratorWithInt:0];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)index {
  id<JavaUtilListIterator> iiter = [((id<JavaUtilList>) nil_chk(_impl_)) listIterator];
  return [[ReactRList_$2 alloc] initWithReactRList:self withJavaUtilListIterator:iiter];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL modified = NO;
  for (id<JavaUtilIterator> iter = [self iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:[((id<JavaUtilIterator>) nil_chk(iter)) next]]) {
      [((id<JavaUtilIterator>) nil_chk(iter)) remove];
      modified = YES;
    }
  }
  return modified;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL modified = NO;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id o = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      modified |= [self removeWithId:o];
    }
  }
  return modified;
}

- (BOOL)removeWithId:(id)object {
  [self checkMutate];
  int index = [((id<JavaUtilList>) nil_chk(_impl_)) indexOfWithId:object];
  if (index < 0) return NO;
  (void) [((id<JavaUtilList>) nil_chk(_impl_)) removeWithInt:index];
  id elem = (id) object;
  [self emitRemoveWithInt:index withId:elem];
  return YES;
}

- (id)removeWithInt:(int)index {
  [self checkMutate];
  id removed = [((id<JavaUtilList>) nil_chk(_impl_)) removeWithInt:index];
  [self emitRemoveWithInt:index withId:removed];
  return removed;
}

- (id)setWithInt:(int)index
          withId:(id)element {
  [self checkMutate];
  id removed = [((id<JavaUtilList>) nil_chk(_impl_)) setWithInt:index withId:element];
  [self emitSetWithInt:index withId:element withId:removed];
  return removed;
}

- (id<JavaUtilList>)subListWithInt:(int)fromIndex
                           withInt:(int)toIndex {
  return [[ReactRList alloc] initWithJavaUtilList:[((id<JavaUtilList>) nil_chk(_impl_)) subListWithInt:fromIndex withInt:toIndex]];
}

- (BOOL)isEqual:(id)object {
  return object == self || [((id<JavaUtilList>) nil_chk(_impl_)) isEqual:object];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"RList(%@)", _impl_];
}

- (NSUInteger)hash {
  return [((id<JavaUtilList>) nil_chk(_impl_)) hash];
}

- (int)size {
  return [((id<JavaUtilList>) nil_chk(_impl_)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilList>) nil_chk(_impl_)) isEmpty];
}

- (id)getWithInt:(int)index {
  return [((id<JavaUtilList>) nil_chk(_impl_)) getWithInt:index];
}

- (int)indexOfWithId:(id)element {
  return [((id<JavaUtilList>) nil_chk(_impl_)) indexOfWithId:element];
}

- (int)lastIndexOfWithId:(id)element {
  return [((id<JavaUtilList>) nil_chk(_impl_)) lastIndexOfWithId:element];
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilList>) nil_chk(_impl_)) containsWithId:object];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilList>) nil_chk(_impl_)) containsAllWithJavaUtilCollection:collection];
}

- (void)clear {
  while (![self isEmpty]) (void) [self removeWithInt:0];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilList>) nil_chk(_impl_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilList>) nil_chk(_impl_)) toArrayWithNSObjectArray:array];
}

- (void)emitAddWithInt:(int)index
                withId:(id)elem {
  ReactCons *lners = [self prepareNotify];
  ReactMultiFailureException *error = nil;
  @try {
    for (ReactCons * cons = lners; cons != nil; cons = ((ReactCons *) nil_chk(cons)).next) {
      @try {
        [((ReactRList_Listener *) nil_chk(((ReactCons *) nil_chk(cons)).listener)) onAddWithInt:index withId:elem];
      }
      @catch (JavaLangThrowable *t) {
        if (error == nil) error = [[ReactMultiFailureException alloc] init];
        [((ReactMultiFailureException *) nil_chk(error)) addFailureWithJavaLangThrowable:t];
      }
      if (((ReactCons *) nil_chk(cons)).oneShot) [((ReactCons *) nil_chk(cons)) disconnect];
    }
  }
  @finally {
    [self finishNotifyWithReactCons:lners];
  }
  if (error != nil) [error trigger];
}

- (void)emitSetWithInt:(int)index
                withId:(id)newElem
                withId:(id)oldElem {
  ReactCons *lners = [self prepareNotify];
  ReactMultiFailureException *error = nil;
  @try {
    for (ReactCons * cons = lners; cons != nil; cons = ((ReactCons *) nil_chk(cons)).next) {
      @try {
        [((ReactRList_Listener *) nil_chk(((ReactCons *) nil_chk(cons)).listener)) onSetWithInt:index withId:newElem withId:oldElem];
      }
      @catch (JavaLangThrowable *t) {
        if (error == nil) error = [[ReactMultiFailureException alloc] init];
        [((ReactMultiFailureException *) nil_chk(error)) addFailureWithJavaLangThrowable:t];
      }
      if (((ReactCons *) nil_chk(cons)).oneShot) [((ReactCons *) nil_chk(cons)) disconnect];
    }
  }
  @finally {
    [self finishNotifyWithReactCons:lners];
  }
  if (error != nil) [error trigger];
}

- (void)emitRemoveWithInt:(int)index
                   withId:(id)elem {
  ReactCons *lners = [self prepareNotify];
  ReactMultiFailureException *error = nil;
  @try {
    for (ReactCons * cons = lners; cons != nil; cons = ((ReactCons *) nil_chk(cons)).next) {
      @try {
        [((ReactRList_Listener *) nil_chk(((ReactCons *) nil_chk(cons)).listener)) onRemoveWithInt:index withId:elem];
      }
      @catch (JavaLangThrowable *t) {
        if (error == nil) error = [[ReactMultiFailureException alloc] init];
        [((ReactMultiFailureException *) nil_chk(error)) addFailureWithJavaLangThrowable:t];
      }
      if (((ReactCons *) nil_chk(cons)).oneShot) [((ReactCons *) nil_chk(cons)) disconnect];
    }
  }
  @finally {
    [self finishNotifyWithReactCons:lners];
  }
  if (error != nil) [error trigger];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRList *typedCopy = (ReactRList *) copy;
  typedCopy._impl = _impl_;
  typedCopy._sizeView = _sizeView_;
}

@end
@implementation ReactRList_Listener

- (void)onAddWithInt:(int)index
              withId:(id)elem {
  [self onAddWithId:elem];
}

- (void)onAddWithId:(id)elem {
}

- (void)onSetWithInt:(int)index
              withId:(id)newElem
              withId:(id)oldElem {
  [self onSetWithInt:index withId:newElem];
}

- (void)onSetWithInt:(int)index
              withId:(id)newElem {
}

- (void)onRemoveWithInt:(int)index
                 withId:(id)elem {
  [self onRemoveWithId:elem];
}

- (void)onRemoveWithId:(id)elem {
}

- (id)init {
  return [super init];
}

@end
@implementation ReactRList_$1

@synthesize this$0 = this$0_;

- (void)onAddWithInt:(int)index
              withId:(id)elem {
  (void) [((ReactValue *) nil_chk(this$0_._sizeView)) updateWithId:[JavaLangInteger valueOfWithInt:[this$0_ size]]];
}

- (void)onRemoveWithInt:(int)index
                 withId:(id)elem {
  (void) [((ReactValue *) nil_chk(this$0_._sizeView)) updateWithId:[JavaLangInteger valueOfWithInt:[this$0_ size]]];
}

- (id)initWithReactRList:(ReactRList *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRList_$1 *typedCopy = (ReactRList_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation ReactRList_$2

@synthesize this$0 = this$0_;
@synthesize _current = _current_;
@synthesize val$iiter = val$iiter_;

- (void)addWithId:(id)elem {
  [this$0_ checkMutate];
  int index = [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) nextIndex];
  [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) addWithId:elem];
  [this$0_ emitAddWithInt:index withId:elem];
}

- (BOOL)hasNext {
  return [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) hasNext];
}

- (BOOL)hasPrevious {
  return [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) hasPrevious];
}

- (id)next {
  return (_current_ = [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) next]);
}

- (int)nextIndex {
  return [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) nextIndex];
}

- (id)previous {
  return (_current_ = [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) previous]);
}

- (int)previousIndex {
  return [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) previousIndex];
}

- (void)remove {
  [this$0_ checkMutate];
  int index = [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) previousIndex];
  [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) remove];
  [this$0_ emitRemoveWithInt:index withId:_current_];
}

- (void)setWithId:(id)elem {
  [this$0_ checkMutate];
  [((id<JavaUtilListIterator>) nil_chk(val$iiter_)) setWithId:elem];
  [this$0_ emitSetWithInt:[((id<JavaUtilListIterator>) nil_chk(val$iiter_)) previousIndex] withId:elem withId:_current_];
  _current_ = elem;
}

- (id)initWithReactRList:(ReactRList *)outer$
withJavaUtilListIterator:(id<JavaUtilListIterator>)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$iiter_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRList_$2 *typedCopy = (ReactRList_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._current = _current_;
  typedCopy.val$iiter = val$iiter_;
}

@end
